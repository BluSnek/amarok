# 1 "builtins"
# 1 "qtscript_masterinclude.h"
# 1 "qtscript_masterinclude.h"
























# 1 "/home/eagle/qt-copy/include/QtCore/qtextcodec.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qchar.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"

















































# 50 "/home/eagle/qt-copy/include/QtCore/qglobal.h"




# 54 "/home/eagle/qt-copy/include/QtCore/qglobal.h"










# 1 "/home/eagle/qt-copy/include/QtCore/qconfig.h"









# 10 "/home/eagle/qt-copy/include/QtCore/qconfig.h"









# 19 "/home/eagle/qt-copy/include/QtCore/qconfig.h"






# 25 "/home/eagle/qt-copy/include/QtCore/qconfig.h"














































































# 64 "/home/eagle/qt-copy/include/QtCore/qglobal.h"




































































# 140 "/home/eagle/qt-copy/include/QtCore/qglobal.h"





# 145 "/home/eagle/qt-copy/include/QtCore/qglobal.h"
































































































































































# 305 "/home/eagle/qt-copy/include/QtCore/qglobal.h"































# 336 "/home/eagle/qt-copy/include/QtCore/qglobal.h"






































































































































































































































































































# 684 "/home/eagle/qt-copy/include/QtCore/qglobal.h"













































# 729 "/home/eagle/qt-copy/include/QtCore/qglobal.h"









typedef signed char qint8; 
typedef unsigned char quint8; 
typedef short qint16; 
typedef unsigned short quint16; 
typedef int qint32; 
typedef unsigned int quint32; 








# 752 "/home/eagle/qt-copy/include/QtCore/qglobal.h"
typedef long long qint64; 
typedef unsigned long long quint64; 


# 756 "/home/eagle/qt-copy/include/QtCore/qglobal.h"
typedef qint64 qlonglong;
typedef quint64 qulonglong;














# 776 "/home/eagle/qt-copy/include/QtCore/qglobal.h"






template <int> class QUintForSize { private: typedef void Type; };
template <> class QUintForSize<4> { public: typedef quint32 Type; };
template <> class QUintForSize<8> { public: typedef quint64 Type; };
template <typename T> class QUintForType : public QUintForSize<sizeof(T)> { };
typedef QUintForType<void *>::Type quintptr;

template <int> class QIntForSize { private: typedef void Type; };
template <> class QIntForSize<4> { public: typedef qint32 Type; };
template <> class QIntForSize<8> { public: typedef qint64 Type; };
template <typename T> class QIntForType : public QIntForSize<sizeof(T)> { };
typedef QIntForType<void *>::Type qptrdiff;






typedef unsigned char uchar;
typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;






# 809 "/home/eagle/qt-copy/include/QtCore/qglobal.h"











# 820 "/home/eagle/qt-copy/include/QtCore/qglobal.h"









# 829 "/home/eagle/qt-copy/include/QtCore/qglobal.h"












# 841 "/home/eagle/qt-copy/include/QtCore/qglobal.h"













































































# 918 "/home/eagle/qt-copy/include/QtCore/qglobal.h"









































# 959 "/home/eagle/qt-copy/include/QtCore/qglobal.h"
typedef int QNoImplicitBoolCast;










# 970 "/home/eagle/qt-copy/include/QtCore/qglobal.h"
typedef double qreal;


# 973 "/home/eagle/qt-copy/include/QtCore/qglobal.h"




template <typename T>
inline T qAbs(const T &t) { return t >= 0 ? t : -t; }

inline int qRound(qreal d)
{ return d >= 0.0 ? int(d + 0.5) : int(d - int(d-1) + 0.5) + int(d-1); }

inline qint64 qRound64(qreal d)
{ return d >= 0.0 ? qint64(d + 0.5) : qint64(d - qint64(d-1) + 0.5) + qint64(d-1); }

template <typename T>
inline const T &qMin(const T &a, const T &b) { if (a < b) return a; return b; }
template <typename T>
inline const T &qMax(const T &a, const T &b) { if (a < b) return b; return a; }
template <typename T>
inline const T &qBound(const T &min, const T &val, const T &max)
{ return qMax(min, qMin(max, val)); }


























# 1019 "/home/eagle/qt-copy/include/QtCore/qglobal.h"




class QDataStream;















# 1 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





























































































































































































































































































# 286 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 291 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 296 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 301 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 306 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 311 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 316 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 321 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 326 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 331 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 336 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 341 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 346 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 351 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 356 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 361 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 366 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 371 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 376 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 381 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 386 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 391 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 396 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 401 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 406 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 411 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 416 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 421 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 426 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 431 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 436 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 441 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 446 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 451 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 456 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 461 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 466 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 471 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 476 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 481 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 486 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 491 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 496 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 501 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 506 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 511 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 516 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 521 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 526 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 531 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 536 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 541 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 546 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 551 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 556 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 561 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 566 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 571 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 576 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 581 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 586 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 591 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 596 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 601 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 606 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 611 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 616 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 621 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 626 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 631 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 636 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 641 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 646 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 651 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 656 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 661 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 666 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 671 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 676 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 681 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 686 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 691 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 696 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 701 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 706 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 711 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 716 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 721 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 726 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 731 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 736 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 741 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 746 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 751 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 756 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 761 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 766 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 771 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 776 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 781 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 786 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 1039 "/home/eagle/qt-copy/include/QtCore/qglobal.h"




















# 1059 "/home/eagle/qt-copy/include/QtCore/qglobal.h"






















































































































# 1177 "/home/eagle/qt-copy/include/QtCore/qglobal.h"


















# 1195 "/home/eagle/qt-copy/include/QtCore/qglobal.h"















# 1210 "/home/eagle/qt-copy/include/QtCore/qglobal.h"




class QString;
class  QSysInfo {
public:
enum Sizes {
WordSize = (sizeof(void *)<<3)
};









# 1229 "/home/eagle/qt-copy/include/QtCore/qglobal.h"
enum Endian {
BigEndian,
LittleEndian




# 1236 "/home/eagle/qt-copy/include/QtCore/qglobal.h"
, ByteOrder = BigEndian





# 1242 "/home/eagle/qt-copy/include/QtCore/qglobal.h"
};



















































# 1294 "/home/eagle/qt-copy/include/QtCore/qglobal.h"
};

 const char *qVersion();
 bool qSharedBuild();












































# 1346 "/home/eagle/qt-copy/include/QtCore/qglobal.h"












# 1358 "/home/eagle/qt-copy/include/QtCore/qglobal.h"












# 1370 "/home/eagle/qt-copy/include/QtCore/qglobal.h"
 void qDebug(const char *, ...) 



# 1374 "/home/eagle/qt-copy/include/QtCore/qglobal.h"
;

 void qWarning(const char *, ...) 



# 1380 "/home/eagle/qt-copy/include/QtCore/qglobal.h"
;

class QString;
 QString qt_error_string(int errorCode = -1);
 void qCritical(const char *, ...) 



# 1388 "/home/eagle/qt-copy/include/QtCore/qglobal.h"
;
 void qFatal(const char *, ...) 



# 1393 "/home/eagle/qt-copy/include/QtCore/qglobal.h"
;




# 1398 "/home/eagle/qt-copy/include/QtCore/qglobal.h"
 void qErrnoWarning(int code, const char *msg, ...);
 void qErrnoWarning(const char *msg, ...);





# 1405 "/home/eagle/qt-copy/include/QtCore/qglobal.h"





class QDebug;
class QNoDebug;

# 1413 "/home/eagle/qt-copy/include/QtCore/qglobal.h"
 inline QDebug qDebug();
 inline QDebug qWarning();
 inline QDebug qCritical();














# 1430 "/home/eagle/qt-copy/include/QtCore/qglobal.h"
inline void qt_noop() {}

 void qt_assert(const char *assertion, const char *file, int line);













# 1446 "/home/eagle/qt-copy/include/QtCore/qglobal.h"
 void qt_assert_x(const char *where, const char *what, const char *file, int line);









# 1456 "/home/eagle/qt-copy/include/QtCore/qglobal.h"
 void qt_check_pointer(const char *, int);




















# 1477 "/home/eagle/qt-copy/include/QtCore/qglobal.h"






# 1483 "/home/eagle/qt-copy/include/QtCore/qglobal.h"








# 1491 "/home/eagle/qt-copy/include/QtCore/qglobal.h"
enum QtMsgType { QtDebugMsg, QtWarningMsg, QtCriticalMsg, QtFatalMsg, QtSystemMsg = QtCriticalMsg };

 void qt_message_output(QtMsgType, const char *buf);

typedef void (*QtMsgHandler)(QtMsgType, const char *);
 QtMsgHandler qInstallMsgHandler(QtMsgHandler);

























# 1544 "/home/eagle/qt-copy/include/QtCore/qglobal.h"

template <typename T> class QBasicAtomicPointer;


template <typename T>
class QGlobalStatic
{
public:
QBasicAtomicPointer<T> pointer;
bool destroyed;
};


template <typename T>
class QGlobalStaticDeleter
{
public:
QGlobalStatic<T> &globalStatic;
QGlobalStaticDeleter(QGlobalStatic<T> &_globalStatic)
: globalStatic(_globalStatic)
{ }

inline ~QGlobalStaticDeleter()
{
delete globalStatic.pointer;
globalStatic.pointer = 0;
globalStatic.destroyed = true;
}
};











# 1622 "/home/eagle/qt-copy/include/QtCore/qglobal.h"
class QBool
{
bool b;

public:
inline explicit QBool(bool B) : b(B) {}
inline operator const void *() const
{ return b ? static_cast<const void *>(this) : static_cast<const void *>(0); }
};

inline bool operator==(QBool b1, bool b2) { return !b1 == !b2; }
inline bool operator==(bool b1, QBool b2) { return !b1 == !b2; }
inline bool operator==(QBool b1, QBool b2) { return !b1 == !b2; }
inline bool operator!=(QBool b1, bool b2) { return !b1 != !b2; }
inline bool operator!=(bool b1, QBool b2) { return !b1 != !b2; }
inline bool operator!=(QBool b1, QBool b2) { return !b1 != !b2; }

static inline bool qFuzzyCompare(double p1, double p2)
{
return (qAbs(p1 - p2) <= 0.000000000001 * qMin(qAbs(p1), qAbs(p2)));
}

static inline bool qFuzzyCompare(float p1, float p2)
{
return (qAbs(p1 - p2) <= 0.00001f * qMin(qAbs(p1), qAbs(p2)));
}






static inline bool qIsNull(double d)
{
union U {
double d;
quint64 u;
};
U val;
val.d = d;
return val.u == quint64(0);
}






static inline bool qIsNull(float f)
{
union U {
float f;
quint32 u;
};
U val;
val.f = f;
return val.u == 0u;
}

















# 1701 "/home/eagle/qt-copy/include/QtCore/qglobal.h"







# 1708 "/home/eagle/qt-copy/include/QtCore/qglobal.h"




template <typename T> inline bool qIsDetached(T &) { return true; }

template <typename T>
class QTypeInfo
{
public:
enum {
isPointer = false,
isComplex = true,
isStatic = true,
isLarge = (sizeof(T)>sizeof(void*)),
isDummy = false
};
};

template <typename T>
class QTypeInfo<T*>
{
public:
enum {
isPointer = true,
isComplex = false,
isStatic = false,
isLarge = false,
isDummy = false
};
};























# 1762 "/home/eagle/qt-copy/include/QtCore/qglobal.h"








enum { 
Q_COMPLEX_TYPE = 0,
Q_PRIMITIVE_TYPE = 0x1,
Q_STATIC_TYPE = 0,
Q_MOVABLE_TYPE = 0x2,
Q_DUMMY_TYPE = 0x4
};



# 1793 "/home/eagle/qt-copy/include/QtCore/qglobal.h"






















# 1830 "/home/eagle/qt-copy/include/QtCore/qglobal.h"



template <> class QTypeInfo<bool> { public: enum { isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(bool)>sizeof(void*)), isPointer = false, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "bool"; } };
template <> class QTypeInfo<char> { public: enum { isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(char)>sizeof(void*)), isPointer = false, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "char"; } };
template <> class QTypeInfo<signed char> { public: enum { isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(signed char)>sizeof(void*)), isPointer = false, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "signed char"; } };
template <> class QTypeInfo<uchar> { public: enum { isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(uchar)>sizeof(void*)), isPointer = false, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "uchar"; } };
template <> class QTypeInfo<short> { public: enum { isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(short)>sizeof(void*)), isPointer = false, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "short"; } };
template <> class QTypeInfo<ushort> { public: enum { isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(ushort)>sizeof(void*)), isPointer = false, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "ushort"; } };
template <> class QTypeInfo<int> { public: enum { isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(int)>sizeof(void*)), isPointer = false, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "int"; } };
template <> class QTypeInfo<uint> { public: enum { isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(uint)>sizeof(void*)), isPointer = false, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "uint"; } };
template <> class QTypeInfo<long> { public: enum { isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(long)>sizeof(void*)), isPointer = false, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "long"; } };
template <> class QTypeInfo<ulong> { public: enum { isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(ulong)>sizeof(void*)), isPointer = false, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "ulong"; } };
template <> class QTypeInfo<qint64> { public: enum { isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(qint64)>sizeof(void*)), isPointer = false, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "qint64"; } };
template <> class QTypeInfo<quint64> { public: enum { isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(quint64)>sizeof(void*)), isPointer = false, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "quint64"; } };
template <> class QTypeInfo<float> { public: enum { isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(float)>sizeof(void*)), isPointer = false, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "float"; } };
template <> class QTypeInfo<double> { public: enum { isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(double)>sizeof(void*)), isPointer = false, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "double"; } };

# 1848 "/home/eagle/qt-copy/include/QtCore/qglobal.h"
template <> class QTypeInfo<long double> { public: enum { isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(long double)>sizeof(void*)), isPointer = false, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "long double"; } };


# 1851 "/home/eagle/qt-copy/include/QtCore/qglobal.h"




 void *qMalloc(size_t size);
 void qFree(void *ptr);
 void *qRealloc(void *ptr, size_t size);
 void *qMemCopy(void *dest, const void *src, size_t n);
 void *qMemSet(void *dest, int c, size_t n);








































# 1900 "/home/eagle/qt-copy/include/QtCore/qglobal.h"
class  QFlag
{
int i;
public:
inline QFlag(int i);
inline operator int() const { return i; }
};

inline QFlag::QFlag(int ai) : i(ai) {}




# 1913 "/home/eagle/qt-copy/include/QtCore/qglobal.h"
template<typename Enum>
class QFlags
{
typedef void **Zero;
int i;
public:
typedef Enum enum_type;
inline QFlags(const QFlags &f) : i(f.i) {}
inline QFlags(Enum f) : i(f) {}
inline QFlags(Zero = 0) : i(0) {}
inline QFlags(QFlag f) : i(f) {}

inline QFlags &operator=(const QFlags &f) { i = f.i; return *this; }
inline QFlags &operator&=(int mask) { i &= mask; return *this; }
inline QFlags &operator&=(uint mask) { i &= mask; return *this; }
inline QFlags &operator|=(QFlags f) { i |= f.i; return *this; }
inline QFlags &operator|=(Enum f) { i |= f; return *this; }
inline QFlags &operator^=(QFlags f) { i ^= f.i; return *this; }
inline QFlags &operator^=(Enum f) { i ^= f; return *this; }

inline operator int() const { return i; }

inline QFlags operator|(QFlags f) const { QFlags g; g.i = i | f.i; return g; }
inline QFlags operator|(Enum f) const { QFlags g; g.i = i | f; return g; }
inline QFlags operator^(QFlags f) const { QFlags g; g.i = i ^ f.i; return g; }
inline QFlags operator^(Enum f) const { QFlags g; g.i = i ^ f; return g; }
inline QFlags operator&(int mask) const { QFlags g; g.i = i & mask; return g; }
inline QFlags operator&(uint mask) const { QFlags g; g.i = i & mask; return g; }
inline QFlags operator&(Enum f) const { QFlags g; g.i = i & f; return g; }
inline QFlags operator~() const { QFlags g; g.i = ~i; return g; }

inline bool operator!() const { return !i; }

inline bool testFlag(Enum f) const { return i & f; }

private:



# 1952 "/home/eagle/qt-copy/include/QtCore/qglobal.h"
};


























# 1989 "/home/eagle/qt-copy/include/QtCore/qglobal.h"
struct QForeachContainerBase {};

template <typename T>
class QForeachContainer : public QForeachContainerBase {
public:
inline QForeachContainer(const T& t): c(t), brk(0), i(c.begin()), e(c.end()){};
const T c;
mutable int brk;
mutable typename T::const_iterator i, e;
inline bool condition() const { return (!brk++ && i != e); }
};

template <typename T> inline T *qForeachPointer(const T &) { return 0; }

template <typename T> inline QForeachContainer<T> qForeachContainerNew(const T& t)
{ return QForeachContainer<T>(t); }

template <typename T>
inline const QForeachContainer<T> *qForeachContainer(const QForeachContainerBase *base, const T *)
{ return static_cast<const QForeachContainer<T> *>(base); }











































# 2076 "/home/eagle/qt-copy/include/QtCore/qglobal.h"












# 2090 "/home/eagle/qt-copy/include/QtCore/qglobal.h"
class QByteArray;
 QByteArray qgetenv(const char *varName);
 bool qputenv(const char *varName, const QByteArray& value);

inline int qIntCast(double f) { return int(f); }
inline int qIntCast(float f) { return int(f); }




 void qsrand(uint seed);
 int qrand();






















# 2124 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























# 2147 "/home/eagle/qt-copy/include/QtCore/qglobal.h"










# 2183 "/home/eagle/qt-copy/include/QtCore/qglobal.h"












# 2196 "/home/eagle/qt-copy/include/QtCore/qglobal.h"
enum QtValidLicenseForCoreModule { LicensedCore = true };


# 2199 "/home/eagle/qt-copy/include/QtCore/qglobal.h"
enum QtValidLicenseForGuiModule { LicensedGui = true };


# 2202 "/home/eagle/qt-copy/include/QtCore/qglobal.h"
enum QtValidLicenseForNetworkModule { LicensedNetwork = true };


# 2205 "/home/eagle/qt-copy/include/QtCore/qglobal.h"
enum QtValidLicenseForOpenGLModule { LicensedOpenGL = true };


# 2208 "/home/eagle/qt-copy/include/QtCore/qglobal.h"
enum QtValidLicenseForSqlModule { LicensedSql = true };


# 2211 "/home/eagle/qt-copy/include/QtCore/qglobal.h"
enum QtValidLicenseForXmlModule { LicensedXml = true };


# 2214 "/home/eagle/qt-copy/include/QtCore/qglobal.h"
enum QtValidLicenseForXmlPatternsModule { LicensedXmlPatterns = true };


# 2217 "/home/eagle/qt-copy/include/QtCore/qglobal.h"
enum QtValidLicenseForHelpModule { LicensedHelp = true };


# 2220 "/home/eagle/qt-copy/include/QtCore/qglobal.h"
enum QtValidLicenseForScriptModule { LicensedScript = true };


# 2223 "/home/eagle/qt-copy/include/QtCore/qglobal.h"
enum QtValidLicenseForQt3SupportLightModule { LicensedQt3SupportLight = true };


# 2226 "/home/eagle/qt-copy/include/QtCore/qglobal.h"
enum QtValidLicenseForQt3SupportModule { LicensedQt3Support = true };


# 2229 "/home/eagle/qt-copy/include/QtCore/qglobal.h"
enum QtValidLicenseForSvgModule { LicensedSvg = true };





# 2235 "/home/eagle/qt-copy/include/QtCore/qglobal.h"
enum QtValidLicenseForTestModule { LicensedTest = true };


# 2238 "/home/eagle/qt-copy/include/QtCore/qglobal.h"
enum QtValidLicenseForDBusModule { LicensedDBus = true };








# 2248 "/home/eagle/qt-copy/include/QtCore/qglobal.h"











# 2261 "/home/eagle/qt-copy/include/QtCore/qglobal.h"






# 2267 "/home/eagle/qt-copy/include/QtCore/qglobal.h"







# 2274 "/home/eagle/qt-copy/include/QtCore/qglobal.h"






# 47 "/home/eagle/qt-copy/include/QtCore/qchar.h"


# 49 "/home/eagle/qt-copy/include/QtCore/qchar.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class QString;

struct QLatin1Char
{
public:
inline explicit QLatin1Char(char c) : ch(c) {}




# 65 "/home/eagle/qt-copy/include/QtCore/qchar.h"
inline char toLatin1() const { return ch; }
inline ushort unicode() const { return ushort(uchar(ch)); }


# 69 "/home/eagle/qt-copy/include/QtCore/qchar.h"
private:
char ch;
};


class  QChar {
public:
QChar();

# 78 "/home/eagle/qt-copy/include/QtCore/qchar.h"
 QChar(char c);
 QChar(uchar c);

# 81 "/home/eagle/qt-copy/include/QtCore/qchar.h"
QChar(QLatin1Char ch);
QChar(uchar c, uchar r);
inline QChar(ushort rc) : ucs(rc){}
QChar(short rc);
QChar(uint rc);
QChar(int rc);
enum SpecialCharacter {
Null = 0x0000,
Nbsp = 0x00a0,
ReplacementCharacter = 0xfffd,
ObjectReplacementCharacter = 0xfffc,
ByteOrderMark = 0xfeff,
ByteOrderSwapped = 0xfffe,







# 101 "/home/eagle/qt-copy/include/QtCore/qchar.h"
ParagraphSeparator = 0x2029,
LineSeparator = 0x2028
};
QChar(SpecialCharacter sc);



enum Category
{
NoCategory,

Mark_NonSpacing, 
Mark_SpacingCombining, 
Mark_Enclosing, 

Number_DecimalDigit, 
Number_Letter, 
Number_Other, 

Separator_Space, 
Separator_Line, 
Separator_Paragraph, 

Other_Control, 
Other_Format, 
Other_Surrogate, 
Other_PrivateUse, 
Other_NotAssigned, 

Letter_Uppercase, 
Letter_Lowercase, 
Letter_Titlecase, 
Letter_Modifier, 
Letter_Other, 

Punctuation_Connector, 
Punctuation_Dash, 
Punctuation_Open, 
Punctuation_Close, 
Punctuation_InitialQuote, 
Punctuation_FinalQuote, 
Punctuation_Other, 

Symbol_Math, 
Symbol_Currency, 
Symbol_Modifier, 
Symbol_Other, 

Punctuation_Dask = Punctuation_Dash 
};

enum Direction
{
DirL, DirR, DirEN, DirES, DirET, DirAN, DirCS, DirB, DirS, DirWS, DirON,
DirLRE, DirLRO, DirAL, DirRLE, DirRLO, DirPDF, DirNSM, DirBN
};

enum Decomposition
{
NoDecomposition,
Canonical,
Font,
NoBreak,
Initial,
Medial,
Final,
Isolated,
Circle,
Super,
Sub,
Vertical,
Wide,
Narrow,
Small,
Square,
Compat,
Fraction




# 182 "/home/eagle/qt-copy/include/QtCore/qchar.h"
};

enum Joining
{
OtherJoining, Dual, Right, Center
};

enum CombiningClass
{
Combining_BelowLeftAttached = 200,
Combining_BelowAttached = 202,
Combining_BelowRightAttached = 204,
Combining_LeftAttached = 208,
Combining_RightAttached = 210,
Combining_AboveLeftAttached = 212,
Combining_AboveAttached = 214,
Combining_AboveRightAttached = 216,

Combining_BelowLeft = 218,
Combining_Below = 220,
Combining_BelowRight = 222,
Combining_Left = 224,
Combining_Right = 226,
Combining_AboveLeft = 228,
Combining_Above = 230,
Combining_AboveRight = 232,

Combining_DoubleBelow = 233,
Combining_DoubleAbove = 234,
Combining_IotaSubscript = 240
};

enum UnicodeVersion {
Unicode_Unassigned,
Unicode_1_1,
Unicode_2_0,
Unicode_2_1_2,
Unicode_3_0,
Unicode_3_1,
Unicode_3_2,
Unicode_4_0,
Unicode_4_1,
Unicode_5_0
};


Category category() const;
Direction direction() const;
Joining joining() const;
bool hasMirrored() const;
unsigned char combiningClass() const;

QChar mirroredChar() const;
QString decomposition() const;
Decomposition decompositionTag() const;

int digitValue() const;
QChar toLower() const;
QChar toUpper() const;
QChar toTitleCase() const;
QChar toCaseFolded() const;

UnicodeVersion unicodeVersion() const;






# 251 "/home/eagle/qt-copy/include/QtCore/qchar.h"
char toAscii() const;
inline char toLatin1() const;
inline ushort unicode() const { return ucs; }




# 258 "/home/eagle/qt-copy/include/QtCore/qchar.h"
inline ushort &unicode() { return ucs; }


# 261 "/home/eagle/qt-copy/include/QtCore/qchar.h"
static QChar fromAscii(char c);
static QChar fromLatin1(char c);

inline bool isNull() const { return ucs == 0; }
bool isPrint() const;
bool isPunct() const;
bool isSpace() const;
bool isMark() const;
bool isLetter() const;
bool isNumber() const;
bool isLetterOrNumber() const;
bool isDigit() const;
bool isSymbol() const;
inline bool isLower() const { return category() == Letter_Lowercase; }
inline bool isUpper() const { return category() == Letter_Uppercase; }
inline bool isTitleCase() const { return category() == Letter_Titlecase; }

inline bool isHighSurrogate() const {
return ((ucs & 0xfc00) == 0xd800);
}
inline bool isLowSurrogate() const {
return ((ucs & 0xfc00) == 0xdc00);
}

inline uchar cell() const { return uchar(ucs & 0xff); }
inline uchar row() const { return uchar((ucs>>8)&0xff); }
inline void setCell(uchar cell);
inline void setRow(uchar row);

static inline uint surrogateToUcs4(ushort high, ushort low) {
return (uint(high)<<10) + low - 0x35fdc00;
}
static inline uint surrogateToUcs4(QChar high, QChar low) {
return (uint(high.ucs)<<10) + low.ucs - 0x35fdc00;
}
static inline ushort highSurrogate(uint ucs4) {
return (ucs4>>10) + 0xd7c0;
}
static inline ushort lowSurrogate(uint ucs4) {
return ucs4%0x400 + 0xdc00;
}

static Category  category(uint ucs4);
static Category  category(ushort ucs2);
static Direction  direction(uint ucs4);
static Direction  direction(ushort ucs2);
static Joining  joining(uint ucs4);
static Joining  joining(ushort ucs2);
static unsigned char  combiningClass(uint ucs4);
static unsigned char  combiningClass(ushort ucs2);

static uint  mirroredChar(uint ucs4);
static ushort  mirroredChar(ushort ucs2);
static Decomposition  decompositionTag(uint ucs4);

static int  digitValue(uint ucs4);
static int  digitValue(ushort ucs2);
static uint  toLower(uint ucs4);
static ushort  toLower(ushort ucs2);
static uint  toUpper(uint ucs4);
static ushort  toUpper(ushort ucs2);
static uint  toTitleCase(uint ucs4);
static ushort  toTitleCase(ushort ucs2);
static uint  toCaseFolded(uint ucs4);
static ushort  toCaseFolded(ushort ucs2);

static UnicodeVersion  unicodeVersion(uint ucs4);
static UnicodeVersion  unicodeVersion(ushort ucs2);

static QString  decomposition(uint ucs4);

















# 348 "/home/eagle/qt-copy/include/QtCore/qchar.h"
private:




# 353 "/home/eagle/qt-copy/include/QtCore/qchar.h"
ushort ucs;
}



# 358 "/home/eagle/qt-copy/include/QtCore/qchar.h"
;

template <> class QTypeInfo<QChar> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QChar)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QChar"; } };

inline QChar::QChar() : ucs(0) {}




# 367 "/home/eagle/qt-copy/include/QtCore/qchar.h"
inline char QChar::toLatin1() const { return ucs > 0xff ? '\0' : char(ucs); }

# 369 "/home/eagle/qt-copy/include/QtCore/qchar.h"
inline QChar QChar::fromLatin1(char c) { return QChar(ushort(uchar(c))); }

inline QChar::QChar(uchar c, uchar r) : ucs((r << 8) | c){}
inline QChar::QChar(short rc) : ucs(ushort(rc)){}
inline QChar::QChar(uint rc) : ucs(ushort(rc & 0xffff)){}
inline QChar::QChar(int rc) : ucs(ushort(rc & 0xffff)){}
inline QChar::QChar(SpecialCharacter s) : ucs(ushort(s)) {}
inline QChar::QChar(QLatin1Char ch) : ucs(ch.unicode()) {}

inline void QChar::setCell(uchar acell)
{ ucs = (ucs & 0xff00) + acell; }
inline void QChar::setRow(uchar arow)
{ ucs = (ushort(arow)<<8) + (ucs&0xff); }

inline bool operator==(QChar c1, QChar c2) { return c1.unicode() == c2.unicode(); }
inline bool operator!=(QChar c1, QChar c2) { return c1.unicode() != c2.unicode(); }
inline bool operator<=(QChar c1, QChar c2) { return c1.unicode() <= c2.unicode(); }
inline bool operator>=(QChar c1, QChar c2) { return c1.unicode() >= c2.unicode(); }
inline bool operator<(QChar c1, QChar c2) { return c1.unicode() < c2.unicode(); }
inline bool operator>(QChar c1, QChar c2) { return c1.unicode() > c2.unicode(); }


# 391 "/home/eagle/qt-copy/include/QtCore/qchar.h"
 QDataStream &operator<<(QDataStream &, const QChar &);
 QDataStream &operator>>(QDataStream &, QChar &);


# 395 "/home/eagle/qt-copy/include/QtCore/qchar.h"





# 47 "/home/eagle/qt-copy/include/QtCore/qstring.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qatomic.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qatomic.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qbasicatomic.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qbasicatomic.h"


# 49 "/home/eagle/qt-copy/include/QtCore/qbasicatomic.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class  QBasicAtomicInt
{
public:



# 61 "/home/eagle/qt-copy/include/QtCore/qbasicatomic.h"
volatile int _q_value;


inline bool operator==(int value) const
{
return _q_value == value;
}

inline bool operator!=(int value) const
{
return _q_value != value;
}

inline bool operator!() const
{
return _q_value == 0;
}

inline operator int() const
{
return _q_value;
}

inline QBasicAtomicInt &operator=(int value)
{



# 89 "/home/eagle/qt-copy/include/QtCore/qbasicatomic.h"
_q_value = value;
return *this;
}



static bool isReferenceCountingNative();
static bool isReferenceCountingWaitFree();

bool ref();
bool deref();

static bool isTestAndSetNative();
static bool isTestAndSetWaitFree();

bool testAndSetRelaxed(int expectedValue, int newValue);
bool testAndSetAcquire(int expectedValue, int newValue);
bool testAndSetRelease(int expectedValue, int newValue);
bool testAndSetOrdered(int expectedValue, int newValue);

static bool isFetchAndStoreNative();
static bool isFetchAndStoreWaitFree();

int fetchAndStoreRelaxed(int newValue);
int fetchAndStoreAcquire(int newValue);
int fetchAndStoreRelease(int newValue);
int fetchAndStoreOrdered(int newValue);

static bool isFetchAndAddNative();
static bool isFetchAndAddWaitFree();

int fetchAndAddRelaxed(int valueToAdd);
int fetchAndAddAcquire(int valueToAdd);
int fetchAndAddRelease(int valueToAdd);
int fetchAndAddOrdered(int valueToAdd);
};

template <typename T>
class QBasicAtomicPointer
{
public:



# 133 "/home/eagle/qt-copy/include/QtCore/qbasicatomic.h"
T * volatile _q_value;


inline bool operator==(T *value) const
{
return _q_value == value;
}

inline bool operator!=(T *value) const
{
return !operator==(value);
}

inline bool operator!() const
{
return operator==(0);
}

inline operator T *() const
{
return _q_value;
}

inline T *operator->() const
{
return _q_value;
}

inline QBasicAtomicPointer<T> &operator=(T *value)
{



# 166 "/home/eagle/qt-copy/include/QtCore/qbasicatomic.h"
_q_value = value;
return *this;
}



static bool isTestAndSetNative();
static bool isTestAndSetWaitFree();

bool testAndSetRelaxed(T *expectedValue, T *newValue);
bool testAndSetAcquire(T *expectedValue, T *newValue);
bool testAndSetRelease(T *expectedValue, T *newValue);
bool testAndSetOrdered(T *expectedValue, T *newValue);

static bool isFetchAndStoreNative();
static bool isFetchAndStoreWaitFree();

T *fetchAndStoreRelaxed(T *newValue);
T *fetchAndStoreAcquire(T *newValue);
T *fetchAndStoreRelease(T *newValue);
T *fetchAndStoreOrdered(T *newValue);

static bool isFetchAndAddNative();
static bool isFetchAndAddWaitFree();

T *fetchAndAddRelaxed(qptrdiff valueToAdd);
T *fetchAndAddAcquire(qptrdiff valueToAdd);
T *fetchAndAddRelease(qptrdiff valueToAdd);
T *fetchAndAddOrdered(qptrdiff valueToAdd);
};







# 203 "/home/eagle/qt-copy/include/QtCore/qbasicatomic.h"






# 1 "/home/eagle/qt-copy/include/QtCore/qatomic_arch.h"














































# 47 "/home/eagle/qt-copy/include/QtCore/qatomic_arch.h"


# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtCore/qatomic_arch.h"













# 1 "/home/eagle/qt-copy/include/QtCore/qatomic_i386.h"














































# 47 "/home/eagle/qt-copy/include/QtCore/qatomic_i386.h"






# 53 "/home/eagle/qt-copy/include/QtCore/qatomic_i386.h"
inline bool QBasicAtomicInt::isReferenceCountingNative()
{ return true; }
inline bool QBasicAtomicInt::isReferenceCountingWaitFree()
{ return true; }




# 61 "/home/eagle/qt-copy/include/QtCore/qatomic_i386.h"
inline bool QBasicAtomicInt::isTestAndSetNative()
{ return true; }
inline bool QBasicAtomicInt::isTestAndSetWaitFree()
{ return true; }




# 69 "/home/eagle/qt-copy/include/QtCore/qatomic_i386.h"
inline bool QBasicAtomicInt::isFetchAndStoreNative()
{ return true; }
inline bool QBasicAtomicInt::isFetchAndStoreWaitFree()
{ return true; }




# 77 "/home/eagle/qt-copy/include/QtCore/qatomic_i386.h"
inline bool QBasicAtomicInt::isFetchAndAddNative()
{ return true; }
inline bool QBasicAtomicInt::isFetchAndAddWaitFree()
{ return true; }




# 85 "/home/eagle/qt-copy/include/QtCore/qatomic_i386.h"
template <typename T>
inline bool QBasicAtomicPointer<T>::isTestAndSetNative()
{ return true; }
template <typename T>
inline bool QBasicAtomicPointer<T>::isTestAndSetWaitFree()
{ return true; }




# 95 "/home/eagle/qt-copy/include/QtCore/qatomic_i386.h"
template <typename T>
inline bool QBasicAtomicPointer<T>::isFetchAndStoreNative()
{ return true; }
template <typename T>
inline bool QBasicAtomicPointer<T>::isFetchAndStoreWaitFree()
{ return true; }




# 105 "/home/eagle/qt-copy/include/QtCore/qatomic_i386.h"
template <typename T>
inline bool QBasicAtomicPointer<T>::isFetchAndAddNative()
{ return true; }
template <typename T>
inline bool QBasicAtomicPointer<T>::isFetchAndAddWaitFree()
{ return true; }






























































































# 205 "/home/eagle/qt-copy/include/QtCore/qatomic_i386.h"
extern "C" {
 int q_atomic_test_and_set_int(volatile int *ptr, int expected, int newval);
 int q_atomic_test_and_set_ptr(volatile void *ptr, void *expected, void *newval);
 int q_atomic_increment(volatile int *ptr);
 int q_atomic_decrement(volatile int *ptr);
 int q_atomic_set_int(volatile int *ptr, int newval);
 void *q_atomic_set_ptr(volatile void *ptr, void *newval);
 int q_atomic_fetch_and_add_int(volatile int *ptr, int value);
 void *q_atomic_fetch_and_add_ptr(volatile void *ptr, int value);
} 

inline bool QBasicAtomicInt::ref()
{
return q_atomic_increment(&_q_value) != 0;
}

inline bool QBasicAtomicInt::deref()
{
return q_atomic_decrement(&_q_value) != 0;
}

inline bool QBasicAtomicInt::testAndSetOrdered(int expectedValue, int newValue)
{
return q_atomic_test_and_set_int(&_q_value, expectedValue, newValue) != 0;
}

inline int QBasicAtomicInt::fetchAndStoreOrdered(int newValue)
{
return q_atomic_set_int(&_q_value, newValue);
}

inline int QBasicAtomicInt::fetchAndAddOrdered(int valueToAdd)
{
return q_atomic_fetch_and_add_int(&_q_value, valueToAdd);
}

template <typename T>
inline bool QBasicAtomicPointer<T>::testAndSetOrdered(T *expectedValue, T *newValue)
{
return q_atomic_test_and_set_ptr(&_q_value, expectedValue, newValue);
}

template <typename T>
inline T *QBasicAtomicPointer<T>::fetchAndStoreOrdered(T *newValue)
{
return reinterpret_cast<T *>(q_atomic_set_ptr(&_q_value, newValue));
}

template <typename T>
inline T *QBasicAtomicPointer<T>::fetchAndAddOrdered(qptrdiff valueToAdd)
{
return reinterpret_cast<T *>(q_atomic_fetch_and_add_ptr(&_q_value, valueToAdd * sizeof(T)));
}



# 261 "/home/eagle/qt-copy/include/QtCore/qatomic_i386.h"
inline bool QBasicAtomicInt::testAndSetRelaxed(int expectedValue, int newValue)
{
return testAndSetOrdered(expectedValue, newValue);
}

inline bool QBasicAtomicInt::testAndSetAcquire(int expectedValue, int newValue)
{
return testAndSetOrdered(expectedValue, newValue);
}

inline bool QBasicAtomicInt::testAndSetRelease(int expectedValue, int newValue)
{
return testAndSetOrdered(expectedValue, newValue);
}

inline int QBasicAtomicInt::fetchAndStoreRelaxed(int newValue)
{
return fetchAndStoreOrdered(newValue);
}

inline int QBasicAtomicInt::fetchAndStoreAcquire(int newValue)
{
return fetchAndStoreOrdered(newValue);
}

inline int QBasicAtomicInt::fetchAndStoreRelease(int newValue)
{
return fetchAndStoreOrdered(newValue);
}

inline int QBasicAtomicInt::fetchAndAddRelaxed(int valueToAdd)
{
return fetchAndAddOrdered(valueToAdd);
}

inline int QBasicAtomicInt::fetchAndAddAcquire(int valueToAdd)
{
return fetchAndAddOrdered(valueToAdd);
}

inline int QBasicAtomicInt::fetchAndAddRelease(int valueToAdd)
{
return fetchAndAddOrdered(valueToAdd);
}

template <typename T>
inline bool QBasicAtomicPointer<T>::testAndSetRelaxed(T *expectedValue, T *newValue)
{
return testAndSetOrdered(expectedValue, newValue);
}

template <typename T>
inline bool QBasicAtomicPointer<T>::testAndSetAcquire(T *expectedValue, T *newValue)
{
return testAndSetOrdered(expectedValue, newValue);
}

template <typename T>
inline bool QBasicAtomicPointer<T>::testAndSetRelease(T *expectedValue, T *newValue)
{
return testAndSetOrdered(expectedValue, newValue);
}

template <typename T>
inline T *QBasicAtomicPointer<T>::fetchAndStoreRelaxed(T *newValue)
{
return fetchAndStoreOrdered(newValue);
}

template <typename T>
inline T *QBasicAtomicPointer<T>::fetchAndStoreAcquire(T *newValue)
{
return fetchAndStoreOrdered(newValue);
}

template <typename T>
inline T *QBasicAtomicPointer<T>::fetchAndStoreRelease(T *newValue)
{
return fetchAndStoreOrdered(newValue);
}

template <typename T>
inline T *QBasicAtomicPointer<T>::fetchAndAddRelaxed(qptrdiff valueToAdd)
{
return fetchAndAddOrdered(valueToAdd);
}

template <typename T>
inline T *QBasicAtomicPointer<T>::fetchAndAddAcquire(qptrdiff valueToAdd)
{
return fetchAndAddOrdered(valueToAdd);
}

template <typename T>
inline T *QBasicAtomicPointer<T>::fetchAndAddRelease(qptrdiff valueToAdd)
{
return fetchAndAddOrdered(valueToAdd);
}





# 62 "/home/eagle/qt-copy/include/QtCore/qatomic_arch.h"

























# 87 "/home/eagle/qt-copy/include/QtCore/qatomic_arch.h"




# 209 "/home/eagle/qt-copy/include/QtCore/qbasicatomic.h"




# 48 "/home/eagle/qt-copy/include/QtCore/qatomic.h"


# 50 "/home/eagle/qt-copy/include/QtCore/qatomic.h"




typedef QtValidLicenseForCoreModule QtCoreModule;


class  QAtomicInt : public QBasicAtomicInt
{
public:
inline QAtomicInt(int value = 0)
{



# 65 "/home/eagle/qt-copy/include/QtCore/qatomic.h"
_q_value = value;
}
inline QAtomicInt(const QAtomicInt &other)
{



# 72 "/home/eagle/qt-copy/include/QtCore/qatomic.h"
_q_value = other._q_value;
}

inline QAtomicInt &operator=(int value)
{
(void) QBasicAtomicInt::operator=(value);
return *this;
}

inline QAtomicInt &operator=(const QAtomicInt &other)
{
(void) QBasicAtomicInt::operator=(other);
return *this;
}





































# 123 "/home/eagle/qt-copy/include/QtCore/qatomic.h"
};


template <typename T>
class QAtomicPointer : public QBasicAtomicPointer<T>
{
public:
inline QAtomicPointer(T *value = 0)
{



# 135 "/home/eagle/qt-copy/include/QtCore/qatomic.h"
QBasicAtomicPointer<T>::_q_value = value;
}
inline QAtomicPointer(const QAtomicPointer<T> &other)
{



# 142 "/home/eagle/qt-copy/include/QtCore/qatomic.h"
QBasicAtomicPointer<T>::_q_value = other._q_value;
}

inline QAtomicPointer<T> &operator=(T *value)
{
(void) QBasicAtomicPointer<T>::operator=(value);
return *this;
}

inline QAtomicPointer<T> &operator=(const QAtomicPointer<T> &other)
{
(void) QBasicAtomicPointer<T>::operator=(other);
return *this;
}
































# 188 "/home/eagle/qt-copy/include/QtCore/qatomic.h"
};







template <typename T>
inline void qAtomicAssign(T *&d, T *x)
{
if (d == x)
return;
x->ref.ref();
if (!d->ref.deref())
delete d;
d = x;
}









template <typename T>
inline void qAtomicDetach(T *&d)
{
if (d->ref == 1)
return;
T *x = d;
d = new T(*d);
if (!x->ref.deref())
delete x;
}





# 48 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"









# 57 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"




typedef QtValidLicenseForCoreModule QtCoreModule;





 char *qstrdup(const char *);

inline uint qstrlen(const char *str)
{ return str ? uint(strlen(str)) : 0; }

inline uint qstrnlen(const char *str, uint maxlen)
{
uint length = 0;
if (str) {
while (length < maxlen && *str++)
length++;
}
return length;
}

 char *qstrcpy(char *dst, const char *src);
 char *qstrncpy(char *dst, const char *src, uint len);

 int qstrcmp(const char *str1, const char *str2);
 int qstrcmp(const QByteArray &str1, const QByteArray &str2);
 int qstrcmp(const QByteArray &str1, const char *str2);
static inline int qstrcmp(const char *str1, const QByteArray &str2)
{ return -qstrcmp(str2, str1); }

inline int qstrncmp(const char *str1, const char *str2, uint len)
{
return (str1 && str2) ? strncmp(str1, str2, len)
: (str1 ? 1 : (str2 ? -1 : 0));
}
 int qstricmp(const char *, const char *);
 int qstrnicmp(const char *, const char *, uint len);


 int qvsnprintf(char *str, size_t n, const char *fmt, va_list ap);
 int qsnprintf(char *str, size_t n, const char *fmt, ...);














# 116 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"


 quint16 qChecksum(const char *s, uint len);

class QByteRef;
class QString;
class QDataStream;
template <typename T> class QList;

class  QByteArray
{
public:
inline QByteArray();
QByteArray(const char *);
QByteArray(const char *, int size);
QByteArray(int size, char c);
inline QByteArray(const QByteArray &);
inline ~QByteArray();

QByteArray &operator=(const QByteArray &);
QByteArray &operator=(const char *str);

inline int size() const;
bool isEmpty() const;
void resize(int size);

QByteArray &fill(char c, int size = -1);

int capacity() const;
void reserve(int size);
void squeeze();

operator const char *() const;
operator const void *() const;
char *data();
const char *data() const;
inline const char *constData() const;
inline void detach();
bool isDetached() const;
void clear();






# 162 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"
char at(int i) const;
char operator[](int i) const;
char operator[](uint i) const;

# 166 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"
QByteRef operator[](int i);
QByteRef operator[](uint i);

int indexOf(char c, int from = 0) const;
inline int indexOf(const char *c, int from = 0) const;
int indexOf(const QByteArray &a, int from = 0) const;
int lastIndexOf(char c, int from = -1) const;
inline int lastIndexOf(const char *c, int from = -1) const;
int lastIndexOf(const QByteArray &a, int from = -1) const;

QBool contains(char c) const;
QBool contains(const char *a) const;
QBool contains(const QByteArray &a) const;
int count(char c) const;
int count(const char *a) const;
int count(const QByteArray &a) const;

QByteArray left(int len) const;
QByteArray right(int len) const;
QByteArray mid(int index, int len = -1) const;

bool startsWith(const QByteArray &a) const;
bool startsWith(char c) const;
bool startsWith(const char *c) const;

bool endsWith(const QByteArray &a) const;
bool endsWith(char c) const;
bool endsWith(const char *c) const;

void truncate(int pos);
void chop(int n);

QByteArray toLower() const;
QByteArray toUpper() const;

QByteArray trimmed() const;
QByteArray simplified() const;
QByteArray leftJustified(int width, char fill = ' ', bool truncate = false) const;
QByteArray rightJustified(int width, char fill = ' ', bool truncate = false) const;








# 213 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"
QByteArray &prepend(char c);
QByteArray &prepend(const char *s);
QByteArray &prepend(const QByteArray &a);
QByteArray &append(char c);
QByteArray &append(const char *s);
QByteArray &append(const QByteArray &a);
QByteArray &insert(int i, char c);
QByteArray &insert(int i, const char *s);
QByteArray &insert(int i, const QByteArray &a);
QByteArray &remove(int index, int len);
QByteArray &replace(int index, int len, const char *s);
QByteArray &replace(int index, int len, const QByteArray &s);
QByteArray &replace(char before, const char *after);
QByteArray &replace(char before, const QByteArray &after);
QByteArray &replace(const char *before, const char *after);
QByteArray &replace(const QByteArray &before, const QByteArray &after);
QByteArray &replace(const QByteArray &before, const char *after);
QByteArray &replace(const char *before, const QByteArray &after);
QByteArray &replace(char before, char after);
QByteArray &operator+=(char c);
QByteArray &operator+=(const char *s);
QByteArray &operator+=(const QByteArray &a);

QList<QByteArray> split(char sep) const;


# 239 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"
 QByteArray &append(const QString &s);
 QByteArray &insert(int i, const QString &s);
 QByteArray &replace(const QString &before, const char *after);
 QByteArray &replace(char c, const QString &after);
 QByteArray &replace(const QString &before, const QByteArray &after);

 QByteArray &operator+=(const QString &s);
 int indexOf(const QString &s, int from = 0) const;
 int lastIndexOf(const QString &s, int from = -1) const;


# 250 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"
inline  bool operator==(const QString &s2) const;
inline  bool operator!=(const QString &s2) const;
inline  bool operator<(const QString &s2) const;
inline  bool operator>(const QString &s2) const;
inline  bool operator<=(const QString &s2) const;
inline  bool operator>=(const QString &s2) const;


# 258 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"
short toShort(bool *ok = 0, int base = 10) const;
ushort toUShort(bool *ok = 0, int base = 10) const;
int toInt(bool *ok = 0, int base = 10) const;
uint toUInt(bool *ok = 0, int base = 10) const;
long toLong(bool *ok = 0, int base = 10) const;
ulong toULong(bool *ok = 0, int base = 10) const;
qlonglong toLongLong(bool *ok = 0, int base = 10) const;
qulonglong toULongLong(bool *ok = 0, int base = 10) const;
float toFloat(bool *ok = 0) const;
double toDouble(bool *ok = 0) const;
QByteArray toBase64() const;
QByteArray toHex() const;
QByteArray toPercentEncoding(const QByteArray &exclude = QByteArray(),
const QByteArray &include = QByteArray(),
char percent = '%') const;

QByteArray &setNum(short, int base = 10);
QByteArray &setNum(ushort, int base = 10);
QByteArray &setNum(int, int base = 10);
QByteArray &setNum(uint, int base = 10);
QByteArray &setNum(qlonglong, int base = 10);
QByteArray &setNum(qulonglong, int base = 10);
QByteArray &setNum(float, char f = 'g', int prec = 6);
QByteArray &setNum(double, char f = 'g', int prec = 6);

static QByteArray number(int, int base = 10);
static QByteArray number(uint, int base = 10);
static QByteArray number(qlonglong, int base = 10);
static QByteArray number(qulonglong, int base = 10);
static QByteArray number(double, char f = 'g', int prec = 6);
static QByteArray fromRawData(const char *, int size);
static QByteArray fromBase64(const QByteArray &base64);
static QByteArray fromHex(const QByteArray &hexEncoded);
static QByteArray fromPercentEncoding(const QByteArray &pctEncoded, char percent = '%');


typedef char *iterator;
typedef const char *const_iterator;
typedef iterator Iterator;
typedef const_iterator ConstIterator;
iterator begin();
const_iterator begin() const;
const_iterator constBegin() const;
iterator end();
const_iterator end() const;
const_iterator constEnd() const;


typedef const char & const_reference;
typedef char & reference;
void push_back(char c);
void push_back(const char *c);
void push_back(const QByteArray &a);
void push_front(char c);
void push_front(const char *c);
void push_front(const QByteArray &a);

inline int count() const { return d->size; }
int length() const { return d->size; }
bool isNull() const;


























# 344 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"
private:
operator QNoImplicitBoolCast() const;
struct Data {
QBasicAtomicInt ref;
int alloc, size;



char *data;
char array[1];
};
static Data shared_null;
static Data shared_empty;
Data *d;
QByteArray(Data *dd, int , int ) : d(dd) {}
void realloc(int alloc);
void expand(int i);

friend class QByteRef;
friend class QString;
public:
typedef Data * DataPtr;
inline DataPtr &data_ptr() { return d; }
};

inline QByteArray::QByteArray(): d(&shared_null) { d->ref.ref(); }
inline QByteArray::~QByteArray() { if (!d->ref.deref()) qFree(d); }
inline int QByteArray::size() const
{ return d->size; }









# 382 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"
inline char QByteArray::at(int i) const
{ qt_noop(); return d->data[i]; }
inline char QByteArray::operator[](int i) const
{ qt_noop(); return d->data[i]; }
inline char QByteArray::operator[](uint i) const
{ qt_noop(); return d->data[i]; }


# 390 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"
inline bool QByteArray::isEmpty() const
{ return d->size == 0; }
inline QByteArray::operator const char *() const
{ return d->data; }
inline QByteArray::operator const void *() const
{ return d->data; }
inline char *QByteArray::data()
{ detach(); return d->data; }
inline const char *QByteArray::data() const
{ return d->data; }
inline const char *QByteArray::constData() const
{ return d->data; }
inline void QByteArray::detach()
{ if (d->ref != 1 || d->data != d->array) realloc(d->size); }
inline bool QByteArray::isDetached() const
{ return d->ref == 1; }
inline QByteArray::QByteArray(const QByteArray &a) : d(a.d)
{ d->ref.ref(); }





# 413 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"
inline int QByteArray::capacity() const
{ return d->alloc; }

inline void QByteArray::reserve(int asize)
{ if (d->ref != 1 || asize > d->alloc) realloc(asize); }

inline void QByteArray::squeeze()
{ if (d->size < d->alloc) realloc(d->size); }

class  QByteRef {
QByteArray &a;
int i;
inline QByteRef(QByteArray &array, int idx)
: a(array),i(idx) {}
friend class QByteArray;
public:




# 433 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"
inline operator char() const
{ return i < a.d->size ? a.d->data[i] : 0; }

# 436 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"
inline QByteRef &operator=(char c)
{ if (a.d->ref != 1 || i >= a.d->size) a.expand(i);
a.d->data[i] = c; return *this; }
inline QByteRef &operator=(const QByteRef &c)
{ if (a.d->ref != 1 || i >= a.d->size) a.expand(i);
a.d->data[i] = c.a.d->data[c.i]; return *this; }
inline bool operator==(char c) const
{ return a.d->data[i] == c; }
inline bool operator!=(char c) const
{ return a.d->data[i] != c; }
inline bool operator>(char c) const
{ return a.d->data[i] > c; }
inline bool operator>=(char c) const
{ return a.d->data[i] >= c; }
inline bool operator<(char c) const
{ return a.d->data[i] < c; }
inline bool operator<=(char c) const
{ return a.d->data[i] <= c; }
};

inline QByteRef QByteArray::operator[](int i)
{ qt_noop(); return QByteRef(*this, i); }
inline QByteRef QByteArray::operator[](uint i)
{ return QByteRef(*this, i); }
inline QByteArray::iterator QByteArray::begin()
{ detach(); return d->data; }
inline QByteArray::const_iterator QByteArray::begin() const
{ return d->data; }
inline QByteArray::const_iterator QByteArray::constBegin() const
{ return d->data; }
inline QByteArray::iterator QByteArray::end()
{ detach(); return d->data + d->size; }
inline QByteArray::const_iterator QByteArray::end() const
{ return d->data + d->size; }
inline QByteArray::const_iterator QByteArray::constEnd() const
{ return d->data + d->size; }
inline QByteArray &QByteArray::operator+=(char c)
{ return append(c); }
inline QByteArray &QByteArray::operator+=(const char *s)
{ return append(s); }
inline QByteArray &QByteArray::operator+=(const QByteArray &a)
{ return append(a); }
inline void QByteArray::push_back(char c)
{ append(c); }
inline void QByteArray::push_back(const char *c)
{ append(c); }
inline void QByteArray::push_back(const QByteArray &a)
{ append(a); }
inline void QByteArray::push_front(char c)
{ prepend(c); }
inline void QByteArray::push_front(const char *c)
{ prepend(c); }
inline void QByteArray::push_front(const QByteArray &a)
{ prepend(a); }
inline QBool QByteArray::contains(const QByteArray &a) const
{ return QBool(indexOf(a) != -1); }
inline QBool QByteArray::contains(char c) const
{ return QBool(indexOf(c) != -1); }
inline bool operator==(const QByteArray &a1, const QByteArray &a2)
{ return (a1.size() == a2.size()) && (memcmp(a1, a2, a1.size())==0); }
inline bool operator==(const QByteArray &a1, const char *a2)
{ return a2 ? qstrcmp(a1,a2) == 0 : a1.isEmpty(); }
inline bool operator==(const char *a1, const QByteArray &a2)
{ return a1 ? qstrcmp(a1,a2) == 0 : a2.isEmpty(); }
inline bool operator!=(const QByteArray &a1, const QByteArray &a2)
{ return !(a1==a2); }
inline bool operator!=(const QByteArray &a1, const char *a2)
{ return a2 ? qstrcmp(a1,a2) != 0 : !a1.isEmpty(); }
inline bool operator!=(const char *a1, const QByteArray &a2)
{ return a1 ? qstrcmp(a1,a2) != 0 : !a2.isEmpty(); }
inline bool operator<(const QByteArray &a1, const QByteArray &a2)
{ return qstrcmp(a1, a2) < 0; }
inline bool operator<(const QByteArray &a1, const char *a2)
{ return qstrcmp(a1, a2) < 0; }
inline bool operator<(const char *a1, const QByteArray &a2)
{ return qstrcmp(a1, a2) < 0; }
inline bool operator<=(const QByteArray &a1, const QByteArray &a2)
{ return qstrcmp(a1, a2) <= 0; }
inline bool operator<=(const QByteArray &a1, const char *a2)
{ return qstrcmp(a1, a2) <= 0; }
inline bool operator<=(const char *a1, const QByteArray &a2)
{ return qstrcmp(a1, a2) <= 0; }
inline bool operator>(const QByteArray &a1, const QByteArray &a2)
{ return qstrcmp(a1, a2) > 0; }
inline bool operator>(const QByteArray &a1, const char *a2)
{ return qstrcmp(a1, a2) > 0; }
inline bool operator>(const char *a1, const QByteArray &a2)
{ return qstrcmp(a1, a2) > 0; }
inline bool operator>=(const QByteArray &a1, const QByteArray &a2)
{ return qstrcmp(a1, a2) >= 0; }
inline bool operator>=(const QByteArray &a1, const char *a2)
{ return qstrcmp(a1, a2) >= 0; }
inline bool operator>=(const char *a1, const QByteArray &a2)
{ return qstrcmp(a1, a2) >= 0; }
inline const QByteArray operator+(const QByteArray &a1, const QByteArray &a2)
{ return QByteArray(a1) += a2; }
inline const QByteArray operator+(const QByteArray &a1, const char *a2)
{ return QByteArray(a1) += a2; }
inline const QByteArray operator+(const QByteArray &a1, char a2)
{ return QByteArray(a1) += a2; }
inline const QByteArray operator+(const char *a1, const QByteArray &a2)
{ return QByteArray(a1) += a2; }
inline const QByteArray operator+(char a1, const QByteArray &a2)
{ return QByteArray(&a1, 1) += a2; }
inline int QByteArray::indexOf(const char *c, int i) const
{ return indexOf(fromRawData(c, qstrlen(c)), i); }
inline int QByteArray::lastIndexOf(const char *c, int i) const
{ return lastIndexOf(fromRawData(c, qstrlen(c)), i); }
inline QBool QByteArray::contains(const char *c) const
{ return contains(fromRawData(c, qstrlen(c))); }
inline QByteArray &QByteArray::replace(int index, int len, const char *c)
{ return replace(index, len, fromRawData(c, qstrlen(c))); }
inline QByteArray &QByteArray::replace(char before, const char *c)
{ return replace(before, fromRawData(c, qstrlen(c))); }
inline QByteArray &QByteArray::replace(const QByteArray &before, const char *c)
{ return replace(before, fromRawData(c, qstrlen(c))); }
inline QByteArray &QByteArray::replace(const char *c, const QByteArray &after)
{ return replace(fromRawData(c, qstrlen(c)), after); }
inline QByteArray &QByteArray::replace(const char *before, const char *after)
{ return replace(fromRawData(before, qstrlen(before)), fromRawData(after, qstrlen(after))); }

inline QByteArray &QByteArray::setNum(short n, int base)
{ return setNum(qlonglong(n), base); }
inline QByteArray &QByteArray::setNum(ushort n, int base)
{ return setNum(qulonglong(n), base); }
inline QByteArray &QByteArray::setNum(int n, int base)
{ return setNum(qlonglong(n), base); }
inline QByteArray &QByteArray::setNum(uint n, int base)
{ return setNum(qulonglong(n), base); }
inline QByteArray &QByteArray::setNum(float n, char f, int prec)
{ return setNum(double(n),f,prec); }



# 570 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"
 QDataStream &operator<<(QDataStream &, const QByteArray &);
 QDataStream &operator>>(QDataStream &, QByteArray &);



# 575 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"
 QByteArray qCompress(const uchar* data, int nbytes, int compressionLevel = -1);
 QByteArray qUncompress(const uchar* data, int nbytes);
inline QByteArray qCompress(const QByteArray& data, int compressionLevel = -1)
{ return qCompress(reinterpret_cast<const uchar *>(data.constData()), data.size(), compressionLevel); }
inline QByteArray qUncompress(const QByteArray& data)
{ return qUncompress(reinterpret_cast<const uchar*>(data.constData()), data.size()); }


# 583 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"
template <> class QTypeInfo<QByteArray> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QByteArray)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QByteArray"; } };
template <> inline bool qIsDetached<QByteArray>(QByteArray &t) { return t.isDetached(); } template <typename T> inline void qSwap(T &, T &); template <> inline void qSwap<QByteArray>(QByteArray &value1, QByteArray &value2) { const QByteArray::DataPtr t = value1.data_ptr(); value1.data_ptr() = value2.data_ptr(); value2.data_ptr() = t; }






# 48 "/home/eagle/qt-copy/include/QtCore/qstring.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qatomic.h"

























































































































































































































# 49 "/home/eagle/qt-copy/include/QtCore/qstring.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"


# 49 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"




typedef QtValidLicenseForCoreModule QtCoreModule;


# 56 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"
namespace



# 60 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"
Qt {






# 67 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"
Q_ENUMS(Orientation TextFormat BackgroundMode DateFormat ScrollBarPolicy FocusPolicy ContextMenuPolicy CaseSensitivity LayoutDirection ArrowType ShortcutContext TimeSpec)
Q_ENUMS(ToolButtonStyle)
Q_ENUMS(PenStyle PenCapStyle PenJoinStyle BrushStyle FillRule BGMode ClipOperation GlobalColor)



Q_ENUMS(DockWidgetArea)
Q_ENUMS(TextElideMode)
Q_ENUMS(TextInteractionFlag)
Q_ENUMS(WindowModality ToolBarArea DayOfWeek)

Q_ENUMS(CursorShape)

Q_ENUMS(AspectRatioMode)
Q_ENUMS(Key)
Q_ENUMS(ItemSelectionMode)







# 90 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"
enum GlobalColor {
color0,
color1,
black,
white,
darkGray,
gray,
lightGray,
red,
green,
blue,
cyan,
magenta,
yellow,
darkRed,
darkGreen,
darkBlue,
darkCyan,
darkMagenta,
darkYellow,
transparent
};

enum KeyboardModifier {
NoModifier = 0x00000000,
ShiftModifier = 0x02000000,
ControlModifier = 0x04000000,
AltModifier = 0x08000000,
MetaModifier = 0x10000000,
KeypadModifier = 0x20000000,
GroupSwitchModifier = 0x40000000,

KeyboardModifierMask = 0xfe000000
};
typedef QFlags<KeyboardModifier> KeyboardModifiers;


enum Modifier {
META = Qt::MetaModifier,
SHIFT = Qt::ShiftModifier,
CTRL = Qt::ControlModifier,
ALT = Qt::AltModifier,
MODIFIER_MASK = KeyboardModifierMask,
UNICODE_ACCEL = 0x00000000
};

enum MouseButton {
NoButton = 0x00000000,
LeftButton = 0x00000001,
RightButton = 0x00000002,
MidButton = 0x00000004,
XButton1 = 0x00000008,
XButton2 = 0x00000010,
MouseButtonMask = 0x000000ff
};
typedef QFlags<MouseButton> MouseButtons;













# 159 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"
enum Orientation {
Horizontal = 0x1,
Vertical = 0x2
};

typedef QFlags<Orientation> Orientations;

enum FocusPolicy {
NoFocus = 0,
TabFocus = 0x1,
ClickFocus = 0x2,
StrongFocus = TabFocus | ClickFocus | 0x8,
WheelFocus = StrongFocus | 0x4
};

enum SortOrder {
AscendingOrder,
DescendingOrder




# 181 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"
};





enum AlignmentFlag {
AlignLeft = 0x0001,
AlignLeading = AlignLeft,
AlignRight = 0x0002,
AlignTrailing = AlignRight,
AlignHCenter = 0x0004,
AlignJustify = 0x0008,
AlignAbsolute = 0x0010,
AlignHorizontal_Mask = AlignLeft | AlignRight | AlignHCenter | AlignJustify | AlignAbsolute,

AlignTop = 0x0020,
AlignBottom = 0x0040,
AlignVCenter = 0x0080,
AlignVertical_Mask = AlignTop | AlignBottom | AlignVCenter,

AlignCenter = AlignVCenter | AlignHCenter



# 206 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"
};

typedef QFlags<AlignmentFlag> Alignment;

enum TextFlag {
TextSingleLine = 0x0100,
TextDontClip = 0x0200,
TextExpandTabs = 0x0400,
TextShowMnemonic = 0x0800,
TextWordWrap = 0x1000,
TextWrapAnywhere = 0x2000,
TextDontPrint = 0x4000,
TextIncludeTrailingSpaces = 0x08000000,
TextHideMnemonic = 0x8000,
TextJustificationForced = 0x10000,
TextForceLeftToRight = 0x20000,
TextForceRightToLeft = 0x40000












# 235 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"
};




# 240 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"
enum TextElideMode {
ElideLeft,
ElideRight,
ElideMiddle,
ElideNone
};

enum WindowType {
Widget = 0x00000000,
Window = 0x00000001,
Dialog = 0x00000002 | Window,
Sheet = 0x00000004 | Window,
Drawer = 0x00000006 | Window,
Popup = 0x00000008 | Window,
Tool = 0x0000000a | Window,
ToolTip = 0x0000000c | Window,
SplashScreen = 0x0000000e | Window,
Desktop = 0x00000010 | Window,
SubWindow = 0x00000012,

WindowType_Mask = 0x000000ff,
MSWindowsFixedSizeDialogHint = 0x00000100,
MSWindowsOwnDC = 0x00000200,
X11BypassWindowManagerHint = 0x00000400,
FramelessWindowHint = 0x00000800,
WindowTitleHint = 0x00001000,
WindowSystemMenuHint = 0x00002000,
WindowMinimizeButtonHint = 0x00004000,
WindowMaximizeButtonHint = 0x00008000,
WindowMinMaxButtonsHint = WindowMinimizeButtonHint | WindowMaximizeButtonHint,
WindowContextHelpButtonHint = 0x00010000,
WindowShadeButtonHint = 0x00020000,
WindowStaysOnTopHint = 0x00040000,
WindowOkButtonHint = 0x00080000,
WindowCancelButtonHint = 0x000100000,
CustomizeWindowHint = 0x02000000


















































# 326 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"
};

typedef QFlags<WindowType> WindowFlags;

enum WindowState {
WindowNoState = 0x00000000,
WindowMinimized = 0x00000001,
WindowMaximized = 0x00000002,
WindowFullScreen = 0x00000004,
WindowActive = 0x00000008
};

typedef QFlags<WindowState> WindowStates;

enum WidgetAttribute {
WA_Disabled = 0,
WA_UnderMouse = 1,
WA_MouseTracking = 2,
WA_ContentsPropagated = 3, 
WA_OpaquePaintEvent = 4,
WA_NoBackground = WA_OpaquePaintEvent, 
WA_StaticContents = 5,
WA_LaidOut = 7,
WA_PaintOnScreen = 8,
WA_NoSystemBackground = 9,
WA_UpdatesDisabled = 10,
WA_Mapped = 11,
WA_MacNoClickThrough = 12, 
WA_PaintOutsidePaintEvent = 13,
WA_InputMethodEnabled = 14,
WA_WState_Visible = 15,
WA_WState_Hidden = 16,

WA_ForceDisabled = 32,
WA_KeyCompression = 33,
WA_PendingMoveEvent = 34,
WA_PendingResizeEvent = 35,
WA_SetPalette = 36,
WA_SetFont = 37,
WA_SetCursor = 38,
WA_NoChildEventsFromChildren = 39,
WA_WindowModified = 41,
WA_Resized = 42,
WA_Moved = 43,
WA_PendingUpdate = 44,
WA_InvalidSize = 45,
WA_MacBrushedMetal = 46, 
WA_MacMetalStyle = WA_MacBrushedMetal, 
WA_CustomWhatsThis = 47,
WA_LayoutOnEntireRect = 48,
WA_OutsideWSRange = 49,
WA_GrabbedShortcut = 50,
WA_TransparentForMouseEvents = 51,
WA_PaintUnclipped = 52,
WA_SetWindowIcon = 53,
WA_NoMouseReplay = 54,
WA_DeleteOnClose = 55,
WA_RightToLeft = 56,
WA_SetLayoutDirection = 57,
WA_NoChildEventsForParent = 58,
WA_ForceUpdatesDisabled = 59,

WA_WState_Created = 60,
WA_WState_CompressKeys = 61,
WA_WState_InPaintEvent = 62,
WA_WState_Reparented = 63,
WA_WState_ConfigPending = 64,
WA_WState_Polished = 66,
WA_WState_DND = 67, 
WA_WState_OwnSizePolicy = 68,
WA_WState_ExplicitShowHide = 69,

WA_ShowModal = 70, 
WA_MouseNoMask = 71,
WA_GroupLeader = 72, 
WA_NoMousePropagation = 73, 
WA_Hover = 74,
WA_InputMethodTransparent = 75, 
WA_QuitOnClose = 76,

WA_KeyboardFocusChange = 77,

WA_AcceptDrops = 78,
WA_DropSiteRegistered = 79, 
WA_ForceAcceptDrops = WA_DropSiteRegistered, 

WA_WindowPropagation = 80,

WA_NoX11EventCompression = 81,
WA_TintedBackground = 82,
WA_X11OpenGLOverlay = 83,
WA_AlwaysShowToolTips = 84,
WA_MacOpaqueSizeGrip = 85,
WA_SetStyle = 86,

WA_SetLocale = 87,
WA_MacShowFocusRect = 88,

WA_MacNormalSize = 89, 
WA_MacSmallSize = 90, 
WA_MacMiniSize = 91, 

WA_LayoutUsesWidgetRect = 92,
WA_StyledBackground = 93, 
WA_MSWindowsUseDirect3D = 94, 
WA_CanHostQMdiSubWindowTitleBar = 95, 

WA_MacAlwaysShowToolWindow = 96, 

WA_StyleSheet = 97, 

WA_ShowWithoutActivating = 98,

WA_X11BypassTransientForHint = 99,

WA_NativeWindow = 100,
WA_DontCreateNativeAncestors = 101,

WA_MacVariableSize = 102, 

WA_DontShowOnScreen = 103,


WA_X11NetWmWindowTypeDesktop = 104,
WA_X11NetWmWindowTypeDock = 105,
WA_X11NetWmWindowTypeToolBar = 106,
WA_X11NetWmWindowTypeMenu = 107,
WA_X11NetWmWindowTypeUtility = 108,
WA_X11NetWmWindowTypeSplash = 109,
WA_X11NetWmWindowTypeDialog = 110,
WA_X11NetWmWindowTypeDropDownMenu = 111,
WA_X11NetWmWindowTypePopupMenu = 112,
WA_X11NetWmWindowTypeToolTip = 113,
WA_X11NetWmWindowTypeNotification = 114,
WA_X11NetWmWindowTypeCombo = 115,
WA_X11NetWmWindowTypeDND = 116,


WA_AttributeCount
};

enum ApplicationAttribute
{
AA_ImmediateWidgetCreation = 0,
AA_MSWindowsUseDirect3DByDefault = 1, 
AA_DontShowIconsInMenus = 2,
AA_NativeWindows = 3,


AA_AttributeCount
};





enum ImageConversionFlag {
ColorMode_Mask = 0x00000003,
AutoColor = 0x00000000,
ColorOnly = 0x00000003,
MonoOnly = 0x00000002,


AlphaDither_Mask = 0x0000000c,
ThresholdAlphaDither = 0x00000000,
OrderedAlphaDither = 0x00000004,
DiffuseAlphaDither = 0x00000008,
NoAlpha = 0x0000000c, 

Dither_Mask = 0x00000030,
DiffuseDither = 0x00000000,
OrderedDither = 0x00000010,
ThresholdDither = 0x00000020,


DitherMode_Mask = 0x000000c0,
AutoDither = 0x00000000,
PreferDither = 0x00000040,
AvoidDither = 0x00000080
};
typedef QFlags<ImageConversionFlag> ImageConversionFlags;

enum BGMode {
TransparentMode,
OpaqueMode
};




















# 532 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"
enum Key {
Key_Escape = 0x01000000, 
Key_Tab = 0x01000001,
Key_Backtab = 0x01000002,



# 539 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"
Key_Backspace = 0x01000003,



# 543 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"
Key_Return = 0x01000004,
Key_Enter = 0x01000005,
Key_Insert = 0x01000006,
Key_Delete = 0x01000007,
Key_Pause = 0x01000008,
Key_Print = 0x01000009,
Key_SysReq = 0x0100000a,
Key_Clear = 0x0100000b,
Key_Home = 0x01000010, 
Key_End = 0x01000011,
Key_Left = 0x01000012,
Key_Up = 0x01000013,
Key_Right = 0x01000014,
Key_Down = 0x01000015,
Key_PageUp = 0x01000016,



# 561 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"
Key_PageDown = 0x01000017,



# 565 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"
Key_Shift = 0x01000020, 
Key_Control = 0x01000021,
Key_Meta = 0x01000022,
Key_Alt = 0x01000023,
Key_CapsLock = 0x01000024,
Key_NumLock = 0x01000025,
Key_ScrollLock = 0x01000026,
Key_F1 = 0x01000030, 
Key_F2 = 0x01000031,
Key_F3 = 0x01000032,
Key_F4 = 0x01000033,
Key_F5 = 0x01000034,
Key_F6 = 0x01000035,
Key_F7 = 0x01000036,
Key_F8 = 0x01000037,
Key_F9 = 0x01000038,
Key_F10 = 0x01000039,
Key_F11 = 0x0100003a,
Key_F12 = 0x0100003b,
Key_F13 = 0x0100003c,
Key_F14 = 0x0100003d,
Key_F15 = 0x0100003e,
Key_F16 = 0x0100003f,
Key_F17 = 0x01000040,
Key_F18 = 0x01000041,
Key_F19 = 0x01000042,
Key_F20 = 0x01000043,
Key_F21 = 0x01000044,
Key_F22 = 0x01000045,
Key_F23 = 0x01000046,
Key_F24 = 0x01000047,
Key_F25 = 0x01000048, 
Key_F26 = 0x01000049,
Key_F27 = 0x0100004a,
Key_F28 = 0x0100004b,
Key_F29 = 0x0100004c,
Key_F30 = 0x0100004d,
Key_F31 = 0x0100004e,
Key_F32 = 0x0100004f,
Key_F33 = 0x01000050,
Key_F34 = 0x01000051,
Key_F35 = 0x01000052,
Key_Super_L = 0x01000053, 
Key_Super_R = 0x01000054,
Key_Menu = 0x01000055,
Key_Hyper_L = 0x01000056,
Key_Hyper_R = 0x01000057,
Key_Help = 0x01000058,
Key_Direction_L = 0x01000059,
Key_Direction_R = 0x01000060,
Key_Space = 0x20, 
Key_Any = Key_Space,
Key_Exclam = 0x21,
Key_QuoteDbl = 0x22,
Key_NumberSign = 0x23,
Key_Dollar = 0x24,
Key_Percent = 0x25,
Key_Ampersand = 0x26,
Key_Apostrophe = 0x27,
Key_ParenLeft = 0x28,
Key_ParenRight = 0x29,
Key_Asterisk = 0x2a,
Key_Plus = 0x2b,
Key_Comma = 0x2c,
Key_Minus = 0x2d,
Key_Period = 0x2e,
Key_Slash = 0x2f,
Key_0 = 0x30,
Key_1 = 0x31,
Key_2 = 0x32,
Key_3 = 0x33,
Key_4 = 0x34,
Key_5 = 0x35,
Key_6 = 0x36,
Key_7 = 0x37,
Key_8 = 0x38,
Key_9 = 0x39,
Key_Colon = 0x3a,
Key_Semicolon = 0x3b,
Key_Less = 0x3c,
Key_Equal = 0x3d,
Key_Greater = 0x3e,
Key_Question = 0x3f,
Key_At = 0x40,
Key_A = 0x41,
Key_B = 0x42,
Key_C = 0x43,
Key_D = 0x44,
Key_E = 0x45,
Key_F = 0x46,
Key_G = 0x47,
Key_H = 0x48,
Key_I = 0x49,
Key_J = 0x4a,
Key_K = 0x4b,
Key_L = 0x4c,
Key_M = 0x4d,
Key_N = 0x4e,
Key_O = 0x4f,
Key_P = 0x50,
Key_Q = 0x51,
Key_R = 0x52,
Key_S = 0x53,
Key_T = 0x54,
Key_U = 0x55,
Key_V = 0x56,
Key_W = 0x57,
Key_X = 0x58,
Key_Y = 0x59,
Key_Z = 0x5a,
Key_BracketLeft = 0x5b,
Key_Backslash = 0x5c,
Key_BracketRight = 0x5d,
Key_AsciiCircum = 0x5e,
Key_Underscore = 0x5f,
Key_QuoteLeft = 0x60,
Key_BraceLeft = 0x7b,
Key_Bar = 0x7c,
Key_BraceRight = 0x7d,
Key_AsciiTilde = 0x7e,

Key_nobreakspace = 0x0a0,
Key_exclamdown = 0x0a1,
Key_cent = 0x0a2,
Key_sterling = 0x0a3,
Key_currency = 0x0a4,
Key_yen = 0x0a5,
Key_brokenbar = 0x0a6,
Key_section = 0x0a7,
Key_diaeresis = 0x0a8,
Key_copyright = 0x0a9,
Key_ordfeminine = 0x0aa,
Key_guillemotleft = 0x0ab, 
Key_notsign = 0x0ac,
Key_hyphen = 0x0ad,
Key_registered = 0x0ae,
Key_macron = 0x0af,
Key_degree = 0x0b0,
Key_plusminus = 0x0b1,
Key_twosuperior = 0x0b2,
Key_threesuperior = 0x0b3,
Key_acute = 0x0b4,
Key_mu = 0x0b5,
Key_paragraph = 0x0b6,
Key_periodcentered = 0x0b7,
Key_cedilla = 0x0b8,
Key_onesuperior = 0x0b9,
Key_masculine = 0x0ba,
Key_guillemotright = 0x0bb, 
Key_onequarter = 0x0bc,
Key_onehalf = 0x0bd,
Key_threequarters = 0x0be,
Key_questiondown = 0x0bf,
Key_Agrave = 0x0c0,
Key_Aacute = 0x0c1,
Key_Acircumflex = 0x0c2,
Key_Atilde = 0x0c3,
Key_Adiaeresis = 0x0c4,
Key_Aring = 0x0c5,
Key_AE = 0x0c6,
Key_Ccedilla = 0x0c7,
Key_Egrave = 0x0c8,
Key_Eacute = 0x0c9,
Key_Ecircumflex = 0x0ca,
Key_Ediaeresis = 0x0cb,
Key_Igrave = 0x0cc,
Key_Iacute = 0x0cd,
Key_Icircumflex = 0x0ce,
Key_Idiaeresis = 0x0cf,
Key_ETH = 0x0d0,
Key_Ntilde = 0x0d1,
Key_Ograve = 0x0d2,
Key_Oacute = 0x0d3,
Key_Ocircumflex = 0x0d4,
Key_Otilde = 0x0d5,
Key_Odiaeresis = 0x0d6,
Key_multiply = 0x0d7,
Key_Ooblique = 0x0d8,
Key_Ugrave = 0x0d9,
Key_Uacute = 0x0da,
Key_Ucircumflex = 0x0db,
Key_Udiaeresis = 0x0dc,
Key_Yacute = 0x0dd,
Key_THORN = 0x0de,
Key_ssharp = 0x0df,

























# 775 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"
Key_division = 0x0f7,









# 785 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"
Key_ydiaeresis = 0x0ff,






Key_AltGr = 0x01001103,
Key_Multi_key = 0x01001120, 
Key_Codeinput = 0x01001137,
Key_SingleCandidate = 0x0100113c,
Key_MultipleCandidate = 0x0100113d,
Key_PreviousCandidate = 0x0100113e,


Key_Mode_switch = 0x0100117e, 



Key_Kanji = 0x01001121, 
Key_Muhenkan = 0x01001122, 

Key_Henkan = 0x01001123, 
Key_Romaji = 0x01001124, 
Key_Hiragana = 0x01001125, 
Key_Katakana = 0x01001126, 
Key_Hiragana_Katakana = 0x01001127, 
Key_Zenkaku = 0x01001128, 
Key_Hankaku = 0x01001129, 
Key_Zenkaku_Hankaku = 0x0100112a, 
Key_Touroku = 0x0100112b, 
Key_Massyo = 0x0100112c, 
Key_Kana_Lock = 0x0100112d, 
Key_Kana_Shift = 0x0100112e, 
Key_Eisu_Shift = 0x0100112f, 
Key_Eisu_toggle = 0x01001130, 









Key_Hangul = 0x01001131, 
Key_Hangul_Start = 0x01001132, 
Key_Hangul_End = 0x01001133, 
Key_Hangul_Hanja = 0x01001134, 
Key_Hangul_Jamo = 0x01001135, 
Key_Hangul_Romaja = 0x01001136, 

Key_Hangul_Jeonja = 0x01001138, 
Key_Hangul_Banja = 0x01001139, 
Key_Hangul_PreHanja = 0x0100113a, 
Key_Hangul_PostHanja = 0x0100113b, 



Key_Hangul_Special = 0x0100113f, 



Key_Dead_Grave = 0x01001250,
Key_Dead_Acute = 0x01001251,
Key_Dead_Circumflex = 0x01001252,
Key_Dead_Tilde = 0x01001253,
Key_Dead_Macron = 0x01001254,
Key_Dead_Breve = 0x01001255,
Key_Dead_Abovedot = 0x01001256,
Key_Dead_Diaeresis = 0x01001257,
Key_Dead_Abovering = 0x01001258,
Key_Dead_Doubleacute = 0x01001259,
Key_Dead_Caron = 0x0100125a,
Key_Dead_Cedilla = 0x0100125b,
Key_Dead_Ogonek = 0x0100125c,
Key_Dead_Iota = 0x0100125d,
Key_Dead_Voiced_Sound = 0x0100125e,
Key_Dead_Semivoiced_Sound = 0x0100125f,
Key_Dead_Belowdot = 0x01001260,
Key_Dead_Hook = 0x01001261,
Key_Dead_Horn = 0x01001262,



Key_Back = 0x01000061,
Key_Forward = 0x01000062,
Key_Stop = 0x01000063,
Key_Refresh = 0x01000064,

Key_VolumeDown = 0x01000070,
Key_VolumeMute = 0x01000071,
Key_VolumeUp = 0x01000072,
Key_BassBoost = 0x01000073,
Key_BassUp = 0x01000074,
Key_BassDown = 0x01000075,
Key_TrebleUp = 0x01000076,
Key_TrebleDown = 0x01000077,

Key_MediaPlay = 0x01000080,
Key_MediaStop = 0x01000081,
Key_MediaPrevious = 0x01000082,



# 890 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"
Key_MediaNext = 0x01000083,
Key_MediaRecord = 0x01000084,

Key_HomePage = 0x01000090,
Key_Favorites = 0x01000091,
Key_Search = 0x01000092,
Key_Standby = 0x01000093,
Key_OpenUrl = 0x01000094,

Key_LaunchMail = 0x010000a0,
Key_LaunchMedia = 0x010000a1,
Key_Launch0 = 0x010000a2,
Key_Launch1 = 0x010000a3,
Key_Launch2 = 0x010000a4,
Key_Launch3 = 0x010000a5,
Key_Launch4 = 0x010000a6,
Key_Launch5 = 0x010000a7,
Key_Launch6 = 0x010000a8,
Key_Launch7 = 0x010000a9,
Key_Launch8 = 0x010000aa,
Key_Launch9 = 0x010000ab,
Key_LaunchA = 0x010000ac,
Key_LaunchB = 0x010000ad,
Key_LaunchC = 0x010000ae,
Key_LaunchD = 0x010000af,
Key_LaunchE = 0x010000b0,
Key_LaunchF = 0x010000b1,

Key_MediaLast = 0x0100ffff,


Key_Select = 0x01010000,
Key_Yes = 0x01010001,
Key_No = 0x01010002,


Key_Cancel = 0x01020001,
Key_Printer = 0x01020002,
Key_Execute = 0x01020003,
Key_Sleep = 0x01020004,
Key_Play = 0x01020005, 
Key_Zoom = 0x01020006,





Key_Context1 = 0x01100000,
Key_Context2 = 0x01100001,
Key_Context3 = 0x01100002,
Key_Context4 = 0x01100003,
Key_Call = 0x01100004,
Key_Hangup = 0x01100005,
Key_Flip = 0x01100006,

Key_unknown = 0x01ffffff
};

enum ArrowType {
NoArrow,
UpArrow,
DownArrow,
LeftArrow,
RightArrow
};

enum PenStyle { 
NoPen,
SolidLine,
DashLine,
DotLine,
DashDotLine,
DashDotDotLine,
CustomDashLine

# 965 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"
, MPenStyle = 0x0f

# 967 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"
};

enum PenCapStyle { 
FlatCap = 0x00,
SquareCap = 0x10,
RoundCap = 0x20,
MPenCapStyle = 0x30
};

enum PenJoinStyle { 
MiterJoin = 0x00,
BevelJoin = 0x40,
RoundJoin = 0x80,
SvgMiterJoin = 0x100,
MPenJoinStyle = 0x1c0
};

enum BrushStyle { 
NoBrush,
SolidPattern,
Dense1Pattern,
Dense2Pattern,
Dense3Pattern,
Dense4Pattern,
Dense5Pattern,
Dense6Pattern,
Dense7Pattern,
HorPattern,
VerPattern,
CrossPattern,
BDiagPattern,
FDiagPattern,
DiagCrossPattern,
LinearGradientPattern,
RadialGradientPattern,
ConicalGradientPattern,
TexturePattern = 24



# 1007 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"
};

enum SizeMode {
AbsoluteSize,
RelativeSize
};





























































# 1074 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"
enum UIEffect {
UI_General,
UI_AnimateMenu,
UI_FadeMenu,
UI_AnimateCombo,
UI_AnimateTooltip,
UI_FadeTooltip,
UI_AnimateToolBox
};

enum CursorShape {
ArrowCursor,
UpArrowCursor,
CrossCursor,
WaitCursor,
IBeamCursor,
SizeVerCursor,
SizeHorCursor,
SizeBDiagCursor,
SizeFDiagCursor,
SizeAllCursor,
BlankCursor,
SplitVCursor,
SplitHCursor,
PointingHandCursor,
ForbiddenCursor,
WhatsThisCursor,
BusyCursor,
OpenHandCursor,
ClosedHandCursor,
LastCursor = ClosedHandCursor,
BitmapCursor = 24,
CustomCursor = 25




















# 1127 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"
};

enum TextFormat {
PlainText,
RichText,
AutoText,
LogText
};

enum AspectRatioMode {
IgnoreAspectRatio,
KeepAspectRatio,
KeepAspectRatioByExpanding





# 1145 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"
};




# 1150 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"
enum AnchorAttribute {
AnchorName,
AnchorHref
};

enum DockWidgetArea {
LeftDockWidgetArea = 0x1,
RightDockWidgetArea = 0x2,
TopDockWidgetArea = 0x4,
BottomDockWidgetArea = 0x8,

DockWidgetArea_Mask = 0xf,
AllDockWidgetAreas = DockWidgetArea_Mask,
NoDockWidgetArea = 0
};
enum DockWidgetAreaSizes {
NDockWidgetAreas = 4
};

typedef QFlags<DockWidgetArea> DockWidgetAreas;

enum ToolBarArea {
LeftToolBarArea = 0x1,
RightToolBarArea = 0x2,
TopToolBarArea = 0x4,
BottomToolBarArea = 0x8,

ToolBarArea_Mask = 0xf,
AllToolBarAreas = ToolBarArea_Mask,
NoToolBarArea = 0
};

enum ToolBarAreaSizes {
NToolBarAreas = 4
};

typedef QFlags<ToolBarArea> ToolBarAreas;























# 1210 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"
enum DateFormat {
TextDate, 
ISODate, 
SystemLocaleDate, 
LocalDate = SystemLocaleDate, 
LocaleDate, 
SystemLocaleShortDate,
SystemLocaleLongDate,
DefaultLocaleShortDate,
DefaultLocaleLongDate
};

enum TimeSpec {
LocalTime,
UTC,
OffsetFromUTC
};

enum DayOfWeek {
Monday = 1,
Tuesday = 2,
Wednesday = 3,
Thursday = 4,
Friday = 5,
Saturday = 6,
Sunday = 7
};

enum ScrollBarPolicy {
ScrollBarAsNeeded,
ScrollBarAlwaysOff,
ScrollBarAlwaysOn
};


























# 1269 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"
enum CaseSensitivity {
CaseInsensitive,
CaseSensitive
};

enum Corner {
TopLeftCorner = 0x00000,
TopRightCorner = 0x00001,
BottomLeftCorner = 0x00002,
BottomRightCorner = 0x00003






# 1285 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"
};

enum ConnectionType {
AutoConnection,
DirectConnection,
QueuedConnection,
AutoCompatConnection,
BlockingQueuedConnection
};

enum ShortcutContext {
WidgetShortcut,
WindowShortcut,
ApplicationShortcut,
WidgetWithChildrenShortcut
};

enum FillRule {
OddEvenFill,
WindingFill
};

enum MaskMode {
MaskInColor,
MaskOutColor
};

enum ClipOperation {
NoClip,
ReplaceClip,
IntersectClip,
UniteClip
};


enum ItemSelectionMode {
ContainsItemShape = 0x0,
IntersectsItemShape = 0x1,
ContainsItemBoundingRect = 0x2,
IntersectsItemBoundingRect = 0x3
};

enum TransformationMode {
FastTransformation,
SmoothTransformation
};

enum Axis {
XAxis,
YAxis,
ZAxis
};

enum FocusReason {
MouseFocusReason,
TabFocusReason,
BacktabFocusReason,
ActiveWindowFocusReason,
PopupFocusReason,
ShortcutFocusReason,
MenuBarFocusReason,
OtherFocusReason,
NoFocusReason
};

enum ContextMenuPolicy {
NoContextMenu,
DefaultContextMenu,
ActionsContextMenu,
CustomContextMenu,
PreventContextMenu
};

enum InputMethodQuery {
ImMicroFocus,
ImFont,
ImCursorPosition,
ImSurroundingText,
ImCurrentSelection
};

enum ToolButtonStyle {
ToolButtonIconOnly,
ToolButtonTextOnly,
ToolButtonTextBesideIcon,
ToolButtonTextUnderIcon
};

enum LayoutDirection {
LeftToRight,
RightToLeft
};

enum DropAction {
CopyAction = 0x1,
MoveAction = 0x2,
LinkAction = 0x4,
ActionMask = 0xff,
TargetMoveAction = 0x8002,
IgnoreAction = 0x0
};
typedef QFlags<DropAction> DropActions;

enum CheckState {
Unchecked,
PartiallyChecked,
Checked
};

enum ItemDataRole {
DisplayRole = 0,
DecorationRole = 1,
EditRole = 2,
ToolTipRole = 3,
StatusTipRole = 4,
WhatsThisRole = 5,

FontRole = 6,
TextAlignmentRole = 7,
BackgroundColorRole = 8,
BackgroundRole = 8,
TextColorRole = 9,
ForegroundRole = 9,
CheckStateRole = 10,

AccessibleTextRole = 11,
AccessibleDescriptionRole = 12,

SizeHintRole = 13,

UserRole = 32
};

enum ItemFlag {
NoItemFlags = 0,
ItemIsSelectable = 1,
ItemIsEditable = 2,
ItemIsDragEnabled = 4,
ItemIsDropEnabled = 8,
ItemIsUserCheckable = 16,
ItemIsEnabled = 32,
ItemIsTristate = 64
};
typedef QFlags<ItemFlag> ItemFlags;

enum MatchFlag {
MatchExactly = 0,
MatchContains = 1,
MatchStartsWith = 2,
MatchEndsWith = 3,
MatchRegExp = 4,
MatchWildcard = 5,
MatchFixedString = 8,
MatchCaseSensitive = 16,
MatchWrap = 32,
MatchRecursive = 64
};
typedef QFlags<MatchFlag> MatchFlags;










# 1453 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"
typedef WindowFlags WFlags;

enum WindowModality {
NonModal,
WindowModal,
ApplicationModal
};

enum TextInteractionFlag {
NoTextInteraction = 0,
TextSelectableByMouse = 1,
TextSelectableByKeyboard = 2,
LinksAccessibleByMouse = 4,
LinksAccessibleByKeyboard = 8,
TextEditable = 16,

TextEditorInteraction = TextSelectableByMouse | TextSelectableByKeyboard | TextEditable,
TextBrowserInteraction = TextSelectableByMouse | LinksAccessibleByMouse | LinksAccessibleByKeyboard
};
typedef QFlags<TextInteractionFlag> TextInteractionFlags;

enum EventPriority {
HighEventPriority = 1,
NormalEventPriority = 0,
LowEventPriority = -1
};

enum SizeHint {
MinimumSize,
PreferredSize,
MaximumSize,
MinimumDescent,
NSizeHints
};

enum WindowFrameSection {
NoSection,
LeftSection, 
TopLeftSection,
TopSection,
TopRightSection,
RightSection,
BottomRightSection,
BottomSection,
BottomLeftSection,
TitleBarArea 
};
}





# 1506 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"
inline QFlags<Qt::MouseButtons::enum_type> operator|(Qt::MouseButtons::enum_type f1, Qt::MouseButtons::enum_type f2) { return QFlags<Qt::MouseButtons::enum_type>(f1) | f2; } inline QFlags<Qt::MouseButtons::enum_type> operator|(Qt::MouseButtons::enum_type f1, QFlags<Qt::MouseButtons::enum_type> f2) { return f2 | f1; }
inline QFlags<Qt::Orientations::enum_type> operator|(Qt::Orientations::enum_type f1, Qt::Orientations::enum_type f2) { return QFlags<Qt::Orientations::enum_type>(f1) | f2; } inline QFlags<Qt::Orientations::enum_type> operator|(Qt::Orientations::enum_type f1, QFlags<Qt::Orientations::enum_type> f2) { return f2 | f1; }
inline QFlags<Qt::KeyboardModifiers::enum_type> operator|(Qt::KeyboardModifiers::enum_type f1, Qt::KeyboardModifiers::enum_type f2) { return QFlags<Qt::KeyboardModifiers::enum_type>(f1) | f2; } inline QFlags<Qt::KeyboardModifiers::enum_type> operator|(Qt::KeyboardModifiers::enum_type f1, QFlags<Qt::KeyboardModifiers::enum_type> f2) { return f2 | f1; }
inline QFlags<Qt::WindowFlags::enum_type> operator|(Qt::WindowFlags::enum_type f1, Qt::WindowFlags::enum_type f2) { return QFlags<Qt::WindowFlags::enum_type>(f1) | f2; } inline QFlags<Qt::WindowFlags::enum_type> operator|(Qt::WindowFlags::enum_type f1, QFlags<Qt::WindowFlags::enum_type> f2) { return f2 | f1; }
inline QFlags<Qt::Alignment::enum_type> operator|(Qt::Alignment::enum_type f1, Qt::Alignment::enum_type f2) { return QFlags<Qt::Alignment::enum_type>(f1) | f2; } inline QFlags<Qt::Alignment::enum_type> operator|(Qt::Alignment::enum_type f1, QFlags<Qt::Alignment::enum_type> f2) { return f2 | f1; }
inline QFlags<Qt::ImageConversionFlags::enum_type> operator|(Qt::ImageConversionFlags::enum_type f1, Qt::ImageConversionFlags::enum_type f2) { return QFlags<Qt::ImageConversionFlags::enum_type>(f1) | f2; } inline QFlags<Qt::ImageConversionFlags::enum_type> operator|(Qt::ImageConversionFlags::enum_type f1, QFlags<Qt::ImageConversionFlags::enum_type> f2) { return f2 | f1; }
inline QFlags<Qt::DockWidgetAreas::enum_type> operator|(Qt::DockWidgetAreas::enum_type f1, Qt::DockWidgetAreas::enum_type f2) { return QFlags<Qt::DockWidgetAreas::enum_type>(f1) | f2; } inline QFlags<Qt::DockWidgetAreas::enum_type> operator|(Qt::DockWidgetAreas::enum_type f1, QFlags<Qt::DockWidgetAreas::enum_type> f2) { return f2 | f1; }
inline QFlags<Qt::ToolBarAreas::enum_type> operator|(Qt::ToolBarAreas::enum_type f1, Qt::ToolBarAreas::enum_type f2) { return QFlags<Qt::ToolBarAreas::enum_type>(f1) | f2; } inline QFlags<Qt::ToolBarAreas::enum_type> operator|(Qt::ToolBarAreas::enum_type f1, QFlags<Qt::ToolBarAreas::enum_type> f2) { return f2 | f1; }
inline QFlags<Qt::WindowStates::enum_type> operator|(Qt::WindowStates::enum_type f1, Qt::WindowStates::enum_type f2) { return QFlags<Qt::WindowStates::enum_type>(f1) | f2; } inline QFlags<Qt::WindowStates::enum_type> operator|(Qt::WindowStates::enum_type f1, QFlags<Qt::WindowStates::enum_type> f2) { return f2 | f1; }
inline QFlags<Qt::DropActions::enum_type> operator|(Qt::DropActions::enum_type f1, Qt::DropActions::enum_type f2) { return QFlags<Qt::DropActions::enum_type>(f1) | f2; } inline QFlags<Qt::DropActions::enum_type> operator|(Qt::DropActions::enum_type f1, QFlags<Qt::DropActions::enum_type> f2) { return f2 | f1; }
inline QFlags<Qt::ItemFlags::enum_type> operator|(Qt::ItemFlags::enum_type f1, Qt::ItemFlags::enum_type f2) { return QFlags<Qt::ItemFlags::enum_type>(f1) | f2; } inline QFlags<Qt::ItemFlags::enum_type> operator|(Qt::ItemFlags::enum_type f1, QFlags<Qt::ItemFlags::enum_type> f2) { return f2 | f1; }
inline QFlags<Qt::MatchFlags::enum_type> operator|(Qt::MatchFlags::enum_type f1, Qt::MatchFlags::enum_type f2) { return QFlags<Qt::MatchFlags::enum_type>(f1) | f2; } inline QFlags<Qt::MatchFlags::enum_type> operator|(Qt::MatchFlags::enum_type f1, QFlags<Qt::MatchFlags::enum_type> f2) { return f2 | f1; }
inline QFlags<Qt::TextInteractionFlags::enum_type> operator|(Qt::TextInteractionFlags::enum_type f1, Qt::TextInteractionFlags::enum_type f2) { return QFlags<Qt::TextInteractionFlags::enum_type>(f1) | f2; } inline QFlags<Qt::TextInteractionFlags::enum_type> operator|(Qt::TextInteractionFlags::enum_type f1, QFlags<Qt::TextInteractionFlags::enum_type> f2) { return f2 | f1; }

typedef bool (*qInternalCallback)(void **);

class  QInternal {
public:
enum PaintDeviceFlags {
UnknownDevice = 0x00,
Widget = 0x01,
Pixmap = 0x02,
Image = 0x03,
Printer = 0x04,
Picture = 0x05,
Pbuffer = 0x06, 
FramebufferObject = 0x07, 
CustomRaster = 0x08,
MacQuartz = 0x09
};
enum RelayoutType {
RelayoutNormal,
RelayoutDragging,
RelayoutDropped
};


enum Callback {
ConnectCallback,
DisconnectCallback,
AdoptCurrentThread,
EventNotifyCallback,
LastCallback
};

enum InternalFunction {
CreateThreadForAdoption,
RefAdoptedThread,
DerefAdoptedThread,
SetCurrentThreadToMainThread,
SetQObjectSender,
GetQObjectSender,
ResetQObjectSender,
LastInternalFunction
};

enum DockPosition {
LeftDock,
RightDock,
TopDock,
BottomDock,
DockCount
};

static bool registerCallback(Callback, qInternalCallback);
static bool unregisterCallback(Callback, qInternalCallback);

static bool activateCallbacks(Callback, void **);
static bool callFunction(InternalFunction func, void **);
};









# 1585 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"





# 50 "/home/eagle/qt-copy/include/QtCore/qstring.h"




























# 78 "/home/eagle/qt-copy/include/QtCore/qstring.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class QCharRef;
class QRegExp;
class QStringList;
class QTextCodec;
class QLatin1String;
class QStringRef;
template <typename T> class QVector;

class  QString
{
public:
inline QString();
QString(const QChar *unicode, int size);
QString(QChar c);
QString(int size, QChar c);
inline QString(const QLatin1String &latin1);
inline QString(const QString &);
inline ~QString();
QString &operator=(QChar c);
QString &operator=(const QString &);
inline QString &operator=(const QLatin1String &);

inline int size() const { return d->size; }
inline int count() const { return d->size; }
inline int length() const;
inline bool isEmpty() const;
void resize(int size);

QString &fill(QChar c, int size = -1);
void truncate(int pos);
void chop(int n);

int capacity() const;
inline void reserve(int size);
inline void squeeze() { if (d->size < d->alloc) realloc(); d->capacity = 0;}

inline const QChar *unicode() const;
inline QChar *data();
inline const QChar *data() const;
inline const QChar *constData() const;

inline void detach();
inline bool isDetached() const;
void clear();

inline const QChar at(int i) const;
const QChar operator[](int i) const;
QCharRef operator[](int i);
const QChar operator[](uint i) const;
QCharRef operator[](uint i);

QString arg(qlonglong a, int fieldwidth=0, int base=10,
const QChar &fillChar = QLatin1Char(' ')) const ;
QString arg(qulonglong a, int fieldwidth=0, int base=10,
const QChar &fillChar = QLatin1Char(' ')) const ;
QString arg(long a, int fieldwidth=0, int base=10,
const QChar &fillChar = QLatin1Char(' ')) const ;
QString arg(ulong a, int fieldwidth=0, int base=10,
const QChar &fillChar = QLatin1Char(' ')) const ;
QString arg(int a, int fieldWidth = 0, int base = 10,
const QChar &fillChar = QLatin1Char(' ')) const ;
QString arg(uint a, int fieldWidth = 0, int base = 10,
const QChar &fillChar = QLatin1Char(' ')) const ;
QString arg(short a, int fieldWidth = 0, int base = 10,
const QChar &fillChar = QLatin1Char(' ')) const ;
QString arg(ushort a, int fieldWidth = 0, int base = 10,
const QChar &fillChar = QLatin1Char(' ')) const ;
QString arg(double a, int fieldWidth = 0, char fmt = 'g', int prec = -1,
const QChar &fillChar = QLatin1Char(' ')) const ;
QString arg(char a, int fieldWidth = 0,
const QChar &fillChar = QLatin1Char(' ')) const ;
QString arg(QChar a, int fieldWidth = 0,
const QChar &fillChar = QLatin1Char(' ')) const ;
QString arg(const QString &a, int fieldWidth = 0,
const QChar &fillChar = QLatin1Char(' ')) const ;
QString arg(const QString &a1, const QString &a2) const ;
QString arg(const QString &a1, const QString &a2, const QString &a3) const ;
QString arg(const QString &a1, const QString &a2, const QString &a3,
const QString &a4) const ;
QString arg(const QString &a1, const QString &a2, const QString &a3,
const QString &a4, const QString &a5) const ;
QString arg(const QString &a1, const QString &a2, const QString &a3,
const QString &a4, const QString &a5, const QString &a6) const ;
QString arg(const QString &a1, const QString &a2, const QString &a3,
const QString &a4, const QString &a5, const QString &a6,
const QString &a7) const ;
QString arg(const QString &a1, const QString &a2, const QString &a3,
const QString &a4, const QString &a5, const QString &a6,
const QString &a7, const QString &a8) const ;
QString arg(const QString &a1, const QString &a2, const QString &a3,
const QString &a4, const QString &a5, const QString &a6,
const QString &a7, const QString &a8, const QString &a9) const ;

QString &vsprintf(const char *format, va_list ap);
QString &sprintf(const char *format, ...)



# 182 "/home/eagle/qt-copy/include/QtCore/qstring.h"
;

int indexOf(QChar c, int from = 0, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
int indexOf(const QString &s, int from = 0, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
int lastIndexOf(QChar c, int from = -1, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
int lastIndexOf(const QString &s, int from = -1, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;

inline QBool contains(QChar c, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
inline QBool contains(const QString &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
int count(QChar c, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
int count(const QString &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;


# 195 "/home/eagle/qt-copy/include/QtCore/qstring.h"
int indexOf(const QRegExp &, int from = 0) const;
int lastIndexOf(const QRegExp &, int from = -1) const;
inline QBool contains(const QRegExp &rx) const { return QBool(indexOf(rx) != -1); }
int count(const QRegExp &) const;


# 201 "/home/eagle/qt-copy/include/QtCore/qstring.h"
enum SectionFlag {
SectionDefault = 0x00,
SectionSkipEmpty = 0x01,
SectionIncludeLeadingSep = 0x02,
SectionIncludeTrailingSep = 0x04,
SectionCaseInsensitiveSeps = 0x08
};
typedef QFlags<SectionFlag> SectionFlags;

QString section(QChar sep, int start, int end = -1, SectionFlags flags = SectionDefault) const;
QString section(const QString &in_sep, int start, int end = -1, SectionFlags flags = SectionDefault) const;

# 213 "/home/eagle/qt-copy/include/QtCore/qstring.h"
QString section(const QRegExp &reg, int start, int end = -1, SectionFlags flags = SectionDefault) const;


# 216 "/home/eagle/qt-copy/include/QtCore/qstring.h"
QString left(int n) const ;
QString right(int n) const ;
QString mid(int position, int n = -1) const ;
QStringRef leftRef(int n) const ;
QStringRef rightRef(int n) const ;
QStringRef midRef(int position, int n = -1) const ;

bool startsWith(const QString &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
bool startsWith(const QLatin1String &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
bool startsWith(const QChar &c, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
bool endsWith(const QString &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
bool endsWith(const QLatin1String &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
bool endsWith(const QChar &c, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;

QString leftJustified(int width, QChar fill = QLatin1Char(' '), bool trunc = false) const ;
QString rightJustified(int width, QChar fill = QLatin1Char(' '), bool trunc = false) const ;

QString toLower() const ;
QString toUpper() const ;
QString toCaseFolded() const ;

QString trimmed() const ;
QString simplified() const ;

QString &insert(int i, QChar c);
QString &insert(int i, const QChar *uc, int len);
inline QString &insert(int i, const QString &s) { return insert(i, s.constData(), s.length()); }
QString &insert(int i, const QLatin1String &s);
QString &append(QChar c);
QString &append(const QString &s);
QString &append(const QStringRef &s);
QString &append(const QLatin1String &s);
inline QString &prepend(QChar c) { return insert(0, c); }
inline QString &prepend(const QString &s) { return insert(0, s); }
inline QString &prepend(const QLatin1String &s) { return insert(0, s); }

inline QString &operator+=(QChar c) {
if (d->ref != 1 || d->size + 1 > d->alloc)
realloc(grow(d->size + 1));
d->data[d->size++] = c.unicode();
d->data[d->size] = '\0';
return *this;
}

inline QString &operator+=(QChar::SpecialCharacter c) { return append(QChar(c)); }
inline QString &operator+=(const QString &s) { return append(s); }
inline QString &operator+=(const QStringRef &s) { return append(s); }
inline QString &operator+=(const QLatin1String &s) { return append(s); }

QString &remove(int i, int len);
QString &remove(QChar c, Qt::CaseSensitivity cs = Qt::CaseSensitive);
QString &remove(const QString &s, Qt::CaseSensitivity cs = Qt::CaseSensitive);
QString &replace(int i, int len, QChar after);
QString &replace(int i, int len, const QChar *s, int slen);
QString &replace(int i, int len, const QString &after);
QString &replace(QChar before, QChar after, Qt::CaseSensitivity cs = Qt::CaseSensitive);
QString &replace(QChar c, const QString &after, Qt::CaseSensitivity cs = Qt::CaseSensitive);
QString &replace(const QString &before, const QString &after,
Qt::CaseSensitivity cs = Qt::CaseSensitive);

# 276 "/home/eagle/qt-copy/include/QtCore/qstring.h"
QString &replace(const QRegExp &rx, const QString &after);
inline QString &remove(const QRegExp &rx)
{ return replace(rx, QString()); }


# 281 "/home/eagle/qt-copy/include/QtCore/qstring.h"
enum SplitBehavior { KeepEmptyParts, SkipEmptyParts };

QStringList split(const QString &sep, SplitBehavior behavior = KeepEmptyParts,
Qt::CaseSensitivity cs = Qt::CaseSensitive) const ;
QStringList split(const QChar &sep, SplitBehavior behavior = KeepEmptyParts,
Qt::CaseSensitivity cs = Qt::CaseSensitive) const ;

# 288 "/home/eagle/qt-copy/include/QtCore/qstring.h"
QStringList split(const QRegExp &sep, SplitBehavior behavior = KeepEmptyParts) const ;


# 291 "/home/eagle/qt-copy/include/QtCore/qstring.h"
enum NormalizationForm {
NormalizationForm_D,
NormalizationForm_C,
NormalizationForm_KD,
NormalizationForm_KC
};
QString normalized(NormalizationForm mode) const ;
QString normalized(NormalizationForm mode, QChar::UnicodeVersion version) const ;

const ushort *utf16() const;

QByteArray toAscii() const ;
QByteArray toLatin1() const ;
QByteArray toUtf8() const ;
QByteArray toLocal8Bit() const ;
QVector<uint> toUcs4() const ;

static QString fromAscii(const char *, int size = -1);
static QString fromLatin1(const char *, int size = -1);
static QString fromUtf8(const char *, int size = -1);
static QString fromLocal8Bit(const char *, int size = -1);
static QString fromUtf16(const ushort *, int size = -1);
static QString fromUcs4(const uint *, int size = -1);
static QString fromRawData(const QChar *, int size);

int toWCharArray(wchar_t *array) const;
static QString fromWCharArray(const wchar_t *, int size = -1);

QString &setUnicode(const QChar *unicode, int size);
inline QString &setUtf16(const ushort *utf16, int size);


int compare(const QString &s) const;
int compare(const QString &s, Qt::CaseSensitivity cs) const;

int compare(const QLatin1String &other, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;


static inline int compare(const QString &s1, const QString &s2)
{ return s1.compare(s2); }
static inline int compare(const QString &s1, const QString &s2, Qt::CaseSensitivity cs)
{ return s1.compare(s2, cs); }

static inline int compare(const QString& s1, const QLatin1String &s2,
Qt::CaseSensitivity cs = Qt::CaseSensitive)
{ return s1.compare(s2, cs); }
static inline int compare(const QLatin1String& s1, const QString &s2,
Qt::CaseSensitivity cs = Qt::CaseSensitive)
{ return -s2.compare(s1, cs); }

int localeAwareCompare(const QString& s) const;
static int localeAwareCompare(const QString& s1, const QString& s2)
{ return s1.localeAwareCompare(s2); }

short toShort(bool *ok=0, int base=10) const;
ushort toUShort(bool *ok=0, int base=10) const;
int toInt(bool *ok=0, int base=10) const;
uint toUInt(bool *ok=0, int base=10) const;
long toLong(bool *ok=0, int base=10) const;
ulong toULong(bool *ok=0, int base=10) const;
qlonglong toLongLong(bool *ok=0, int base=10) const;
qulonglong toULongLong(bool *ok=0, int base=10) const;
float toFloat(bool *ok=0) const;
double toDouble(bool *ok=0) const;

QString &setNum(short, int base=10);
QString &setNum(ushort, int base=10);
QString &setNum(int, int base=10);
QString &setNum(uint, int base=10);
QString &setNum(long, int base=10);
QString &setNum(ulong, int base=10);
QString &setNum(qlonglong, int base=10);
QString &setNum(qulonglong, int base=10);
QString &setNum(float, char f='g', int prec=6);
QString &setNum(double, char f='g', int prec=6);

static QString number(int, int base=10);
static QString number(uint, int base=10);
static QString number(long, int base=10);
static QString number(ulong, int base=10);
static QString number(qlonglong, int base=10);
static QString number(qulonglong, int base=10);
static QString number(double, char f='g', int prec=6);

bool operator==(const QString &s) const;
bool operator<(const QString &s) const;
inline bool operator>(const QString &s) const { return s < *this; }
inline bool operator!=(const QString &s) const { return !operator==(s); }
inline bool operator<=(const QString &s) const { return !operator>(s); }
inline bool operator>=(const QString &s) const { return !operator<(s); }

bool operator==(const QLatin1String &s) const;
bool operator<(const QLatin1String &s) const;
bool operator>(const QLatin1String &s) const;
inline bool operator!=(const QLatin1String &s) const { return !operator==(s); }
inline bool operator<=(const QLatin1String &s) const { return !operator>(s); }
inline bool operator>=(const QLatin1String &s) const { return !operator<(s); }



# 391 "/home/eagle/qt-copy/include/QtCore/qstring.h"
inline  QString(const char *ch) : d(fromAscii_helper(ch))
{}
inline  QString(const QByteArray &a)
: d(fromAscii_helper(a.constData(), qstrnlen(a.constData(), a.size())))
{}
inline  QString &operator=(const char *ch)
{ return (*this = fromAscii(ch)); }
inline  QString &operator=(const QByteArray &a)
{ return (*this = fromAscii(a.constData(), qstrnlen(a.constData(), a.size()))); }
inline  QString &operator=(char c)
{ return (*this = QChar::fromAscii(c)); }


inline  QString &prepend(const char *s)
{ return prepend(QString::fromAscii(s)); }
inline  QString &prepend(const QByteArray &s)
{ return prepend(QString::fromAscii(s.constData(), qstrnlen(s.constData(), s.size()))); }
inline  QString &append(const char *s)
{ return append(QString::fromAscii(s)); }
inline  QString &append(const QByteArray &s)
{ return append(QString::fromAscii(s.constData(), qstrnlen(s.constData(), s.size()))); }
inline  QString &operator+=(const char *s)
{ return append(QString::fromAscii(s)); }
inline  QString &operator+=(const QByteArray &s)
{ return append(QString::fromAscii(s.constData(), qstrnlen(s.constData(), s.size()))); }
inline  QString &operator+=(char c)
{ return append(QChar::fromAscii(c)); }

inline  bool operator==(const char *s) const;
inline  bool operator!=(const char *s) const;
inline  bool operator<(const char *s) const;
inline  bool operator<=(const char *s2) const;
inline  bool operator>(const char *s2) const;
inline  bool operator>=(const char *s2) const;

inline  bool operator==(const QByteArray &s) const;
inline  bool operator!=(const QByteArray &s) const;
inline  bool operator<(const QByteArray &s) const
{ return *this < QString::fromAscii(s.constData(), s.size()); }
inline  bool operator>(const QByteArray &s) const
{ return *this > QString::fromAscii(s.constData(), s.size()); }
inline  bool operator<=(const QByteArray &s) const
{ return *this <= QString::fromAscii(s.constData(), s.size()); }
inline  bool operator>=(const QByteArray &s) const
{ return *this >= QString::fromAscii(s.constData(), s.size()); }


# 438 "/home/eagle/qt-copy/include/QtCore/qstring.h"
typedef QChar *iterator;
typedef const QChar *const_iterator;
typedef iterator Iterator;
typedef const_iterator ConstIterator;
iterator begin();
const_iterator begin() const;
const_iterator constBegin() const;
iterator end();
const_iterator end() const;
const_iterator constEnd() const;


inline void push_back(QChar c) { append(c); }
inline void push_back(const QString &s) { append(s); }
inline void push_front(QChar c) { prepend(c); }
inline void push_front(const QString &s) { prepend(s); }















# 469 "/home/eagle/qt-copy/include/QtCore/qstring.h"

struct Null { };
static const Null null;
inline QString(const Null &): d(&shared_null) { d->ref.ref(); }
inline QString &operator=(const Null &) { *this = QString(); return *this; }
inline bool isNull() const { return d == &shared_null; }














































































# 553 "/home/eagle/qt-copy/include/QtCore/qstring.h"
bool isSimpleText() const { if (!d->clean) updateProperties(); return d->simpletext; }
bool isRightToLeft() const { if (!d->clean) updateProperties(); return d->righttoleft; }

private:









# 566 "/home/eagle/qt-copy/include/QtCore/qstring.h"
struct Data {
QBasicAtomicInt ref;
int alloc, size;
ushort *data;
ushort clean : 1;
ushort simpletext : 1;
ushort righttoleft : 1;
ushort asciiCache : 1;
ushort capacity : 1;
ushort reserved : 11;
ushort array[1];
};
static Data shared_null;
static Data shared_empty;
Data *d;
QString(Data *dd, int ) : d(dd) {}

# 583 "/home/eagle/qt-copy/include/QtCore/qstring.h"
static QTextCodec *codecForCStrings;

# 585 "/home/eagle/qt-copy/include/QtCore/qstring.h"
static int grow(int);
static void free(Data *);
void realloc();
void realloc(int alloc);
void expand(int i);
void updateProperties() const;
QString multiArg(int numArgs, const QString **args) const;
static Data *fromLatin1_helper(const char *str, int size = -1);
static Data *fromAscii_helper(const char *str, int size = -1);
friend class QCharRef;
friend class QTextCodec;
friend class QStringRef;
friend inline bool qStringComparisonHelper(const QString &s1, const char *s2);
friend inline bool qStringComparisonHelper(const QStringRef &s1, const char *s2);
public:
typedef Data * DataPtr;
inline DataPtr &data_ptr() { return d; }
};


class  QLatin1String
{
public:
inline explicit QLatin1String(const char *s) : chars(s) {}
inline QLatin1String &operator=(const QLatin1String &other)
{ chars = other.chars; return *this; }

inline const char *latin1() const { return chars; }

inline bool operator==(const QString &s) const
{ return s == *this; }
inline bool operator!=(const QString &s) const
{ return s != *this; }
inline bool operator>(const QString &s) const
{ return s < *this; }
inline bool operator<(const QString &s) const
{ return s > *this; }
inline bool operator>=(const QString &s) const
{ return s <= *this; }
inline bool operator<=(const QString &s) const
{ return s >= *this; }

inline  bool operator==(const char *s) const
{ return QString::fromAscii(s) == *this; }
inline  bool operator!=(const char *s) const
{ return QString::fromAscii(s) != *this; }
inline  bool operator<(const char *s) const
{ return QString::fromAscii(s) > *this; }
inline  bool operator>(const char *s) const
{ return QString::fromAscii(s) < *this; }
inline  bool operator<=(const char *s) const
{ return QString::fromAscii(s) >= *this; }
inline  bool operator>=(const char *s) const
{ return QString::fromAscii(s) <= *this; }
private:
const char *chars;
};



inline QString::QString(const QLatin1String &aLatin1) : d(fromLatin1_helper(aLatin1.latin1()))
{ }
inline int QString::length() const
{ return d->size; }
inline const QChar QString::at(int i) const
{ qt_noop(); return d->data[i]; }
inline const QChar QString::operator[](int i) const
{ qt_noop(); return d->data[i]; }
inline const QChar QString::operator[](uint i) const
{ qt_noop(); return d->data[i]; }
inline bool QString::isEmpty() const
{ return d->size == 0; }
inline const QChar *QString::unicode() const
{ return reinterpret_cast<const QChar*>(d->data); }
inline const QChar *QString::data() const
{ return reinterpret_cast<const QChar*>(d->data); }
inline QChar *QString::data()
{ detach(); return reinterpret_cast<QChar*>(d->data); }
inline const QChar *QString::constData() const
{ return reinterpret_cast<const QChar*>(d->data); }
inline void QString::detach()
{ if (d->ref != 1 || d->data != d->array) realloc(); }
inline bool QString::isDetached() const
{ return d->ref == 1; }
inline QString &QString::operator=(const QLatin1String &s)
{
*this = fromLatin1(s.latin1());
return *this;
}
inline void QString::clear()
{ if (!isNull()) *this = QString(); }
inline QString::QString(const QString &other) : d(other.d)
{ qt_noop(); d->ref.ref(); }
inline int QString::capacity() const
{ return d->alloc; }
inline QString &QString::setNum(short n, int base)
{ return setNum(qlonglong(n), base); }
inline QString &QString::setNum(ushort n, int base)
{ return setNum(qulonglong(n), base); }
inline QString &QString::setNum(int n, int base)
{ return setNum(qlonglong(n), base); }
inline QString &QString::setNum(uint n, int base)
{ return setNum(qulonglong(n), base); }
inline QString &QString::setNum(long n, int base)
{ return setNum(qlonglong(n), base); }
inline QString &QString::setNum(ulong n, int base)
{ return setNum(qulonglong(n), base); }
inline QString &QString::setNum(float n, char f, int prec)
{ return setNum(double(n),f,prec); }
inline QString QString::arg(int a, int fieldWidth, int base, const QChar &fillChar) const
{ return arg(qlonglong(a), fieldWidth, base, fillChar); }
inline QString QString::arg(uint a, int fieldWidth, int base, const QChar &fillChar) const
{ return arg(qulonglong(a), fieldWidth, base, fillChar); }
inline QString QString::arg(long a, int fieldWidth, int base, const QChar &fillChar) const
{ return arg(qlonglong(a), fieldWidth, base, fillChar); }
inline QString QString::arg(ulong a, int fieldWidth, int base, const QChar &fillChar) const
{ return arg(qulonglong(a), fieldWidth, base, fillChar); }
inline QString QString::arg(short a, int fieldWidth, int base, const QChar &fillChar) const
{ return arg(qlonglong(a), fieldWidth, base, fillChar); }
inline QString QString::arg(ushort a, int fieldWidth, int base, const QChar &fillChar) const
{ return arg(qulonglong(a), fieldWidth, base, fillChar); }
inline QString QString::arg(const QString &a1, const QString &a2) const
{ const QString *args[2] = { &a1, &a2 }; return multiArg(2, args); }
inline QString QString::arg(const QString &a1, const QString &a2, const QString &a3) const
{ const QString *args[3] = { &a1, &a2, &a3 }; return multiArg(3, args); }
inline QString QString::arg(const QString &a1, const QString &a2, const QString &a3,
const QString &a4) const
{ const QString *args[4] = { &a1, &a2, &a3, &a4 }; return multiArg(4, args); }
inline QString QString::arg(const QString &a1, const QString &a2, const QString &a3,
const QString &a4, const QString &a5) const
{ const QString *args[5] = { &a1, &a2, &a3, &a4, &a5 }; return multiArg(5, args); }
inline QString QString::arg(const QString &a1, const QString &a2, const QString &a3,
const QString &a4, const QString &a5, const QString &a6) const
{ const QString *args[6] = { &a1, &a2, &a3, &a4, &a5, &a6 }; return multiArg(6, args); }
inline QString QString::arg(const QString &a1, const QString &a2, const QString &a3,
const QString &a4, const QString &a5, const QString &a6,
const QString &a7) const
{ const QString *args[7] = { &a1, &a2, &a3, &a4, &a5, &a6, &a7 }; return multiArg(7, args); }
inline QString QString::arg(const QString &a1, const QString &a2, const QString &a3,
const QString &a4, const QString &a5, const QString &a6,
const QString &a7, const QString &a8) const
{ const QString *args[8] = { &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8 }; return multiArg(8, args); }
inline QString QString::arg(const QString &a1, const QString &a2, const QString &a3,
const QString &a4, const QString &a5, const QString &a6,
const QString &a7, const QString &a8, const QString &a9) const
{ const QString *args[9] = { &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9 }; return multiArg(9, args); }

inline QString QString::section(QChar asep, int astart, int aend, SectionFlags aflags) const
{ return section(QString(asep), astart, aend, aflags); }


class  QCharRef {
QString &s;
int i;
inline QCharRef(QString &str, int idx)
: s(str),i(idx) {}
friend class QString;
public:




inline operator QChar() const
{ return i < s.d->size ? s.d->data[i] : 0; }
inline QCharRef &operator=(const QChar &c)
{ if (s.d->ref != 1 || i >= s.d->size) s.expand(i);
s.d->data[i] = c.unicode(); return *this; }



# 755 "/home/eagle/qt-copy/include/QtCore/qstring.h"
inline  QCharRef &operator=(char c)
{ return operator=(QChar::fromAscii(c)); }
inline  QCharRef &operator=(uchar c)
{ return operator=(QChar::fromAscii(c)); }

# 760 "/home/eagle/qt-copy/include/QtCore/qstring.h"
inline QCharRef &operator=(const QCharRef &c) { return operator=(QChar(c)); }
inline QCharRef &operator=(ushort rc) { return operator=(QChar(rc)); }
inline QCharRef &operator=(short rc) { return operator=(QChar(rc)); }
inline QCharRef &operator=(uint rc) { return operator=(QChar(rc)); }
inline QCharRef &operator=(int rc) { return operator=(QChar(rc)); }


inline bool isNull() const { return QChar(*this).isNull(); }
inline bool isPrint() const { return QChar(*this).isPrint(); }
inline bool isPunct() const { return QChar(*this).isPunct(); }
inline bool isSpace() const { return QChar(*this).isSpace(); }
inline bool isMark() const { return QChar(*this).isMark(); }
inline bool isLetter() const { return QChar(*this).isLetter(); }
inline bool isNumber() const { return QChar(*this).isNumber(); }
inline bool isLetterOrNumber() { return QChar(*this).isLetterOrNumber(); }
inline bool isDigit() const { return QChar(*this).isDigit(); }
inline bool isLower() const { return QChar(*this).isLower(); }
inline bool isUpper() const { return QChar(*this).isUpper(); }
inline bool isTitleCase() const { return QChar(*this).isTitleCase(); }

inline int digitValue() const { return QChar(*this).digitValue(); }
QChar toLower() const { return QChar(*this).toLower(); }
QChar toUpper() const { return QChar(*this).toUpper(); }
QChar toTitleCase () const { return QChar(*this).toTitleCase(); }

QChar::Category category() const { return QChar(*this).category(); }
QChar::Direction direction() const { return QChar(*this).direction(); }
QChar::Joining joining() const { return QChar(*this).joining(); }
bool hasMirrored() const { return QChar(*this).hasMirrored(); }
QChar mirroredChar() const { return QChar(*this).mirroredChar(); }
QString decomposition() const { return QChar(*this).decomposition(); }
QChar::Decomposition decompositionTag() const { return QChar(*this).decompositionTag(); }
uchar combiningClass() const { return QChar(*this).combiningClass(); }

QChar::UnicodeVersion unicodeVersion() const { return QChar(*this).unicodeVersion(); }

inline uchar cell() const { return QChar(*this).cell(); }
inline uchar row() const { return QChar(*this).row(); }
inline void setCell(uchar cell);
inline void setRow(uchar row);






# 806 "/home/eagle/qt-copy/include/QtCore/qstring.h"
char toAscii() const { return QChar(*this).toAscii(); }
char toLatin1() const { return QChar(*this).toLatin1(); }
ushort unicode() const { return QChar(*this).unicode(); }

# 810 "/home/eagle/qt-copy/include/QtCore/qstring.h"
ushort& unicode() { return s.data()[i].unicode(); }













# 824 "/home/eagle/qt-copy/include/QtCore/qstring.h"
};

inline void QCharRef::setRow(uchar arow) { QChar(*this).setRow(arow); }
inline void QCharRef::setCell(uchar acell) { QChar(*this).setCell(acell); }


inline QString::QString() : d(&shared_null) { d->ref.ref(); }
inline QString::~QString() { if (!d->ref.deref()) free(d); }
inline void QString::reserve(int asize) { if (d->ref != 1 || asize > d->alloc) realloc(asize); d->capacity = 1;}
inline QString &QString::setUtf16(const ushort *autf16, int asize)
{ return setUnicode(reinterpret_cast<const QChar *>(autf16), asize); }
inline QCharRef QString::operator[](int i)
{ qt_noop(); return QCharRef(*this, i); }
inline QCharRef QString::operator[](uint i)
{ return QCharRef(*this, i); }
inline QString::iterator QString::begin()
{ detach(); return reinterpret_cast<QChar*>(d->data); }
inline QString::const_iterator QString::begin() const
{ return reinterpret_cast<const QChar*>(d->data); }
inline QString::const_iterator QString::constBegin() const
{ return reinterpret_cast<const QChar*>(d->data); }
inline QString::iterator QString::end()
{ detach(); return reinterpret_cast<QChar*>(d->data + d->size); }
inline QString::const_iterator QString::end() const
{ return reinterpret_cast<const QChar*>(d->data + d->size); }
inline QString::const_iterator QString::constEnd() const
{ return reinterpret_cast<const QChar*>(d->data + d->size); }
inline QBool QString::contains(const QString &s, Qt::CaseSensitivity cs) const
{ return QBool(indexOf(s, 0, cs) != -1); }
inline QBool QString::contains(QChar c, Qt::CaseSensitivity cs) const
{ return QBool(indexOf(c, 0, cs) != -1); }


inline bool operator==(QString::Null, QString::Null) { return true; }
inline bool operator==(QString::Null, const QString &s) { return s.isNull(); }
inline bool operator==(const QString &s, QString::Null) { return s.isNull(); }
inline bool operator!=(QString::Null, QString::Null) { return false; }
inline bool operator!=(QString::Null, const QString &s) { return !s.isNull(); }
inline bool operator!=(const QString &s, QString::Null) { return !s.isNull(); }


# 865 "/home/eagle/qt-copy/include/QtCore/qstring.h"
inline bool qStringComparisonHelper(const QString &s1, const char *s2)
{

# 868 "/home/eagle/qt-copy/include/QtCore/qstring.h"
if (QString::codecForCStrings) return (s1 == QString::fromAscii(s2));

# 870 "/home/eagle/qt-copy/include/QtCore/qstring.h"
return (s1 == QLatin1String(s2));
}
inline bool QString::operator==(const char *s) const
{ return qStringComparisonHelper(*this, s); }
inline bool QString::operator!=(const char *s) const
{ return !qStringComparisonHelper(*this, s); }
inline bool QString::operator<(const char *s) const
{ return *this < QString::fromAscii(s); }
inline bool QString::operator>(const char *s) const
{ return *this > QString::fromAscii(s); }
inline bool QString::operator<=(const char *s) const
{ return *this <= QString::fromAscii(s); }
inline bool QString::operator>=(const char *s) const
{ return *this >= QString::fromAscii(s); }

inline  bool operator==(const char *s1, const QString &s2)
{ return qStringComparisonHelper(s2, s1); }
inline  bool operator!=(const char *s1, const QString &s2)
{ return !qStringComparisonHelper(s2, s1); }
inline  bool operator<(const char *s1, const QString &s2)
{ return (QString::fromAscii(s1) < s2); }
inline  bool operator>(const char *s1, const QString &s2)
{ return (QString::fromAscii(s1) > s2); }
inline  bool operator<=(const char *s1, const QString &s2)
{ return (QString::fromAscii(s1) <= s2); }
inline  bool operator>=(const char *s1, const QString &s2)
{ return (QString::fromAscii(s1) >= s2); }

inline  bool operator==(const char *s1, const QLatin1String &s2)
{ return QString::fromAscii(s1) == s2; }
inline  bool operator!=(const char *s1, const QLatin1String &s2)
{ return QString::fromAscii(s1) != s2; }
inline  bool operator<(const char *s1, const QLatin1String &s2)
{ return (QString::fromAscii(s1) < s2); }
inline  bool operator>(const char *s1, const QLatin1String &s2)
{ return (QString::fromAscii(s1) > s2); }
inline  bool operator<=(const char *s1, const QLatin1String &s2)
{ return (QString::fromAscii(s1) <= s2); }
inline  bool operator>=(const char *s1, const QLatin1String &s2)
{ return (QString::fromAscii(s1) >= s2); }

inline bool operator==(const QLatin1String &s1, const QLatin1String &s2)
{ return (qstrcmp(s1.latin1(), s2.latin1()) == 0); }
inline bool operator!=(const QLatin1String &s1, const QLatin1String &s2)
{ return (qstrcmp(s1.latin1(), s2.latin1()) != 0); }
inline bool operator<(const QLatin1String &s1, const QLatin1String &s2)
{ return (qstrcmp(s1.latin1(), s2.latin1()) < 0); }
inline bool operator<=(const QLatin1String &s1, const QLatin1String &s2)
{ return (qstrcmp(s1.latin1(), s2.latin1()) <= 0); }
inline bool operator>(const QLatin1String &s1, const QLatin1String &s2)
{ return (qstrcmp(s1.latin1(), s2.latin1()) > 0); }
inline bool operator>=(const QLatin1String &s1, const QLatin1String &s2)
{ return (qstrcmp(s1.latin1(), s2.latin1()) >= 0); }


inline bool QString::operator==(const QByteArray &s) const
{ return qStringComparisonHelper(*this, s.constData()); }
inline bool QString::operator!=(const QByteArray &s) const
{ return !qStringComparisonHelper(*this, s.constData()); }

inline bool QByteArray::operator==(const QString &s) const
{ return qStringComparisonHelper(s, constData()); }
inline bool QByteArray::operator!=(const QString &s) const
{ return !qStringComparisonHelper(s, constData()); }
inline bool QByteArray::operator<(const QString &s) const
{ return QString::fromAscii(constData(), size()) < s; }
inline bool QByteArray::operator>(const QString &s) const
{ return QString::fromAscii(constData(), size()) > s; }
inline bool QByteArray::operator<=(const QString &s) const
{ return QString::fromAscii(constData(), size()) <= s; }
inline bool QByteArray::operator>=(const QString &s) const
{ return QString::fromAscii(constData(), size()) >= s; }



# 945 "/home/eagle/qt-copy/include/QtCore/qstring.h"
inline QByteArray &QByteArray::append(const QString &s)
{ return append(s.toAscii()); }
inline QByteArray &QByteArray::insert(int i, const QString &s)
{ return insert(i, s.toAscii()); }
inline QByteArray &QByteArray::replace(char c, const QString &after)
{ return replace(c, after.toAscii()); }
inline QByteArray &QByteArray::replace(const QString &before, const char *after)
{ return replace(before.toAscii(), after); }
inline QByteArray &QByteArray::replace(const QString &before, const QByteArray &after)
{ return replace(before.toAscii(), after); }
inline QByteArray &QByteArray::operator+=(const QString &s)
{ return operator+=(s.toAscii()); }
inline int QByteArray::indexOf(const QString &s, int from) const
{ return indexOf(s.toAscii(), from); }
inline int QByteArray::lastIndexOf(const QString &s, int from) const
{ return lastIndexOf(s.toAscii(), from); }








# 969 "/home/eagle/qt-copy/include/QtCore/qstring.h"
inline const QString operator+(const QString &s1, const QString &s2)
{ QString t(s1); t += s2; return t; }
inline const QString operator+(const QString &s1, QChar s2)
{ QString t(s1); t += s2; return t; }
inline const QString operator+(QChar s1, const QString &s2)
{ QString t(s1); t += s2; return t; }

# 976 "/home/eagle/qt-copy/include/QtCore/qstring.h"
inline  const QString operator+(const QString &s1, const char *s2)
{ QString t(s1); t += QString::fromAscii(s2); return t; }
inline  const QString operator+(const char *s1, const QString &s2)
{ QString t = QString::fromAscii(s1); t += s2; return t; }
inline  const QString operator+(char c, const QString &s)
{ QString t = s; t.prepend(QChar::fromAscii(c)); return t; }
inline  const QString operator+(const QString &s, char c)
{ QString t = s; t += QChar::fromAscii(c); return t; }
inline  const QString operator+(const QByteArray &ba, const QString &s)
{ QString t = QString::fromAscii(ba.constData(), qstrnlen(ba.constData(), ba.size())); t += s; return t; }
inline  const QString operator+(const QString &s, const QByteArray &ba)
{ QString t(s); t += QString::fromAscii(ba.constData(), qstrnlen(ba.constData(), ba.size())); return t; }







































# 1027 "/home/eagle/qt-copy/include/QtCore/qstring.h"
 QDataStream &operator<<(QDataStream &, const QString &);
 QDataStream &operator>>(QDataStream &, QString &);












# 1041 "/home/eagle/qt-copy/include/QtCore/qstring.h"
template <> class QTypeInfo<QString> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QString)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QString"; } };
template <> inline bool qIsDetached<QString>(QString &t) { return t.isDetached(); } template <typename T> inline void qSwap(T &, T &); template <> inline void qSwap<QString>(QString &value1, QString &value2) { const QString::DataPtr t = value1.data_ptr(); value1.data_ptr() = value2.data_ptr(); value2.data_ptr() = t; }
inline QFlags<QString::SectionFlags::enum_type> operator|(QString::SectionFlags::enum_type f1, QString::SectionFlags::enum_type f2) { return QFlags<QString::SectionFlags::enum_type>(f1) | f2; } inline QFlags<QString::SectionFlags::enum_type> operator|(QString::SectionFlags::enum_type f1, QFlags<QString::SectionFlags::enum_type> f2) { return f2 | f1; }








# 1052 "/home/eagle/qt-copy/include/QtCore/qstring.h"
class  QStringRef {
const QString *m_string;
int m_position;
int m_size;
public:
inline QStringRef():m_string(0), m_position(0), m_size(0){}
inline QStringRef(const QString *string, int position, int size);
inline QStringRef(const QString *string);
inline QStringRef(const QStringRef &other)
:m_string(other.m_string), m_position(other.m_position), m_size(other.m_size)
{}

inline ~QStringRef(){}
inline const QString *string() const { return m_string; }
inline int position() const { return m_position; }
inline int size() const { return m_size; }
inline int count() const { return m_size; }
inline int length() const { return m_size; }

inline QStringRef &operator=(const QStringRef &other) {
m_string = other.m_string; m_position = other.m_position;
m_size = other.m_size; return *this;
}

inline QStringRef &operator=(const QString *string);

inline const QChar *unicode() const {
if (!m_string)
return reinterpret_cast<const QChar *>(QString::shared_null.data);
return m_string->unicode() + m_position;
}
inline const QChar *data() const { return unicode(); }
inline const QChar *constData() const { return unicode(); }

inline void clear() { m_string = 0; m_position = m_size = 0; }
QString toString() const;
inline bool isEmpty() const { return m_size == 0; }
inline bool isNull() const { return m_string == 0 || m_string->isNull(); }

QStringRef appendTo(QString *string) const;

inline const QChar at(int i) const
{ qt_noop(); return m_string->at(i + m_position); }

};

inline QStringRef &QStringRef::operator=(const QString *aString)
{ m_string = aString; m_position = 0; m_size = aString?aString->size():0; return *this; }

inline QStringRef::QStringRef(const QString *aString, int aPosition, int aSize)
:m_string(aString), m_position(aPosition), m_size(aSize){}

inline QStringRef::QStringRef(const QString *aString)
:m_string(aString), m_position(0), m_size(aString?aString->size() : 0){}

 bool operator==(const QStringRef &s1,const QStringRef &s2);
inline bool operator!=(const QStringRef &s1,const QStringRef &s2)
{ return !(s1 == s2); }
 bool operator==(const QString &s1,const QStringRef &s2);
inline bool operator!=(const QString &s1,const QStringRef &s2)
{ return !(s1 == s2); }
inline bool operator==(const QStringRef &s1,const QString &s2)
{ return s2 == s1; }
inline bool operator!=(const QStringRef &s1,const QString &s2)
{ return s2 != s1; }
 bool operator==(const QLatin1String &s1, const QStringRef &s2);
inline bool operator!=(const QLatin1String &s1,const QStringRef &s2)
{ return !(s1 == s2); }
inline bool operator==(const QStringRef &s1,const QLatin1String &s2)
{ return s2 == s1; }
inline bool operator!=(const QStringRef &s1,const QLatin1String &s2)
{ return s2 != s1; }

 bool operator<(const QStringRef &s1,const QStringRef &s2);
inline bool operator>(const QStringRef &s1, const QStringRef &s2)
{ return s2 < s1; }
inline bool operator<=(const QStringRef &s1, const QStringRef &s2)
{ return !(s1 > s2); }
inline bool operator>=(const QStringRef &s1, const QStringRef &s2)
{ return !(s1 < s2); }

inline bool qStringComparisonHelper(const QStringRef &s1, const char *s2)
{

# 1136 "/home/eagle/qt-copy/include/QtCore/qstring.h"
if (QString::codecForCStrings) return (s1 == QString::fromAscii(s2));

# 1138 "/home/eagle/qt-copy/include/QtCore/qstring.h"
return (s1 == QLatin1String(s2));
}

inline  bool operator==(const char *s1, const QStringRef &s2)
{ return qStringComparisonHelper(s2, s1); }
inline  bool operator==(const QStringRef &s1, const char *s2)
{ return qStringComparisonHelper(s1, s2); }
inline  bool operator!=(const char *s1, const QStringRef &s2)
{ return !qStringComparisonHelper(s2, s1); }
inline  bool operator!=(const QStringRef &s1, const char *s2)
{ return !qStringComparisonHelper(s1, s2); }






# 47 "/home/eagle/qt-copy/include/QtCore/qtextcodec.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qlist.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qiterator.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qiterator.h"


# 49 "/home/eagle/qt-copy/include/QtCore/qiterator.h"


namespace std {
struct bidirectional_iterator_tag;
struct random_access_iterator_tag;
}



typedef QtValidLicenseForCoreModule QtCoreModule;









# 200 "/home/eagle/qt-copy/include/QtCore/qiterator.h"





# 47 "/home/eagle/qt-copy/include/QtCore/qlist.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qatomic.h"

























































































































































































































# 48 "/home/eagle/qt-copy/include/QtCore/qlist.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qalgorithms.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qalgorithms.h"


# 49 "/home/eagle/qt-copy/include/QtCore/qalgorithms.h"




typedef QtValidLicenseForCoreModule QtCoreModule;





namespace QAlgorithmsPrivate {

template <typename RandomAccessIterator, typename T, typename LessThan>
 void qSortHelper(RandomAccessIterator start, RandomAccessIterator end, const T &t, LessThan lessThan);
template <typename RandomAccessIterator, typename T>
inline void qSortHelper(RandomAccessIterator begin, RandomAccessIterator end, const T &dummy);

template <typename RandomAccessIterator, typename T, typename LessThan>
 void qStableSortHelper(RandomAccessIterator start, RandomAccessIterator end, const T &t, LessThan lessThan);
template <typename RandomAccessIterator, typename T>
inline void qStableSortHelper(RandomAccessIterator, RandomAccessIterator, const T &);

template <typename RandomAccessIterator, typename T, typename LessThan>
 RandomAccessIterator qLowerBoundHelper(RandomAccessIterator begin, RandomAccessIterator end, const T &value, LessThan lessThan);
template <typename RandomAccessIterator, typename T, typename LessThan>
 RandomAccessIterator qUpperBoundHelper(RandomAccessIterator begin, RandomAccessIterator end, const T &value, LessThan lessThan);
template <typename RandomAccessIterator, typename T, typename LessThan>
 RandomAccessIterator qBinaryFindHelper(RandomAccessIterator begin, RandomAccessIterator end, const T &value, LessThan lessThan);

}

template <typename InputIterator, typename OutputIterator>
inline OutputIterator qCopy(InputIterator begin, InputIterator end, OutputIterator dest)
{
while (begin != end)
*dest++ = *begin++;
return dest;
}

template <typename BiIterator1, typename BiIterator2>
inline BiIterator2 qCopyBackward(BiIterator1 begin, BiIterator1 end, BiIterator2 dest)
{
while (begin != end)
*--dest = *--end;
return dest;
}

template <typename InputIterator1, typename InputIterator2>
inline bool qEqual(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2)
{
for (; first1 != last1; ++first1, ++first2)
if (!(*first1 == *first2))
return false;
return true;
}

template <typename ForwardIterator, typename T>
inline void qFill(ForwardIterator first, ForwardIterator last, const T &val)
{
for (; first != last; ++first)
*first = val;
}

template <typename Container, typename T>
inline void qFill(Container &container, const T &val)
{
qFill(container.begin(), container.end(), val);
}

template <typename InputIterator, typename T>
inline InputIterator qFind(InputIterator first, InputIterator last, const T &val)
{
while (first != last && !(*first == val))
++first;
return first;
}

template <typename Container, typename T>
inline typename Container::const_iterator qFind(const Container &container, const T &val)
{
return qFind(container.constBegin(), container.constEnd(), val);
}

template <typename InputIterator, typename T, typename Size>
inline void qCount(InputIterator first, InputIterator last, const T &value, Size &n)
{
for (; first != last; ++first)
if (*first == value)
++n;
}

template <typename Container, typename T, typename Size>
inline void qCount(const Container &container, const T &value, Size &n)
{
qCount(container.constBegin(), container.constEnd(), value, n);
}









# 154 "/home/eagle/qt-copy/include/QtCore/qalgorithms.h"
template <typename T>
inline void qSwap(T &value1, T &value2)
{
T t = value1;
value1 = value2;
value2 = t;
}













# 174 "/home/eagle/qt-copy/include/QtCore/qalgorithms.h"
template <typename T>
class qLess
{
public:
inline bool operator()(const T &t1, const T &t2) const
{
return (t1 < t2);
}
};

template <typename T>
class qGreater
{
public:
inline bool operator()(const T &t1, const T &t2) const
{
return (t2 < t1);
}
};


# 195 "/home/eagle/qt-copy/include/QtCore/qalgorithms.h"
template <typename RandomAccessIterator>
inline void qSort(RandomAccessIterator start, RandomAccessIterator end)
{
if (start != end)
QAlgorithmsPrivate::qSortHelper(start, end, *start);
}

template <typename RandomAccessIterator, typename LessThan>
inline void qSort(RandomAccessIterator start, RandomAccessIterator end, LessThan lessThan)
{
if (start != end)
QAlgorithmsPrivate::qSortHelper(start, end, *start, lessThan);
}

template<typename Container>
inline void qSort(Container &c)
{




# 216 "/home/eagle/qt-copy/include/QtCore/qalgorithms.h"
if (!c.empty())
QAlgorithmsPrivate::qSortHelper(c.begin(), c.end(), *c.begin());
}

template <typename RandomAccessIterator>
inline void qStableSort(RandomAccessIterator start, RandomAccessIterator end)
{
if (start != end)
QAlgorithmsPrivate::qStableSortHelper(start, end, *start);
}

template <typename RandomAccessIterator, typename LessThan>
inline void qStableSort(RandomAccessIterator start, RandomAccessIterator end, LessThan lessThan)
{
if (start != end)
QAlgorithmsPrivate::qStableSortHelper(start, end, *start, lessThan);
}

template<typename Container>
inline void qStableSort(Container &c)
{




# 241 "/home/eagle/qt-copy/include/QtCore/qalgorithms.h"
if (!c.empty())
QAlgorithmsPrivate::qStableSortHelper(c.begin(), c.end(), *c.begin());
}

template <typename RandomAccessIterator, typename T>
 RandomAccessIterator qLowerBound(RandomAccessIterator begin, RandomAccessIterator end, const T &value)
{



RandomAccessIterator middle;
int n = end - begin;
int half;

while (n > 0) {
half = n >> 1;
middle = begin + half;
if (*middle < value) {
begin = middle + 1;
n -= half + 1;
} else {
n = half;
}
}
return begin;
}

template <typename RandomAccessIterator, typename T, typename LessThan>
 RandomAccessIterator qLowerBound(RandomAccessIterator begin, RandomAccessIterator end, const T &value, LessThan lessThan)
{
return QAlgorithmsPrivate::qLowerBoundHelper(begin, end, value, lessThan);
}

template <typename Container, typename T>
 typename Container::const_iterator qLowerBound(const Container &container, const T &value)
{
return QAlgorithmsPrivate::qLowerBoundHelper(container.constBegin(), container.constEnd(), value, qLess<T>());
}

template <typename RandomAccessIterator, typename T>
 RandomAccessIterator qUpperBound(RandomAccessIterator begin, RandomAccessIterator end, const T &value)
{

RandomAccessIterator middle;
int n = end - begin;
int half;

while (n > 0) {
half = n >> 1;
middle = begin + half;
if (value < *middle) {
n = half;
} else {
begin = middle + 1;
n -= half + 1;
}
}
return begin;
}

template <typename RandomAccessIterator, typename T, typename LessThan>
 RandomAccessIterator qUpperBound(RandomAccessIterator begin, RandomAccessIterator end, const T &value, LessThan lessThan)
{
return QAlgorithmsPrivate::qUpperBoundHelper(begin, end, value, lessThan);
}

template <typename Container, typename T>
 typename Container::const_iterator qUpperBound(const Container &container, const T &value)
{
return QAlgorithmsPrivate::qUpperBoundHelper(container.constBegin(), container.constEnd(), value, qLess<T>());
}

template <typename RandomAccessIterator, typename T>
 RandomAccessIterator qBinaryFind(RandomAccessIterator begin, RandomAccessIterator end, const T &value)
{

int l = 0;
int r = end - begin - 1;
if (r < 0)
return end;
int i = (l + r + 1) / 2;

while (r != l) {
if (value < begin[i])
r = i - 1;
else
l = i;
i = (l + r + 1) / 2;
}
if (begin[i] < value || value < begin[i])
return end;
else
return begin + i;
}

template <typename RandomAccessIterator, typename T, typename LessThan>
 RandomAccessIterator qBinaryFind(RandomAccessIterator begin, RandomAccessIterator end, const T &value, LessThan lessThan)
{
return QAlgorithmsPrivate::qBinaryFindHelper(begin, end, value, lessThan);
}

template <typename Container, typename T>
 typename Container::const_iterator qBinaryFind(const Container &container, const T &value)
{
return QAlgorithmsPrivate::qBinaryFindHelper(container.constBegin(), container.constEnd(), value, qLess<T>());
}

template <typename ForwardIterator>
 void qDeleteAll(ForwardIterator begin, ForwardIterator end)
{
while (begin != end) {
delete *begin;
++begin;
}
}

template <typename Container>
inline void qDeleteAll(const Container &c)
{
qDeleteAll(c.begin(), c.end());
}





namespace QAlgorithmsPrivate {

template <typename RandomAccessIterator, typename T, typename LessThan>
 void qSortHelper(RandomAccessIterator start, RandomAccessIterator end, const T &t, LessThan lessThan)
{
top:
int span = end - start;
if (span < 2)
return;

--end;
RandomAccessIterator low = start, high = end - 1;
RandomAccessIterator pivot = start + span / 2;

if (lessThan(*end, *start))
qSwap(*end, *start);
if (span == 2)
return;

if (lessThan(*pivot, *start))
qSwap(*pivot, *start);
if (lessThan(*end, *pivot))
qSwap(*end, *pivot);
if (span == 3)
return;

qSwap(*pivot, *end);

while (low < high) {
while (low < high && lessThan(*low, *end))
++low;

while (high > low && lessThan(*end, *high))
--high;

if (low < high) {
qSwap(*low, *high);
++low;
--high;
} else {
break;
}
}

if (lessThan(*low, *end))
++low;

qSwap(*end, *low);
qSortHelper(start, low, t, lessThan);

start = low + 1;
++end;
goto top;
}

template <typename RandomAccessIterator, typename T>
inline void qSortHelper(RandomAccessIterator begin, RandomAccessIterator end, const T &dummy)
{
qSortHelper(begin, end, dummy, qLess<T>());
}

template <typename RandomAccessIterator>
 void qReverse(RandomAccessIterator begin, RandomAccessIterator end)
{
--end;
while (begin < end)
qSwap(*begin++, *end--);
}

template <typename RandomAccessIterator>
 void qRotate(RandomAccessIterator begin, RandomAccessIterator middle, RandomAccessIterator end)
{
qReverse(begin, middle); 
qReverse(middle, end); 
qReverse(begin, end); 
}

template <typename RandomAccessIterator, typename T, typename LessThan>
 void qMerge(RandomAccessIterator begin, RandomAccessIterator pivot, RandomAccessIterator end, T &t, LessThan lessThan)
{
const int len1 = pivot - begin;
const int len2 = end - pivot;

if (len1 == 0 || len2 == 0)
return;

if (len1 + len2 == 2) {
if (lessThan(*(begin + 1), *(begin)))
qSwap(*begin, *(begin + 1));
return;
}

RandomAccessIterator firstCut;
RandomAccessIterator secondCut;
int len2Half;
if (len1 > len2) {
const int len1Half = len1 / 2;
firstCut = begin + len1Half;
secondCut = qLowerBound(pivot, end, *firstCut, lessThan);
len2Half = secondCut - pivot;
} else {
len2Half = len2 / 2;
secondCut = pivot + len2Half;
firstCut = qUpperBound(begin, pivot, *secondCut, lessThan);
}

qRotate(firstCut, pivot, secondCut);
const RandomAccessIterator newPivot = firstCut + len2Half;
qMerge(begin, firstCut, newPivot, t, lessThan);
qMerge(newPivot, secondCut, end, t, lessThan);
}

template <typename RandomAccessIterator, typename T, typename LessThan>
 void qStableSortHelper(RandomAccessIterator begin, RandomAccessIterator end, const T &t, LessThan lessThan)
{
const int span = end - begin;
if (span < 2)
return;

const RandomAccessIterator middle = begin + span / 2;
qStableSortHelper(begin, middle, t, lessThan);
qStableSortHelper(middle, end, t, lessThan);
qMerge(begin, middle, end, t, lessThan);
}

template <typename RandomAccessIterator, typename T>
inline void qStableSortHelper(RandomAccessIterator begin, RandomAccessIterator end, const T &dummy)
{
qStableSortHelper(begin, end, dummy, qLess<T>());
}

template <typename RandomAccessIterator, typename T, typename LessThan>
 RandomAccessIterator qLowerBoundHelper(RandomAccessIterator begin, RandomAccessIterator end, const T &value, LessThan lessThan)
{
RandomAccessIterator middle;
int n = end - begin;
int half;

while (n > 0) {
half = n >> 1;
middle = begin + half;
if (lessThan(*middle, value)) {
begin = middle + 1;
n -= half + 1;
} else {
n = half;
}
}
return begin;
}


template <typename RandomAccessIterator, typename T, typename LessThan>
 RandomAccessIterator qUpperBoundHelper(RandomAccessIterator begin, RandomAccessIterator end, const T &value, LessThan lessThan)
{
RandomAccessIterator middle;
int n = end - begin;
int half;

while (n > 0) {
half = n >> 1;
middle = begin + half;
if (lessThan(value, *middle)) {
n = half;
} else {
begin = middle + 1;
n -= half + 1;
}
}
return begin;
}

template <typename RandomAccessIterator, typename T, typename LessThan>
 RandomAccessIterator qBinaryFindHelper(RandomAccessIterator begin, RandomAccessIterator end, const T &value, LessThan lessThan)
{
int l = 0;
int r = end - begin - 1;
if (r < 0)
return end;
int i = (l + r + 1) / 2;

while (r != l) {
if (lessThan(value, begin[i]))
r = i - 1;
else
l = i;
i = (l + r + 1) / 2;
}
if (lessThan(begin[i], value) || lessThan(value, begin[i]))
return end;
else
return begin + i;
}

} 






# 49 "/home/eagle/qt-copy/include/QtCore/qlist.h"









# 58 "/home/eagle/qt-copy/include/QtCore/qlist.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

template <typename T> class QVector;
template <typename T> class QSet;

struct  QListData {
struct Data {
QBasicAtomicInt ref;
int alloc, begin, end;
uint sharable : 1;
void *array[1];
};
enum { DataHeaderSize = sizeof(Data) - sizeof(void *) };

Data *detach(); 
Data *detach2();
void realloc(int alloc);
static Data shared_null;
Data *d;
void **erase(void **xi);
void **append();
void **append(const QListData &l);
void **prepend();
void **insert(int i);
void remove(int i);
void remove(int i, int n);
void move(int from, int to);
inline int size() const { return d->end - d->begin; }
inline bool isEmpty() const { return d->end == d->begin; }
inline void **at(int i) const { return d->array + d->begin + i; }
inline void **begin() const { return d->array + d->begin; }
inline void **end() const { return d->array + d->end; }
};

template <typename T>
class QList
{
struct Node { void *v;



# 103 "/home/eagle/qt-copy/include/QtCore/qlist.h"
inline T &t()
{ return *reinterpret_cast<T*>(QTypeInfo<T>::isLarge || QTypeInfo<T>::isStatic
? v : this); }

# 107 "/home/eagle/qt-copy/include/QtCore/qlist.h"
};

union { QListData p; QListData::Data *d; };

public:
inline QList() : d(&QListData::shared_null) { d->ref.ref(); }
inline QList(const QList<T> &l) : d(l.d) { d->ref.ref(); if (!d->sharable) detach_helper(); }
~QList();
QList<T> &operator=(const QList<T> &l);
bool operator==(const QList<T> &l) const;
inline bool operator!=(const QList<T> &l) const { return !(*this == l); }

inline int size() const { return p.size(); }

inline void detach() { if (d->ref != 1) detach_helper(); }
inline bool isDetached() const { return d->ref == 1; }
inline void setSharable(bool sharable) { if (!sharable) detach(); d->sharable = sharable; }

inline bool isEmpty() const { return p.isEmpty(); }

void clear();

const T &at(int i) const;
const T &operator[](int i) const;
T &operator[](int i);

void append(const T &t);
void prepend(const T &t);
void insert(int i, const T &t);
void replace(int i, const T &t);
void removeAt(int i);
int removeAll(const T &t);
bool removeOne(const T &t);
T takeAt(int i);
T takeFirst();
T takeLast();
void move(int from, int to);
void swap(int i, int j);
int indexOf(const T &t, int from = 0) const;
int lastIndexOf(const T &t, int from = -1) const;
QBool contains(const T &t) const;
int count(const T &t) const;

class const_iterator;

class iterator {
public:
Node *i;
typedef std::random_access_iterator_tag iterator_category;
typedef ptrdiff_t difference_type;
typedef T value_type;
typedef T *pointer;
typedef T &reference;

inline iterator() : i(0) {}
inline iterator(Node *n) : i(n) {}
inline iterator(const iterator &o): i(o.i){}
inline T &operator*() const { return i->t(); }
inline T *operator->() const { return &i->t(); }
inline T &operator[](int j) const { return i[j].t(); }
inline bool operator==(const iterator &o) const { return i == o.i; }
inline bool operator!=(const iterator &o) const { return i != o.i; }
inline bool operator<(const iterator& other) const { return i < other.i; }
inline bool operator<=(const iterator& other) const { return i <= other.i; }
inline bool operator>(const iterator& other) const { return i > other.i; }
inline bool operator>=(const iterator& other) const { return i >= other.i; }

# 174 "/home/eagle/qt-copy/include/QtCore/qlist.h"
inline bool operator==(const const_iterator &o) const
{ return i == o.i; }
inline bool operator!=(const const_iterator &o) const
{ return i != o.i; }
inline bool operator<(const const_iterator& other) const
{ return i < other.i; }
inline bool operator<=(const const_iterator& other) const
{ return i <= other.i; }
inline bool operator>(const const_iterator& other) const
{ return i > other.i; }
inline bool operator>=(const const_iterator& other) const
{ return i >= other.i; }

# 187 "/home/eagle/qt-copy/include/QtCore/qlist.h"
inline iterator &operator++() { ++i; return *this; }
inline iterator operator++(int) { Node *n = i; ++i; return n; }
inline iterator &operator--() { i--; return *this; }
inline iterator operator--(int) { Node *n = i; i--; return n; }
inline iterator &operator+=(int j) { i+=j; return *this; }
inline iterator &operator-=(int j) { i-=j; return *this; }
inline iterator operator+(int j) const { return iterator(i+j); }
inline iterator operator-(int j) const { return iterator(i-j); }
inline int operator-(iterator j) const { return i - j.i; }
};
friend class iterator;

class const_iterator {
public:
Node *i;
typedef std::random_access_iterator_tag iterator_category;
typedef ptrdiff_t difference_type;
typedef T value_type;
typedef const T *pointer;
typedef const T &reference;

inline const_iterator() : i(0) {}
inline const_iterator(Node *n) : i(n) {}
inline const_iterator(const const_iterator &o): i(o.i) {}



# 214 "/home/eagle/qt-copy/include/QtCore/qlist.h"
inline const_iterator(const iterator &o): i(o.i) {}

# 216 "/home/eagle/qt-copy/include/QtCore/qlist.h"
inline const T &operator*() const { return i->t(); }
inline const T *operator->() const { return &i->t(); }
inline const T &operator[](int j) const { return i[j].t(); }
inline bool operator==(const const_iterator &o) const { return i == o.i; }
inline bool operator!=(const const_iterator &o) const { return i != o.i; }
inline bool operator<(const const_iterator& other) const { return i < other.i; }
inline bool operator<=(const const_iterator& other) const { return i <= other.i; }
inline bool operator>(const const_iterator& other) const { return i > other.i; }
inline bool operator>=(const const_iterator& other) const { return i >= other.i; }
inline const_iterator &operator++() { ++i; return *this; }
inline const_iterator operator++(int) { Node *n = i; ++i; return n; }
inline const_iterator &operator--() { i--; return *this; }
inline const_iterator operator--(int) { Node *n = i; i--; return n; }
inline const_iterator &operator+=(int j) { i+=j; return *this; }
inline const_iterator &operator-=(int j) { i-=j; return *this; }
inline const_iterator operator+(int j) const { return const_iterator(i+j); }
inline const_iterator operator-(int j) const { return const_iterator(i-j); }
inline int operator-(const_iterator j) const { return i - j.i; }
};
friend class const_iterator;


inline iterator begin() { detach(); return reinterpret_cast<Node *>(p.begin()); }
inline const_iterator begin() const { return reinterpret_cast<Node *>(p.begin()); }
inline const_iterator constBegin() const { return reinterpret_cast<Node *>(p.begin()); }
inline iterator end() { detach(); return reinterpret_cast<Node *>(p.end()); }
inline const_iterator end() const { return reinterpret_cast<Node *>(p.end()); }
inline const_iterator constEnd() const { return reinterpret_cast<Node *>(p.end()); }
iterator insert(iterator before, const T &t);
iterator erase(iterator pos);
iterator erase(iterator first, iterator last);


typedef iterator Iterator;
typedef const_iterator ConstIterator;
inline int count() const { return p.size(); }
inline T& first() { qt_noop(); return *begin(); }
inline const T& first() const { qt_noop(); return *begin(); }
T& last() { qt_noop(); return *(--end()); }
const T& last() const { qt_noop(); return *(--end()); }
inline void removeFirst() { qt_noop(); erase(begin()); }
inline void removeLast() { qt_noop(); erase(--end()); }
QList<T> mid(int pos, int length = -1) const;

T value(int i) const;
T value(int i, const T &defaultValue) const;


inline void push_back(const T &t) { append(t); }
inline void push_front(const T &t) { prepend(t); }
inline T& front() { return first(); }
inline const T& front() const { return first(); }
inline T& back() { return last(); }
inline const T& back() const { return last(); }
inline void pop_front() { removeFirst(); }
inline void pop_back() { removeLast(); }
inline bool empty() const { return isEmpty(); }
typedef int size_type;
typedef T value_type;
typedef value_type *pointer;
typedef const value_type *const_pointer;
typedef value_type &reference;
typedef const value_type &const_reference;
typedef ptrdiff_t difference_type;















# 295 "/home/eagle/qt-copy/include/QtCore/qlist.h"

QList<T> &operator+=(const QList<T> &l);
inline QList<T> operator+(const QList<T> &l) const
{ QList n = *this; n += l; return n; }
inline QList<T> &operator+=(const T &t)
{ append(t); return *this; }
inline QList<T> &operator<< (const T &t)
{ append(t); return *this; }
inline QList<T> &operator<<(const QList<T> &l)
{ *this += l; return *this; }

QVector<T> toVector() const;
QSet<T> toSet() const;

static QList<T> fromVector(const QVector<T> &vector);
static QList<T> fromSet(const QSet<T> &set);








# 319 "/home/eagle/qt-copy/include/QtCore/qlist.h"
private:
void detach_helper();
void free(QListData::Data *d);

void node_construct(Node *n, const T &t);
void node_destruct(Node *n);
void node_copy(Node *from, Node *to, Node *src);
void node_destruct(Node *from, Node *to);
};







# 335 "/home/eagle/qt-copy/include/QtCore/qlist.h"
template <typename T>
inline void QList<T>::node_construct(Node *n, const T &t)
{
if (QTypeInfo<T>::isLarge || QTypeInfo<T>::isStatic) n->v = new T(t);
else if (QTypeInfo<T>::isComplex) new (n) T(t);
else *reinterpret_cast<T*>(n) = t;
}

template <typename T>
inline void QList<T>::node_destruct(Node *n)
{
if (QTypeInfo<T>::isLarge || QTypeInfo<T>::isStatic) delete reinterpret_cast<T*>(n->v);
else if (QTypeInfo<T>::isComplex) reinterpret_cast<T*>(n)->~T();
}

template <typename T>
inline void QList<T>::node_copy(Node *from, Node *to, Node *src)
{
if (QTypeInfo<T>::isLarge || QTypeInfo<T>::isStatic)
while(from != to)
(from++)->v = new T(*reinterpret_cast<T*>((src++)->v));
else if (QTypeInfo<T>::isComplex)
while(from != to)
new (from++) T(*reinterpret_cast<T*>(src++));
}

template <typename T>
inline void QList<T>::node_destruct(Node *from, Node *to)
{
if (QTypeInfo<T>::isLarge || QTypeInfo<T>::isStatic)
while(from != to) --to, delete reinterpret_cast<T*>(to->v);
else if (QTypeInfo<T>::isComplex)
while (from != to) --to, reinterpret_cast<T*>(to)->~T();
}

template <typename T>
inline QList<T> &QList<T>::operator=(const QList<T> &l)
{
if (d != l.d) {
l.d->ref.ref();
if (!d->ref.deref())
free(d);
d = l.d;
if (!d->sharable)
detach_helper();
}
return *this;
}
template <typename T>
inline typename QList<T>::iterator QList<T>::insert(iterator before, const T &t)
{ Node *n = reinterpret_cast<Node *>(p.insert(before.i-reinterpret_cast<Node *>(p.begin())));
node_construct(n,t); return n; }
template <typename T>
inline typename QList<T>::iterator QList<T>::erase(iterator it)
{ node_destruct(it.i);
return reinterpret_cast<Node *>(p.erase(reinterpret_cast<void**>(it.i))); }
template <typename T>
inline const T &QList<T>::at(int i) const
{ qt_noop();
return reinterpret_cast<Node *>(p.at(i))->t(); }
template <typename T>
inline const T &QList<T>::operator[](int i) const
{ qt_noop();
return reinterpret_cast<Node *>(p.at(i))->t(); }
template <typename T>
inline T &QList<T>::operator[](int i)
{ qt_noop();
detach(); return reinterpret_cast<Node *>(p.at(i))->t(); }
template <typename T>
inline void QList<T>::removeAt(int i)
{ if(i >= 0 && i < p.size()) { detach();
node_destruct(reinterpret_cast<Node *>(p.at(i))); p.remove(i); } }
template <typename T>
inline T QList<T>::takeAt(int i)
{ qt_noop();
detach(); Node *n = reinterpret_cast<Node *>(p.at(i)); T t = n->t(); node_destruct(n);
p.remove(i); return t; }
template <typename T>
inline T QList<T>::takeFirst()
{ T t = first(); removeFirst(); return t; }
template <typename T>
inline T QList<T>::takeLast()
{ T t = last(); removeLast(); return t; }

template <typename T>
 void QList<T>::append(const T &t)
{
detach();
if (QTypeInfo<T>::isLarge || QTypeInfo<T>::isStatic) {
node_construct(reinterpret_cast<Node *>(p.append()), t);
} else {
const T cpy(t);
node_construct(reinterpret_cast<Node *>(p.append()), cpy);
}
}

template <typename T>
inline void QList<T>::prepend(const T &t)
{
detach();
if (QTypeInfo<T>::isLarge || QTypeInfo<T>::isStatic) {
node_construct(reinterpret_cast<Node *>(p.prepend()), t);
} else {
const T cpy(t);
node_construct(reinterpret_cast<Node *>(p.prepend()), cpy);
}
}

template <typename T>
inline void QList<T>::insert(int i, const T &t)
{
detach();
if (QTypeInfo<T>::isLarge || QTypeInfo<T>::isStatic) {
node_construct(reinterpret_cast<Node *>(p.insert(i)), t);
} else {
const T cpy(t);
node_construct(reinterpret_cast<Node *>(p.insert(i)), cpy);
}
}

template <typename T>
inline void QList<T>::replace(int i, const T &t)
{
qt_noop();
detach();
if (QTypeInfo<T>::isLarge || QTypeInfo<T>::isStatic) {
reinterpret_cast<Node *>(p.at(i))->t() = t;
} else {
const T cpy(t);
reinterpret_cast<Node *>(p.at(i))->t() = cpy;
}
}

template <typename T>
inline void QList<T>::swap(int i, int j)
{
qt_noop();
detach();
void *t = d->array[d->begin + i];
d->array[d->begin + i] = d->array[d->begin + j];
d->array[d->begin + j] = t;
}

template <typename T>
inline void QList<T>::move(int from, int to)
{
qt_noop();
detach();
p.move(from, to);
}

template<typename T>
 QList<T> QList<T>::mid(int pos, int length) const
{
if (length < 0)
length = size() - pos;
if (pos == 0 && length == size())
return *this;
QList<T> cpy;
if (pos + length > size())
length = size() - pos;
for (int i = pos; i < pos + length; ++i)
cpy += at(i);
return cpy;
}

template<typename T>
 T QList<T>::value(int i) const
{
if (i < 0 || i >= p.size()) {
return T();
}
return reinterpret_cast<Node *>(p.at(i))->t();
}

template<typename T>
 T QList<T>::value(int i, const T& defaultValue) const
{
return ((i < 0 || i >= p.size()) ? defaultValue : reinterpret_cast<Node *>(p.at(i))->t());
}

template <typename T>
 void QList<T>::detach_helper()
{
Node *n = reinterpret_cast<Node *>(p.begin());
QListData::Data *x = p.detach2();
node_copy(reinterpret_cast<Node *>(p.begin()), reinterpret_cast<Node *>(p.end()), n);
if (!x->ref.deref())
free(x);
}

template <typename T>
 QList<T>::~QList()
{
if (d && !d->ref.deref())
free(d);
}

template <typename T>
 bool QList<T>::operator==(const QList<T> &l) const
{
if (p.size() != l.p.size())
return false;
if (d == l.d)
return true;
Node *i = reinterpret_cast<Node *>(p.end());
Node *b = reinterpret_cast<Node *>(p.begin());
Node *li = reinterpret_cast<Node *>(l.p.end());
while (i != b) {
--i; --li;
if (!(i->t() == li->t()))
return false;
}
return true;
}


template <typename T>
 void QList<T>::free(QListData::Data *data)
{
node_destruct(reinterpret_cast<Node *>(data->array + data->begin),
reinterpret_cast<Node *>(data->array + data->end));
if (data->ref == 0)
qFree(data);
}


template <typename T>
 void QList<T>::clear()
{
*this = QList<T>();
}

template <typename T>
 int QList<T>::removeAll(const T &_t)
{
detach();
const T t = _t;
int removedCount=0, i=0;
Node *n;
while (i < p.size())
if ((n = reinterpret_cast<Node *>(p.at(i)))->t() == t) {
node_destruct(n);
p.remove(i);
++removedCount;
} else {
++i;
}
return removedCount;
}

template <typename T>
 bool QList<T>::removeOne(const T &_t)
{
detach();
int index = indexOf(_t);
if (index != -1) {
removeAt(index);
return true;
}
return false;
}

template <typename T>
 typename QList<T>::iterator QList<T>::erase(typename QList<T>::iterator afirst,
typename QList<T>::iterator alast)
{
for (Node *n = afirst.i; n < alast.i; ++n)
node_destruct(n);
int idx = afirst - begin();
p.remove(idx, alast - afirst);
return begin() + idx;
}

template <typename T>
 QList<T> &QList<T>::operator+=(const QList<T> &l)
{
detach();
Node *n = reinterpret_cast<Node *>(p.append(l.p));
node_copy(n, reinterpret_cast<Node *>(p.end()), reinterpret_cast<Node *>(l.p.begin()));
return *this;
}

template <typename T>
 int QList<T>::indexOf(const T &t, int from) const
{
if (from < 0)
from = qMax(from + p.size(), 0);
if (from < p.size()) {
Node *n = reinterpret_cast<Node *>(p.at(from -1));
Node *e = reinterpret_cast<Node *>(p.end());
while (++n != e)
if (n->t() == t)
return n - reinterpret_cast<Node *>(p.begin());
}
return -1;
}

template <typename T>
 int QList<T>::lastIndexOf(const T &t, int from) const
{
if (from < 0)
from += p.size();
else if (from >= p.size())
from = p.size()-1;
if (from >= 0) {
Node *b = reinterpret_cast<Node *>(p.begin());
Node *n = reinterpret_cast<Node *>(p.at(from + 1));
while (n-- != b) {
if (n->t() == t)
return n - b;
}
}
return -1;
}

template <typename T>
 QBool QList<T>::contains(const T &t) const
{
Node *b = reinterpret_cast<Node *>(p.begin());
Node *i = reinterpret_cast<Node *>(p.end());
while (i-- != b)
if (i->t() == t)
return QBool(true);
return QBool(false);
}

template <typename T>
 int QList<T>::count(const T &t) const
{
int c = 0;
Node *b = reinterpret_cast<Node *>(p.begin());
Node *i = reinterpret_cast<Node *>(p.end());
while (i-- != b)
if (i->t() == t)
++c;
return c;
}

template <class T> class QListIterator { typedef typename QList<T>::const_iterator const_iterator; QList<T> c; const_iterator i; public: inline QListIterator(const QList<T> &container) : c(container), i(c.constBegin()) {} inline QListIterator &operator=(const QList<T> &container) { c = container; i = c.constBegin(); return *this; } inline void toFront() { i = c.constBegin(); } inline void toBack() { i = c.constEnd(); } inline bool hasNext() const { return i != c.constEnd(); } inline const T &next() { return *i++; } inline const T &peekNext() const { return *i; } inline bool hasPrevious() const { return i != c.constBegin(); } inline const T &previous() { return *--i; } inline const T &peekPrevious() const { const_iterator p = i; return *--p; } inline bool findNext(const T &t) { while (i != c.constEnd()) if (*i++ == t) return true; return false; } inline bool findPrevious(const T &t) { while (i != c.constBegin()) if (*(--i) == t) return true; return false; } };
template <class T> class QMutableListIterator { typedef typename QList<T>::iterator iterator; typedef typename QList<T>::const_iterator const_iterator; QList<T> *c; iterator i, n; inline bool item_exists() const { return const_iterator(n) != c->constEnd(); } public: inline QMutableListIterator(QList<T> &container) : c(&container) { c->setSharable(false); i = c->begin(); n = c->end(); } inline ~QMutableListIterator() { c->setSharable(true); } inline QMutableListIterator &operator=(QList<T> &container) { c->setSharable(true); c = &container; c->setSharable(false); i = c->begin(); n = c->end(); return *this; } inline void toFront() { i = c->begin(); n = c->end(); } inline void toBack() { i = c->end(); n = i; } inline bool hasNext() const { return c->constEnd() != const_iterator(i); } inline T &next() { n = i++; return *n; } inline T &peekNext() const { return *i; } inline bool hasPrevious() const { return c->constBegin() != const_iterator(i); } inline T &previous() { n = --i; return *n; } inline T &peekPrevious() const { iterator p = i; return *--p; } inline void remove() { if (c->constEnd() != const_iterator(n)) { i = c->erase(n); n = c->end(); } } inline void setValue(const T &t) const { if (c->constEnd() != const_iterator(n)) *n = t; } inline T &value() { qt_noop(); return *n; } inline const T &value() const { qt_noop(); return *n; } inline void insert(const T &t) { n = i = c->insert(i, t); ++i; } inline bool findNext(const T &t) { while (c->constEnd() != const_iterator(n = i)) if (*i++ == t) return true; return false; } inline bool findPrevious(const T &t) { while (c->constBegin() != const_iterator(i)) if (*(n = --i) == t) return true; n = c->end(); return false; } };






# 48 "/home/eagle/qt-copy/include/QtCore/qtextcodec.h"


# 50 "/home/eagle/qt-copy/include/QtCore/qtextcodec.h"




typedef QtValidLicenseForCoreModule QtCoreModule;



# 58 "/home/eagle/qt-copy/include/QtCore/qtextcodec.h"
class QTextCodec;
class QIODevice;

class QTextDecoder;
class QTextEncoder;

class  QTextCodec
{
QTextCodec(const QTextCodec &); QTextCodec &operator=(const QTextCodec &);
public:
static QTextCodec* codecForName(const QByteArray &name);
static QTextCodec* codecForName(const char *name) { return codecForName(QByteArray(name)); }
static QTextCodec* codecForMib(int mib);

static QList<QByteArray> availableCodecs();
static QList<int> availableMibs();

static QTextCodec* codecForLocale();
static void setCodecForLocale(QTextCodec *c);

static QTextCodec* codecForTr();
static void setCodecForTr(QTextCodec *c);

static QTextCodec* codecForCStrings();
static void setCodecForCStrings(QTextCodec *c);

static QTextCodec *codecForHtml(const QByteArray &ba);
static QTextCodec *codecForHtml(const QByteArray &ba, QTextCodec *defaultCodec);

QTextDecoder* makeDecoder() const;
QTextEncoder* makeEncoder() const;

bool canEncode(QChar) const;
bool canEncode(const QString&) const;

QString toUnicode(const QByteArray&) const;
QString toUnicode(const char* chars) const;
QByteArray fromUnicode(const QString& uc) const;
enum ConversionFlag {
DefaultConversion,
ConvertInvalidToNull = 0x80000000,
IgnoreHeader = 0x1
};
typedef QFlags<ConversionFlag> ConversionFlags;

struct ConverterState {
ConverterState(ConversionFlags f = DefaultConversion)
: flags(f), remainingChars(0), invalidChars(0), d(0) { state_data[0] = state_data[1] = state_data[2] = 0; }
~ConverterState() { if (d) qFree(d); }
ConversionFlags flags;
int remainingChars;
int invalidChars;
uint state_data[3];
void *d;
private:
ConverterState(const ConverterState &); ConverterState &operator=(const ConverterState &);
};

QString toUnicode(const char *in, int length, ConverterState *state = 0) const
{ return convertToUnicode(in, length, state); }
QByteArray fromUnicode(const QChar *in, int length, ConverterState *state = 0) const
{ return convertFromUnicode(in, length, state); }

virtual QByteArray name() const = 0;
virtual QList<QByteArray> aliases() const;
virtual int mibEnum() const = 0;

protected:
virtual QString convertToUnicode(const char *in, int length, ConverterState *state) const = 0;
virtual QByteArray convertFromUnicode(const QChar *in, int length, ConverterState *state) const = 0;

QTextCodec();
virtual ~QTextCodec();

public:










# 143 "/home/eagle/qt-copy/include/QtCore/qtextcodec.h"
private:
friend class QTextCodecCleanup;
static QTextCodec *cftr;
};
inline QFlags<QTextCodec::ConversionFlags::enum_type> operator|(QTextCodec::ConversionFlags::enum_type f1, QTextCodec::ConversionFlags::enum_type f2) { return QFlags<QTextCodec::ConversionFlags::enum_type>(f1) | f2; } inline QFlags<QTextCodec::ConversionFlags::enum_type> operator|(QTextCodec::ConversionFlags::enum_type f1, QFlags<QTextCodec::ConversionFlags::enum_type> f2) { return f2 | f1; }

inline QTextCodec* QTextCodec::codecForTr() { return cftr; }
inline void QTextCodec::setCodecForTr(QTextCodec *c) { cftr = c; }
inline QTextCodec* QTextCodec::codecForCStrings() { return QString::codecForCStrings; }
inline void QTextCodec::setCodecForCStrings(QTextCodec *c) { QString::codecForCStrings = c; }

class  QTextEncoder {
QTextEncoder(const QTextEncoder &); QTextEncoder &operator=(const QTextEncoder &);
public:
explicit QTextEncoder(const QTextCodec *codec) : c(codec), state() {}
~QTextEncoder();
QByteArray fromUnicode(const QString& str);
QByteArray fromUnicode(const QChar *uc, int len);



# 164 "/home/eagle/qt-copy/include/QtCore/qtextcodec.h"
private:
const QTextCodec *c;
QTextCodec::ConverterState state;
};

class  QTextDecoder {
QTextDecoder(const QTextDecoder &); QTextDecoder &operator=(const QTextDecoder &);
public:
explicit QTextDecoder(const QTextCodec *codec) : c(codec), state() {}
~QTextDecoder();
QString toUnicode(const char* chars, int len);
QString toUnicode(const QByteArray &ba);
void toUnicode(QString *target, const char *chars, int len);
bool hasFailure() const;
private:
const QTextCodec *c;
QTextCodec::ConverterState state;
};



# 185 "/home/eagle/qt-copy/include/QtCore/qtextcodec.h"





# 1 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextcodecplugin.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qplugin.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"
















































# 1 "/home/eagle/qt-copy/include/QtCore/qobjectdefs.h"











































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtCore/qobject.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtCore/qobject.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"












































































































































































































































































































































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtCore/qobject.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qlist.h"











































































































































































































































































































































































































































































































































































































































































































# 52 "/home/eagle/qt-copy/include/QtCore/qobject.h"





# 57 "/home/eagle/qt-copy/include/QtCore/qobject.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class QEvent;
class QTimerEvent;
class QChildEvent;
struct QMetaObject;
class QVariant;
class QObjectPrivate;
class QObject;
class QThread;
class QWidget;

# 73 "/home/eagle/qt-copy/include/QtCore/qobject.h"
class QRegExp;


# 76 "/home/eagle/qt-copy/include/QtCore/qobject.h"
class QObjectUserData;


# 79 "/home/eagle/qt-copy/include/QtCore/qobject.h"
typedef QList<QObject*> QObjectList;








# 88 "/home/eagle/qt-copy/include/QtCore/qobject.h"
template<typename T> inline T qFindChild(const QObject *, const QString & = QString());
template<typename T> inline QList<T> qFindChildren(const QObject *, const QString & = QString());

# 91 "/home/eagle/qt-copy/include/QtCore/qobject.h"
template<typename T> inline QList<T> qFindChildren(const QObject *, const QRegExp &);



# 95 "/home/eagle/qt-copy/include/QtCore/qobject.h"
class QObjectData {
public:
virtual ~QObjectData() = 0;
QObject *q_ptr;
QObject *parent;
QObjectList children;

uint isWidget : 1;
uint pendTimer : 1;
uint blockSig : 1;
uint wasDeleted : 1;
uint ownObjectName : 1;
uint sendChildEvents : 1;
uint receiveChildEvents : 1;
uint inEventHandler : 1;
uint unused : 24;
int postedEvents;
};


class  QObject
{
Q_OBJECT
Q_PROPERTY(QString objectName READ objectName WRITE setObjectName)
inline QObjectPrivate* d_func() { return reinterpret_cast<QObjectPrivate *>(d_ptr); } inline const QObjectPrivate* d_func() const { return reinterpret_cast<const QObjectPrivate *>(d_ptr); } friend class QObjectPrivate;

public:
explicit QObject(QObject *parent=0);
virtual ~QObject();

virtual bool event(QEvent *);
virtual bool eventFilter(QObject *, QEvent *);




















# 147 "/home/eagle/qt-copy/include/QtCore/qobject.h"
QString objectName() const;
void setObjectName(const QString &name);

inline bool isWidgetType() const { return d_ptr->isWidget; }

inline bool signalsBlocked() const { return d_ptr->blockSig; }
bool blockSignals(bool b);

QThread *thread() const;
void moveToThread(QThread *thread);

int startTimer(int interval);
void killTimer(int id);


# 162 "/home/eagle/qt-copy/include/QtCore/qobject.h"
template<typename T>
inline T findChild(const QString &aName = QString()) const
{ return qFindChild<T>(this, aName); }

template<typename T>
inline QList<T> findChildren(const QString &aName = QString()) const
{ return qFindChildren<T>(this, aName); }


# 171 "/home/eagle/qt-copy/include/QtCore/qobject.h"
template<typename T>
inline QList<T> findChildren(const QRegExp &re) const
{ return qFindChildren<T>(this, re); }











# 185 "/home/eagle/qt-copy/include/QtCore/qobject.h"
inline const QObjectList &children() const { return d_ptr->children; }

void setParent(QObject *);
void installEventFilter(QObject *);
void removeEventFilter(QObject *);


static bool connect(const QObject *sender, const char *signal,
const QObject *receiver, const char *member, Qt::ConnectionType =



# 197 "/home/eagle/qt-copy/include/QtCore/qobject.h"
Qt::AutoConnection

# 199 "/home/eagle/qt-copy/include/QtCore/qobject.h"
);
inline bool connect(const QObject *sender, const char *signal,
const char *member, Qt::ConnectionType type =



# 205 "/home/eagle/qt-copy/include/QtCore/qobject.h"
Qt::AutoConnection

# 207 "/home/eagle/qt-copy/include/QtCore/qobject.h"
) const;

static bool disconnect(const QObject *sender, const char *signal,
const QObject *receiver, const char *member);
inline bool disconnect(const char *signal = 0,
const QObject *receiver = 0, const char *member = 0)
{ return disconnect(this, signal, receiver, member); }
inline bool disconnect(const QObject *receiver, const char *member = 0)
{ return disconnect(this, 0, receiver, member); }

void dumpObjectTree();
void dumpObjectInfo();


# 221 "/home/eagle/qt-copy/include/QtCore/qobject.h"
bool setProperty(const char *name, const QVariant &value);
QVariant property(const char *name) const;
QList<QByteArray> dynamicPropertyNames() const;



# 227 "/home/eagle/qt-copy/include/QtCore/qobject.h"
static uint registerUserData();
void setUserData(uint id, QObjectUserData* data);
QObjectUserData* userData(uint id) const;


# 232 "/home/eagle/qt-copy/include/QtCore/qobject.h"
signals:
void destroyed(QObject * = 0);

public:
inline QObject *parent() const { return d_ptr->parent; }

inline bool inherits(const char *classname) const
{ return const_cast<QObject *>(this)->qt_metacast(classname) != 0; }

public slots:
void deleteLater();

protected:
QObject *sender() const;
int receivers(const char* signal) const;

virtual void timerEvent(QTimerEvent *);
virtual void childEvent(QChildEvent *);
virtual void customEvent(QEvent *);

virtual void connectNotify(const char *signal);
virtual void disconnectNotify(const char *signal);
























# 278 "/home/eagle/qt-copy/include/QtCore/qobject.h"
protected:
QObject(QObjectPrivate &dd, QObject *parent = 0);

protected:
QObjectData *d_ptr;

static const QMetaObject staticQtMetaObject;

friend struct QMetaObject;
friend class QApplication;
friend class QApplicationPrivate;
friend class QCoreApplication;
friend class QCoreApplicationPrivate;
friend class QWidget;
friend class QThreadData;

private:
QObject(const QObject &); QObject &operator=(const QObject &);

};

inline bool QObject::connect(const QObject *asender, const char *asignal,
const char *amember, Qt::ConnectionType atype) const
{ return connect(asender, asignal, this, amember, atype); }


# 304 "/home/eagle/qt-copy/include/QtCore/qobject.h"
class  QObjectUserData {
public:
virtual ~QObjectUserData();
};


# 310 "/home/eagle/qt-copy/include/QtCore/qobject.h"
 void qt_qFindChildren_helper(const QObject *parent, const QString &name, const QRegExp *re,
const QMetaObject &mo, QList<void *> *list);
 QObject *qt_qFindChild_helper(const QObject *parent, const QString &name, const QMetaObject &mo);

















































































# 398 "/home/eagle/qt-copy/include/QtCore/qobject.h"
template<typename T>
inline T qFindChild(const QObject *o, const QString &name)
{ return static_cast<T>(qt_qFindChild_helper(o, name, reinterpret_cast<T>(0)->staticMetaObject)); }

template<typename T>
inline QList<T> qFindChildren(const QObject *o, const QString &name)
{
QList<T> list;
union {
QList<T> *typedList;
QList<void *> *voidList;
} u;
u.typedList = &list;
qt_qFindChildren_helper(o, name, 0, reinterpret_cast<T>(0)->staticMetaObject, u.voidList);
return list;
}


# 416 "/home/eagle/qt-copy/include/QtCore/qobject.h"
template<typename T>
inline QList<T> qFindChildren(const QObject *o, const QRegExp &re)
{
QList<T> list;
union {
QList<T> *typedList;
QList<void *> *voidList;
} u;
u.typedList = &list;
qt_qFindChildren_helper(o, QString(), &re, reinterpret_cast<T>(0)->staticMetaObject, u.voidList);
return list;
}


# 430 "/home/eagle/qt-copy/include/QtCore/qobject.h"
template <class T>
inline T qobject_cast(QObject *object)
{

# 434 "/home/eagle/qt-copy/include/QtCore/qobject.h"
reinterpret_cast<T>(0)->qt_check_for_QOBJECT_macro(*reinterpret_cast<T>(object));

# 436 "/home/eagle/qt-copy/include/QtCore/qobject.h"
return static_cast<T>(reinterpret_cast<T>(0)->staticMetaObject.cast(object));
}

template <class T>
inline T qobject_cast(const QObject *object)
{

# 443 "/home/eagle/qt-copy/include/QtCore/qobject.h"
reinterpret_cast<T>(0)->qt_check_for_QOBJECT_macro(*reinterpret_cast<T>(object));

# 445 "/home/eagle/qt-copy/include/QtCore/qobject.h"
return static_cast<T>(const_cast<const QObject *>(reinterpret_cast<T>(0)->staticMetaObject.cast(const_cast<QObject *>(object))));
}









# 460 "/home/eagle/qt-copy/include/QtCore/qobject.h"
 QDebug operator<<(QDebug, const QObject *);


# 463 "/home/eagle/qt-copy/include/QtCore/qobject.h"







# 47 "/home/eagle/qt-copy/include/QtCore/qplugin.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qpointer.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qpointer.h"


# 49 "/home/eagle/qt-copy/include/QtCore/qpointer.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

template <class T>
class QPointer
{
QObject *o;
public:
inline QPointer() : o(0) {}
inline QPointer(T *p) : o(p)
{ QMetaObject::addGuard(&o); }
inline QPointer(const QPointer<T> &p) : o(p.o)
{ QMetaObject::addGuard(&o); }
inline ~QPointer()
{ QMetaObject::removeGuard(&o); }
inline QPointer<T> &operator=(const QPointer<T> &p)
{ if (this != &p) QMetaObject::changeGuard(&o, p.o); return *this; }
inline QPointer<T> &operator=(T* p)
{ if (o != p) QMetaObject::changeGuard(&o, p); return *this; }

inline bool isNull() const
{ return !o; }

inline T* operator->() const
{ return static_cast<T*>(const_cast<QObject*>(o)); }
inline T& operator*() const
{ return *static_cast<T*>(const_cast<QObject*>(o)); }
inline operator T*() const
{ return static_cast<T*>(const_cast<QObject*>(o)); }
inline T* data() const
{ return static_cast<T*>(const_cast<QObject*>(o)); }
};


template <class T>
inline bool operator==(const T *o, const QPointer<T> &p)
{ return o == p.operator->(); }


# 91 "/home/eagle/qt-copy/include/QtCore/qpointer.h"
template<class T>
inline bool operator==(const QPointer<T> &p, const T *o)
{ return p.operator->() == o; }


# 96 "/home/eagle/qt-copy/include/QtCore/qpointer.h"
template <class T>
inline bool operator==(T *o, const QPointer<T> &p)
{ return o == p.operator->(); }

template<class T>
inline bool operator==(const QPointer<T> &p, T *o)
{ return p.operator->() == o; }

template<class T>
inline bool operator==(const QPointer<T> &p1, const QPointer<T> &p2)
{ return p1.operator->() == p2.operator->(); }


template <class T>
inline bool operator!=(const T *o, const QPointer<T> &p)
{ return o != p.operator->(); }


# 114 "/home/eagle/qt-copy/include/QtCore/qpointer.h"
template<class T>
inline bool operator!= (const QPointer<T> &p, const T *o)
{ return p.operator->() != o; }


# 119 "/home/eagle/qt-copy/include/QtCore/qpointer.h"
template <class T>
inline bool operator!=(T *o, const QPointer<T> &p)
{ return o != p.operator->(); }

template<class T>
inline bool operator!= (const QPointer<T> &p, T *o)
{ return p.operator->() != o; }

template<class T>
inline bool operator!= (const QPointer<T> &p1, const QPointer<T> &p2)
{ return p1.operator->() != p2.operator->() ; }












# 142 "/home/eagle/qt-copy/include/QtCore/qpointer.h"





# 48 "/home/eagle/qt-copy/include/QtCore/qplugin.h"


# 50 "/home/eagle/qt-copy/include/QtCore/qplugin.h"




typedef QtValidLicenseForCoreModule QtCoreModule;









# 64 "/home/eagle/qt-copy/include/QtCore/qplugin.h"
typedef QObject *(*QtPluginInstanceFunction)();

void  qRegisterStaticPluginInstanceFunction(QtPluginInstanceFunction function);
















# 103 "/home/eagle/qt-copy/include/QtCore/qplugin.h"

























# 139 "/home/eagle/qt-copy/include/QtCore/qplugin.h"





# 47 "/home/eagle/qt-copy/include/QtCore/qtextcodecplugin.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qfactoryinterface.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qfactoryinterface.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qalgorithms.h"

















































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qdatastream.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"















































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"




# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 52 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"






# 58 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class QByteArray;
class QIODevicePrivate;

class  QIODevice

# 69 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"
: public QObject

# 71 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"
{

# 73 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"
Q_OBJECT

# 75 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"
public:
enum OpenModeFlag {
NotOpen = 0x0000,
ReadOnly = 0x0001,
WriteOnly = 0x0002,
ReadWrite = ReadOnly | WriteOnly,
Append = 0x0004,
Truncate = 0x0008,
Text = 0x0010,
Unbuffered = 0x0020
};
typedef QFlags<OpenModeFlag> OpenMode;

QIODevice();

# 90 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"
explicit QIODevice(QObject *parent);

# 92 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"
virtual ~QIODevice();

OpenMode openMode() const;

void setTextModeEnabled(bool enabled);
bool isTextModeEnabled() const;

bool isOpen() const;
bool isReadable() const;
bool isWritable() const;
virtual bool isSequential() const;

virtual bool open(OpenMode mode);
virtual void close();



virtual qint64 pos() const;
virtual qint64 size() const;
virtual bool seek(qint64 pos);
virtual bool atEnd() const;
virtual bool reset();

virtual qint64 bytesAvailable() const;
virtual qint64 bytesToWrite() const;

qint64 read(char *data, qint64 maxlen);
QByteArray read(qint64 maxlen);
QByteArray readAll();
qint64 readLine(char *data, qint64 maxlen);
QByteArray readLine(qint64 maxlen = 0);
virtual bool canReadLine() const;

qint64 write(const char *data, qint64 len);
inline qint64 write(const QByteArray &data)
{ return write(data.constData(), data.size()); }

qint64 peek(char *data, qint64 maxlen);
QByteArray peek(qint64 maxlen);

virtual bool waitForReadyRead(int msecs);
virtual bool waitForBytesWritten(int msecs);

void ungetChar(char c);
bool putChar(char c);
bool getChar(char *c);

QString errorString() const;


# 142 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"
signals:
void readyRead();
void bytesWritten(qint64 bytes);
void aboutToClose();
void readChannelFinished();


# 149 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"
protected:



# 153 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"
QIODevice(QIODevicePrivate &dd, QObject *parent = 0);

# 155 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"
virtual qint64 readData(char *data, qint64 maxlen) = 0;
virtual qint64 readLineData(char *data, qint64 maxlen);
virtual qint64 writeData(const char *data, qint64 len) = 0;

void setOpenMode(OpenMode openMode);

void setErrorString(const QString &errorString);





# 167 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"
private:
inline QIODevicePrivate* d_func() { return reinterpret_cast<QIODevicePrivate *>(d_ptr); } inline const QIODevicePrivate* d_func() const { return reinterpret_cast<const QIODevicePrivate *>(d_ptr); } friend class QIODevicePrivate;
QIODevice(const QIODevice &); QIODevice &operator=(const QIODevice &);


































# 204 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"
};

inline QFlags<QIODevice::OpenMode::enum_type> operator|(QIODevice::OpenMode::enum_type f1, QIODevice::OpenMode::enum_type f2) { return QFlags<QIODevice::OpenMode::enum_type>(f1) | f2; } inline QFlags<QIODevice::OpenMode::enum_type> operator|(QIODevice::OpenMode::enum_type f1, QFlags<QIODevice::OpenMode::enum_type> f2) { return f2 | f1; }







































# 246 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"
class QDebug;
 QDebug operator<<(QDebug debug, QIODevice::OpenMode modes);


# 250 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"





# 47 "/home/eagle/qt-copy/include/QtCore/qdatastream.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtCore/qdatastream.h"






# 54 "/home/eagle/qt-copy/include/QtCore/qdatastream.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class QByteArray;
class QIODevice;

template <typename T> class QList;
template <typename T> class QLinkedList;
template <typename T> class QVector;
template <typename T> class QSet;
template <class Key, class T> class QHash;
template <class Key, class T> class QMap;

class QDataStreamPrivate;


# 73 "/home/eagle/qt-copy/include/QtCore/qdatastream.h"
class  QDataStream
{
public:
enum Version {
Qt_1_0 = 1,
Qt_2_0 = 2,
Qt_2_1 = 3,
Qt_3_0 = 4,
Qt_3_1 = 5,
Qt_3_3 = 6,
Qt_4_0 = 7,
Qt_4_1 = Qt_4_0,
Qt_4_2 = 8,
Qt_4_3 = 9,
Qt_4_4 = 10



# 91 "/home/eagle/qt-copy/include/QtCore/qdatastream.h"
};

enum ByteOrder {
BigEndian = QSysInfo::BigEndian,
LittleEndian = QSysInfo::LittleEndian
};

enum Status {
Ok,
ReadPastEnd,
ReadCorruptData
};

QDataStream();
explicit QDataStream(QIODevice *);



# 109 "/home/eagle/qt-copy/include/QtCore/qdatastream.h"
QDataStream(QByteArray *, QIODevice::OpenMode flags);
QDataStream(const QByteArray &);
virtual ~QDataStream();

QIODevice *device() const;
void setDevice(QIODevice *);
void unsetDevice();

bool atEnd() const;




# 122 "/home/eagle/qt-copy/include/QtCore/qdatastream.h"
Status status() const;
void setStatus(Status status);
void resetStatus();

ByteOrder byteOrder() const;
void setByteOrder(ByteOrder);

int version() const;
void setVersion(int);

QDataStream &operator>>(qint8 &i);
QDataStream &operator>>(quint8 &i);
QDataStream &operator>>(qint16 &i);
QDataStream &operator>>(quint16 &i);
QDataStream &operator>>(qint32 &i);
QDataStream &operator>>(quint32 &i);
QDataStream &operator>>(qint64 &i);
QDataStream &operator>>(quint64 &i);

QDataStream &operator>>(bool &i);
QDataStream &operator>>(float &f);
QDataStream &operator>>(double &f);
QDataStream &operator>>(char *&str);

QDataStream &operator<<(qint8 i);
QDataStream &operator<<(quint8 i);
QDataStream &operator<<(qint16 i);
QDataStream &operator<<(quint16 i);
QDataStream &operator<<(qint32 i);
QDataStream &operator<<(quint32 i);
QDataStream &operator<<(qint64 i);
QDataStream &operator<<(quint64 i);
QDataStream &operator<<(bool i);
QDataStream &operator<<(float f);
QDataStream &operator<<(double f);
QDataStream &operator<<(const char *str);

QDataStream &readBytes(char *&, uint &len);
int readRawData(char *, int len);

QDataStream &writeBytes(const char *, uint len);
int writeRawData(const char *, int len);

int skipRawData(int len);










# 176 "/home/eagle/qt-copy/include/QtCore/qdatastream.h"
private:
QDataStream(const QDataStream &); QDataStream &operator=(const QDataStream &);

QDataStreamPrivate *d;

QIODevice *dev;
bool owndev;
bool noswap;
ByteOrder byteorder;
int ver;
Status q_status;
};






inline QIODevice *QDataStream::device() const
{ return dev; }

inline QDataStream::ByteOrder QDataStream::byteOrder() const
{ return byteorder; }

inline int QDataStream::version() const
{ return ver; }

inline void QDataStream::setVersion(int v)
{ ver = v; }

inline QDataStream &QDataStream::operator>>(quint8 &i)
{ return *this >> reinterpret_cast<qint8&>(i); }

inline QDataStream &QDataStream::operator>>(quint16 &i)
{ return *this >> reinterpret_cast<qint16&>(i); }

inline QDataStream &QDataStream::operator>>(quint32 &i)
{ return *this >> reinterpret_cast<qint32&>(i); }

inline QDataStream &QDataStream::operator>>(quint64 &i)
{ return *this >> reinterpret_cast<qint64&>(i); }

inline QDataStream &QDataStream::operator<<(quint8 i)
{ return *this << qint8(i); }

inline QDataStream &QDataStream::operator<<(quint16 i)
{ return *this << qint16(i); }

inline QDataStream &QDataStream::operator<<(quint32 i)
{ return *this << qint32(i); }

inline QDataStream &QDataStream::operator<<(quint64 i)
{ return *this << qint64(i); }

template <typename T>
QDataStream& operator>>(QDataStream& s, QList<T>& l)
{
l.clear();
quint32 c;
s >> c;
for(quint32 i = 0; i < c; ++i)
{
T t;
s >> t;
l.append(t);
if (s.atEnd())
break;
}
return s;
}

template <typename T>
QDataStream& operator<<(QDataStream& s, const QList<T>& l)
{
s << quint32(l.size());
for (int i = 0; i < l.size(); ++i)
s << l.at(i);
return s;
}

template <typename T>
QDataStream& operator>>(QDataStream& s, QLinkedList<T>& l)
{
l.clear();
quint32 c;
s >> c;
for(quint32 i = 0; i < c; ++i)
{
T t;
s >> t;
l.append(t);
if (s.atEnd())
break;
}
return s;
}

template <typename T>
QDataStream& operator<<(QDataStream& s, const QLinkedList<T>& l)
{
s << quint32(l.size());
typename QLinkedList<T>::ConstIterator it = l.constBegin();
for(; it != l.constEnd(); ++it)
s << *it;
return s;
}

template<typename T>
QDataStream& operator>>(QDataStream& s, QVector<T>& v)
{
v.clear();
quint32 c;
s >> c;
v.resize(c);
for(quint32 i = 0; i < c; ++i) {
T t;
s >> t;
v[i] = t;
}
return s;
}

template<typename T>
QDataStream& operator<<(QDataStream& s, const QVector<T>& v)
{
s << quint32(v.size());
for (typename QVector<T>::const_iterator it = v.begin(); it != v.end(); ++it)
s << *it;
return s;
}

template <typename T>
QDataStream &operator>>(QDataStream &in, QSet<T> &set)
{
set.clear();
quint32 c;
in >> c;
for (quint32 i = 0; i < c; ++i) {
T t;
in >> t;
set << t;
if (in.atEnd())
break;
}
return in;
}

template <typename T>
QDataStream& operator<<(QDataStream &out, const QSet<T> &set)
{
out << quint32(set.size());
typename QSet<T>::const_iterator i = set.constBegin();
while (i != set.constEnd()) {
out << *i;
++i;
}
return out;
}

template <class Key, class T>
 QDataStream &operator>>(QDataStream &in, QHash<Key, T> &hash)
{
QDataStream::Status oldStatus = in.status();
in.resetStatus();
hash.clear();

quint32 n;
in >> n;

for (quint32 i = 0; i < n; ++i) {
if (in.status() != QDataStream::Ok)
break;

Key k;
T t;
in >> k >> t;
hash.insertMulti(k, t);
}

if (in.status() != QDataStream::Ok)
hash.clear();
if (oldStatus != QDataStream::Ok)
in.setStatus(oldStatus);
return in;
}

template <class Key, class T>
 QDataStream &operator<<(QDataStream &out, const QHash<Key, T>& hash)
{
out << quint32(hash.size());
typename QHash<Key, T>::ConstIterator it = hash.end();
typename QHash<Key, T>::ConstIterator begin = hash.begin();
while (it != begin) {
--it;
out << it.key() << it.value();
}
return out;
}




# 378 "/home/eagle/qt-copy/include/QtCore/qdatastream.h"
template <class aKey, class aT>
 QDataStream &operator>>(QDataStream &in, QMap<aKey, aT> &map)

# 381 "/home/eagle/qt-copy/include/QtCore/qdatastream.h"
{
QDataStream::Status oldStatus = in.status();
in.resetStatus();
map.clear();

quint32 n;
in >> n;

map.detach();
map.setInsertInOrder(true);
for (quint32 i = 0; i < n; ++i) {
if (in.status() != QDataStream::Ok)
break;

aKey key;
aT value;
in >> key >> value;
map.insertMulti(key, value);
}
map.setInsertInOrder(false);
if (in.status() != QDataStream::Ok)
map.clear();
if (oldStatus != QDataStream::Ok)
in.setStatus(oldStatus);
return in;
}

template <class Key, class T>
 QDataStream &operator<<(QDataStream &out, const QMap<Key, T> &map)
{
out << quint32(map.size());
typename QMap<Key, T>::ConstIterator it = map.end();
typename QMap<Key, T>::ConstIterator begin = map.begin();
while (it != begin) {
--it;
out << it.key() << it.value();
}
return out;
}



# 423 "/home/eagle/qt-copy/include/QtCore/qdatastream.h"





# 48 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qlist.h"











































































































































































































































































































































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qregexp.h"
















































# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtCore/qregexp.h"





# 54 "/home/eagle/qt-copy/include/QtCore/qregexp.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

struct QRegExpPrivate;
class QStringList;

class  QRegExp
{
public:
enum PatternSyntax { RegExp, Wildcard, FixedString, RegExp2 };
enum CaretMode { CaretAtZero, CaretAtOffset, CaretWontMatch };

QRegExp();
explicit QRegExp(const QString &pattern, Qt::CaseSensitivity cs = Qt::CaseSensitive,
PatternSyntax syntax = RegExp);
QRegExp(const QRegExp &rx);
~QRegExp();
QRegExp &operator=(const QRegExp &rx);

bool operator==(const QRegExp &rx) const;
inline bool operator!=(const QRegExp &rx) const { return !operator==(rx); }

bool isEmpty() const;
bool isValid() const;
QString pattern() const;
void setPattern(const QString &pattern);
Qt::CaseSensitivity caseSensitivity() const;
void setCaseSensitivity(Qt::CaseSensitivity cs);





# 90 "/home/eagle/qt-copy/include/QtCore/qregexp.h"
PatternSyntax patternSyntax() const;
void setPatternSyntax(PatternSyntax syntax);






# 98 "/home/eagle/qt-copy/include/QtCore/qregexp.h"
bool isMinimal() const;
void setMinimal(bool minimal);




# 104 "/home/eagle/qt-copy/include/QtCore/qregexp.h"
bool exactMatch(const QString &str) const;

int indexIn(const QString &str, int offset = 0, CaretMode caretMode = CaretAtZero) const;
int lastIndexIn(const QString &str, int offset = -1, CaretMode caretMode = CaretAtZero) const;








# 116 "/home/eagle/qt-copy/include/QtCore/qregexp.h"
int matchedLength() const;

# 118 "/home/eagle/qt-copy/include/QtCore/qregexp.h"
int numCaptures() const;
QStringList capturedTexts();
QString cap(int nth = 0);
int pos(int nth = 0);
QString errorString();


# 125 "/home/eagle/qt-copy/include/QtCore/qregexp.h"
static QString escape(const QString &str);










# 136 "/home/eagle/qt-copy/include/QtCore/qregexp.h"
private:
QRegExpPrivate *priv;
};

template <> class QTypeInfo<QRegExp> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QRegExp)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QRegExp"; } };


# 143 "/home/eagle/qt-copy/include/QtCore/qregexp.h"
 QDataStream &operator<<(QDataStream &out, const QRegExp &regExp);
 QDataStream &operator>>(QDataStream &in, QRegExp &regExp);


# 147 "/home/eagle/qt-copy/include/QtCore/qregexp.h"







# 50 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstringmatcher.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qstringmatcher.h"


# 49 "/home/eagle/qt-copy/include/QtCore/qstringmatcher.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class QStringMatcherPrivate;

class  QStringMatcher
{
public:
QStringMatcher();
QStringMatcher(const QString &pattern,
Qt::CaseSensitivity cs = Qt::CaseSensitive);
QStringMatcher(const QStringMatcher &other);
~QStringMatcher();

QStringMatcher &operator=(const QStringMatcher &other);

void setPattern(const QString &pattern);
void setCaseSensitivity(Qt::CaseSensitivity cs);

int indexIn(const QString &str, int from = 0) const;
inline QString pattern() const { return q_pattern; }
inline Qt::CaseSensitivity caseSensitivity() const { return q_cs; }

private:
QStringMatcherPrivate *d_ptr;
QString q_pattern;
Qt::CaseSensitivity q_cs;
uint q_skiptable[256];
};


int qFindString(const QChar *haystack, int haystackLen, int from,
const QChar *needle, int needleLen, Qt::CaseSensitivity cs);
int qFindStringBoyerMoore(const QChar *haystack, int haystackLen, int from,
const QChar *needle, int needleLen, Qt::CaseSensitivity cs);






# 52 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"





# 57 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class QRegExp;

typedef QListIterator<QString> QStringListIterator;
typedef QMutableListIterator<QString> QMutableStringListIterator;

class QStringList : public QList<QString>
{
public:
inline QStringList() { }
inline explicit QStringList(const QString &i) { append(i); }
inline QStringList(const QStringList &l) : QList<QString>(l) { }
inline QStringList(const QList<QString> &l) : QList<QString>(l) { }

inline void sort();

inline QString join(const QString &sep) const;

inline QStringList filter(const QString &str, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
inline QBool contains(const QString &str, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;

inline QStringList &replaceInStrings(const QString &before, const QString &after, Qt::CaseSensitivity cs = Qt::CaseSensitive);

inline QStringList operator+(const QStringList &other) const
{ QStringList n = *this; n += other; return n; }
inline QStringList &operator<<(const QString &str)
{ append(str); return *this; }
inline QStringList &operator<<(const QStringList &l)
{ *this += l; return *this; }


# 93 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"
inline QStringList filter(const QRegExp &rx) const;
inline QStringList &replaceInStrings(const QRegExp &rx, const QString &after);
inline int indexOf(const QRegExp &rx, int from = 0) const;
inline int lastIndexOf(const QRegExp &rx, int from = -1) const;





# 102 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"
inline int indexOf(const QString &str, int from = 0) const
{ return QList<QString>::indexOf(str, from); }
inline int lastIndexOf(const QString &str, int from = -1) const
{ return QList<QString>::lastIndexOf(str, from); }



















# 125 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"
};

namespace QtPrivate {
void  QStringList_sort(QStringList *that);
QString  QStringList_join(const QStringList *that, const QString &sep);
QStringList  QStringList_filter(const QStringList *that, const QString &str,
Qt::CaseSensitivity cs);

QBool  QStringList_contains(const QStringList *that, const QString &str, Qt::CaseSensitivity cs);
void  QStringList_replaceInStrings(QStringList *that, const QString &before, const QString &after,
Qt::CaseSensitivity cs);


# 138 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"
void  QStringList_replaceInStrings(QStringList *that, const QRegExp &rx, const QString &after);
QStringList  QStringList_filter(const QStringList *that, const QRegExp &re);
int  QStringList_indexOf(const QStringList *that, const QRegExp &rx, int from);
int  QStringList_lastIndexOf(const QStringList *that, const QRegExp &rx, int from);

# 143 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"
}

inline void QStringList::sort()
{
QtPrivate::QStringList_sort(this);
}

inline QString QStringList::join(const QString &sep) const
{
return QtPrivate::QStringList_join(this, sep);
}

inline QStringList QStringList::filter(const QString &str, Qt::CaseSensitivity cs) const
{
return QtPrivate::QStringList_filter(this, str, cs);
}

inline QBool QStringList::contains(const QString &str, Qt::CaseSensitivity cs) const
{
return QtPrivate::QStringList_contains(this, str, cs);
}

inline QStringList &QStringList::replaceInStrings(const QString &before, const QString &after, Qt::CaseSensitivity cs)
{
QtPrivate::QStringList_replaceInStrings(this, before, after, cs);
return *this;
}


# 172 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"
inline QStringList &QStringList::replaceInStrings(const QRegExp &rx, const QString &after)
{
QtPrivate::QStringList_replaceInStrings(this, rx, after);
return *this;
}

inline QStringList QStringList::filter(const QRegExp &rx) const
{
return QtPrivate::QStringList_filter(this, rx);
}

inline int QStringList::indexOf(const QRegExp &rx, int from) const
{
return QtPrivate::QStringList_indexOf(this, rx, from);
}

inline int QStringList::lastIndexOf(const QRegExp &rx, int from) const
{
return QtPrivate::QStringList_lastIndexOf(this, rx, from);
}


































# 226 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"
inline QDataStream &operator>>(QDataStream &in, QStringList &list)
{
return operator>>(in, static_cast<QList<QString> &>(list));
}
inline QDataStream &operator<<(QDataStream &out, const QStringList &list)
{
return operator<<(out, static_cast<const QList<QString> &>(list));
}


# 236 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"





# 48 "/home/eagle/qt-copy/include/QtCore/qfactoryinterface.h"


# 50 "/home/eagle/qt-copy/include/QtCore/qfactoryinterface.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

struct  QFactoryInterface
{
virtual ~QFactoryInterface() {}
virtual QStringList keys() const = 0;
};


template <> inline QFactoryInterface *qobject_cast<QFactoryInterface *>(QObject *object) { return reinterpret_cast<QFactoryInterface *>((object ? object->qt_metacast("com.trolltech.Qt.QFactoryInterface") : 0)); } template <> inline QFactoryInterface *qobject_cast<QFactoryInterface *>(const QObject *object) { return reinterpret_cast<QFactoryInterface *>((object ? const_cast<QObject *>(object)->qt_metacast("com.trolltech.Qt.QFactoryInterface") : 0)); }






# 48 "/home/eagle/qt-copy/include/QtCore/qtextcodecplugin.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qlist.h"











































































































































































































































































































































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtCore/qtextcodecplugin.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"












































































































































































































































































































































































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtCore/qtextcodecplugin.h"


# 52 "/home/eagle/qt-copy/include/QtCore/qtextcodecplugin.h"




typedef QtValidLicenseForCoreModule QtCoreModule;



# 60 "/home/eagle/qt-copy/include/QtCore/qtextcodecplugin.h"
class QTextCodec;

struct  QTextCodecFactoryInterface : public QFactoryInterface
{
virtual QTextCodec *create(const QString &key) = 0;
};



# 69 "/home/eagle/qt-copy/include/QtCore/qtextcodecplugin.h"
template <> inline QTextCodecFactoryInterface *qobject_cast<QTextCodecFactoryInterface *>(QObject *object) { return reinterpret_cast<QTextCodecFactoryInterface *>((object ? object->qt_metacast("com.trolltech.Qt.QTextCodecFactoryInterface") : 0)); } template <> inline QTextCodecFactoryInterface *qobject_cast<QTextCodecFactoryInterface *>(const QObject *object) { return reinterpret_cast<QTextCodecFactoryInterface *>((object ? const_cast<QObject *>(object)->qt_metacast("com.trolltech.Qt.QTextCodecFactoryInterface") : 0)); }


class  QTextCodecPlugin : public QObject, public QTextCodecFactoryInterface
{
Q_OBJECT

public:
explicit QTextCodecPlugin(QObject *parent = 0);
~QTextCodecPlugin();

virtual QList<QByteArray> names() const = 0;
virtual QList<QByteArray> aliases() const = 0;
virtual QTextCodec *createForName(const QByteArray &name) = 0;

virtual QList<int> mibEnums() const = 0;
virtual QTextCodec *createForMib(int mib) = 0;

private:
QStringList keys() const;
QTextCodec *create(const QString &name);
};



# 94 "/home/eagle/qt-copy/include/QtCore/qtextcodecplugin.h"





# 2 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuture.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qfuture.h"




# 1 "/home/eagle/qt-copy/include/QtCore/qfutureinterface.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qfutureinterface.h"




# 1 "/home/eagle/qt-copy/include/QtCore/qmutex.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qmutex.h"



# 50 "/home/eagle/qt-copy/include/QtCore/qmutex.h"




typedef QtValidLicenseForCoreModule QtCoreModule;



# 58 "/home/eagle/qt-copy/include/QtCore/qmutex.h"
class QMutexPrivate;

class  QMutex
{
friend class QWaitCondition;
friend class QWaitConditionPrivate;

public:
enum RecursionMode { NonRecursive, Recursive };

explicit QMutex(RecursionMode mode = NonRecursive);
~QMutex();

void lock();
bool tryLock();
bool tryLock(int timeout);
void unlock();















# 90 "/home/eagle/qt-copy/include/QtCore/qmutex.h"
private:
QMutex(const QMutex &); QMutex &operator=(const QMutex &);

QMutexPrivate *d;
};

class  QMutexLocker
{
public:
inline explicit QMutexLocker(QMutex *m)
: mtx(m)
{
qt_noop();
relock();
}
inline ~QMutexLocker() { unlock(); }

inline void unlock()
{
if (mtx) {
if ((val & quintptr(1u)) == quintptr(1u)) {
val &= ~quintptr(1u);
mtx->unlock();
}
}
}

inline void relock()
{
if (mtx) {
if ((val & quintptr(1u)) == quintptr(0u)) {
mtx->lock();
val |= quintptr(1u);
}
}
}






# 132 "/home/eagle/qt-copy/include/QtCore/qmutex.h"
inline QMutex *mutex() const
{
return reinterpret_cast<QMutex *>(val & ~quintptr(1u));
}





# 141 "/home/eagle/qt-copy/include/QtCore/qmutex.h"
private:
QMutexLocker(const QMutexLocker &); QMutexLocker &operator=(const QMutexLocker &);

union {
QMutex *mtx;
quintptr val;
};
};









































# 190 "/home/eagle/qt-copy/include/QtCore/qmutex.h"





# 51 "/home/eagle/qt-copy/include/QtCore/qfutureinterface.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentexception.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qtconcurrentexception.h"




# 1 "/home/eagle/qt-copy/include/QtCore/qatomic.h"

























































































































































































































# 51 "/home/eagle/qt-copy/include/QtCore/qtconcurrentexception.h"






# 57 "/home/eagle/qt-copy/include/QtCore/qtconcurrentexception.h"



typedef QtValidLicenseForCoreModule QtCoreModule;

namespace QtConcurrent
{



# 67 "/home/eagle/qt-copy/include/QtCore/qtconcurrentexception.h"
class  Exception : public std::exception
{
public:
virtual void raise() const;
virtual Exception *clone() const;
};

class  UnhandledException : public Exception
{
public:
void raise() const;
Exception *clone() const;
};

namespace internal {

class Base;
class ExceptionHolder
{
public:
ExceptionHolder(Exception *exception = 0);
ExceptionHolder(const ExceptionHolder &other);
void operator=(const ExceptionHolder &other);
~ExceptionHolder();
Exception *exception() const;
Base *base;
};

class  ExceptionStore
{
public:
void setException(const Exception &e);
bool hasException() const;
ExceptionHolder exception();
void throwPossibleException();
bool hasThrown() const;
ExceptionHolder exceptionHolder;
};

} 
















# 123 "/home/eagle/qt-copy/include/QtCore/qtconcurrentexception.h"
} 







# 52 "/home/eagle/qt-copy/include/QtCore/qfutureinterface.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentresultstore.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qtconcurrentresultstore.h"




# 1 "/home/eagle/qt-copy/include/QtCore/qmap.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qatomic.h"

























































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qmap.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qiterator.h"








































































# 48 "/home/eagle/qt-copy/include/QtCore/qmap.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qlist.h"











































































































































































































































































































































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtCore/qmap.h"









# 58 "/home/eagle/qt-copy/include/QtCore/qmap.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

struct  QMapData
{
struct Node {
Node *backward;
Node *forward[1];
};
enum { LastLevel = 11, Sparseness = 3 };

QMapData *backward;
QMapData *forward[QMapData::LastLevel + 1];
QBasicAtomicInt ref;
int topLevel;
int size;
uint randomBits;
uint insertInOrder : 1;
uint sharable : 1;

static QMapData *createData();
void continueFreeData(int offset);
Node *node_create(Node *update[], int offset);
void node_delete(Node *update[], int offset, Node *node);





# 90 "/home/eagle/qt-copy/include/QtCore/qmap.h"
static QMapData shared_null;
};












template <class Key> inline bool qMapLessThanKey(const Key &key1, const Key &key2)
{
return key1 < key2;
}


# 110 "/home/eagle/qt-copy/include/QtCore/qmap.h"
template <class Ptr> inline bool qMapLessThanKey(Ptr *key1, Ptr *key2)
{
qt_noop();
return reinterpret_cast<ulong>(key1) < reinterpret_cast<ulong>(key2);
}

template <class Ptr> inline bool qMapLessThanKey(const Ptr *key1, const Ptr *key2)
{
qt_noop();
return reinterpret_cast<ulong>(key1) < reinterpret_cast<ulong>(key2);
}


# 123 "/home/eagle/qt-copy/include/QtCore/qmap.h"
template <class Key, class T>
class QMap
{
struct Node {
Key key;
T value;
QMapData::Node *backward;
QMapData::Node *forward[1];
};
union {
QMapData *d;
QMapData::Node *e;
};

struct PayloadNode
{
Key key;
T value;
QMapData::Node *backward;
};

static inline int payload() { return sizeof(PayloadNode) - sizeof(QMapData::Node *); }
static inline Node *concrete(QMapData::Node *node) {
return reinterpret_cast<Node *>(reinterpret_cast<char *>(node) - payload());
}

public:
inline QMap() : d(&QMapData::shared_null) { d->ref.ref(); }
inline QMap(const QMap<Key, T> &other) : d(other.d)
{ d->ref.ref(); if (!d->sharable) detach(); }
inline ~QMap() { if (!d) return; if (!d->ref.deref()) freeData(d); }

QMap<Key, T> &operator=(const QMap<Key, T> &other);





# 161 "/home/eagle/qt-copy/include/QtCore/qmap.h"
bool operator==(const QMap<Key, T> &other) const;
inline bool operator!=(const QMap<Key, T> &other) const { return !(*this == other); }

inline int size() const { return d->size; }

inline bool isEmpty() const { return d->size == 0; }

inline void detach() { if (d->ref != 1) detach_helper(); }
inline bool isDetached() const { return d->ref == 1; }
inline void setSharable(bool sharable) { if (!sharable) detach(); d->sharable = sharable; }
inline void setInsertInOrder(bool ordered) { d->insertInOrder = ordered; }

void clear();

int remove(const Key &key);
T take(const Key &key);

bool contains(const Key &key) const;
const Key key(const T &value) const;
const Key key(const T &value, const Key &defaultKey) const;
const T value(const Key &key) const;
const T value(const Key &key, const T &defaultValue) const;
T &operator[](const Key &key);
const T operator[](const Key &key) const;

QList<Key> uniqueKeys() const;
QList<Key> keys() const;
QList<Key> keys(const T &value) const;
QList<T> values() const;
QList<T> values(const Key &key) const;
int count(const Key &key) const;

class const_iterator;

class iterator
{
friend class const_iterator;
QMapData::Node *i;

public:
typedef std::bidirectional_iterator_tag iterator_category;
typedef ptrdiff_t difference_type;
typedef T value_type;
typedef T *pointer;
typedef T &reference;


inline operator QMapData::Node *() const { return i; }
inline iterator() : i(0) { }
inline iterator(QMapData::Node *node) : i(node) { }

inline const Key &key() const { return concrete(i)->key; }
inline T &value() const { return concrete(i)->value; }



# 217 "/home/eagle/qt-copy/include/QtCore/qmap.h"
inline T &operator*() const { return concrete(i)->value; }
inline T *operator->() const { return &concrete(i)->value; }
inline bool operator==(const iterator &o) const { return i == o.i; }
inline bool operator!=(const iterator &o) const { return i != o.i; }

inline iterator &operator++() {
i = i->forward[0];
return *this;
}
inline iterator operator++(int) {
iterator r = *this;
i = i->forward[0];
return r;
}
inline iterator &operator--() {
i = i->backward;
return *this;
}
inline iterator operator--(int) {
iterator r = *this;
i = i->backward;
return r;
}
inline iterator operator+(int j) const
{ iterator r = *this; if (j > 0) while (j--) ++r; else while (j++) --r; return r; }
inline iterator operator-(int j) const { return operator+(-j); }
inline iterator &operator+=(int j) { return *this = *this + j; }
inline iterator &operator-=(int j) { return *this = *this - j; }





# 250 "/home/eagle/qt-copy/include/QtCore/qmap.h"
public:

# 252 "/home/eagle/qt-copy/include/QtCore/qmap.h"
inline bool operator==(const const_iterator &o) const
{ return i == o.i; }
inline bool operator!=(const const_iterator &o) const
{ return i != o.i; }

private:

inline operator bool() const { return false; }
};
friend class iterator;

class const_iterator
{
friend class iterator;
QMapData::Node *i;

public:
typedef std::bidirectional_iterator_tag iterator_category;
typedef ptrdiff_t difference_type;
typedef T value_type;
typedef const T *pointer;
typedef const T &reference;


inline operator QMapData::Node *() const { return i; }
inline const_iterator() : i(0) { }
inline const_iterator(QMapData::Node *node) : i(node) { }



# 282 "/home/eagle/qt-copy/include/QtCore/qmap.h"
inline const_iterator(const iterator &o)

# 284 "/home/eagle/qt-copy/include/QtCore/qmap.h"
{ i = o.i; }

inline const Key &key() const { return concrete(i)->key; }
inline const T &value() const { return concrete(i)->value; }



# 291 "/home/eagle/qt-copy/include/QtCore/qmap.h"
inline const T &operator*() const { return concrete(i)->value; }
inline const T *operator->() const { return &concrete(i)->value; }
inline bool operator==(const const_iterator &o) const { return i == o.i; }
inline bool operator!=(const const_iterator &o) const { return i != o.i; }

inline const_iterator &operator++() {
i = i->forward[0];
return *this;
}
inline const_iterator operator++(int) {
const_iterator r = *this;
i = i->forward[0];
return r;
}
inline const_iterator &operator--() {
i = i->backward;
return *this;
}
inline const_iterator operator--(int) {
const_iterator r = *this;
i = i->backward;
return r;
}
inline const_iterator operator+(int j) const
{ const_iterator r = *this; if (j > 0) while (j--) ++r; else while (j++) --r; return r; }
inline const_iterator operator-(int j) const { return operator+(-j); }
inline const_iterator &operator+=(int j) { return *this = *this + j; }
inline const_iterator &operator-=(int j) { return *this = *this - j; }








# 327 "/home/eagle/qt-copy/include/QtCore/qmap.h"
private:

inline operator bool() const { return false; }
};
friend class const_iterator;


inline iterator begin() { detach(); return iterator(e->forward[0]); }
inline const_iterator begin() const { return const_iterator(e->forward[0]); }
inline const_iterator constBegin() const { return const_iterator(e->forward[0]); }
inline iterator end() {
detach();
return iterator(e);
}
inline const_iterator end() const { return const_iterator(e); }
inline const_iterator constEnd() const { return const_iterator(e); }
iterator erase(iterator it);





# 349 "/home/eagle/qt-copy/include/QtCore/qmap.h"

typedef iterator Iterator;
typedef const_iterator ConstIterator;
inline int count() const { return d->size; }
iterator find(const Key &key);
const_iterator find(const Key &key) const;
const_iterator constFind(const Key &key) const;
iterator lowerBound(const Key &key);
const_iterator lowerBound(const Key &key) const;
iterator upperBound(const Key &key);
const_iterator upperBound(const Key &key) const;
iterator insert(const Key &key, const T &value);



# 364 "/home/eagle/qt-copy/include/QtCore/qmap.h"
iterator insertMulti(const Key &key, const T &value);



# 368 "/home/eagle/qt-copy/include/QtCore/qmap.h"
QMap<Key, T> &unite(const QMap<Key, T> &other);


typedef Key key_type;
typedef T mapped_type;
typedef ptrdiff_t difference_type;
typedef int size_type;
inline bool empty() const { return isEmpty(); }





# 381 "/home/eagle/qt-copy/include/QtCore/qmap.h"
private:
void detach_helper();
void freeData(QMapData *d);
QMapData::Node *findNode(const Key &key) const;
QMapData::Node *mutableFindNode(QMapData::Node *update[], const Key &key) const;
QMapData::Node *node_create(QMapData *d, QMapData::Node *update[], const Key &key,
const T &value);
};

template <class Key, class T>
inline QMap<Key, T> &QMap<Key, T>::operator=(const QMap<Key, T> &other)
{
if (d != other.d) {
other.d->ref.ref();
if (!d->ref.deref())
freeData(d);
d = other.d;
if (!d->sharable)
detach_helper();
}
return *this;
}

template <class Key, class T>
inline void QMap<Key, T>::clear()
{
*this = QMap<Key, T>();
}

template <class Key, class T>
inline typename QMapData::Node *
QMap<Key, T>::node_create(QMapData *adt, QMapData::Node *aupdate[], const Key &akey, const T &avalue)
{
QMapData::Node *abstractNode = adt->node_create(aupdate, payload());
Node *concreteNode = concrete(abstractNode);
new (&concreteNode->key) Key(akey);
new (&concreteNode->value) T(avalue);
return abstractNode;
}

template <class Key, class T>
inline QMapData::Node *QMap<Key, T>::findNode(const Key &akey) const
{
QMapData::Node *cur = e;
QMapData::Node *next = e;

for (int i = d->topLevel; i >= 0; i--) {
while ((next = cur->forward[i]) != e && qMapLessThanKey<Key>(concrete(next)->key, akey))
cur = next;
}

if (next != e && !qMapLessThanKey<Key>(akey, concrete(next)->key)) {
return next;
} else {
return e;
}
}

template <class Key, class T>
inline const T QMap<Key, T>::value(const Key &akey) const
{
QMapData::Node *node;
if (d->size == 0 || (node = findNode(akey)) == e) {
return T();
} else {
return concrete(node)->value;
}
}

template <class Key, class T>
inline const T QMap<Key, T>::value(const Key &akey, const T &adefaultValue) const
{
QMapData::Node *node;
if (d->size == 0 || (node = findNode(akey)) == e) {
return adefaultValue;
} else {
return concrete(node)->value;
}
}

template <class Key, class T>
inline const T QMap<Key, T>::operator[](const Key &akey) const
{
return value(akey);
}

template <class Key, class T>
inline T &QMap<Key, T>::operator[](const Key &akey)
{
detach();

QMapData::Node *update[QMapData::LastLevel + 1];
QMapData::Node *node = mutableFindNode(update, akey);
if (node == e)
node = node_create(d, update, akey, T());
return concrete(node)->value;
}

template <class Key, class T>
inline int QMap<Key, T>::count(const Key &akey) const
{
int cnt = 0;
QMapData::Node *node = findNode(akey);
if (node != e) {
do {
++cnt;
node = node->forward[0];
} while (node != e && !qMapLessThanKey<Key>(akey, concrete(node)->key));
}
return cnt;
}

template <class Key, class T>
inline bool QMap<Key, T>::contains(const Key &akey) const
{
return findNode(akey) != e;
}

template <class Key, class T>
inline typename QMap<Key, T>::iterator QMap<Key, T>::insert(const Key &akey,
const T &avalue)
{
detach();

QMapData::Node *update[QMapData::LastLevel + 1];
QMapData::Node *node = mutableFindNode(update, akey);
if (node == e) {
node = node_create(d, update, akey, avalue);
} else {
concrete(node)->value = avalue;
}
return iterator(node);
}





















# 535 "/home/eagle/qt-copy/include/QtCore/qmap.h"
template <class Key, class T>
inline typename QMap<Key, T>::iterator QMap<Key, T>::insertMulti(const Key &akey,
const T &avalue)
{
detach();

QMapData::Node *update[QMapData::LastLevel + 1];
mutableFindNode(update, akey);
return iterator(node_create(d, update, akey, avalue));
}

template <class Key, class T>
inline typename QMap<Key, T>::const_iterator QMap<Key, T>::find(const Key &akey) const
{
return const_iterator(findNode(akey));
}

template <class Key, class T>
inline typename QMap<Key, T>::const_iterator QMap<Key, T>::constFind(const Key &akey) const
{
return const_iterator(findNode(akey));
}

template <class Key, class T>
inline typename QMap<Key, T>::iterator QMap<Key, T>::find(const Key &akey)
{
detach();
return iterator(findNode(akey));
}

template <class Key, class T>
inline QMap<Key, T> &QMap<Key, T>::unite(const QMap<Key, T> &other)
{
QMap<Key, T> copy(other);
const_iterator it = copy.constEnd();
const const_iterator b = copy.constBegin();
while (it != b) {
--it;
insertMulti(it.key(), it.value());
}
return *this;
}

template <class Key, class T>
 void QMap<Key, T>::freeData(QMapData *x)
{
if (QTypeInfo<Key>::isComplex || QTypeInfo<T>::isComplex) {
QMapData::Node *y = reinterpret_cast<QMapData::Node *>(x);
QMapData::Node *cur = y;
QMapData::Node *next = cur->forward[0];
while (next != y) {
cur = next;
next = cur->forward[0];



# 591 "/home/eagle/qt-copy/include/QtCore/qmap.h"
Node *concreteNode = concrete(cur);
concreteNode->key.~Key();
concreteNode->value.~T();



# 597 "/home/eagle/qt-copy/include/QtCore/qmap.h"
}
}
x->continueFreeData(payload());
}

template <class Key, class T>
 int QMap<Key, T>::remove(const Key &akey)
{
detach();

QMapData::Node *update[QMapData::LastLevel + 1];
QMapData::Node *cur = e;
QMapData::Node *next = e;
int oldSize = d->size;

for (int i = d->topLevel; i >= 0; i--) {
while ((next = cur->forward[i]) != e && qMapLessThanKey<Key>(concrete(next)->key, akey))
cur = next;
update[i] = cur;
}

if (next != e && !qMapLessThanKey<Key>(akey, concrete(next)->key)) {
bool deleteNext = true;
do {
cur = next;
next = cur->forward[0];
deleteNext = (next != e && !qMapLessThanKey<Key>(concrete(cur)->key, concrete(next)->key));
concrete(cur)->key.~Key();
concrete(cur)->value.~T();
d->node_delete(update, payload(), cur);
} while (deleteNext);
}
return oldSize - d->size;
}

template <class Key, class T>
 T QMap<Key, T>::take(const Key &akey)
{
detach();

QMapData::Node *update[QMapData::LastLevel + 1];
QMapData::Node *cur = e;
QMapData::Node *next = e;

for (int i = d->topLevel; i >= 0; i--) {
while ((next = cur->forward[i]) != e && qMapLessThanKey<Key>(concrete(next)->key, akey))
cur = next;
update[i] = cur;
}

if (next != e && !qMapLessThanKey<Key>(akey, concrete(next)->key)) {
T t = concrete(next)->value;
concrete(next)->key.~Key();
concrete(next)->value.~T();
d->node_delete(update, payload(), next);
return t;
}
return T();
}

template <class Key, class T>
 typename QMap<Key, T>::iterator QMap<Key, T>::erase(iterator it)
{
QMapData::Node *update[QMapData::LastLevel + 1];
QMapData::Node *cur = e;
QMapData::Node *next = e;

if (it == iterator(e))
return it;

for (int i = d->topLevel; i >= 0; i--) {
while ((next = cur->forward[i]) != e && qMapLessThanKey<Key>(concrete(next)->key, it.key()))
cur = next;
update[i] = cur;
}

while (next != e) {
cur = next;
next = cur->forward[0];
if (cur == it) {
concrete(cur)->key.~Key();
concrete(cur)->value.~T();
d->node_delete(update, payload(), cur);
return iterator(next);
}

for (int i = 0; i <= d->topLevel; ++i) {
if (update[i]->forward[i] != cur)
break;
update[i] = cur;
}
}
return end();
}

template <class Key, class T>
 void QMap<Key, T>::detach_helper()
{
union { QMapData *d; QMapData::Node *e; } x;
x.d = QMapData::createData();
if (d->size) {
x.d->insertInOrder = true;
QMapData::Node *update[QMapData::LastLevel + 1];
QMapData::Node *cur = e->forward[0];
update[0] = x.e;
while (cur != e) {
Node *concreteNode = concrete(cur);
node_create(x.d, update, concreteNode->key, concreteNode->value);
cur = cur->forward[0];
}
x.d->insertInOrder = false;
}
if (!d->ref.deref())
freeData(d);
d = x.d;
}

template <class Key, class T>
 QMapData::Node *QMap<Key, T>::mutableFindNode(QMapData::Node *aupdate[],
const Key &akey) const
{
QMapData::Node *cur = e;
QMapData::Node *next = e;

for (int i = d->topLevel; i >= 0; i--) {
while ((next = cur->forward[i]) != e && qMapLessThanKey<Key>(concrete(next)->key, akey))
cur = next;
aupdate[i] = cur;
}
if (next != e && !qMapLessThanKey<Key>(akey, concrete(next)->key)) {
return next;
} else {
return e;
}
}

template <class Key, class T>
 QList<Key> QMap<Key, T>::uniqueKeys() const
{
QList<Key> res;
const_iterator i = begin();
if (i != end()) {
for (;;) {
const Key &aKey = i.key();
res.append(aKey);
do {
if (++i == end())
goto break_out_of_outer_loop;
} while (!(aKey < i.key())); 
}
}
break_out_of_outer_loop:
return res;
}

template <class Key, class T>
 QList<Key> QMap<Key, T>::keys() const
{
QList<Key> res;
const_iterator i = begin();
while (i != end()) {
res.append(i.key());
++i;
}
return res;
}

template <class Key, class T>
 QList<Key> QMap<Key, T>::keys(const T &avalue) const
{
QList<Key> res;
const_iterator i = begin();
while (i != end()) {
if (i.value() == avalue)
res.append(i.key());
++i;
}
return res;
}

template <class Key, class T>
 const Key QMap<Key, T>::key(const T &avalue) const
{
return key(avalue, Key());
}

template <class Key, class T>
 const Key QMap<Key, T>::key(const T &avalue, const Key &defaultKey) const
{
const_iterator i = begin();
while (i != end()) {
if (i.value() == avalue)
return i.key();
++i;
}

return defaultKey;
}

template <class Key, class T>
 QList<T> QMap<Key, T>::values() const
{
QList<T> res;
const_iterator i = begin();
while (i != end()) {
res.append(i.value());
++i;
}
return res;
}

template <class Key, class T>
 QList<T> QMap<Key, T>::values(const Key &akey) const
{
QList<T> res;
QMapData::Node *node = findNode(akey);
if (node != e) {
do {
res.append(concrete(node)->value);
node = node->forward[0];
} while (node != e && !qMapLessThanKey<Key>(akey, concrete(node)->key));
}
return res;
}

template <class Key, class T>
inline typename QMap<Key, T>::const_iterator
QMap<Key, T>::lowerBound(const Key &akey) const
{
QMapData::Node *update[QMapData::LastLevel + 1];
mutableFindNode(update, akey);
return const_iterator(update[0]->forward[0]);
}

template <class Key, class T>
inline typename QMap<Key, T>::iterator QMap<Key, T>::lowerBound(const Key &akey)
{
detach();
return static_cast<QMapData::Node *>(const_cast<const QMap *>(this)->lowerBound(akey));
}

template <class Key, class T>
inline typename QMap<Key, T>::const_iterator
QMap<Key, T>::upperBound(const Key &akey) const
{
QMapData::Node *update[QMapData::LastLevel + 1];
mutableFindNode(update, akey);
QMapData::Node *node = update[0]->forward[0];
while (node != e && !qMapLessThanKey<Key>(akey, concrete(node)->key))
node = node->forward[0];
return const_iterator(node);
}

template <class Key, class T>
inline typename QMap<Key, T>::iterator QMap<Key, T>::upperBound(const Key &akey)
{
detach();
return static_cast<QMapData::Node *>(const_cast<const QMap *>(this)->upperBound(akey));
}

template <class Key, class T>
 bool QMap<Key, T>::operator==(const QMap<Key, T> &other) const
{
if (size() != other.size())
return false;
if (d == other.d)
return true;

const_iterator it1 = begin();
const_iterator it2 = other.begin();

while (it1 != end()) {
if (!(it1.value() == it2.value()) || qMapLessThanKey(it1.key(), it2.key()) || qMapLessThanKey(it2.key(), it1.key()))
return false;
++it2;
++it1;
}
return true;
}





























# 905 "/home/eagle/qt-copy/include/QtCore/qmap.h"
template <class Key, class T>
class QMultiMap : public QMap<Key, T>
{
public:
QMultiMap() {}
QMultiMap(const QMap<Key, T> &other) : QMap<Key, T>(other) {}

inline typename QMap<Key, T>::iterator replace(const Key &key, const T &value)
{ return QMap<Key, T>::insert(key, value); }
inline typename QMap<Key, T>::iterator insert(const Key &key, const T &value)
{ return QMap<Key, T>::insertMulti(key, value); }

inline QMultiMap &operator+=(const QMultiMap &other)
{ unite(other); return *this; }
inline QMultiMap operator+(const QMultiMap &other) const
{ QMultiMap result = *this; result += other; return result; }








# 929 "/home/eagle/qt-copy/include/QtCore/qmap.h"
inline bool contains(const Key &key) const
{ return QMap<Key, T>::contains(key); }
inline int remove(const Key &key)
{ return QMap<Key, T>::remove(key); }
inline int count(const Key &key) const
{ return QMap<Key, T>::count(key); }
inline int count() const
{ return QMap<Key, T>::count(); }
inline typename QMap<Key, T>::iterator find(const Key &key)
{ return QMap<Key, T>::find(key); }
inline typename QMap<Key, T>::const_iterator find(const Key &key) const
{ return QMap<Key, T>::find(key); }
inline typename QMap<Key, T>::const_iterator constFind(const Key &key) const
{ return QMap<Key, T>::constFind(key); }


# 945 "/home/eagle/qt-copy/include/QtCore/qmap.h"
bool contains(const Key &key, const T &value) const;

int remove(const Key &key, const T &value);

int count(const Key &key, const T &value) const;

typename QMap<Key, T>::iterator find(const Key &key, const T &value) {
typename QMap<Key, T>::iterator i(find(key));
typename QMap<Key, T>::iterator end(this->end());
while (i != end && !qMapLessThanKey<Key>(key, i.key())) {
if (i.value() == value)
return i;
++i;
}
return end;
}
typename QMap<Key, T>::const_iterator find(const Key &key, const T &value) const {
typename QMap<Key, T>::const_iterator i(constFind(key));
typename QMap<Key, T>::const_iterator end(QMap<Key, T>::constEnd());
while (i != end && !qMapLessThanKey<Key>(key, i.key())) {
if (i.value() == value)
return i;
++i;
}
return end;
}
typename QMap<Key, T>::const_iterator constFind(const Key &key, const T &value) const
{ return find(key, value); }
private:
T &operator[](const Key &key);
const T operator[](const Key &key) const;
};

template <class Key, class T>
inline bool QMultiMap<Key, T>::contains(const Key &key, const T &value) const
{
return constFind(key, value) != QMap<Key, T>::constEnd();
}

template <class Key, class T>
inline int QMultiMap<Key, T>::remove(const Key &key, const T &value)
{
int n = 0;
typename QMap<Key, T>::iterator i(find(key));
typename QMap<Key, T>::const_iterator end(QMap<Key, T>::constEnd());
while (i != end && !qMapLessThanKey<Key>(key, i.key())) {
if (i.value() == value) {
i = erase(i);
++n;
} else {
++i;
}
}
return n;
}

template <class Key, class T>
inline int QMultiMap<Key, T>::count(const Key &key, const T &value) const
{
int n = 0;
typename QMap<Key, T>::const_iterator i(constFind(key));
typename QMap<Key, T>::const_iterator end(QMap<Key, T>::constEnd());
while (i != end && !qMapLessThanKey<Key>(key, i.key())) {
if (i.value() == value)
++n;
++i;
}
return n;
}

template <class Key, class T> class QMapIterator { typedef typename QMap<Key,T>::const_iterator const_iterator; typedef const_iterator Item; QMap<Key,T> c; const_iterator i, n; inline bool item_exists() const { return n != c.constEnd(); } public: inline QMapIterator(const QMap<Key,T> &container) : c(container), i(c.constBegin()), n(c.constEnd()) {} inline QMapIterator &operator=(const QMap<Key,T> &container) { c = container; i = c.constBegin(); n = c.constEnd(); return *this; } inline void toFront() { i = c.constBegin(); n = c.constEnd(); } inline void toBack() { i = c.constEnd(); n = c.constEnd(); } inline bool hasNext() const { return i != c.constEnd(); } inline Item next() { n = i++; return n; } inline Item peekNext() const { return i; } inline bool hasPrevious() const { return i != c.constBegin(); } inline Item previous() { n = --i; return n; } inline Item peekPrevious() const { const_iterator p = i; return --p; } inline const T &value() const { qt_noop(); return *n; } inline const Key &key() const { qt_noop(); return n.key(); } inline bool findNext(const T &t) { while ((n = i) != c.constEnd()) if (*i++ == t) return true; return false; } inline bool findPrevious(const T &t) { while (i != c.constBegin()) if (*(n = --i) == t) return true; n = c.constEnd(); return false; } };
template <class Key, class T> class QMutableMapIterator { typedef typename QMap<Key,T>::iterator iterator; typedef typename QMap<Key,T>::const_iterator const_iterator; typedef iterator Item; QMap<Key,T> *c; iterator i, n; inline bool item_exists() const { return const_iterator(n) != c->constEnd(); } public: inline QMutableMapIterator(QMap<Key,T> &container) : c(&container) { c->setSharable(false); i = c->begin(); n = c->end(); } inline ~QMutableMapIterator() { c->setSharable(true); } inline QMutableMapIterator &operator=(QMap<Key,T> &container) { c->setSharable(true); c = &container; c->setSharable(false); i = c->begin(); n = c->end(); return *this; } inline void toFront() { i = c->begin(); n = c->end(); } inline void toBack() { i = c->end(); n = c->end(); } inline bool hasNext() const { return const_iterator(i) != c->constEnd(); } inline Item next() { n = i++; return n; } inline Item peekNext() const { return i; } inline bool hasPrevious() const { return const_iterator(i) != c->constBegin(); } inline Item previous() { n = --i; return n; } inline Item peekPrevious() const { iterator p = i; return --p; } inline void remove() { if (const_iterator(n) != c->constEnd()) { i = c->erase(n); n = c->end(); } } inline void setValue(const T &t) { if (const_iterator(n) != c->constEnd()) *n = t; } inline T &value() { qt_noop(); return *n; } inline const T &value() const { qt_noop(); return *n; } inline const Key &key() const { qt_noop(); return n.key(); } inline bool findNext(const T &t) { while (const_iterator(n = i) != c->constEnd()) if (*i++ == t) return true; return false; } inline bool findPrevious(const T &t) { while (const_iterator(i) != c->constBegin()) if (*(n = --i) == t) return true; n = c->end(); return false; } };






# 51 "/home/eagle/qt-copy/include/QtCore/qtconcurrentresultstore.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qdebug.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qalgorithms.h"

















































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qdebug.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qhash.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qatomic.h"

























































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qhash.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qchar.h"















































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtCore/qhash.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qiterator.h"








































































# 49 "/home/eagle/qt-copy/include/QtCore/qhash.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qlist.h"











































































































































































































































































































































































































































































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtCore/qhash.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qpair.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qdatastream.h"









































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qpair.h"


# 49 "/home/eagle/qt-copy/include/QtCore/qpair.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

template <class T1, class T2>
struct QPair
{
typedef T1 first_type;
typedef T2 second_type;

QPair() : first(T1()), second(T2()) {}
QPair(const T1 &t1, const T2 &t2) : first(t1), second(t2) {}

QPair<T1, T2> &operator=(const QPair<T1, T2> &other)
{ first = other.first; second = other.second; return *this; }

T1 first;
T2 second;
};

template <class T1, class T2>
inline bool operator==(const QPair<T1, T2> &p1, const QPair<T1, T2> &p2)
{ return p1.first == p2.first && p1.second == p2.second; }

template <class T1, class T2>
inline bool operator!=(const QPair<T1, T2> &p1, const QPair<T1, T2> &p2)
{ return !(p1 == p2); }

template <class T1, class T2>
inline bool operator<(const QPair<T1, T2> &p1, const QPair<T1, T2> &p2)
{
return p1.first < p2.first || (!(p2.first < p1.first) && p1.second < p2.second);
}

template <class T1, class T2>
inline bool operator>(const QPair<T1, T2> &p1, const QPair<T1, T2> &p2)
{
return p2 < p1;
}

template <class T1, class T2>
inline bool operator<=(const QPair<T1, T2> &p1, const QPair<T1, T2> &p2)
{
return !(p2 < p1);
}

template <class T1, class T2>
inline bool operator>=(const QPair<T1, T2> &p1, const QPair<T1, T2> &p2)
{
return !(p1 < p2);
}

template <class T1, class T2>
 QPair<T1, T2> qMakePair(const T1 &x, const T2 &y)
{
return QPair<T1, T2>(x, y);
}


# 110 "/home/eagle/qt-copy/include/QtCore/qpair.h"
template <class T1, class T2>
inline QDataStream& operator>>(QDataStream& s, QPair<T1, T2>& p)
{
s >> p.first >> p.second;
return s;
}

template <class T1, class T2>
inline QDataStream& operator<<(QDataStream& s, const QPair<T1, T2>& p)
{
s << p.first << p.second;
return s;
}


# 125 "/home/eagle/qt-copy/include/QtCore/qpair.h"





# 51 "/home/eagle/qt-copy/include/QtCore/qhash.h"


# 53 "/home/eagle/qt-copy/include/QtCore/qhash.h"





# 58 "/home/eagle/qt-copy/include/QtCore/qhash.h"
typedef QtValidLicenseForCoreModule QtCoreModule;

class QBitArray;
class QByteArray;
class QString;
class QStringRef;

inline uint qHash(char key) { return uint(key); }
inline uint qHash(uchar key) { return uint(key); }
inline uint qHash(signed char key) { return uint(key); }
inline uint qHash(ushort key) { return uint(key); }
inline uint qHash(short key) { return uint(key); }
inline uint qHash(uint key) { return key; }
inline uint qHash(int key) { return uint(key); }
inline uint qHash(ulong key)
{
if (sizeof(ulong) > sizeof(uint)) {
return uint((key >> (8 * sizeof(uint) - 1)) ^ key);
} else {
return uint(key);
}
}
inline uint qHash(long key) { return qHash(ulong(key)); }
inline uint qHash(quint64 key)
{
if (sizeof(quint64) > sizeof(uint)) {
return uint((key >> (8 * sizeof(uint) - 1)) ^ key);
} else {
return uint(key);
}
}
inline uint qHash(qint64 key) { return qHash(quint64(key)); }
inline uint qHash(QChar key) { return qHash(key.unicode()); }
 uint qHash(const QByteArray &key);
 uint qHash(const QString &key);
 uint qHash(const QStringRef &key);
 uint qHash(const QBitArray &key);





# 100 "/home/eagle/qt-copy/include/QtCore/qhash.h"
template <class T> inline uint qHash(const T *key)
{
if (sizeof(const T *) > sizeof(uint))
return qHash(reinterpret_cast<quint64>(key));
else
return uint(reinterpret_cast<ulong>(key));
}




# 111 "/home/eagle/qt-copy/include/QtCore/qhash.h"
template <typename T1, typename T2> inline uint qHash(const QPair<T1, T2> &key)
{
uint h1 = qHash(key.first);
uint h2 = qHash(key.second);
return ((h1 << 16) | (h1 >> 16)) ^ h2;
}

struct  QHashData
{
struct Node {
Node *next;
uint h;
};

Node *fakeNext;
Node **buckets;
QBasicAtomicInt ref;
int size;
int nodeSize;
short userNumBits;
short numBits;
int numBuckets;
uint sharable : 1;

void *allocateNode();
void freeNode(void *node);
QHashData *detach_helper(void (*node_duplicate)(Node *, void *), int nodeSize);
void mightGrow();
bool willGrow();
void hasShrunk();
void rehash(int hint);
void destroyAndFree();
Node *firstNode();




# 148 "/home/eagle/qt-copy/include/QtCore/qhash.h"
static Node *nextNode(Node *node);
static Node *previousNode(Node *node);

static QHashData shared_null;
};

inline void QHashData::mightGrow() 
{ 
if (size >= numBuckets)
rehash(numBits + 1);
} 

inline bool QHashData::willGrow()
{
if (size >= numBuckets) {
rehash(numBits + 1);
return true;
} else {
return false;
}
}

inline void QHashData::hasShrunk()
{
if (size <= (numBuckets >> 3) && numBits > userNumBits)
rehash(qMax(int(numBits) - 2, int(userNumBits)));
}

inline QHashData::Node *QHashData::firstNode()
{
Node *e = reinterpret_cast<Node *>(this);
Node **bucket = buckets;
int n = numBuckets;
while (n--) {
if (*bucket != e)
return *bucket;
++bucket;
}
return e;
}

struct QHashDummyValue
{
};

inline bool operator==(const QHashDummyValue & , const QHashDummyValue & )
{
return true;
}

template <> class QTypeInfo<QHashDummyValue> { public: enum { isComplex = (((Q_MOVABLE_TYPE | Q_DUMMY_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE | Q_DUMMY_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QHashDummyValue)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE | Q_DUMMY_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QHashDummyValue"; } };

template <class Key, class T>
struct QHashDummyNode
{
QHashDummyNode *next;
uint h;
Key key;

inline QHashDummyNode(const Key &key0) : key(key0) {}
};

template <class Key, class T>
struct QHashNode
{
QHashNode *next;
uint h;
Key key;
T value;

inline QHashNode(const Key &key0) : key(key0) {} 
inline QHashNode(const Key &key0, const T &value0) : key(key0), value(value0) {}
inline bool same_key(uint h0, const Key &key0) { return h0 == h && key0 == key; }
};





# 245 "/home/eagle/qt-copy/include/QtCore/qhash.h"
template <class T> struct QHashDummyNode<short, T> { QHashDummyNode *next; union { uint h; short key; }; inline QHashDummyNode(short ) {} }; template <class T> struct QHashNode<short, T> { QHashNode *next; union { uint h; short key; }; T value; inline QHashNode(short ) {} inline QHashNode(short , const T &value0) : value(value0) {} inline bool same_key(uint h0, short) { return h0 == h; } };
template <class T> struct QHashDummyNode<ushort, T> { QHashDummyNode *next; union { uint h; ushort key; }; inline QHashDummyNode(ushort ) {} }; template <class T> struct QHashNode<ushort, T> { QHashNode *next; union { uint h; ushort key; }; T value; inline QHashNode(ushort ) {} inline QHashNode(ushort , const T &value0) : value(value0) {} inline bool same_key(uint h0, ushort) { return h0 == h; } };

# 248 "/home/eagle/qt-copy/include/QtCore/qhash.h"
template <class T> struct QHashDummyNode<int, T> { QHashDummyNode *next; union { uint h; int key; }; inline QHashDummyNode(int ) {} }; template <class T> struct QHashNode<int, T> { QHashNode *next; union { uint h; int key; }; T value; inline QHashNode(int ) {} inline QHashNode(int , const T &value0) : value(value0) {} inline bool same_key(uint h0, int) { return h0 == h; } };
template <class T> struct QHashDummyNode<uint, T> { QHashDummyNode *next; union { uint h; uint key; }; inline QHashDummyNode(uint ) {} }; template <class T> struct QHashNode<uint, T> { QHashNode *next; union { uint h; uint key; }; T value; inline QHashNode(uint ) {} inline QHashNode(uint , const T &value0) : value(value0) {} inline bool same_key(uint h0, uint) { return h0 == h; } };



# 253 "/home/eagle/qt-copy/include/QtCore/qhash.h"
template <class Key, class T>
class QHash
{
typedef QHashDummyNode<Key, T> DummyNode;
typedef QHashNode<Key, T> Node;

union {
QHashData *d;
QHashNode<Key, T> *e;
};

static inline Node *concrete(QHashData::Node *node) {
return reinterpret_cast<Node *>(node);
}

public:
inline QHash() : d(&QHashData::shared_null) { d->ref.ref(); }
inline QHash(const QHash<Key, T> &other) : d(other.d) { d->ref.ref(); if (!d->sharable) detach(); }
inline ~QHash() { if (!d->ref.deref()) freeData(d); }

QHash<Key, T> &operator=(const QHash<Key, T> &other);

bool operator==(const QHash<Key, T> &other) const;
inline bool operator!=(const QHash<Key, T> &other) const { return !(*this == other); }

inline int size() const { return d->size; }

inline bool isEmpty() const { return d->size == 0; }

inline int capacity() const { return d->numBuckets; }
void reserve(int size);
inline void squeeze() { reserve(1); }

inline void detach() { if (d->ref != 1) detach_helper(); }
inline bool isDetached() const { return d->ref == 1; }
inline void setSharable(bool sharable) { if (!sharable) detach(); d->sharable = sharable; }

void clear();

int remove(const Key &key);
T take(const Key &key);

bool contains(const Key &key) const;
const Key key(const T &value) const;
const Key key(const T &value, const Key &defaultKey) const;
const T value(const Key &key) const;
const T value(const Key &key, const T &defaultValue) const;
T &operator[](const Key &key);
const T operator[](const Key &key) const;

QList<Key> uniqueKeys() const;
QList<Key> keys() const;
QList<Key> keys(const T &value) const;
QList<T> values() const;
QList<T> values(const Key &key) const;
int count(const Key &key) const;

class const_iterator;

class iterator
{
friend class const_iterator;
QHashData::Node *i;

public:
typedef std::bidirectional_iterator_tag iterator_category;
typedef ptrdiff_t difference_type;
typedef T value_type;
typedef T *pointer;
typedef T &reference;


inline operator Node *() const { return concrete(i); }
inline iterator() : i(0) { }
explicit inline iterator(void *node) : i(reinterpret_cast<QHashData::Node *>(node)) { }

inline const Key &key() const { return concrete(i)->key; }
inline T &value() const { return concrete(i)->value; }
inline T &operator*() const { return concrete(i)->value; }
inline T *operator->() const { return &concrete(i)->value; }
inline bool operator==(const iterator &o) const { return i == o.i; }
inline bool operator!=(const iterator &o) const { return i != o.i; }

inline iterator &operator++() {
i = QHashData::nextNode(i);
return *this;
}
inline iterator operator++(int) {
iterator r = *this;
i = QHashData::nextNode(i);
return r;
}
inline iterator &operator--() {
i = QHashData::previousNode(i);
return *this;
}
inline iterator operator--(int) {
iterator r = *this;
i = QHashData::previousNode(i);
return r;
}
inline iterator operator+(int j) const
{ iterator r = *this; if (j > 0) while (j--) ++r; else while (j++) --r; return r; }
inline iterator operator-(int j) const { return operator+(-j); }
inline iterator &operator+=(int j) { return *this = *this + j; }
inline iterator &operator-=(int j) { return *this = *this - j; }





# 364 "/home/eagle/qt-copy/include/QtCore/qhash.h"
public:

# 366 "/home/eagle/qt-copy/include/QtCore/qhash.h"
inline bool operator==(const const_iterator &o) const
{ return i == o.i; }
inline bool operator!=(const const_iterator &o) const
{ return i != o.i; }

private:

inline operator bool() const { return false; }
};
friend class iterator;

class const_iterator
{
friend class iterator;
QHashData::Node *i;

public:
typedef std::bidirectional_iterator_tag iterator_category;
typedef ptrdiff_t difference_type;
typedef T value_type;
typedef const T *pointer;
typedef const T &reference;


inline operator Node *() const { return concrete(i); }
inline const_iterator() : i(0) { }
explicit inline const_iterator(void *node)
: i(reinterpret_cast<QHashData::Node *>(node)) { }



# 397 "/home/eagle/qt-copy/include/QtCore/qhash.h"
inline const_iterator(const iterator &o)

# 399 "/home/eagle/qt-copy/include/QtCore/qhash.h"
{ i = o.i; }

inline const Key &key() const { return concrete(i)->key; }
inline const T &value() const { return concrete(i)->value; }
inline const T &operator*() const { return concrete(i)->value; }
inline const T *operator->() const { return &concrete(i)->value; }
inline bool operator==(const const_iterator &o) const { return i == o.i; }
inline bool operator!=(const const_iterator &o) const { return i != o.i; }

inline const_iterator &operator++() {
i = QHashData::nextNode(i);
return *this;
}
inline const_iterator operator++(int) {
const_iterator r = *this;
i = QHashData::nextNode(i);
return r;
}
inline const_iterator &operator--() {
i = QHashData::previousNode(i);
return *this;
}
inline const_iterator operator--(int) {
const_iterator r = *this;
i = QHashData::previousNode(i);
return r;
}
inline const_iterator operator+(int j) const
{ const_iterator r = *this; if (j > 0) while (j--) ++r; else while (j++) --r; return r; }
inline const_iterator operator-(int j) const { return operator+(-j); }
inline const_iterator &operator+=(int j) { return *this = *this + j; }
inline const_iterator &operator-=(int j) { return *this = *this - j; }








# 439 "/home/eagle/qt-copy/include/QtCore/qhash.h"
private:

inline operator bool() const { return false; }
};
friend class const_iterator;


inline iterator begin() { detach(); return iterator(d->firstNode()); }
inline const_iterator begin() const { return const_iterator(d->firstNode()); }
inline const_iterator constBegin() const { return const_iterator(d->firstNode()); }
inline iterator end() { detach(); return iterator(e); }
inline const_iterator end() const { return const_iterator(e); }
inline const_iterator constEnd() const { return const_iterator(e); }
iterator erase(iterator it);


typedef iterator Iterator;
typedef const_iterator ConstIterator;
inline int count() const { return d->size; }
iterator find(const Key &key);
const_iterator find(const Key &key) const;
const_iterator constFind(const Key &key) const;
iterator insert(const Key &key, const T &value);
iterator insertMulti(const Key &key, const T &value);
QHash<Key, T> &unite(const QHash<Key, T> &other);


typedef T mapped_type;
typedef Key key_type;
typedef ptrdiff_t difference_type;
typedef int size_type;

inline bool empty() const { return isEmpty(); }






# 478 "/home/eagle/qt-copy/include/QtCore/qhash.h"
private:
void detach_helper();
void freeData(QHashData *d);
Node **findNode(const Key &key, uint *hp = 0) const;
Node *createNode(uint h, const Key &key, const T &value, Node **nextNode);
void deleteNode(Node *node);

static void duplicateNode(QHashData::Node *originalNode, void *newNode);
};

template <class Key, class T>
inline void QHash<Key, T>::deleteNode(Node *node)
{





# 496 "/home/eagle/qt-copy/include/QtCore/qhash.h"
node->~Node();

# 498 "/home/eagle/qt-copy/include/QtCore/qhash.h"
d->freeNode(node);
}

template <class Key, class T>
inline void QHash<Key, T>::duplicateNode(QHashData::Node *node, void *newNode)
{
Node *concreteNode = concrete(node);
if (QTypeInfo<T>::isDummy) {
(void) new (newNode) DummyNode(concreteNode->key);
} else {
(void) new (newNode) Node(concreteNode->key, concreteNode->value);
}
}

template <class Key, class T>
inline typename QHash<Key, T>::Node *
QHash<Key, T>::createNode(uint ah, const Key &akey, const T &avalue, Node **anextNode)
{
Node *node;

if (QTypeInfo<T>::isDummy) {
node = reinterpret_cast<Node *>(new (d->allocateNode()) DummyNode(akey));
} else {
node = new (d->allocateNode()) Node(akey, avalue);
}

node->h = ah;
node->next = *anextNode;
*anextNode = node;
++d->size;
return node;
}

template <class Key, class T>
inline QHash<Key, T> &QHash<Key, T>::unite(const QHash<Key, T> &other)
{
QHash<Key, T> copy(other);
const_iterator it = copy.constEnd();
while (it != copy.constBegin()) {
--it;
insertMulti(it.key(), it.value());
}
return *this;
}

template <class Key, class T>
 void QHash<Key, T>::freeData(QHashData *x)
{
Node *e_for_x = reinterpret_cast<Node *>(x);
Node **bucket = reinterpret_cast<Node **>(x->buckets);
int n = x->numBuckets;
while (n--) {
Node *cur = *bucket++;
while (cur != e_for_x) {
Node *next = cur->next;
deleteNode(cur);
cur = next;
}
}
x->destroyAndFree();
}

template <class Key, class T>
inline void QHash<Key, T>::clear()
{
*this = QHash<Key,T>();
}

template <class Key, class T>
 void QHash<Key, T>::detach_helper()
{
QHashData *x = d->detach_helper(duplicateNode,
QTypeInfo<T>::isDummy ? sizeof(DummyNode) : sizeof(Node));
if (!d->ref.deref())
freeData(d);
d = x;
}

template <class Key, class T>
inline QHash<Key, T> &QHash<Key, T>::operator=(const QHash<Key, T> &other)
{
if (d != other.d) {
other.d->ref.ref();
if (!d->ref.deref())
freeData(d);
d = other.d;
if (!d->sharable)
detach_helper();
}
return *this;
}

template <class Key, class T>
inline const T QHash<Key, T>::value(const Key &akey) const
{
Node *node;
if (d->size == 0 || (node = *findNode(akey)) == e) {
return T();
} else {
return node->value;
}
}

template <class Key, class T>
inline const T QHash<Key, T>::value(const Key &akey, const T &adefaultValue) const
{
Node *node;
if (d->size == 0 || (node = *findNode(akey)) == e) {
return adefaultValue;
} else {
return node->value;
}
}

template <class Key, class T>
 QList<Key> QHash<Key, T>::uniqueKeys() const
{
QList<Key> res;
const_iterator i = begin();
if (i != end()) {
for (;;) {
const Key &aKey = i.key();
res.append(aKey);
do {
if (++i == end())
goto break_out_of_outer_loop;
} while (aKey == i.key());
}
}
break_out_of_outer_loop:
return res;
}

template <class Key, class T>
 QList<Key> QHash<Key, T>::keys() const
{
QList<Key> res;
const_iterator i = begin();
while (i != end()) {
res.append(i.key());
++i;
}
return res;
}

template <class Key, class T>
 QList<Key> QHash<Key, T>::keys(const T &avalue) const
{
QList<Key> res;
const_iterator i = begin();
while (i != end()) {
if (i.value() == avalue)
res.append(i.key());
++i;
}
return res;
}

template <class Key, class T>
 const Key QHash<Key, T>::key(const T &avalue) const
{
return key(avalue, Key());
}

template <class Key, class T>
 const Key QHash<Key, T>::key(const T &avalue, const Key &defaultValue) const
{
const_iterator i = begin();
while (i != end()) {
if (i.value() == avalue)
return i.key();
++i;
}

return defaultValue;
}

template <class Key, class T>
 QList<T> QHash<Key, T>::values() const
{
QList<T> res;
const_iterator i = begin();
while (i != end()) {
res.append(i.value());
++i;
}
return res;
}

template <class Key, class T>
 QList<T> QHash<Key, T>::values(const Key &akey) const
{
QList<T> res;
Node *node = *findNode(akey);
if (node != e) {
do {
res.append(node->value);
} while ((node = node->next) != e && node->key == akey);
}
return res;
}

template <class Key, class T>
 int QHash<Key, T>::count(const Key &akey) const
{
int cnt = 0;
Node *node = *findNode(akey);
if (node != e) {
do {
++cnt;
} while ((node = node->next) != e && node->key == akey);
}
return cnt;
}

template <class Key, class T>
inline const T QHash<Key, T>::operator[](const Key &akey) const
{
return value(akey);
}

template <class Key, class T>
inline T &QHash<Key, T>::operator[](const Key &akey)
{
detach();

uint h;
Node **node = findNode(akey, &h);
if (*node == e) {
if (d->willGrow())
node = findNode(akey, &h);
return createNode(h, akey, T(), node)->value;
}
return (*node)->value;
}

template <class Key, class T>
inline typename QHash<Key, T>::iterator QHash<Key, T>::insert(const Key &akey,
const T &avalue)
{
detach();

uint h;
Node **node = findNode(akey, &h);
if (*node == e) {
if (d->willGrow())
node = findNode(akey, &h);
return iterator(createNode(h, akey, avalue, node));
}

if (!QTypeInfo<T>::isDummy)
(*node)->value = avalue;
return iterator(*node);
}

template <class Key, class T>
inline typename QHash<Key, T>::iterator QHash<Key, T>::insertMulti(const Key &akey,
const T &avalue)
{
detach();
d->willGrow();

uint h;
Node **nextNode = findNode(akey, &h);
return iterator(createNode(h, akey, avalue, nextNode));
}

template <class Key, class T>
 int QHash<Key, T>::remove(const Key &akey)
{
detach();

int oldSize = d->size;
Node **node = findNode(akey);
if (*node != e) {
bool deleteNext = true;
do {
Node *next = (*node)->next;
deleteNext = (next != e && next->key == (*node)->key);
deleteNode(*node);
*node = next;
--d->size;
} while (deleteNext);
d->hasShrunk();
}
return oldSize - d->size;
}

template <class Key, class T>
 T QHash<Key, T>::take(const Key &akey)
{
detach();

Node **node = findNode(akey);
if (*node != e) {
T t = (*node)->value;
Node *next = (*node)->next;
deleteNode(*node);
*node = next;
--d->size;
d->hasShrunk();
return t;
}
return T();
}

template <class Key, class T>
 typename QHash<Key, T>::iterator QHash<Key, T>::erase(iterator it)
{
if (it == iterator(e))
return it;

iterator ret = it;
++ret;

Node *node = it;
Node **node_ptr = reinterpret_cast<Node **>(&d->buckets[node->h % d->numBuckets]);
while (*node_ptr != node)
node_ptr = &(*node_ptr)->next;
*node_ptr = node->next;
deleteNode(node);
--d->size;
return ret;
}

template <class Key, class T>
inline void QHash<Key, T>::reserve(int asize)
{
detach();
d->rehash(-qMax(asize, 1));
}

template <class Key, class T>
inline typename QHash<Key, T>::const_iterator QHash<Key, T>::find(const Key &akey) const
{
return const_iterator(*findNode(akey));
}

template <class Key, class T>
inline typename QHash<Key, T>::const_iterator QHash<Key, T>::constFind(const Key &akey) const
{
return const_iterator(*findNode(akey));
}

template <class Key, class T>
inline typename QHash<Key, T>::iterator QHash<Key, T>::find(const Key &akey)
{
detach();
return iterator(*findNode(akey));
}

template <class Key, class T>
inline bool QHash<Key, T>::contains(const Key &akey) const
{
return *findNode(akey) != e;
}

template <class Key, class T>
 typename QHash<Key, T>::Node **QHash<Key, T>::findNode(const Key &akey,
uint *ahp) const
{
Node **node;
uint h = qHash(akey);

if (d->numBuckets) {
node = reinterpret_cast<Node **>(&d->buckets[h % d->numBuckets]);
qt_noop();
while (*node != e && !(*node)->same_key(h, akey))
node = &(*node)->next;
} else {
node = const_cast<Node **>(reinterpret_cast<const Node * const *>(&e));
}
if (ahp)
*ahp = h;
return node;
}

template <class Key, class T>
 bool QHash<Key, T>::operator==(const QHash<Key, T> &other) const
{
if (size() != other.size())
return false;
if (d == other.d)
return true;

const_iterator it = begin();

while (it != end()) {
const Key &akey = it.key();

const_iterator it2 = other.find(akey);
do {
if (it2 == other.end() || !(it2.key() == akey))
return false;
if (!QTypeInfo<T>::isDummy && !(it.value() == it2.value()))
return false;
++it;
++it2;
} while (it != end() && it.key() == akey);
}
return true;
}

template <class Key, class T>
class QMultiHash : public QHash<Key, T>
{
public:
QMultiHash() {}
QMultiHash(const QHash<Key, T> &other) : QHash<Key, T>(other) {}

inline typename QHash<Key, T>::iterator replace(const Key &key, const T &value)
{ return QHash<Key, T>::insert(key, value); }

inline typename QHash<Key, T>::iterator insert(const Key &key, const T &value)
{ return QHash<Key, T>::insertMulti(key, value); }

inline QMultiHash &operator+=(const QMultiHash &other)
{ unite(other); return *this; }
inline QMultiHash operator+(const QMultiHash &other) const
{ QMultiHash result = *this; result += other; return result; }








# 926 "/home/eagle/qt-copy/include/QtCore/qhash.h"
inline bool contains(const Key &key) const
{ return QHash<Key, T>::contains(key); }
inline int remove(const Key &key)
{ return QHash<Key, T>::remove(key); }
inline int count(const Key &key) const
{ return QHash<Key, T>::count(key); }
inline int count() const
{ return QHash<Key, T>::count(); }
inline typename QHash<Key, T>::iterator find(const Key &key)
{ return QHash<Key, T>::find(key); }
inline typename QHash<Key, T>::const_iterator find(const Key &key) const
{ return QHash<Key, T>::find(key); }
inline typename QHash<Key, T>::const_iterator constFind(const Key &key) const
{ return QHash<Key, T>::constFind(key); }


# 942 "/home/eagle/qt-copy/include/QtCore/qhash.h"
bool contains(const Key &key, const T &value) const;

int remove(const Key &key, const T &value);

int count(const Key &key, const T &value) const;

typename QHash<Key, T>::iterator find(const Key &key, const T &value) {
typename QHash<Key, T>::iterator i(find(key));
typename QHash<Key, T>::iterator end(this->end());
while (i != end && i.key() == key) {
if (i.value() == value)
return i;
++i;
}
return end;
}
typename QHash<Key, T>::const_iterator find(const Key &key, const T &value) const {
typename QHash<Key, T>::const_iterator i(constFind(key));
typename QHash<Key, T>::const_iterator end(QHash<Key, T>::constEnd());
while (i != end && i.key() == key) {
if (i.value() == value)
return i;
++i;
}
return end;
}
typename QHash<Key, T>::const_iterator constFind(const Key &key, const T &value) const
{ return find(key, value); }
private:
T &operator[](const Key &key);
const T operator[](const Key &key) const;
};

template <class Key, class T>
inline bool QMultiHash<Key, T>::contains(const Key &key, const T &value) const
{
return constFind(key, value) != QHash<Key, T>::constEnd();
}

template <class Key, class T>
inline int QMultiHash<Key, T>::remove(const Key &key, const T &value)
{
int n = 0;
typename QHash<Key, T>::iterator i(find(key));
typename QHash<Key, T>::const_iterator end(QHash<Key, T>::constEnd());
while (i != end && i.key() == key) {
if (i.value() == value) {
i = erase(i);
++n;
} else {
++i;
}
}
return n;
}

template <class Key, class T>
inline int QMultiHash<Key, T>::count(const Key &key, const T &value) const
{
int n = 0;
typename QHash<Key, T>::const_iterator i(constFind(key));
typename QHash<Key, T>::const_iterator end(QHash<Key, T>::constEnd());
while (i != end && i.key() == key) {
if (i.value() == value)
++n;
++i;
}
return n;
}

template <class Key, class T> class QHashIterator { typedef typename QHash<Key,T>::const_iterator const_iterator; typedef const_iterator Item; QHash<Key,T> c; const_iterator i, n; inline bool item_exists() const { return n != c.constEnd(); } public: inline QHashIterator(const QHash<Key,T> &container) : c(container), i(c.constBegin()), n(c.constEnd()) {} inline QHashIterator &operator=(const QHash<Key,T> &container) { c = container; i = c.constBegin(); n = c.constEnd(); return *this; } inline void toFront() { i = c.constBegin(); n = c.constEnd(); } inline void toBack() { i = c.constEnd(); n = c.constEnd(); } inline bool hasNext() const { return i != c.constEnd(); } inline Item next() { n = i++; return n; } inline Item peekNext() const { return i; } inline bool hasPrevious() const { return i != c.constBegin(); } inline Item previous() { n = --i; return n; } inline Item peekPrevious() const { const_iterator p = i; return --p; } inline const T &value() const { qt_noop(); return *n; } inline const Key &key() const { qt_noop(); return n.key(); } inline bool findNext(const T &t) { while ((n = i) != c.constEnd()) if (*i++ == t) return true; return false; } inline bool findPrevious(const T &t) { while (i != c.constBegin()) if (*(n = --i) == t) return true; n = c.constEnd(); return false; } };
template <class Key, class T> class QMutableHashIterator { typedef typename QHash<Key,T>::iterator iterator; typedef typename QHash<Key,T>::const_iterator const_iterator; typedef iterator Item; QHash<Key,T> *c; iterator i, n; inline bool item_exists() const { return const_iterator(n) != c->constEnd(); } public: inline QMutableHashIterator(QHash<Key,T> &container) : c(&container) { c->setSharable(false); i = c->begin(); n = c->end(); } inline ~QMutableHashIterator() { c->setSharable(true); } inline QMutableHashIterator &operator=(QHash<Key,T> &container) { c->setSharable(true); c = &container; c->setSharable(false); i = c->begin(); n = c->end(); return *this; } inline void toFront() { i = c->begin(); n = c->end(); } inline void toBack() { i = c->end(); n = c->end(); } inline bool hasNext() const { return const_iterator(i) != c->constEnd(); } inline Item next() { n = i++; return n; } inline Item peekNext() const { return i; } inline bool hasPrevious() const { return const_iterator(i) != c->constBegin(); } inline Item previous() { n = --i; return n; } inline Item peekPrevious() const { iterator p = i; return --p; } inline void remove() { if (const_iterator(n) != c->constEnd()) { i = c->erase(n); n = c->end(); } } inline void setValue(const T &t) { if (const_iterator(n) != c->constEnd()) *n = t; } inline T &value() { qt_noop(); return *n; } inline const T &value() const { qt_noop(); return *n; } inline const Key &key() const { qt_noop(); return n.key(); } inline bool findNext(const T &t) { while (const_iterator(n = i) != c->constEnd()) if (*i++ == t) return true; return false; } inline bool findPrevious(const T &t) { while (const_iterator(i) != c->constBegin()) if (*(n = --i) == t) return true; n = c->end(); return false; } };






# 48 "/home/eagle/qt-copy/include/QtCore/qdebug.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qlist.h"











































































































































































































































































































































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtCore/qdebug.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qmap.h"






















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtCore/qdebug.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qpair.h"

































































































































# 51 "/home/eagle/qt-copy/include/QtCore/qdebug.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextstream.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"






























































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qtextstream.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtCore/qtextstream.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qchar.h"















































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtCore/qtextstream.h"














# 63 "/home/eagle/qt-copy/include/QtCore/qtextstream.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class QTextCodec;
class QTextDecoder;

class QTextStreamPrivate;
class  QTextStream 
{
inline QTextStreamPrivate* d_func() { return reinterpret_cast<QTextStreamPrivate *>(d_ptr); } inline const QTextStreamPrivate* d_func() const { return reinterpret_cast<const QTextStreamPrivate *>(d_ptr); } friend class QTextStreamPrivate;

public:
enum RealNumberNotation {
SmartNotation,
FixedNotation,
ScientificNotation
};
enum FieldAlignment {
AlignLeft,
AlignRight,
AlignCenter,
AlignAccountingStyle
};
enum Status {
Ok,
ReadPastEnd,
ReadCorruptData
};
enum NumberFlag {
ShowBase = 0x1,
ForcePoint = 0x2,
ForceSign = 0x4,
UppercaseBase = 0x8,
UppercaseDigits = 0x10
};
typedef QFlags<NumberFlag> NumberFlags;

QTextStream();
explicit QTextStream(QIODevice *device);
explicit QTextStream(FILE *fileHandle, QIODevice::OpenMode openMode = QIODevice::ReadWrite);
explicit QTextStream(QString *string, QIODevice::OpenMode openMode = QIODevice::ReadWrite);
explicit QTextStream(QByteArray *array, QIODevice::OpenMode openMode = QIODevice::ReadWrite);
explicit QTextStream(const QByteArray &array, QIODevice::OpenMode openMode = QIODevice::ReadOnly);
virtual ~QTextStream();


# 112 "/home/eagle/qt-copy/include/QtCore/qtextstream.h"
void setCodec(QTextCodec *codec);
void setCodec(const char *codecName);
QTextCodec *codec() const;
void setAutoDetectUnicode(bool enabled);
bool autoDetectUnicode() const;
void setGenerateByteOrderMark(bool generate);
bool generateByteOrderMark() const;


# 121 "/home/eagle/qt-copy/include/QtCore/qtextstream.h"
void setDevice(QIODevice *device);
QIODevice *device() const;

void setString(QString *string, QIODevice::OpenMode openMode = QIODevice::ReadWrite);
QString *string() const;

Status status() const;
void setStatus(Status status);
void resetStatus();

bool atEnd() const;
void reset();
void flush();
bool seek(qint64 pos);
qint64 pos() const;

void skipWhiteSpace();

QString readLine(qint64 maxlen = 0);
QString readAll();
QString read(qint64 maxlen);

void setFieldAlignment(FieldAlignment alignment);
FieldAlignment fieldAlignment() const;

void setPadChar(QChar ch);
QChar padChar() const;

void setFieldWidth(int width);
int fieldWidth() const;

void setNumberFlags(NumberFlags flags);
NumberFlags numberFlags() const;

void setIntegerBase(int base);
int integerBase() const;

void setRealNumberNotation(RealNumberNotation notation);
RealNumberNotation realNumberNotation() const;

void setRealNumberPrecision(int precision);
int realNumberPrecision() const;

QTextStream &operator>>(QChar &ch);
QTextStream &operator>>(char &ch);
QTextStream &operator>>(signed short &i);
QTextStream &operator>>(unsigned short &i);
QTextStream &operator>>(signed int &i);
QTextStream &operator>>(unsigned int &i);
QTextStream &operator>>(signed long &i);
QTextStream &operator>>(unsigned long &i);
QTextStream &operator>>(qlonglong &i);
QTextStream &operator>>(qulonglong &i);
QTextStream &operator>>(float &f);
QTextStream &operator>>(double &f);
QTextStream &operator>>(QString &s);
QTextStream &operator>>(QByteArray &array);
QTextStream &operator>>(char *c);

QTextStream &operator<<(QBool b);
QTextStream &operator<<(QChar ch);
QTextStream &operator<<(char ch);
QTextStream &operator<<(signed short i);
QTextStream &operator<<(unsigned short i);
QTextStream &operator<<(signed int i);
QTextStream &operator<<(unsigned int i);
QTextStream &operator<<(signed long i);
QTextStream &operator<<(unsigned long i);
QTextStream &operator<<(qlonglong i);
QTextStream &operator<<(qulonglong i);
QTextStream &operator<<(float f);
QTextStream &operator<<(double f);
QTextStream &operator<<(const QString &s);
QTextStream &operator<<(const QByteArray &array);
QTextStream &operator<<(const char *c);
QTextStream &operator<<(const void *ptr);




















































# 249 "/home/eagle/qt-copy/include/QtCore/qtextstream.h"
private:





# 255 "/home/eagle/qt-copy/include/QtCore/qtextstream.h"
QTextStream(const QTextStream &); QTextStream &operator=(const QTextStream &);

QTextStreamPrivate *d_ptr;
};

inline QFlags<QTextStream::NumberFlags::enum_type> operator|(QTextStream::NumberFlags::enum_type f1, QTextStream::NumberFlags::enum_type f2) { return QFlags<QTextStream::NumberFlags::enum_type>(f1) | f2; } inline QFlags<QTextStream::NumberFlags::enum_type> operator|(QTextStream::NumberFlags::enum_type f1, QFlags<QTextStream::NumberFlags::enum_type> f2) { return f2 | f1; }





typedef QTextStream & (*QTextStreamFunction)(QTextStream &);
typedef void (QTextStream::*QTSMFI)(int); 
typedef void (QTextStream::*QTSMFC)(QChar); 

class  QTextStreamManipulator
{
public:
QTextStreamManipulator(QTSMFI m, int a) { mf = m; mc = 0; arg = a; }
QTextStreamManipulator(QTSMFC m, QChar c) { mf = 0; mc = m; ch = c; }
void exec(QTextStream &s) { if (mf) { (s.*mf)(arg); } else { (s.*mc)(ch); } }

private:
QTSMFI mf; 
QTSMFC mc; 
int arg; 
QChar ch;
};

inline QTextStream &operator>>(QTextStream &s, QTextStreamFunction f)
{ return (*f)(s); }

inline QTextStream &operator<<(QTextStream &s, QTextStreamFunction f)
{ return (*f)(s); }

inline QTextStream &operator<<(QTextStream &s, QTextStreamManipulator m)
{ m.exec(s); return s; }

 QTextStream &bin(QTextStream &s);
 QTextStream &oct(QTextStream &s);
 QTextStream &dec(QTextStream &s);
 QTextStream &hex(QTextStream &s);

 QTextStream &showbase(QTextStream &s);
 QTextStream &forcesign(QTextStream &s);
 QTextStream &forcepoint(QTextStream &s);
 QTextStream &noshowbase(QTextStream &s);
 QTextStream &noforcesign(QTextStream &s);
 QTextStream &noforcepoint(QTextStream &s);

 QTextStream &uppercasebase(QTextStream &s);
 QTextStream &uppercasedigits(QTextStream &s);
 QTextStream &lowercasebase(QTextStream &s);
 QTextStream &lowercasedigits(QTextStream &s);

 QTextStream &fixed(QTextStream &s);
 QTextStream &scientific(QTextStream &s);

 QTextStream &left(QTextStream &s);
 QTextStream &right(QTextStream &s);
 QTextStream &center(QTextStream &s);

 QTextStream &endl(QTextStream &s);
 QTextStream &flush(QTextStream &s);
 QTextStream &reset(QTextStream &s);

 QTextStream &bom(QTextStream &s);

 QTextStream &ws(QTextStream &s);

inline QTextStreamManipulator qSetFieldWidth(int width)
{
QTSMFI func = &QTextStream::setFieldWidth;
return QTextStreamManipulator(func,width);
}

inline QTextStreamManipulator qSetPadChar(QChar ch)
{
QTSMFC func = &QTextStream::setPadChar;
return QTextStreamManipulator(func, ch);
}

inline QTextStreamManipulator qSetRealNumberPrecision(int precision)
{
QTSMFI func = &QTextStream::setRealNumberPrecision;
return QTextStreamManipulator(func, precision);
}



























# 369 "/home/eagle/qt-copy/include/QtCore/qtextstream.h"





# 52 "/home/eagle/qt-copy/include/QtCore/qdebug.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 53 "/home/eagle/qt-copy/include/QtCore/qdebug.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qvector.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qiterator.h"








































































# 47 "/home/eagle/qt-copy/include/QtCore/qvector.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qatomic.h"

























































































































































































































# 48 "/home/eagle/qt-copy/include/QtCore/qvector.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qalgorithms.h"

















































































































































































































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtCore/qvector.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qlist.h"











































































































































































































































































































































































































































































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtCore/qvector.h"









# 59 "/home/eagle/qt-copy/include/QtCore/qvector.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

struct  QVectorData
{
QBasicAtomicInt ref;
int alloc;
int size;





# 75 "/home/eagle/qt-copy/include/QtCore/qvector.h"
uint sharable : 1;
uint capacity : 1;


# 79 "/home/eagle/qt-copy/include/QtCore/qvector.h"
static QVectorData shared_null;
static QVectorData *malloc(int sizeofTypedData, int size, int sizeofT, QVectorData *init);
static int grow(int sizeofTypedData, int size, int sizeofT, bool excessive);
};

template <typename T>
struct QVectorTypedData
{
QBasicAtomicInt ref;
int alloc;
int size;





# 95 "/home/eagle/qt-copy/include/QtCore/qvector.h"
uint sharable : 1;
uint capacity : 1;

# 98 "/home/eagle/qt-copy/include/QtCore/qvector.h"
T array[1];
};

template <typename T>
class QVector
{
typedef QVectorTypedData<T> Data;
union { QVectorData *p; QVectorTypedData<T> *d; };

public:
inline QVector() : p(&QVectorData::shared_null) { d->ref.ref(); }
explicit QVector(int size);
QVector(int size, const T &t);
inline QVector(const QVector<T> &v) : d(v.d) { d->ref.ref(); if (!d->sharable) detach_helper(); }
inline ~QVector() { if (!d) return; if (!d->ref.deref()) free(d); }
QVector<T> &operator=(const QVector<T> &v);
bool operator==(const QVector<T> &v) const;
inline bool operator!=(const QVector<T> &v) const { return !(*this == v); }

inline int size() const { return d->size; }

inline bool isEmpty() const { return d->size == 0; }

void resize(int size);

inline int capacity() const { return d->alloc; }
void reserve(int size);
inline void squeeze() { realloc(d->size, d->size); d->capacity = 0; }

inline void detach() { if (d->ref != 1) detach_helper(); }
inline bool isDetached() const { return d->ref == 1; }
inline void setSharable(bool sharable) { if (!sharable) detach(); d->sharable = sharable; }

inline T *data() { detach(); return d->array; }
inline const T *data() const { return d->array; }
inline const T *constData() const { return d->array; }
void clear();

const T &at(int i) const;
T &operator[](int i);
const T &operator[](int i) const;
void append(const T &t);
void prepend(const T &t);
void insert(int i, const T &t);
void insert(int i, int n, const T &t);
void replace(int i, const T &t);
void remove(int i);
void remove(int i, int n);

QVector<T> &fill(const T &t, int size = -1);

int indexOf(const T &t, int from = 0) const;
int lastIndexOf(const T &t, int from = -1) const;
bool contains(const T &t) const;
int count(const T &t) const;





































































# 222 "/home/eagle/qt-copy/include/QtCore/qvector.h"

typedef T* iterator;
typedef const T* const_iterator;

# 226 "/home/eagle/qt-copy/include/QtCore/qvector.h"
inline iterator begin() { detach(); return d->array; }
inline const_iterator begin() const { return d->array; }
inline const_iterator constBegin() const { return d->array; }
inline iterator end() { detach(); return d->array + d->size; }
inline const_iterator end() const { return d->array + d->size; }
inline const_iterator constEnd() const { return d->array + d->size; }
iterator insert(iterator before, int n, const T &x);
inline iterator insert(iterator before, const T &x) { return insert(before, 1, x); }
iterator erase(iterator begin, iterator end);
inline iterator erase(iterator pos) { return erase(pos, pos+1); }


inline int count() const { return d->size; }
inline T& first() { qt_noop(); return *begin(); }
inline const T &first() const { qt_noop(); return *begin(); }
inline T& last() { qt_noop(); return *(end()-1); }
inline const T &last() const { qt_noop(); return *(end()-1); }
QVector<T> mid(int pos, int length = -1) const;

T value(int i) const;
T value(int i, const T &defaultValue) const;


typedef T value_type;
typedef value_type* pointer;
typedef const value_type* const_pointer;
typedef value_type& reference;
typedef const value_type& const_reference;



# 257 "/home/eagle/qt-copy/include/QtCore/qvector.h"
typedef int difference_type;

# 259 "/home/eagle/qt-copy/include/QtCore/qvector.h"
typedef iterator Iterator;
typedef const_iterator ConstIterator;
typedef int size_type;
inline void push_back(const T &t) { append(t); }
inline void push_front(const T &t) { prepend(t); }
void pop_back() { qt_noop(); erase(end()-1); }
void pop_front() { qt_noop(); erase(begin()); }
inline bool empty() const
{ return d->size == 0; }
inline T& front() { return first(); }
inline const_reference front() const { return first(); }
inline reference back() { return last(); }
inline const_reference back() const { return last(); }


QVector<T> &operator+=(const QVector<T> &l);
inline QVector<T> operator+(const QVector<T> &l) const
{ QVector n = *this; n += l; return n; }
inline QVector<T> &operator+=(const T &t)
{ append(t); return *this; }
inline QVector<T> &operator<< (const T &t)
{ append(t); return *this; }
inline QVector<T> &operator<<(const QVector<T> &l)
{ *this += l; return *this; }

QList<T> toList() const;

static QVector<T> fromList(const QList<T> &list);








# 295 "/home/eagle/qt-copy/include/QtCore/qvector.h"
private:
void detach_helper();
QVectorData *malloc(int alloc);
void realloc(int size, int alloc);
void free(Data *d);
int sizeOfTypedData() {


return reinterpret_cast<const char *>(&(reinterpret_cast<const Data *>(this))->array[1]) - reinterpret_cast<const char *>(this);
}
};

template <typename T>
void QVector<T>::detach_helper()
{ realloc(d->size, d->alloc); }
template <typename T>
void QVector<T>::reserve(int asize)
{ if (asize > d->alloc) realloc(d->size, asize); d->capacity = 1; }
template <typename T>
void QVector<T>::resize(int asize)
{ realloc(asize, (asize > d->alloc || (!d->capacity && asize < d->size && asize < (d->alloc >> 1))) ?
QVectorData::grow(sizeOfTypedData(), asize, sizeof(T), QTypeInfo<T>::isStatic)
: d->alloc); }
template <typename T>
inline void QVector<T>::clear()
{ *this = QVector<T>(); }
template <typename T>
inline const T &QVector<T>::at(int i) const
{ qt_noop();
return d->array[i]; }
template <typename T>
inline const T &QVector<T>::operator[](int i) const
{ qt_noop();
return d->array[i]; }
template <typename T>
inline T &QVector<T>::operator[](int i)
{ qt_noop();
return data()[i]; }
template <typename T>
inline void QVector<T>::insert(int i, const T &t)
{ qt_noop();
insert(begin() + i, 1, t); }
template <typename T>
inline void QVector<T>::insert(int i, int n, const T &t)
{ qt_noop();
insert(begin() + i, n, t); }
template <typename T>
inline void QVector<T>::remove(int i, int n)
{ qt_noop();
erase(begin() + i, begin() + i + n); }
template <typename T>
inline void QVector<T>::remove(int i)
{ qt_noop();
erase(begin() + i, begin() + i + 1); }
template <typename T>
inline void QVector<T>::prepend(const T &t)
{ insert(begin(), 1, t); }

template <typename T>
inline void QVector<T>::replace(int i, const T &t)
{
qt_noop();
const T copy(t);
data()[i] = copy;
}

template <typename T>
QVector<T> &QVector<T>::operator=(const QVector<T> &v)
{
v.d->ref.ref();
if (!d->ref.deref())
free(d);
d = v.d;
if (!d->sharable)
detach_helper();
return *this;
}

template <typename T>
inline QVectorData *QVector<T>::malloc(int aalloc)
{
return static_cast<QVectorData *>(qMalloc(sizeOfTypedData() + (aalloc - 1) * sizeof(T)));
}

template <typename T>
QVector<T>::QVector(int asize)
{
p = malloc(asize);
d->ref = 1;
d->alloc = d->size = asize;
d->sharable = true;
d->capacity = false;
if (QTypeInfo<T>::isComplex) {
T* b = d->array;
T* i = d->array + d->size;
while (i != b)
new (--i) T;
} else {
qMemSet(d->array, 0, asize * sizeof(T));
}
}

template <typename T>
QVector<T>::QVector(int asize, const T &t)
{
p = malloc(asize);
d->ref = 1;
d->alloc = d->size = asize;
d->sharable = true;
d->capacity = false;
T* i = d->array + d->size;
while (i != d->array)
new (--i) T(t);
}

template <typename T>
void QVector<T>::free(Data *x)
{
if (QTypeInfo<T>::isComplex) {
T* b = x->array;
T* i = b + x->size;
while (i-- != b)
i->~T();
}
qFree(x);
}

template <typename T>
void QVector<T>::realloc(int asize, int aalloc)
{
T *j, *i, *b;
union { QVectorData *p; Data *d; } x;
x.d = d;

if (QTypeInfo<T>::isComplex && aalloc == d->alloc && d->ref == 1) {

i = d->array + d->size;
j = d->array + asize;
if (i > j) {
while (i-- != j)
i->~T();
} else {
while (j-- != i)
new (j) T;
}
d->size = asize;
return;
}

if (aalloc != d->alloc || d->ref != 1) {

if (QTypeInfo<T>::isStatic) {
x.p = malloc(aalloc);
} else if (d->ref != 1) {
x.p = QVectorData::malloc(sizeOfTypedData(), aalloc, sizeof(T), p);
} else {
if (QTypeInfo<T>::isComplex) {


if (asize < d->size) {
j = d->array + asize;
i = d->array + d->size;
while (i-- != j)
i->~T();
i = d->array + asize;
}
}
x.p = p = static_cast<QVectorData *>(qRealloc(p, sizeOfTypedData() + (aalloc - 1) * sizeof(T)));
}
x.d->ref = 1;
x.d->sharable = true;
x.d->capacity = d->capacity;

}
if (QTypeInfo<T>::isComplex) {
if (asize < d->size) {
j = d->array + asize;
i = x.d->array + asize;
} else {

i = x.d->array + asize;
j = x.d->array + d->size;
while (i != j)
new (--i) T;
j = d->array + d->size;
}
if (i != j) {

b = x.d->array;
while (i != b)
new (--i) T(*--j);
}
} else if (asize > d->size) {

qMemSet(x.d->array + d->size, 0, (asize - d->size) * sizeof(T));
}
x.d->size = asize;
x.d->alloc = aalloc;
if (d != x.d) {
if (!d->ref.deref())
free(d);
d = x.d;
}
}

template<typename T>
 T QVector<T>::value(int i) const
{
if (i < 0 || i >= p->size) {
return T();
}
return d->array[i];
}
template<typename T>
 T QVector<T>::value(int i, const T &defaultValue) const
{
return ((i < 0 || i >= p->size) ? defaultValue : d->array[i]);
}

template <typename T>
void QVector<T>::append(const T &t)
{
if (d->ref != 1 || d->size + 1 > d->alloc) {
const T copy(t);
realloc(d->size, QVectorData::grow(sizeOfTypedData(), d->size + 1, sizeof(T),
QTypeInfo<T>::isStatic));
if (QTypeInfo<T>::isComplex)
new (d->array + d->size) T(copy);
else
d->array[d->size] = copy;
} else {
if (QTypeInfo<T>::isComplex)
new (d->array + d->size) T(t);
else
d->array[d->size] = t;
}
++d->size;
}

template <typename T>
typename QVector<T>::iterator QVector<T>::insert(iterator before, size_type n, const T &t)
{
int offset = before - d->array;
if (n != 0) {
const T copy(t);
if (d->ref != 1 || d->size + n > d->alloc)
realloc(d->size, QVectorData::grow(sizeOfTypedData(), d->size + n, sizeof(T),
QTypeInfo<T>::isStatic));
if (QTypeInfo<T>::isStatic) {
T *b = d->array + d->size;
T *i = d->array + d->size + n;
while (i != b)
new (--i) T;
i = d->array + d->size;
T *j = i + n;
b = d->array + offset;
while (i != b)
*--j = *--i;
i = b+n;
while (i != b)
*--i = copy;
} else {
T *b = d->array + offset;
T *i = b + n;
memmove(i, b, (d->size - offset) * sizeof(T));
while (i != b)
new (--i) T(copy);
}
d->size += n;
}
return d->array + offset;
}

template <typename T>
typename QVector<T>::iterator QVector<T>::erase(iterator abegin, iterator aend)
{
int f = abegin - d->array;
int l = aend - d->array;
int n = l - f;
detach();
if (QTypeInfo<T>::isComplex) {
qCopy(d->array+l, d->array+d->size, d->array+f);
T *i = d->array+d->size;
T* b = d->array+d->size-n;
while (i != b) {
--i;
i->~T();
}
} else {
memmove(d->array + f, d->array + l, (d->size-l)*sizeof(T));
}
d->size -= n;
return d->array + f;
}

template <typename T>
bool QVector<T>::operator==(const QVector<T> &v) const
{
if (d->size != v.d->size)
return false;
if (d == v.d)
return true;
T* b = d->array;
T* i = b + d->size;
T* j = v.d->array + d->size;
while (i != b)
if (!(*--i == *--j))
return false;
return true;
}

template <typename T>
QVector<T> &QVector<T>::fill(const T &from, int asize)
{
const T copy(from);
resize(asize < 0 ? d->size : asize);
if (d->size) {
T *i = d->array + d->size;
T *b = d->array;
while (i != b)
*--i = copy;
}
return *this;
}

template <typename T>
QVector<T> &QVector<T>::operator+=(const QVector &l)
{
int newSize = d->size + l.d->size;
realloc(d->size, newSize);

T *w = d->array + newSize;
T *i = l.d->array + l.d->size;
T *b = l.d->array;
while (i != b) {
if (QTypeInfo<T>::isComplex)
new (--w) T(*--i);
else
*--w = *--i;
}
d->size = newSize;
return *this;
}

template <typename T>
int QVector<T>::indexOf(const T &t, int from) const
{
if (from < 0)
from = qMax(from + d->size, 0);
if (from < d->size) {
T* n = d->array + from - 1;
T* e = d->array + d->size;
while (++n != e)
if (*n == t)
return n - d->array;
}
return -1;
}

template <typename T>
int QVector<T>::lastIndexOf(const T &t, int from) const
{
if (from < 0)
from += d->size;
else if (from >= d->size)
from = d->size-1;
if (from >= 0) {
T* b = d->array;
T* n = d->array + from + 1;
while (n != b) {
if (*--n == t)
return n - b;
}
}
return -1;
}

template <typename T>
bool QVector<T>::contains(const T &t) const
{
T* b = d->array;
T* i = d->array + d->size;
while (i != b)
if (*--i == t)
return true;
return false;
}

template <typename T>
int QVector<T>::count(const T &t) const
{
int c = 0;
T* b = d->array;
T* i = d->array + d->size;
while (i != b)
if (*--i == t)
++c;
return c;
}

template <typename T>
 QVector<T> QVector<T>::mid(int pos, int length) const
{
if (length < 0)
length = size() - pos;
if (pos == 0 && length == size())
return *this;
QVector<T> copy;
if (pos + length > size())
length = size() - pos;
for (int i = pos; i < pos + length; ++i)
copy += at(i);
return copy;
}

template <typename T>
 QList<T> QVector<T>::toList() const
{
QList<T> result;
for (int i = 0; i < size(); ++i)
result.append(at(i));
return result;
}

template <typename T>
 QVector<T> QList<T>::toVector() const
{
QVector<T> result(size());
for (int i = 0; i < size(); ++i)
result[i] = at(i);
return result;
}

template <typename T>
QVector<T> QVector<T>::fromList(const QList<T> &list)
{
return list.toVector();
}

template <typename T>
QList<T> QList<T>::fromVector(const QVector<T> &vector)
{
return vector.toList();
}

template <class T> class QVectorIterator { typedef typename QVector<T>::const_iterator const_iterator; QVector<T> c; const_iterator i; public: inline QVectorIterator(const QVector<T> &container) : c(container), i(c.constBegin()) {} inline QVectorIterator &operator=(const QVector<T> &container) { c = container; i = c.constBegin(); return *this; } inline void toFront() { i = c.constBegin(); } inline void toBack() { i = c.constEnd(); } inline bool hasNext() const { return i != c.constEnd(); } inline const T &next() { return *i++; } inline const T &peekNext() const { return *i; } inline bool hasPrevious() const { return i != c.constBegin(); } inline const T &previous() { return *--i; } inline const T &peekPrevious() const { const_iterator p = i; return *--p; } inline bool findNext(const T &t) { while (i != c.constEnd()) if (*i++ == t) return true; return false; } inline bool findPrevious(const T &t) { while (i != c.constBegin()) if (*(--i) == t) return true; return false; } };
template <class T> class QMutableVectorIterator { typedef typename QVector<T>::iterator iterator; typedef typename QVector<T>::const_iterator const_iterator; QVector<T> *c; iterator i, n; inline bool item_exists() const { return const_iterator(n) != c->constEnd(); } public: inline QMutableVectorIterator(QVector<T> &container) : c(&container) { c->setSharable(false); i = c->begin(); n = c->end(); } inline ~QMutableVectorIterator() { c->setSharable(true); } inline QMutableVectorIterator &operator=(QVector<T> &container) { c->setSharable(true); c = &container; c->setSharable(false); i = c->begin(); n = c->end(); return *this; } inline void toFront() { i = c->begin(); n = c->end(); } inline void toBack() { i = c->end(); n = i; } inline bool hasNext() const { return c->constEnd() != const_iterator(i); } inline T &next() { n = i++; return *n; } inline T &peekNext() const { return *i; } inline bool hasPrevious() const { return c->constBegin() != const_iterator(i); } inline T &previous() { n = --i; return *n; } inline T &peekPrevious() const { iterator p = i; return *--p; } inline void remove() { if (c->constEnd() != const_iterator(n)) { i = c->erase(n); n = c->end(); } } inline void setValue(const T &t) const { if (c->constEnd() != const_iterator(n)) *n = t; } inline T &value() { qt_noop(); return *n; } inline const T &value() const { qt_noop(); return *n; } inline void insert(const T &t) { n = i = c->insert(i, t); ++i; } inline bool findNext(const T &t) { while (c->constEnd() != const_iterator(n = i)) if (*i++ == t) return true; return false; } inline bool findPrevious(const T &t) { while (c->constBegin() != const_iterator(i)) if (*(n = --i) == t) return true; n = c->end(); return false; } };


























# 768 "/home/eagle/qt-copy/include/QtCore/qvector.h"





# 54 "/home/eagle/qt-copy/include/QtCore/qdebug.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qset.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qhash.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qset.h"


# 49 "/home/eagle/qt-copy/include/QtCore/qset.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

template <class T>
class QSet
{
typedef QHash<T, QHashDummyValue> Hash;

public:
inline QSet() {}
inline QSet(const QSet<T> &other) : q_hash(other.q_hash) {}

inline QSet<T> &operator=(const QSet<T> &other)
{ q_hash = other.q_hash; return *this; }

inline bool operator==(const QSet<T> &other) const
{ return q_hash == other.q_hash; }
inline bool operator!=(const QSet<T> &other) const
{ return q_hash != other.q_hash; }

inline int size() const { return q_hash.size(); }

inline bool isEmpty() const { return q_hash.isEmpty(); }

inline int capacity() const { return q_hash.capacity(); }
inline void reserve(int size);
inline void squeeze() { q_hash.squeeze(); }

inline void detach() { q_hash.detach(); }
inline bool isDetached() const { return q_hash.isDetached(); }
inline void setSharable(bool sharable) { q_hash.setSharable(sharable); }

inline void clear() { q_hash.clear(); }

inline bool remove(const T &value) { return q_hash.remove(value) != 0; }

inline bool contains(const T &value) const { return q_hash.contains(value); }

class const_iterator;

class iterator
{
typedef QHash<T, QHashDummyValue> Hash;
typename Hash::iterator i;
friend class const_iterator;

public:
typedef std::bidirectional_iterator_tag iterator_category;
typedef ptrdiff_t difference_type;
typedef T value_type;
typedef const T *pointer;
typedef const T &reference;

inline iterator() {}
inline iterator(typename Hash::iterator o) : i(o) {}
inline iterator(const iterator &o) : i(o.i) {}
inline iterator &operator=(const iterator &o) { i = o.i; return *this; }
inline const T &operator*() const { return i.key(); }
inline const T *operator->() const { return &i.key(); }
inline bool operator==(const iterator &o) const { return i == o.i; }
inline bool operator!=(const iterator &o) const { return i != o.i; }
inline bool operator==(const const_iterator &o) const
{ return i == o.i; }
inline bool operator!=(const const_iterator &o) const
{ return i != o.i; }
inline iterator &operator++() { ++i; return *this; }
inline iterator operator++(int) { iterator r = *this; ++i; return r; }
inline iterator &operator--() { --i; return *this; }
inline iterator operator--(int) { iterator r = *this; --i; return r; }
inline iterator operator+(int j) const { return i + j; }
inline iterator operator-(int j) const { return i - j; }
inline iterator &operator+=(int j) { i += j; return *this; }
inline iterator &operator-=(int j) { i -= j; return *this; }
};

class const_iterator
{
typedef QHash<T, QHashDummyValue> Hash;
typename Hash::const_iterator i;
friend class iterator;

public:
typedef std::bidirectional_iterator_tag iterator_category;
typedef ptrdiff_t difference_type;
typedef T value_type;
typedef const T *pointer;
typedef const T &reference;

inline const_iterator() {}
inline const_iterator(typename Hash::const_iterator o) : i(o) {}
inline const_iterator(const const_iterator &o) : i(o.i) {}
inline const_iterator(const iterator &o)
: i(o.i) {}
inline const_iterator &operator=(const const_iterator &o) { i = o.i; return *this; }
inline const T &operator*() const { return i.key(); }
inline const T *operator->() const { return &i.key(); }
inline bool operator==(const const_iterator &o) const { return i == o.i; }
inline bool operator!=(const const_iterator &o) const { return i != o.i; }
inline const_iterator &operator++() { ++i; return *this; }
inline const_iterator operator++(int) { const_iterator r = *this; ++i; return r; }
inline const_iterator &operator--() { --i; return *this; }
inline const_iterator operator--(int) { const_iterator r = *this; --i; return r; }
inline const_iterator operator+(int j) const { return i + j; }
inline const_iterator operator-(int j) const { return i - j; }
inline const_iterator &operator+=(int j) { i += j; return *this; }
inline const_iterator &operator-=(int j) { i -= j; return *this; }
};


inline iterator begin() { return q_hash.begin(); }
inline const_iterator begin() const { return q_hash.begin(); }
inline const_iterator constBegin() const { return q_hash.constBegin(); }
inline iterator end() { return q_hash.end(); }
inline const_iterator end() const { return q_hash.end(); }
inline const_iterator constEnd() const { return q_hash.constEnd(); }
iterator erase(iterator i)
{ return q_hash.erase(reinterpret_cast<typename Hash::iterator &>(i)); }


typedef iterator Iterator;
typedef const_iterator ConstIterator;
inline int count() const { return q_hash.count(); }
inline const_iterator insert(const T &value) 
{ return static_cast<typename Hash::const_iterator>(q_hash.insert(value,
QHashDummyValue())); }
iterator find(const T &value) { return q_hash.find(value); }
const_iterator find(const T &value) const { return q_hash.find(value); }
inline const_iterator constFind(const T &value) const { return find(value); }
QSet<T> &unite(const QSet<T> &other);
QSet<T> &intersect(const QSet<T> &other);
QSet<T> &subtract(const QSet<T> &other);


typedef T key_type;
typedef T value_type;
typedef value_type *pointer;
typedef const value_type *const_pointer;
typedef value_type &reference;
typedef const value_type &const_reference;
typedef ptrdiff_t difference_type;
typedef int size_type;

inline bool empty() const { return isEmpty(); }


inline QSet<T> &operator<<(const T &value) { insert(value); return *this; }
inline QSet<T> &operator|=(const QSet<T> &other) { unite(other); return *this; }
inline QSet<T> &operator|=(const T &value) { insert(value); return *this; }
inline QSet<T> &operator&=(const QSet<T> &other) { intersect(other); return *this; }
inline QSet<T> &operator&=(const T &value)
{ QSet<T> result; if (contains(value)) result.insert(value); return (*this = result); }
inline QSet<T> &operator+=(const QSet<T> &other) { unite(other); return *this; }
inline QSet<T> &operator+=(const T &value) { insert(value); return *this; }
inline QSet<T> &operator-=(const QSet<T> &other) { subtract(other); return *this; }
inline QSet<T> &operator-=(const T &value) { remove(value); return *this; }
inline QSet<T> operator|(const QSet<T> &other) const
{ QSet<T> result = *this; result |= other; return result; }
inline QSet<T> operator&(const QSet<T> &other) const
{ QSet<T> result = *this; result &= other; return result; }
inline QSet<T> operator+(const QSet<T> &other) const
{ QSet<T> result = *this; result += other; return result; }
inline QSet<T> operator-(const QSet<T> &other) const
{ QSet<T> result = *this; result -= other; return result; }

# 216 "/home/eagle/qt-copy/include/QtCore/qset.h"

inline QSet<T> operator|(const QSet<T> &other)
{ QSet<T> result = *this; result |= other; return result; }
inline QSet<T> operator&(const QSet<T> &other)
{ QSet<T> result = *this; result &= other; return result; }
inline QSet<T> operator+(const QSet<T> &other)
{ QSet<T> result = *this; result += other; return result; }
inline QSet<T> operator-(const QSet<T> &other)
{ QSet<T> result = *this; result -= other; return result; }


# 227 "/home/eagle/qt-copy/include/QtCore/qset.h"
QList<T> toList() const;
inline QList<T> values() const { return toList(); }

static QSet<T> fromList(const QList<T> &list);

private:
Hash q_hash;
};

template <class T>
inline void QSet<T>::reserve(int asize) { q_hash.reserve(asize); }

template <class T>
inline QSet<T> &QSet<T>::unite(const QSet<T> &other)
{
QSet<T> copy(other);
typename QSet<T>::const_iterator i = copy.constEnd();
while (i != copy.constBegin()) {
--i;
insert(*i);
}
return *this;
}

template <class T>
inline QSet<T> &QSet<T>::intersect(const QSet<T> &other)
{
QSet<T> copy1(*this);
QSet<T> copy2(other);
typename QSet<T>::const_iterator i = copy1.constEnd();
while (i != copy1.constBegin()) {
--i;
if (!copy2.contains(*i))
remove(*i);
}
return *this;
}

template <class T>
inline QSet<T> &QSet<T>::subtract(const QSet<T> &other)
{
QSet<T> copy1(*this);
QSet<T> copy2(other);
typename QSet<T>::const_iterator i = copy1.constEnd();
while (i != copy1.constBegin()) {
--i;
if (copy2.contains(*i))
remove(*i);
}
return *this;
}

template <typename T>
 QList<T> QSet<T>::toList() const
{
QList<T> result;
typename QSet<T>::const_iterator i = constBegin();
while (i != constEnd()) {
result.append(*i);
++i;
}
return result;
}

template <typename T>
 QSet<T> QList<T>::toSet() const
{
QSet<T> result;
result.reserve(size());
for (int i = 0; i < size(); ++i)
result.insert(at(i));
return result;
}

template <typename T>
QSet<T> QSet<T>::fromList(const QList<T> &list)
{
return list.toSet();
}

template <typename T>
QList<T> QList<T>::fromSet(const QSet<T> &set)
{
return set.toList();
}

template <class T> class QSetIterator { typedef typename QSet<T>::const_iterator const_iterator; QSet<T> c; const_iterator i; public: inline QSetIterator(const QSet<T> &container) : c(container), i(c.constBegin()) {} inline QSetIterator &operator=(const QSet<T> &container) { c = container; i = c.constBegin(); return *this; } inline void toFront() { i = c.constBegin(); } inline void toBack() { i = c.constEnd(); } inline bool hasNext() const { return i != c.constEnd(); } inline const T &next() { return *i++; } inline const T &peekNext() const { return *i; } inline bool hasPrevious() const { return i != c.constBegin(); } inline const T &previous() { return *--i; } inline const T &peekPrevious() const { const_iterator p = i; return *--p; } inline bool findNext(const T &t) { while (i != c.constEnd()) if (*i++ == t) return true; return false; } inline bool findPrevious(const T &t) { while (i != c.constBegin()) if (*(--i) == t) return true; return false; } };

template <typename T>
class QMutableSetIterator
{
typedef typename QSet<T>::iterator iterator;
QSet<T> *c;
iterator i, n;
inline bool item_exists() const { return n != c->constEnd(); }

public:
inline QMutableSetIterator(QSet<T> &container)
: c(&container)
{ c->setSharable(false); i = c->begin(); n = c->end(); }
inline ~QMutableSetIterator()
{ c->setSharable(true); }
inline QMutableSetIterator &operator=(QSet<T> &container)
{ c->setSharable(true); c = &container; c->setSharable(false);
i = c->begin(); n = c->end(); return *this; }
inline void toFront() { i = c->begin(); n = c->end(); }
inline void toBack() { i = c->end(); n = i; }
inline bool hasNext() const { return c->constEnd() != i; }
inline const T &next() { n = i++; return *n; }
inline const T &peekNext() const { return *i; }
inline bool hasPrevious() const { return c->constBegin() != i; }
inline const T &previous() { n = --i; return *n; }
inline const T &peekPrevious() const { iterator p = i; return *--p; }
inline void remove()
{ if (c->constEnd() != n) { i = c->erase(n); n = c->end(); } }
inline const T &value() const { qt_noop(); return *n; }
inline bool findNext(const T &t)
{ while (c->constEnd() != (n = i)) if (*i++ == t) return true; return false; }
inline bool findPrevious(const T &t)
{ while (c->constBegin() != i) if (*(n = --i) == t) return true;
n = c->end(); return false; }
};






# 55 "/home/eagle/qt-copy/include/QtCore/qdebug.h"


# 57 "/home/eagle/qt-copy/include/QtCore/qdebug.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class  QDebug
{
struct Stream {
Stream(QIODevice *device) : ts(device), ref(1), type(QtDebugMsg), space(true), message_output(false) {}
Stream(QString *string) : ts(string, QIODevice::WriteOnly), ref(1), type(QtDebugMsg), space(true), message_output(false) {}
Stream(QtMsgType t) : ts(&buffer, QIODevice::WriteOnly), ref(1), type(t), space(true), message_output(true) {}
QTextStream ts;
QString buffer;
int ref;
QtMsgType type;
bool space;
bool message_output;
} *stream;
public:
inline QDebug(QIODevice *device) : stream(new Stream(device)) {}
inline QDebug(QString *string) : stream(new Stream(string)) {}
inline QDebug(QtMsgType t) : stream(new Stream(t)) {}
inline QDebug(const QDebug &o):stream(o.stream) { ++stream->ref; }
inline QDebug &operator=(const QDebug &other);
inline ~QDebug() {
if (!--stream->ref) {
if(stream->message_output)
qt_message_output(stream->type, stream->buffer.toLocal8Bit().data());
delete stream;
}
}
inline QDebug &space() { stream->space = true; stream->ts << " "; return *this; }
inline QDebug &nospace() { stream->space = false; return *this; }
inline QDebug &maybeSpace() { if (stream->space) stream->ts << " "; return *this; }

inline QDebug &operator<<(QChar t) { stream->ts << "\'" << t << "\'"; return maybeSpace(); }
inline QDebug &operator<<(bool t) { stream->ts << (t ? "true" : "false"); return maybeSpace(); }
inline QDebug &operator<<(char t) { stream->ts << t; return maybeSpace(); }
inline QDebug &operator<<(signed short t) { stream->ts << t; return maybeSpace(); }
inline QDebug &operator<<(unsigned short t) { stream->ts << t; return maybeSpace(); }
inline QDebug &operator<<(signed int t) { stream->ts << t; return maybeSpace(); }
inline QDebug &operator<<(unsigned int t) { stream->ts << t; return maybeSpace(); }
inline QDebug &operator<<(signed long t) { stream->ts << t; return maybeSpace(); }
inline QDebug &operator<<(unsigned long t) { stream->ts << t; return maybeSpace(); }
inline QDebug &operator<<(qint64 t)
{ stream->ts << QString::number(t); return maybeSpace(); }
inline QDebug &operator<<(quint64 t)
{ stream->ts << QString::number(t); return maybeSpace(); }
inline QDebug &operator<<(float t) { stream->ts << t; return maybeSpace(); }
inline QDebug &operator<<(double t) { stream->ts << t; return maybeSpace(); }
inline QDebug &operator<<(const char* t) { stream->ts << QString::fromAscii(t); return maybeSpace(); }
inline QDebug &operator<<(const QString & t) { stream->ts << "\"" << t << "\""; return maybeSpace(); }
inline QDebug &operator<<(const QLatin1String &t) { stream->ts << "\"" << t.latin1() << "\""; return maybeSpace(); }
inline QDebug &operator<<(const QByteArray & t) { stream->ts << "\"" << t << "\""; return maybeSpace(); }
inline QDebug &operator<<(const void * t) { stream->ts << t; return maybeSpace(); }
inline QDebug &operator<<(QTextStreamFunction f) {
stream->ts << f;
return *this;
}

inline QDebug &operator<<(QTextStreamManipulator m)
{ stream->ts << m; return *this; }
};

 inline QDebug qCritical() { return QDebug(QtCriticalMsg); }

inline QDebug &QDebug::operator=(const QDebug &other)
{
if (this != &other) {
QDebug copy(other);
qSwap(stream, copy.stream);
}
return *this;
}





# 137 "/home/eagle/qt-copy/include/QtCore/qdebug.h"
template <class T>
inline QDebug operator<<(QDebug debug, const QList<T> &list)

# 140 "/home/eagle/qt-copy/include/QtCore/qdebug.h"
{
debug.nospace() << "(";
for (typename QList<T>::size_type i = 0; i < list.count(); ++i) {
if (i)
debug << ", ";
debug << list.at(i);
}
debug << ")";
return debug.space();
}





# 155 "/home/eagle/qt-copy/include/QtCore/qdebug.h"
template <typename T>
inline QDebug operator<<(QDebug debug, const QVector<T> &vec)

# 158 "/home/eagle/qt-copy/include/QtCore/qdebug.h"
{
debug.nospace() << "QVector";
return operator<<(debug, vec.toList());
}





# 167 "/home/eagle/qt-copy/include/QtCore/qdebug.h"
template <class aKey, class aT>
inline QDebug operator<<(QDebug debug, const QMap<aKey, aT> &map)

# 170 "/home/eagle/qt-copy/include/QtCore/qdebug.h"
{
debug.nospace() << "QMap(";
for (typename QMap<aKey, aT>::const_iterator it = map.constBegin();
it != map.constEnd(); ++it) {
debug << "(" << it.key() << ", " << it.value() << ")";
}
debug << ")";
return debug.space();
}





# 184 "/home/eagle/qt-copy/include/QtCore/qdebug.h"
template <class aKey, class aT>
inline QDebug operator<<(QDebug debug, const QHash<aKey, aT> &hash)

# 187 "/home/eagle/qt-copy/include/QtCore/qdebug.h"
{
debug.nospace() << "QHash(";
for (typename QHash<aKey, aT>::const_iterator it = hash.constBegin();
it != hash.constEnd(); ++it)
debug << "(" << it.key() << ", " << it.value() << ")";
debug << ")";
return debug.space();
}





# 200 "/home/eagle/qt-copy/include/QtCore/qdebug.h"
template <class T1, class T2>
inline QDebug operator<<(QDebug debug, const QPair<T1, T2> &pair)

# 203 "/home/eagle/qt-copy/include/QtCore/qdebug.h"
{
debug.nospace() << "QPair(" << pair.first << "," << pair.second << ")";
return debug.space();
}

template <typename T>
inline QDebug operator<<(QDebug debug, const QSet<T> &set)
{
debug.nospace() << "QSet";
return operator<<(debug, set.toList());
}


# 216 "/home/eagle/qt-copy/include/QtCore/qdebug.h"
 inline QDebug qDebug() { return QDebug(QtDebugMsg); }


































# 251 "/home/eagle/qt-copy/include/QtCore/qdebug.h"
 inline QDebug qWarning() { return QDebug(QtWarningMsg); }






# 258 "/home/eagle/qt-copy/include/QtCore/qdebug.h"





# 52 "/home/eagle/qt-copy/include/QtCore/qtconcurrentresultstore.h"


# 54 "/home/eagle/qt-copy/include/QtCore/qtconcurrentresultstore.h"



typedef QtValidLicenseForCoreModule QtCoreModule;











# 69 "/home/eagle/qt-copy/include/QtCore/qtconcurrentresultstore.h"
namespace QtConcurrent {

class ResultItem
{
public:
ResultItem(const void *_result, int _count) : m_count(_count), result(_result) { } 
ResultItem(const void *_result) : m_count(0), result(_result) { } 
ResultItem() : m_count(0), result(0) { }
bool isValid() const { return result != 0; }
bool isVector() const { return m_count != 0; }
int count() const { return (m_count == 0) ? 1 : m_count; }
int m_count; 
const void *result; 
};

class  ResultIteratorBase
{
public:
ResultIteratorBase();
ResultIteratorBase(QMap<int, ResultItem>::const_iterator _mapIterator, int _vectorIndex = 0);
int vectorIndex() const;
int resultIndex() const;

ResultIteratorBase operator++();
int batchSize() const;
void batchedAdvance();
bool operator==(const ResultIteratorBase &other) const;
bool operator!=(const ResultIteratorBase &other) const;
bool isVector() const;
bool canIncrementVectorIndex() const;
protected:
QMap<int, ResultItem>::const_iterator mapIterator;
int m_vectorIndex;
};

template <typename T>
class ResultIterator : public ResultIteratorBase
{
public:
ResultIterator(const ResultIteratorBase &base)
: ResultIteratorBase(base) { }

const T &value() const
{
return *pointer();
}

const T *pointer() const
{
if (mapIterator.value().isVector())
return &(reinterpret_cast<const QVector<T> *>(mapIterator.value().result)->at(m_vectorIndex));
else
return reinterpret_cast<const T *>(mapIterator.value().result);
}
};

class  ResultStoreBase
{
public:
ResultStoreBase();
void setFilterMode(bool enable);
bool filterMode() const;
int addResult(int index, const void *result);
int addResults(int index, const void *results, int vectorSize, int logicalCount);
ResultIteratorBase begin() const;
ResultIteratorBase end() const;
bool hasNextResult() const;
ResultIteratorBase resultAt(int index) const;
bool contains(int index) const;
int count() const;
virtual ~ResultStoreBase() { };

protected:
int insertResultItem(int index, ResultItem &resultItem);
void insertResultItemIfValid(int index, ResultItem &resultItem);
void syncPendingResults();
void syncResultCount();
int updateInsertIndex(int index, int _count);

QMap<int, ResultItem> m_results;
int insertIndex; 
int resultCount; 

bool m_filterMode;
QMap<int, ResultItem> pendingResults;
int filteredResults;

};

template <typename T>
class ResultStore : public ResultStoreBase
{
public:
ResultStore() { }

ResultStore(const ResultStoreBase &base)
: ResultStoreBase(base) { }

int addResult(int index, const T *result)
{
if (result == 0)
return ResultStoreBase::addResult(index, result);
else
return ResultStoreBase::addResult(index, new T(*result));
}

int addResults(int index, const QVector<T> *results)
{
return ResultStoreBase::addResults(index, new QVector<T>(*results), results->count(), results->count());
}

int addResults(int index, const QVector<T> *results, int totalCount)
{
return ResultStoreBase::addResults(index, new QVector<T>(*results), results->count(), totalCount);
}

int addCanceledResult(int index)
{
return addResult(index, 0);
}

int addCanceledResults(int index, int _count)
{
QVector<T> empty;
return addResults(index, &empty, _count);
}

ResultIterator<T> begin() const
{
return static_cast<ResultIterator<T> >(ResultStoreBase::begin());
}

ResultIterator<T> end() const
{
return static_cast<ResultIterator<T> >(ResultStoreBase::end());
}

ResultIterator<T> resultAt(int index) const
{
return static_cast<ResultIterator<T> >(ResultStoreBase::resultAt(index));
}

void clear()
{
QMap<int, ResultItem>::const_iterator mapIterator = m_results.begin();
while (mapIterator != m_results.end()) {
if (mapIterator.value().isVector())
delete reinterpret_cast<const QVector<T> *>(mapIterator.value().result);
else
delete reinterpret_cast<const T *>(mapIterator.value().result);
++mapIterator;
}
resultCount = 0;
m_results.clear();
}

~ResultStore()
{
clear();
}

};

} 



# 236 "/home/eagle/qt-copy/include/QtCore/qtconcurrentresultstore.h"






# 53 "/home/eagle/qt-copy/include/QtCore/qfutureinterface.h"


# 55 "/home/eagle/qt-copy/include/QtCore/qfutureinterface.h"



typedef QtValidLicenseForCoreModule QtCoreModule;

template <typename T> class QFuture;
class QFutureInterfaceBasePrivate;
class QFutureWatcherBase;
class QFutureWatcherBasePrivate;

class  QFutureInterfaceBase
{
public:
enum State {
NoState = 0x00,
Running = 0x01,
Started = 0x02,
Finished = 0x04,
Canceled = 0x08,
Paused = 0x10,
Throttled = 0x20
};

QFutureInterfaceBase(State initialState = NoState);
QFutureInterfaceBase(const QFutureInterfaceBase &other);
virtual ~QFutureInterfaceBase();


void reportStarted();
void reportFinished();
void reportCanceled();

# 87 "/home/eagle/qt-copy/include/QtCore/qfutureinterface.h"
void reportException(const QtConcurrent::Exception &e);

# 89 "/home/eagle/qt-copy/include/QtCore/qfutureinterface.h"
void reportResultsReady(int beginIndex, int endIndex);

void setFilterMode(bool enable);
void setProgressRange(int minimum, int maximum);
int progressMinimum() const;
int progressMaximum() const;
bool isProgressUpdateNeeded() const;
void setProgressValue(int progressValue);
int progressValue() const;
void setProgressValueAndText(int progressValue, const QString &progressText);
QString progressText() const;

void setExpectedResultCount(int resultCount);
int expectedResultCount();
int resultCount() const;

bool queryState(State state) const;
bool isRunning() const;
bool isStarted() const;
bool isCanceled() const;
bool isFinished() const;
bool isPaused() const;
bool isThrottled() const;
bool isResultReadyAt(int index) const;

void cancel();
void setPaused(bool paused);
void togglePaused();
void setThrottled(bool enable);

void waitForFinished();
bool waitForNextResult();
void waitForResult(int resultIndex);
void waitForResume();

QMutex *mutex() const;
QtConcurrent::internal::ExceptionStore &exceptionStore();
QtConcurrent::ResultStoreBase &resultStoreBase();
const QtConcurrent::ResultStoreBase &resultStoreBase() const;

inline bool operator==(const QFutureInterfaceBase &other) const { return d == other.d; }
inline bool operator!=(const QFutureInterfaceBase &other) const { return d != other.d; }
QFutureInterfaceBase &operator=(const QFutureInterfaceBase &other);

protected:
bool referenceCountIsOne() const;
public:


# 138 "/home/eagle/qt-copy/include/QtCore/qfutureinterface.h"
private:

# 140 "/home/eagle/qt-copy/include/QtCore/qfutureinterface.h"
QFutureInterfaceBasePrivate *d;

private:
friend class QFutureWatcherBase;
friend class QFutureWatcherBasePrivate;
};

template <typename T>
class QFutureInterface : public QFutureInterfaceBase
{
public:
QFutureInterface(State initialState = NoState)
: QFutureInterfaceBase(initialState)
{ }
QFutureInterface(const QFutureInterface &other)
: QFutureInterfaceBase(other)
{ }
~QFutureInterface()
{
if (referenceCountIsOne())
resultStore().clear();
}

static QFutureInterface canceledResult()
{ return QFutureInterface(State(Started | Finished | Canceled)); }

QFutureInterface &operator=(const QFutureInterface &other)
{
QFutureInterfaceBase::operator=(other);
return *this;
}

inline QFuture<T> future(); 

inline void reportResult(const T *result, int index = -1);
inline void reportResult(const T &result, int index = -1);
inline void reportResults(const QVector<T> &results, int beginIndex = -1, int count = -1);
inline void reportFinished(const T *result = 0);

inline const T &resultReference(int index) const;
inline const T *resultPointer(int index) const;
inline QList<T> results();
private:
QtConcurrent::ResultStore<T> &resultStore()
{ return static_cast<QtConcurrent::ResultStore<T> &>(resultStoreBase()); }
const QtConcurrent::ResultStore<T> &resultStore() const
{ return static_cast<const QtConcurrent::ResultStore<T> &>(resultStoreBase()); }
};

template <typename T>
inline void QFutureInterface<T>::reportResult(const T *result, int index)
{
QMutexLocker locker(mutex());
if (this->queryState(Canceled) || this->queryState(Finished)) {
return;
}

QtConcurrent::ResultStore<T> &store = resultStore();


if (store.filterMode()) {
const int resultCountBefore = store.count();
store.addResult(index, result);
this->reportResultsReady(resultCountBefore, resultCountBefore + store.count());
} else {
const int insertIndex = store.addResult(index, result);
this->reportResultsReady(insertIndex, insertIndex + 1);
}
}

template <typename T>
inline void QFutureInterface<T>::reportResult(const T &result, int index)
{
reportResult(&result, index);
}

template <typename T>
inline void QFutureInterface<T>::reportResults(const QVector<T> &_results, int beginIndex, int count)
{
QMutexLocker locker(mutex());
if (this->queryState(Canceled) || this->queryState(Finished)) {
return;
}

QtConcurrent::ResultStore<T> &store = resultStore();

if (store.filterMode()) {
const int resultCountBefore = store.count();
store.addResults(beginIndex, &_results, count);
this->reportResultsReady(resultCountBefore, store.count());
} else {
const int insertIndex = store.addResults(beginIndex, &_results, count);
this->reportResultsReady(insertIndex, insertIndex + _results.count()); 
}
}

template <typename T>
inline void QFutureInterface<T>::reportFinished(const T *result)
{
if (result)
reportResult(result);
QFutureInterfaceBase::reportFinished();
}

template <typename T>
inline const T &QFutureInterface<T>::resultReference(int index) const
{
QMutexLocker lock(mutex());
return resultStore().resultAt(index).value();
}

template <typename T>
inline const T *QFutureInterface<T>::resultPointer(int index) const
{
QMutexLocker lock(mutex());
return resultStore().resultAt(index).pointer();
}

template <typename T>
inline QList<T> QFutureInterface<T>::results()
{
if (this->isCanceled()) {
exceptionStore().throwPossibleException();
return QList<T>();
}
QFutureInterfaceBase::waitForResult(-1);

QList<T> res;
QMutexLocker lock(mutex());

QtConcurrent::ResultIterator<T> it = resultStore().begin();
while (it != resultStore().end()) {
res.append(it.value());
++it;
}

return res;
}

template <>
class QFutureInterface<void> : public QFutureInterfaceBase
{
public:
QFutureInterface<void>(State initialState = NoState)
: QFutureInterfaceBase(initialState)
{ }
QFutureInterface<void>(const QFutureInterface<void> &other)
: QFutureInterfaceBase(other)
{ }

static QFutureInterface<void> canceledResult()
{ return QFutureInterface(State(Started | Finished | Canceled)); }

QFutureInterface<void> &operator=(const QFutureInterface<void> &other)
{
QFutureInterfaceBase::operator=(other);
return *this;
}

inline QFuture<void> future(); 

void reportResult(const void *, int) { }
void reportResults(const QVector<void> &, int) { }
void reportFinished(void * = 0) { QFutureInterfaceBase::reportFinished(); }
};







# 51 "/home/eagle/qt-copy/include/QtCore/qfuture.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 52 "/home/eagle/qt-copy/include/QtCore/qfuture.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentcompilertest.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qtconcurrentcompilertest.h"




# 51 "/home/eagle/qt-copy/include/QtCore/qtconcurrentcompilertest.h"



typedef QtValidLicenseForCoreModule QtCoreModule;













# 68 "/home/eagle/qt-copy/include/QtCore/qtconcurrentcompilertest.h"






# 53 "/home/eagle/qt-copy/include/QtCore/qfuture.h"


# 55 "/home/eagle/qt-copy/include/QtCore/qfuture.h"



typedef QtValidLicenseForCoreModule QtCoreModule;

template <typename T>
class QFutureWatcher;
template <>
class QFutureWatcher<void>;

template <typename T>
class QFuture
{
public:
QFuture()
: d(QFutureInterface<T>::canceledResult())
{ }
explicit QFuture(QFutureInterface<T> *p) 
: d(*p)
{ }
QFuture(const QFuture &other)
: d(other.d)
{ }
~QFuture()
{ }

inline QFuture &operator=(const QFuture &other);
bool operator==(const QFuture &other) const { return (d == other.d); }
bool operator!=(const QFuture &other) const { return (d != other.d); }

void cancel() { d.cancel(); }
bool isCanceled() const { return d.isCanceled(); }

void setPaused(bool paused) { d.setPaused(paused); }
bool isPaused() const { return d.isPaused(); }
void pause() { setPaused(true); }
void resume() { setPaused(false); }
void togglePaused() { d.togglePaused(); }

bool isStarted() const { return d.isStarted(); }
bool isFinished() const { return d.isFinished(); }
bool isRunning() const { return d.isRunning(); }

int resultCount() const { return d.resultCount(); }
int progressValue() const { return d.progressValue(); }
int progressMinimum() const { return d.progressMinimum(); }
int progressMaximum() const { return d.progressMaximum(); }
QString progressText() const { return d.progressText(); }
void waitForFinished() { d.waitForFinished(); }

inline T result() const;
inline T resultAt(int index) const;
bool isResultReadyAt(int index) const { return d.isResultReadyAt(index); }

operator T() const { return result(); }
QList<T> results() const { return d.results(); }

class const_iterator
{
public:
typedef std::bidirectional_iterator_tag iterator_category;
typedef ptrdiff_t difference_type;
typedef T value_type;
typedef const T *pointer;
typedef const T &reference;

inline const_iterator() {}
inline const_iterator(QFuture const * const _future, int _index) : future(_future), index(_index) {}
inline const_iterator(const const_iterator &o) : future(o.future), index(o.index) {}
inline const_iterator &operator=(const const_iterator &o)
{ future = o.future; index = o.index; return *this; }
inline const T &operator*() const { return future->d.resultReference(index); }
inline const T *operator->() const { return future->d.resultPointer(index); }

inline bool operator!=(const const_iterator &other) const
{
if (index == -1 && other.index == -1) 
return false;
if (other.index == -1)
return (future->isRunning() || (index < future->resultCount()));
return (index != other.index);
}

inline bool operator==(const const_iterator &o) const { return !operator!=(o); }
inline const_iterator &operator++() { ++index; return *this; }
inline const_iterator operator++(int) { const_iterator r = *this; ++index; return r; }
inline const_iterator &operator--() { --index; return *this; }
inline const_iterator operator--(int) { const_iterator r = *this; --index; return r; }
inline const_iterator operator+(int j) const { return const_iterator(future, index + j); }
inline const_iterator operator-(int j) const { return const_iterator(future, index - j); }
inline const_iterator &operator+=(int j) { index += j; return *this; }
inline const_iterator &operator-=(int j) { index -= j; return *this; }
private:
QFuture const * future;
int index;
};
friend class const_iterator;
typedef const_iterator ConstIterator;

const_iterator begin() const { return const_iterator(this, 0); }
const_iterator constBegin() const { return const_iterator(this, 0); }
const_iterator end() const { return const_iterator(this, -1); }
const_iterator constEnd() const { return const_iterator(this, -1); }

private:
friend class QFutureWatcher<T>;

public: 
mutable QFutureInterface<T> d;
};

template <typename T>
inline QFuture<T> &QFuture<T>::operator=(const QFuture<T> &other)
{
d = other.d;
return *this;
}

template <typename T>
inline T QFuture<T>::result() const
{
d.waitForResult(0);
return d.resultReference(0);
}

template <typename T>
inline T QFuture<T>::resultAt(int index) const
{
d.waitForResult(index);
return d.resultReference(index);
}

template <typename T>
inline QFuture<T> QFutureInterface<T>::future()
{
return QFuture<T>(this);
}

template <class T> class QFutureIterator { typedef typename QFuture<T>::const_iterator const_iterator; QFuture<T> c; const_iterator i; public: inline QFutureIterator(const QFuture<T> &container) : c(container), i(c.constBegin()) {} inline QFutureIterator &operator=(const QFuture<T> &container) { c = container; i = c.constBegin(); return *this; } inline void toFront() { i = c.constBegin(); } inline void toBack() { i = c.constEnd(); } inline bool hasNext() const { return i != c.constEnd(); } inline const T &next() { return *i++; } inline const T &peekNext() const { return *i; } inline bool hasPrevious() const { return i != c.constBegin(); } inline const T &previous() { return *--i; } inline const T &peekPrevious() const { const_iterator p = i; return *--p; } inline bool findNext(const T &t) { while (i != c.constEnd()) if (*i++ == t) return true; return false; } inline bool findPrevious(const T &t) { while (i != c.constBegin()) if (*(--i) == t) return true; return false; } };

template <>
class QFuture<void>
{
public:
QFuture()
: d(QFutureInterface<void>::canceledResult())
{ }
explicit QFuture(QFutureInterfaceBase *p) 
: d(*p)
{ }
QFuture(const QFuture &other)
: d(other.d)
{ }
~QFuture()
{ }

QFuture &operator=(const QFuture &other);
bool operator==(const QFuture &other) const { return (d == other.d); }
bool operator!=(const QFuture &other) const { return (d != other.d); }


# 216 "/home/eagle/qt-copy/include/QtCore/qfuture.h"
template <typename T>
QFuture(const QFuture<T> &other)
: d(other.d)
{ }

template <typename T>
QFuture<void> &operator=(const QFuture<T> &other)
{
d = other.d;
return *this;
}


# 229 "/home/eagle/qt-copy/include/QtCore/qfuture.h"
void cancel() { d.cancel(); }
bool isCanceled() const { return d.isCanceled(); }

void setPaused(bool paused) { d.setPaused(paused); }
bool isPaused() const { return d.isPaused(); }
void pause() { setPaused(true); }
void resume() { setPaused(false); }
void togglePaused() { d.togglePaused(); }

bool isStarted() const { return d.isStarted(); }
bool isFinished() const { return d.isFinished(); }
bool isRunning() const { return d.isRunning(); }

int resultCount() const { return d.resultCount(); }
int progressValue() const { return d.progressValue(); }
int progressMinimum() const { return d.progressMinimum(); }
int progressMaximum() const { return d.progressMaximum(); }
QString progressText() const { return d.progressText(); }
void waitForFinished() { d.waitForFinished(); }

private:
friend class QFutureWatcher<void>;




# 255 "/home/eagle/qt-copy/include/QtCore/qfuture.h"
mutable QFutureInterfaceBase d;
};

inline QFuture<void> &QFuture<void>::operator=(const QFuture<void> &other)
{
d = other.d;
return *this;
}

inline QFuture<void> QFutureInterface<void>::future()
{
return QFuture<void>(this);
}

template <typename T>
QFuture<void> qToVoidFuture(const QFuture<T> &future)
{
return QFuture<void>(future.d);
}







# 3 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfutureinterface.h"























































































































































































































































































































# 4 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuturesynchronizer.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qfuture.h"
























































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qfuturesynchronizer.h"




# 51 "/home/eagle/qt-copy/include/QtCore/qfuturesynchronizer.h"



typedef QtValidLicenseForCoreModule QtCoreModule;

template <typename T>
class QFutureSynchronizer
{
QFutureSynchronizer(const QFutureSynchronizer &); QFutureSynchronizer &operator=(const QFutureSynchronizer &);

public:
QFutureSynchronizer() : m_cancelOnWait(false) { }
explicit QFutureSynchronizer(const QFuture<T> &future)
: m_cancelOnWait(false)
{ addFuture(future); }
~QFutureSynchronizer() { waitForFinished(); }

void setFuture(const QFuture<T> &future)
{
waitForFinished();
m_futures.clear();
addFuture(future);
}

void addFuture(const QFuture<T> &future)
{
m_futures.append(future);
}

void waitForFinished()
{
for (int i = 0; i < m_futures.count(); ++i) {
QFuture<T> future = m_futures.at(i);
if (m_cancelOnWait)
future.cancel();
future.waitForFinished();
}
}

void clearFutures()
{
m_futures.clear();
}

QList<QFuture<T> > futures() const
{
return m_futures;
}

void setCancelOnWait(bool enabled)
{
m_cancelOnWait = enabled;
}

bool cancelOnWait() const
{
return m_cancelOnWait;
}

protected:
QList<QFuture<T> > m_futures;
bool m_cancelOnWait;
};







# 5 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuturewatcher.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qfuture.h"
























































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qfuturewatcher.h"




# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtCore/qfuturewatcher.h"


# 53 "/home/eagle/qt-copy/include/QtCore/qfuturewatcher.h"



typedef QtValidLicenseForCoreModule QtCoreModule;

class QEvent;

class QFutureWatcherBasePrivate;
class  QFutureWatcherBase : public QObject
{
Q_OBJECT
inline QFutureWatcherBasePrivate* d_func() { return reinterpret_cast<QFutureWatcherBasePrivate *>(d_ptr); } inline const QFutureWatcherBasePrivate* d_func() const { return reinterpret_cast<const QFutureWatcherBasePrivate *>(d_ptr); } friend class QFutureWatcherBasePrivate;

public:
QFutureWatcherBase(QObject *parent = 0);

int progressValue() const;
int progressMinimum() const;
int progressMaximum() const;
QString progressText() const;

bool isStarted() const;
bool isFinished() const;
bool isRunning() const;
bool isCanceled() const;
bool isPaused() const;

void waitForFinished();

void setPendingResultsLimit(int limit);

bool event(QEvent *event);

signals:
void started();
void finished();
void canceled();
void paused();
void resumed();
void resultReadyAt(int resultIndex);
void resultsReadyAt(int beginIndex, int endIndex);
void progressRangeChanged(int minimum, int maximum);
void progressValueChanged(int progressValue);
void progressTextChanged(const QString &progressText);

public slots:
void cancel();
void setPaused(bool paused);
void pause();
void resume();
void togglePaused();

protected:
void connectNotify (const char * signal);
void disconnectNotify (const char * signal);


void connectOutputInterface();
void disconnectOutputInterface(bool pendingAssignment = false);

private:

virtual const QFutureInterfaceBase &futureInterface() const = 0;
virtual QFutureInterfaceBase &futureInterface() = 0;
};

template <typename T>
class QFutureWatcher : public QFutureWatcherBase
{
public:
QFutureWatcher(QObject *_parent = 0)
: QFutureWatcherBase(_parent)
{ }
~QFutureWatcher()
{ disconnectOutputInterface(); }

void setFuture(const QFuture<T> &future);
QFuture<T> future() const
{ return m_future; }

T result() const { return m_future.result(); }
T resultAt(int index) const { return m_future.resultAt(index); }





































# 172 "/home/eagle/qt-copy/include/QtCore/qfuturewatcher.h"
private:
QFuture<T> m_future;
const QFutureInterfaceBase &futureInterface() const { return m_future.d; }
QFutureInterfaceBase &futureInterface() { return m_future.d; }
};

template <typename T>
inline void QFutureWatcher<T>::setFuture(const QFuture<T> &_future)
{
if (_future == m_future)
return;

disconnectOutputInterface(true);
m_future = _future;
connectOutputInterface();
}

template <>
class QFutureWatcher<void> : public QFutureWatcherBase
{
public:
QFutureWatcher(QObject *_parent = 0)
: QFutureWatcherBase(_parent)
{ }
~QFutureWatcher()
{ disconnectOutputInterface(); }

void setFuture(const QFuture<void> &future);
QFuture<void> future() const
{ return m_future; }

private:
QFuture<void> m_future;
const QFutureInterfaceBase &futureInterface() const { return m_future.d; }
QFutureInterfaceBase &futureInterface() { return m_future.d; }
};

inline void QFutureWatcher<void>::setFuture(const QFuture<void> &_future)
{
if (_future == m_future)
return;

disconnectOutputInterface(true);
m_future = _future;
connectOutputInterface();
}







# 6 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qrunnable.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qrunnable.h"


# 49 "/home/eagle/qt-copy/include/QtCore/qrunnable.h"



typedef QtValidLicenseForCoreModule QtCoreModule;

class QRunnable
{
int ref;

friend class QThreadPoolPrivate;
friend class QThreadPoolThread;

public:
virtual void run() = 0;

QRunnable() : ref(0) { }
virtual ~QRunnable() { }

bool autoDelete() const { return ref != -1; }
void setAutoDelete(bool _autoDelete) { ref = _autoDelete ? 0 : -1; }
};





# 7 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentcompilertest.h"









































































# 8 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentexception.h"


































































































































# 9 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfilter.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfilter.h"




# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfilterkernel.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfilterkernel.h"




# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentiteratekernel.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qtconcurrentiteratekernel.h"




# 1 "/home/eagle/qt-copy/include/QtCore/qatomic.h"

























































































































































































































# 51 "/home/eagle/qt-copy/include/QtCore/qtconcurrentiteratekernel.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmedian.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmedian.h"




# 1 "/home/eagle/qt-copy/include/QtCore/qvector.h"































































































































































































































































































































































































































































































































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmedian.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qalgorithms.h"

















































































































































































































































































































































































































































































































































































# 52 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmedian.h"


# 54 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmedian.h"



typedef QtValidLicenseForCoreModule QtCoreModule;



# 61 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmedian.h"
namespace QtConcurrent {

template <typename T>
class Median
{
public:
Median(int _bufferSize)
: currentMedian(), bufferSize(_bufferSize), currentIndex(0), valid(false), dirty(true)
{
values.resize(bufferSize);
}

void reset()
{
values.fill(0);
currentIndex = 0;
valid = false;
dirty = true;
}

void addValue(T value)
{
currentIndex = ((currentIndex + 1) % bufferSize);
if (valid == false && currentIndex % bufferSize == 0)
valid = true;




const T currentIndexValue = values[currentIndex];
if (currentIndexValue > currentMedian && currentMedian > value ||
currentMedian > currentIndexValue && value > currentMedian) {
dirty = true;
}

values[currentIndex] = value;
}

bool isMedianValid() const
{
return valid;
}

T median()
{
if (dirty) {
dirty = false;
QVector<T> sorted = values;
qSort(sorted);
currentMedian = sorted.at(bufferSize / 2 + 1);
}
return currentMedian;
}
private:
QVector<T> values;
T currentMedian;
int bufferSize;
int currentIndex;
bool valid;
bool dirty;
};

} 



# 127 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmedian.h"






# 52 "/home/eagle/qt-copy/include/QtCore/qtconcurrentiteratekernel.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentthreadengine.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qtconcurrentthreadengine.h"




# 1 "/home/eagle/qt-copy/include/QtCore/qthreadpool.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qthreadpool.h"


# 1 "/home/eagle/qt-copy/include/QtCore/qthread.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qthread.h"




# 51 "/home/eagle/qt-copy/include/QtCore/qthread.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class QThreadData;
class QThreadPrivate;


# 61 "/home/eagle/qt-copy/include/QtCore/qthread.h"
class  QThread : public QObject
{
public:
static Qt::HANDLE currentThreadId();
static QThread *currentThread();
static int idealThreadCount();

explicit QThread(QObject *parent = 0);
~QThread();

enum Priority {
IdlePriority,

LowestPriority,
LowPriority,
NormalPriority,
HighPriority,
HighestPriority,

TimeCriticalPriority,

InheritPriority
};

void setPriority(Priority priority);
Priority priority() const;

bool isFinished() const;
bool isRunning() const;

void setStackSize(uint stackSize);
uint stackSize() const;

void exit(int retcode = 0);

public slots:
void start(Priority = InheritPriority);
void terminate();
void quit();

public:

bool wait(unsigned long time = ULONG_MAX);

signals:
void started();
void finished();
void terminated();

protected:
virtual void run();
int exec();

static void setTerminationEnabled(bool enabled = true);

static void sleep(unsigned long);
static void msleep(unsigned long);
static void usleep(unsigned long);







# 126 "/home/eagle/qt-copy/include/QtCore/qthread.h"
protected:
QThread(QThreadPrivate &dd, QObject *parent = 0);

private:
Q_OBJECT
inline QThreadPrivate* d_func() { return reinterpret_cast<QThreadPrivate *>(d_ptr); } inline const QThreadPrivate* d_func() const { return reinterpret_cast<const QThreadPrivate *>(d_ptr); } friend class QThreadPrivate;

static void initialize();
static void cleanup();

friend class QCoreApplication;
friend class QThreadData;
};





















# 160 "/home/eagle/qt-copy/include/QtCore/qthread.h"





# 49 "/home/eagle/qt-copy/include/QtCore/qthreadpool.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qrunnable.h"










































































# 50 "/home/eagle/qt-copy/include/QtCore/qthreadpool.h"




# 54 "/home/eagle/qt-copy/include/QtCore/qthreadpool.h"



typedef QtValidLicenseForCoreModule QtCoreModule;

class QThreadPoolPrivate;
class  QThreadPool : public QObject
{
Q_OBJECT
inline QThreadPoolPrivate* d_func() { return reinterpret_cast<QThreadPoolPrivate *>(d_ptr); } inline const QThreadPoolPrivate* d_func() const { return reinterpret_cast<const QThreadPoolPrivate *>(d_ptr); } friend class QThreadPoolPrivate;
Q_PROPERTY(int expiryTimeout READ expiryTimeout WRITE setExpiryTimeout)
Q_PROPERTY(int maxThreadCount READ maxThreadCount WRITE setMaxThreadCount)
Q_PROPERTY(int activeThreadCount READ activeThreadCount)

public:
QThreadPool(QObject *parent = 0);
~QThreadPool();

static QThreadPool *globalInstance();

void start(QRunnable *runnable, int priority = 0);
bool tryStart(QRunnable *runnable);

int expiryTimeout() const;
void setExpiryTimeout(int expiryTimeout);

int maxThreadCount() const;
void setMaxThreadCount(int maxThreadCount);

int activeThreadCount() const;

void reserveThread();
void releaseThread();

void waitForDone();
};







# 51 "/home/eagle/qt-copy/include/QtCore/qtconcurrentthreadengine.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuture.h"
























































































































































































































































































# 52 "/home/eagle/qt-copy/include/QtCore/qtconcurrentthreadengine.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qdebug.h"






































































































































































































































































# 53 "/home/eagle/qt-copy/include/QtCore/qtconcurrentthreadengine.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentexception.h"


































































































































# 54 "/home/eagle/qt-copy/include/QtCore/qtconcurrentthreadengine.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qwaitcondition.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qwaitcondition.h"




# 51 "/home/eagle/qt-copy/include/QtCore/qwaitcondition.h"




typedef QtValidLicenseForCoreModule QtCoreModule;



# 59 "/home/eagle/qt-copy/include/QtCore/qwaitcondition.h"
class QWaitConditionPrivate;
class QMutex;
class QReadWriteLock;

class  QWaitCondition
{
public:
QWaitCondition();
~QWaitCondition();

bool wait(QMutex *mutex, unsigned long time = ULONG_MAX);
bool wait(QReadWriteLock *readWriteLock, unsigned long time = ULONG_MAX);

void wakeOne();
void wakeAll();

private:
QWaitCondition(const QWaitCondition &); QWaitCondition &operator=(const QWaitCondition &);

QWaitConditionPrivate * d;
};























# 103 "/home/eagle/qt-copy/include/QtCore/qwaitcondition.h"





# 55 "/home/eagle/qt-copy/include/QtCore/qtconcurrentthreadengine.h"


# 57 "/home/eagle/qt-copy/include/QtCore/qtconcurrentthreadengine.h"



typedef QtValidLicenseForCoreModule QtCoreModule;



# 64 "/home/eagle/qt-copy/include/QtCore/qtconcurrentthreadengine.h"
namespace QtConcurrent {


class ThreadEngineSemaphore
{
public:
ThreadEngineSemaphore()
:count(0) { }

void acquire()
{
QMutexLocker lock(&mutex);
++count;
}

int release()
{
QMutexLocker lock(&mutex);
if (--count == 0)
waitCondition.wakeAll();
return count;
}


void wait()
{
QMutexLocker lock(&mutex);
if (count != 0)
waitCondition.wait(&mutex);
}

int currentCount()
{
return count;
}



bool releaseUnlessLast()
{
QMutexLocker lock(&mutex);
if (count == 1)
return false;
--count;
return true;
}

private:
QMutex mutex;
int count;
QWaitCondition waitCondition;
};

enum ThreadFunctionResult { ThrottleThread, ThreadFinished };





class  ThreadEngineBase: public QRunnable
{
public:

ThreadEngineBase();
virtual ~ThreadEngineBase();
void startSingleThreaded();
void startBlocking();
void startThread();
bool isCanceled();
bool isProgressReportingEnabled();
void setProgressValue(int progress);
void setProgressRange(int minimum, int maximum);

protected: 
virtual void start() {}
virtual void finish() {}
virtual ThreadFunctionResult threadFunction() { return ThreadFinished; }
virtual bool shouldStartThread() { return true; }
virtual bool shouldThrottleThread() { return false; }
private:
bool startThreadInternal();
void startThreads();
void threadExit();
bool threadThrottleExit();
void run();
virtual void asynchronousFinish() = 0;

# 151 "/home/eagle/qt-copy/include/QtCore/qtconcurrentthreadengine.h"
void handleException(const QtConcurrent::Exception &exception);

# 153 "/home/eagle/qt-copy/include/QtCore/qtconcurrentthreadengine.h"
protected:
QFutureInterfaceBase *futureInterface;
QThreadPool *threadPool;
ThreadEngineSemaphore semaphore;
QtConcurrent::internal::ExceptionStore exceptionStore;
};


template <typename T>
class ThreadEngine : public virtual ThreadEngineBase
{
public:
typedef T ResultType;

virtual T *result() { return 0; }

QFutureInterface<T> *futureInterfaceTyped()
{
return static_cast<QFutureInterface<T> *>(futureInterface);
}


T *startSingleThreaded()
{
ThreadEngineBase::startSingleThreaded();
return result();
}




T *startBlocking()
{
ThreadEngineBase::startBlocking();
return result();
}



QFuture<T> startAsynchronously()
{
futureInterface = new QFutureInterface<T>();




futureInterface->reportStarted();
QFuture<T> future = QFuture<T>(futureInterfaceTyped());
start();

semaphore.acquire();
threadPool->start(this);
return future;
}

void asynchronousFinish()
{
finish();
futureInterfaceTyped()->reportFinished(result());
delete futureInterfaceTyped();
delete this;
}


void reportResult(const T *_result, int index = -1)
{
if (futureInterface)
futureInterfaceTyped()->reportResult(_result, index);
}

void reportResults(const QVector<T> &_result, int index = -1, int count = -1)
{
if (futureInterface)
futureInterfaceTyped()->reportResults(_result, index, count);
}
};





template <typename T>
class ThreadEngineStarterBase
{
public:
ThreadEngineStarterBase(ThreadEngine<T> *_threadEngine)
: threadEngine(_threadEngine) { }

inline ThreadEngineStarterBase(const ThreadEngineStarterBase &other)
: threadEngine(other.threadEngine) { }

QFuture<T> startAsynchronously()
{
return threadEngine->startAsynchronously();
}

operator QFuture<T>()
{
return startAsynchronously();
}

protected:
ThreadEngine<T> *threadEngine;
};





template <typename T>
class ThreadEngineStarter : public ThreadEngineStarterBase<T>
{
public:
ThreadEngineStarter(ThreadEngine<T> *threadEngine)
:ThreadEngineStarterBase<T>(threadEngine) {}

T startBlocking()
{
T t = *this->threadEngine->startBlocking();
delete this->threadEngine;
return t;
}
};


template <>
class ThreadEngineStarter<void> : public ThreadEngineStarterBase<void>
{
public:
ThreadEngineStarter<void>(ThreadEngine<void> *_threadEngine)
:ThreadEngineStarterBase<void>(_threadEngine) {}

void startBlocking()
{
this->threadEngine->startBlocking();
delete this->threadEngine;
}
};

template <typename ThreadEngine>
inline ThreadEngineStarter<typename ThreadEngine::ResultType> startThreadEngine(ThreadEngine *threadEngine)
{
return ThreadEngineStarter<typename ThreadEngine::ResultType>(threadEngine);
}

} 



# 302 "/home/eagle/qt-copy/include/QtCore/qtconcurrentthreadengine.h"






# 53 "/home/eagle/qt-copy/include/QtCore/qtconcurrentiteratekernel.h"




# 57 "/home/eagle/qt-copy/include/QtCore/qtconcurrentiteratekernel.h"



typedef QtValidLicenseForCoreModule QtCoreModule;



# 64 "/home/eagle/qt-copy/include/QtCore/qtconcurrentiteratekernel.h"
namespace QtConcurrent {









class  BlockSizeManager
{
public:
BlockSizeManager(int iterationCount);
void timeBeforeUser();
void timeAfterUser();
int blockSize();
private:
inline bool blockSizeMaxed()
{
return (m_blockSize >= maxBlockSize);
}

const int maxBlockSize;
qint64 beforeUser;
qint64 afterUser;
Median<double> controlPartElapsed;
Median<double> userPartElapsed;
int m_blockSize;
};

template <typename T>
class ResultReporter
{
public:
ResultReporter(ThreadEngine<T> *_threadEngine)
:threadEngine(_threadEngine)
{

}

void reserveSpace(int resultCount)
{
currentResultCount = resultCount;
vector.resize(qMax(resultCount, vector.count()));
}

void reportResults(int begin)
{
const int useVectorThreshold = 4; 
if (currentResultCount > useVectorThreshold) {
vector.resize(currentResultCount);
threadEngine->reportResults(vector, begin);
} else {
for (int i = 0; i < currentResultCount; ++i)
threadEngine->reportResult(&vector.at(i), begin + i);
}
}

inline T * getPointer()
{
return vector.data();
}

int currentResultCount;
ThreadEngine<T> *threadEngine;
QVector<T> vector;
};

template <>
class ResultReporter<void>
{
public:
inline ResultReporter(ThreadEngine<void> *) { }
inline void reserveSpace(int) { };
inline void reportResults(int) { };
inline void * getPointer() { return 0; }
};

inline bool selectIteration(std::bidirectional_iterator_tag)
{
return false; 
}

inline bool selectIteration(std::forward_iterator_tag)
{
return false; 
}

inline bool selectIteration(std::random_access_iterator_tag)
{
return true; 
}

template <typename Iterator, typename T>
class IterateKernel : public ThreadEngine<T>
{
public:
typedef T ResultType;

IterateKernel(Iterator _begin, Iterator _end)

# 166 "/home/eagle/qt-copy/include/QtCore/qtconcurrentiteratekernel.h"
: begin(_begin), end(_end), current(_begin), currentIndex(0),
forIteration(selectIteration(typename std::iterator_traits<Iterator>::iterator_category())), progressReportingEnabled(true)




# 172 "/home/eagle/qt-copy/include/QtCore/qtconcurrentiteratekernel.h"
{
iterationCount = forIteration ? std::distance(_begin, _end) : 0;
}

virtual ~IterateKernel() { }

virtual bool runIteration(Iterator it, int index , T *result)
{ (void)it;; (void)index;; (void)result;; return false; }
virtual bool runIterations(Iterator _begin, int beginIndex, int endIndex, T *results)
{ (void)_begin;; (void)beginIndex;; (void)endIndex;; (void)results;; return false; }

void start()
{
progressReportingEnabled = this->isProgressReportingEnabled();
if (progressReportingEnabled && iterationCount > 0)
this->setProgressRange(0, iterationCount);
}

bool shouldStartThread()
{
if (forIteration)
return (currentIndex < iterationCount) && !this->shouldThrottleThread();
else 
return (iteratorThreads == 0);
}

ThreadFunctionResult threadFunction()
{
if (forIteration)
return this->forThreadFunction();
else 
return this->whileThreadFunction();
}

ThreadFunctionResult forThreadFunction()
{
BlockSizeManager blockSizeManager(iterationCount);
ResultReporter<T> resultReporter(this);

for(;;) {
if (this->isCanceled())
break;

const int currentBlockSize = blockSizeManager.blockSize();

if (currentIndex >= iterationCount)
break;


const int beginIndex = currentIndex.fetchAndAddRelease(currentBlockSize);
const int endIndex = qMin(beginIndex + currentBlockSize, iterationCount);

if (beginIndex >= endIndex) {

break;
}

const int finalBlockSize = endIndex - beginIndex; 
resultReporter.reserveSpace(finalBlockSize);


blockSizeManager.timeBeforeUser();
const bool resultsAvailable = this->runIterations(begin, beginIndex, endIndex, resultReporter.getPointer());
blockSizeManager.timeAfterUser();

if (resultsAvailable)
resultReporter.reportResults(beginIndex);


if (progressReportingEnabled) {
completed.fetchAndAddAcquire(finalBlockSize);
this->setProgressValue(this->completed);
}

if (this->shouldThrottleThread())
return ThrottleThread;

if (shouldStartThread())
this->startThread();
}
return ThreadFinished;
}

ThreadFunctionResult whileThreadFunction()
{
if (iteratorThreads.testAndSetAcquire(0, 1) == false)
return ThreadFinished;

ResultReporter<T> resultReporter(this);
resultReporter.reserveSpace(1);

while (current != end) {



Iterator prev = current;
++current;
int index = currentIndex.fetchAndAddRelaxed(1);
iteratorThreads.testAndSetRelease(1, 0);

if (shouldStartThread())
this->startThread();

const bool resultAavailable = this->runIteration(prev, index, resultReporter.getPointer());
if (resultAavailable)
resultReporter.reportResults(index);

if (this->shouldThrottleThread())
return ThrottleThread;

if (iteratorThreads.testAndSetAcquire(0, 1) == false)
return ThreadFinished;
}

return ThreadFinished;
}


public:
const Iterator begin;
const Iterator end;
Iterator current;
QAtomicInt currentIndex;
bool forIteration;
QAtomicInt iteratorThreads;
int iterationCount;

bool progressReportingEnabled;
QAtomicInt completed;
};

} 



# 307 "/home/eagle/qt-copy/include/QtCore/qtconcurrentiteratekernel.h"






# 51 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfilterkernel.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmapkernel.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmapkernel.h"




# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentiteratekernel.h"

















































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmapkernel.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentreducekernel.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qtconcurrentreducekernel.h"




# 1 "/home/eagle/qt-copy/include/QtCore/qatomic.h"

























































































































































































































# 51 "/home/eagle/qt-copy/include/QtCore/qtconcurrentreducekernel.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qlist.h"











































































































































































































































































































































































































































































































































































































































































































# 52 "/home/eagle/qt-copy/include/QtCore/qtconcurrentreducekernel.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qmap.h"






















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 53 "/home/eagle/qt-copy/include/QtCore/qtconcurrentreducekernel.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qmutex.h"



































































































































































































# 54 "/home/eagle/qt-copy/include/QtCore/qtconcurrentreducekernel.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qthread.h"




































































































































































# 55 "/home/eagle/qt-copy/include/QtCore/qtconcurrentreducekernel.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qvector.h"































































































































































































































































































































































































































































































































































































































































































































































































# 56 "/home/eagle/qt-copy/include/QtCore/qtconcurrentreducekernel.h"


# 58 "/home/eagle/qt-copy/include/QtCore/qtconcurrentreducekernel.h"



typedef QtValidLicenseForCoreModule QtCoreModule;

namespace QtConcurrent {



# 67 "/home/eagle/qt-copy/include/QtCore/qtconcurrentreducekernel.h"







enum {
ReduceQueueStartLimit = 20,
ReduceQueueThrottleLimit = 30
};




template <typename T>
class IntermediateResults
{
public:
int begin, end;
QVector<T> vector;
};



# 92 "/home/eagle/qt-copy/include/QtCore/qtconcurrentreducekernel.h"
enum ReduceOption {
UnorderedReduce = 0x1,
OrderedReduce = 0x2,
SequentialReduce = 0x4

};
typedef QFlags<ReduceOption> ReduceOptions;



# 102 "/home/eagle/qt-copy/include/QtCore/qtconcurrentreducekernel.h"

template <typename ReduceFunctor, typename ReduceResultType, typename T>
class ReduceKernel
{
typedef QMap<int, IntermediateResults<T> > ResultsMap;

const ReduceOptions reduceOptions;

QMutex mutex;
int progress, resultsMapSize;
ResultsMap resultsMap;

bool canReduce(int begin) const
{
return (((reduceOptions & UnorderedReduce)
&& progress == 0)
|| ((reduceOptions & OrderedReduce)
&& progress == begin));
}

void reduceResult(ReduceFunctor &reduce,
ReduceResultType &r,
const IntermediateResults<T> &result)
{
for (int i = 0; i < result.vector.size(); ++i) {
reduce(r, result.vector.at(i));
}
}

void reduceResults(ReduceFunctor &reduce,
ReduceResultType &r,
ResultsMap &map)
{
typename ResultsMap::iterator it = map.begin();
while (it != map.end()) {
reduceResult(reduce, r, it.value());
++it;
}
}

public:
ReduceKernel(ReduceOptions _reduceOptions)
: reduceOptions(_reduceOptions), progress(0), resultsMapSize(0)
{ }

void runReduce(ReduceFunctor &reduce,
ReduceResultType &r,
const IntermediateResults<T> &result)
{
QMutexLocker locker(&mutex);
if (!canReduce(result.begin)) {
++resultsMapSize;
resultsMap.insert(result.begin, result);
return;
}

if (reduceOptions & UnorderedReduce) {

progress = -1;


locker.unlock();
reduceResult(reduce, r, result);
locker.relock();


while (!resultsMap.isEmpty()) {
ResultsMap resultsMapCopy = resultsMap;
resultsMap.clear();

locker.unlock();
reduceResults(reduce, r, resultsMapCopy);
locker.relock();

resultsMapSize -= resultsMapCopy.size();
}

progress = 0;
} else {

locker.unlock();
reduceResult(reduce, r, result);
locker.relock();


progress += result.end - result.begin;


typename ResultsMap::iterator it = resultsMap.begin();
while (it != resultsMap.end()) {
if (it.value().begin != progress)
break;

locker.unlock();
reduceResult(reduce, r, it.value());
locker.relock();

--resultsMapSize;
progress += it.value().end - it.value().begin;
it = resultsMap.erase(it);
}
}
}


void finish(ReduceFunctor &reduce, ReduceResultType &r)
{
reduceResults(reduce, r, resultsMap);
}

inline bool shouldThrottle()
{
return (resultsMapSize > (ReduceQueueThrottleLimit * QThread::idealThreadCount()));
}

inline bool shouldStartThread()
{
return (resultsMapSize <= (ReduceQueueStartLimit * QThread::idealThreadCount()));
}
};

template <typename Sequence, typename Base, typename Functor1, typename Functor2>
struct SequenceHolder2 : public Base
{
SequenceHolder2(const Sequence &_sequence,
Functor1 functor1,
Functor2 functor2,
ReduceOptions reduceOptions)
: Base(_sequence.constBegin(), _sequence.constEnd(), functor1, functor2, reduceOptions),
sequence(_sequence)
{ }

Sequence sequence;

void finish()
{
Base::finish();


sequence = Sequence();
}
};



# 247 "/home/eagle/qt-copy/include/QtCore/qtconcurrentreducekernel.h"
} 







# 52 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmapkernel.h"


# 54 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmapkernel.h"



typedef QtValidLicenseForCoreModule QtCoreModule;


# 60 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmapkernel.h"
namespace QtConcurrent {


template <typename Iterator, typename MapFunctor>
class MapKernel : public IterateKernel<Iterator, void>
{
MapFunctor map;
public:
typedef void ReturnType;
MapKernel(Iterator begin, Iterator end, MapFunctor _map)
: IterateKernel<Iterator, void>(begin, end), map(_map)
{ }

bool runIteration(Iterator it, int, void *)
{
map(*it);
return false;
}

bool runIterations(Iterator sequenceBeginIterator, int beginIndex, int endIndex, void *)
{
int currentIndex = beginIndex;
while (currentIndex != endIndex) {
runIteration((sequenceBeginIterator + currentIndex), currentIndex, 0);
++currentIndex;
}
return false;
}
};

template <typename ReducedResultType,
typename Iterator,
typename MapFunctor,
typename ReduceFunctor,
typename Reducer = ReduceKernel<ReduceFunctor,
ReducedResultType,
typename MapFunctor::result_type> >
class MappedReducedKernel : public IterateKernel<Iterator, ReducedResultType>
{
ReducedResultType reducedResult;
MapFunctor map;
ReduceFunctor reduce;
Reducer reducer;
public:
typedef ReducedResultType ReturnType;
MappedReducedKernel(Iterator begin, Iterator end, MapFunctor _map, ReduceFunctor _reduce, ReduceOptions reduceOptions)
: IterateKernel<Iterator, ReducedResultType>(begin, end), reducedResult(), map(_map), reduce(_reduce), reducer(reduceOptions)
{ }

MappedReducedKernel(ReducedResultType initialValue,
MapFunctor _map,
ReduceFunctor _reduce)
: reducedResult(initialValue), map(_map), reduce(_reduce)
{ }

bool runIteration(Iterator it, int index, ReducedResultType *)
{
IntermediateResults<typename MapFunctor::result_type> results;
results.begin = index;
results.end = index + 1;

results.vector.append(map(*it));
reducer.runReduce(reduce, reducedResult, results);
return false;
}

bool runIterations(Iterator sequenceBeginIterator, int begin, int end, ReducedResultType *)
{
IntermediateResults<typename MapFunctor::result_type> results;
results.begin = begin;
results.end = end;
results.vector.reserve(end - begin);

int currentIndex = begin;
while (currentIndex != end) {
results.vector.append(map(*(sequenceBeginIterator + currentIndex)));
++currentIndex;
}

reducer.runReduce(reduce, reducedResult, results);
return false;
}

void finish()
{
reducer.finish(reduce, reducedResult);
}

bool shouldThrottleThread()
{
return IterateKernel<Iterator, ReducedResultType>::shouldThrottleThread() || reducer.shouldThrottle();
}

bool shouldStartThread()
{
return IterateKernel<Iterator, ReducedResultType>::shouldStartThread() && reducer.shouldStartThread();
}

typedef ReducedResultType ResultType;
ReducedResultType *result()
{
return &reducedResult;
}
};

template <typename Iterator, typename MapFunctor>
class MappedEachKernel : public IterateKernel<Iterator, typename MapFunctor::result_type>
{
MapFunctor map;
typedef typename MapFunctor::result_type T;
public:
typedef T ReturnType;
typedef T ResultType;

MappedEachKernel(Iterator begin, Iterator end, MapFunctor _map)
: IterateKernel<Iterator, T>(begin, end), map(_map) { }

bool runIteration(Iterator it, int, T *result)
{
*result = map(*it);
return true;
}

bool runIterations(Iterator sequenceBeginIterator, int begin, int end, T *results)
{
int currentIndex = begin;
while (currentIndex != end) {
runIteration(sequenceBeginIterator + currentIndex, currentIndex, results + (currentIndex - begin));
++currentIndex;
}
return true;
}
};

template <typename Iterator, typename Functor>
inline ThreadEngineStarter<void> startMap(Iterator begin, Iterator end, Functor functor)
{
return startThreadEngine(new MapKernel<Iterator, Functor>(begin, end, functor));
}

template <typename T, typename Iterator, typename Functor>
inline ThreadEngineStarter<T> startMapped(Iterator begin, Iterator end, Functor functor)
{
return startThreadEngine(new MappedEachKernel<Iterator, Functor>(begin, end, functor));
}





template <typename Sequence, typename Base, typename Functor>
struct SequenceHolder1 : public Base
{
SequenceHolder1(const Sequence &_sequence, Functor functor)
: Base(_sequence.constBegin(), _sequence.constEnd(), functor), sequence(_sequence)
{ }

Sequence sequence;

void finish()
{
Base::finish();


sequence = Sequence();
}
};

template <typename T, typename Sequence, typename Functor>
inline ThreadEngineStarter<T> startMapped(const Sequence &sequence, Functor functor)
{
typedef SequenceHolder1<Sequence,
MappedEachKernel<typename Sequence::const_iterator , Functor>, Functor>
SequenceHolderType;

return startThreadEngine(new SequenceHolderType(sequence, functor));
}

template <typename IntermediateType, typename ResultType, typename Sequence, typename MapFunctor, typename ReduceFunctor>
inline ThreadEngineStarter<ResultType> startMappedReduced(const Sequence & sequence,
MapFunctor mapFunctor, ReduceFunctor reduceFunctor,
ReduceOptions options)
{
typedef typename Sequence::const_iterator Iterator;
typedef ReduceKernel<ReduceFunctor, ResultType, IntermediateType> Reducer;
typedef MappedReducedKernel<ResultType, Iterator, MapFunctor, ReduceFunctor, Reducer> MappedReduceType;
typedef SequenceHolder2<Sequence, MappedReduceType, MapFunctor, ReduceFunctor> SequenceHolderType;
return startThreadEngine(new SequenceHolderType(sequence, mapFunctor, reduceFunctor, options));
}

template <typename IntermediateType, typename ResultType, typename Iterator, typename MapFunctor, typename ReduceFunctor>
inline ThreadEngineStarter<ResultType> startMappedReduced(Iterator begin, Iterator end,
MapFunctor mapFunctor, ReduceFunctor reduceFunctor,
ReduceOptions options)
{
typedef ReduceKernel<ReduceFunctor, ResultType, IntermediateType> Reducer;
typedef MappedReducedKernel<ResultType, Iterator, MapFunctor, ReduceFunctor, Reducer> MappedReduceType;
return startThreadEngine(new MappedReduceType(begin, end, mapFunctor, reduceFunctor, options));
}

} 



# 264 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmapkernel.h"






# 52 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfilterkernel.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentreducekernel.h"
























































































































































































































































# 53 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfilterkernel.h"


# 55 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfilterkernel.h"



typedef QtValidLicenseForCoreModule QtCoreModule;



# 62 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfilterkernel.h"
namespace QtConcurrent {


template <typename Sequence, typename KeepFunctor, typename ReduceFunctor>
class FilterKernel : public IterateKernel<typename Sequence::const_iterator, void>
{
typedef ReduceKernel<ReduceFunctor, Sequence, typename Sequence::value_type> Reducer;
typedef IterateKernel<typename Sequence::const_iterator, void> IterateKernelType;
typedef typename ReduceFunctor::result_type T;

Sequence reducedResult;
Sequence &sequence;
KeepFunctor keep;
ReduceFunctor reduce;
Reducer reducer;

public:
FilterKernel(Sequence &_sequence, KeepFunctor _keep, ReduceFunctor _reduce)
: IterateKernelType(_sequence.constBegin(), _sequence.constEnd()), reducedResult(),
sequence(_sequence),
keep(_keep),
reduce(_reduce),
reducer(OrderedReduce)
{ }

bool runIteration(typename Sequence::const_iterator it, int index, T *)
{
IntermediateResults<typename Sequence::value_type> results;
results.begin = index;
results.end = index + 1;

if (keep(*it))
results.vector.append(*it);

reducer.runReduce(reduce, reducedResult, results);
return false;
}

bool runIterations(typename Sequence::const_iterator sequenceBeginIterator, int begin, int end, T *)
{
IntermediateResults<typename Sequence::value_type> results;
results.begin = begin;
results.end = end;
results.vector.reserve(end - begin);

int currentIndex = begin;
while (currentIndex != end) {
typename Sequence::const_iterator currentIterator =
sequenceBeginIterator + currentIndex;
if (keep(*currentIterator))
results.vector.append(*currentIterator);
++currentIndex;
}

reducer.runReduce(reduce, reducedResult, results);
return false;
}

void finish()
{
reducer.finish(reduce, reducedResult);
sequence = reducedResult;
}

inline bool shouldThrottleThread()
{
return IterateKernelType::shouldThrottleThread() || reducer.shouldThrottle();
}

inline bool shouldStartThread()
{
return IterateKernelType::shouldStartThread() && reducer.shouldStartThread();
}

typedef void ReturnType;
typedef void ResultType;
};


template <typename ReducedResultType,
typename Iterator,
typename KeepFunctor,
typename ReduceFunctor,
typename Reducer = ReduceKernel<ReduceFunctor,
ReducedResultType,
typename Iterator::value_type> >
class FilteredReducedKernel : public IterateKernel<Iterator, ReducedResultType>
{
ReducedResultType reducedResult;
KeepFunctor keep;
ReduceFunctor reduce;
Reducer reducer;
typedef IterateKernel<Iterator, ReducedResultType> IterateKernelType;

public:
FilteredReducedKernel(Iterator begin,
Iterator end,
KeepFunctor _keep,
ReduceFunctor _reduce,
ReduceOptions reduceOption)
: IterateKernelType(begin, end), reducedResult(), keep(_keep), reduce(_reduce), reducer(reduceOption)
{ }










# 174 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfilterkernel.h"
bool runIteration(Iterator it, int index, ReducedResultType *)
{
IntermediateResults<typename Iterator::value_type> results;
results.begin = index;
results.end = index + 1;

if (keep(*it))
results.vector.append(*it);

reducer.runReduce(reduce, reducedResult, results);
return false;
}

bool runIterations(Iterator sequenceBeginIterator, int begin, int end, ReducedResultType *)
{
IntermediateResults<typename Iterator::value_type> results;
results.begin = begin;
results.end = end;
results.vector.reserve(end - begin);

int currentIndex = begin;
while (currentIndex != end) {
Iterator currentIterator = sequenceBeginIterator + currentIndex;
if (keep(*currentIterator))
results.vector.append(*currentIterator);
++currentIndex;
}

reducer.runReduce(reduce, reducedResult, results);
return false;
}

void finish()
{
reducer.finish(reduce, reducedResult);
}

inline bool shouldThrottleThread()
{
return IterateKernelType::shouldThrottleThread() || reducer.shouldThrottle();
}

inline bool shouldStartThread()
{
return IterateKernelType::shouldStartThread() && reducer.shouldStartThread();
}

typedef ReducedResultType ReturnType;
typedef ReducedResultType ResultType;
ReducedResultType *result()
{
return &reducedResult;
}
};


template <typename Iterator, typename KeepFunctor>
class FilteredEachKernel : public IterateKernel<Iterator, typename Iterator::value_type>
{
typedef typename Iterator::value_type T;
typedef IterateKernel<Iterator, T> IterateKernelType;

KeepFunctor keep;

public:
typedef T ReturnType;
typedef T ResultType;

FilteredEachKernel(Iterator begin, Iterator end, KeepFunctor _keep)
: IterateKernelType(begin, end), keep(_keep)
{ }

void start()
{
if (this->futureInterface)
this->futureInterface->setFilterMode(true);
IterateKernelType::start();
}

bool runIteration(Iterator it, int index, T *)
{
if (keep(*it))
this->reportResult(&(*it), index);
else
this->reportResult(0, index);
return false;
}

bool runIterations(Iterator sequenceBeginIterator, int begin, int end, T *)
{
const int count = end - begin;
IntermediateResults<typename Iterator::value_type> results;
results.begin = begin;
results.end = end;
results.vector.reserve(count);

int currentIndex = begin;
while (currentIndex != end) {
Iterator currentIterator = sequenceBeginIterator + currentIndex;
if (keep(*currentIterator))
results.vector.append(*currentIterator);
++currentIndex;
}

this->reportResults(results.vector, begin, count);
return false;
}
};

template <typename Iterator, typename KeepFunctor>
inline
ThreadEngineStarter<typename Iterator::value_type>
startFiltered(Iterator begin, Iterator end, KeepFunctor functor)
{
return startThreadEngine(new FilteredEachKernel<Iterator, KeepFunctor>(begin, end, functor));
}

template <typename Sequence, typename KeepFunctor>
inline ThreadEngineStarter<typename Sequence::value_type>
startFiltered(const Sequence &sequence, KeepFunctor functor)
{
typedef SequenceHolder1<Sequence,
FilteredEachKernel<typename Sequence::const_iterator, KeepFunctor>,
KeepFunctor>
SequenceHolderType;
return startThreadEngine(new SequenceHolderType(sequence, functor));
}

template <typename ResultType, typename Sequence, typename MapFunctor, typename ReduceFunctor>
inline ThreadEngineStarter<ResultType> startFilteredReduced(const Sequence & sequence,
MapFunctor mapFunctor, ReduceFunctor reduceFunctor,
ReduceOptions options)
{
typedef typename Sequence::const_iterator Iterator;
typedef ReduceKernel<ReduceFunctor, ResultType, typename Iterator::value_type> Reducer;
typedef FilteredReducedKernel<ResultType, Iterator, MapFunctor, ReduceFunctor, Reducer> FilteredReduceType;
typedef SequenceHolder2<Sequence, FilteredReduceType, MapFunctor, ReduceFunctor> SequenceHolderType;
return startThreadEngine(new SequenceHolderType(sequence, mapFunctor, reduceFunctor, options));
}


template <typename ResultType, typename Iterator, typename MapFunctor, typename ReduceFunctor>
inline ThreadEngineStarter<ResultType> startFilteredReduced(Iterator begin, Iterator end,
MapFunctor mapFunctor, ReduceFunctor reduceFunctor,
ReduceOptions options)
{
typedef ReduceKernel<ReduceFunctor, ResultType, typename Iterator::value_type> Reducer;
typedef FilteredReducedKernel<ResultType, Iterator, MapFunctor, ReduceFunctor, Reducer> FilteredReduceType;
return startThreadEngine(new FilteredReduceType(begin, end, mapFunctor, reduceFunctor, options));
}


} 



# 330 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfilterkernel.h"






# 51 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfilter.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfunctionwrappers.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfunctionwrappers.h"




# 51 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfunctionwrappers.h"



typedef QtValidLicenseForCoreModule QtCoreModule;



# 58 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfunctionwrappers.h"
namespace QtConcurrent {

template <typename T>
class FunctionWrapper0
{
public:
typedef T (*FunctionPointerType)();
typedef T result_type;
inline FunctionWrapper0(FunctionPointerType _functionPointer)
:functionPointer(_functionPointer) { }

inline T operator()()
{
return functionPointer();
}
private:
FunctionPointerType functionPointer;
};

template <typename T, typename U>
class FunctionWrapper1
{
public:
typedef T (*FunctionPointerType)(U u);
typedef T result_type;
inline FunctionWrapper1(FunctionPointerType _functionPointer)
:functionPointer(_functionPointer) { }

inline T operator()(U u)
{
return functionPointer(u);
}

private:
FunctionPointerType functionPointer;
};

template <typename T, typename U, typename V>
class FunctionWrapper2
{
public:
typedef T (*FunctionPointerType)(U u, V v);
typedef T result_type;
inline FunctionWrapper2(FunctionPointerType _functionPointer)
:functionPointer(_functionPointer) { }

inline T operator()(U u, V v)
{
return functionPointer(u, v);
}
private:
FunctionPointerType functionPointer;
};

template <typename T, typename C>
class MemberFunctionWrapper
{
public:
typedef T (C::*FunctionPointerType)();
typedef T result_type;
inline MemberFunctionWrapper(FunctionPointerType _functionPointer)
:functionPointer(_functionPointer) { }

inline T operator()(C &c)
{
return (c.*functionPointer)();
}
private:
FunctionPointerType functionPointer;
};

template <typename T, typename C, typename U>
class MemberFunctionWrapper1
{
public:
typedef T (C::*FunctionPointerType)(U);
typedef T result_type;

inline MemberFunctionWrapper1(FunctionPointerType _functionPointer)
: functionPointer(_functionPointer)
{ }

inline T operator()(C &c, U u)
{
return (c.*functionPointer)(u);
}

private:
FunctionPointerType functionPointer;
};

template <typename T, typename C>
class ConstMemberFunctionWrapper
{
public:
typedef T (C::*FunctionPointerType)() const;
typedef T result_type;
inline ConstMemberFunctionWrapper(FunctionPointerType _functionPointer)
:functionPointer(_functionPointer) { }

inline T operator()(const C &c) const
{
return (c.*functionPointer)();
}
private:
FunctionPointerType functionPointer;
};

} 



# 170 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfunctionwrappers.h"






# 52 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfilter.h"


# 54 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfilter.h"



typedef QtValidLicenseForCoreModule QtCoreModule;















































# 105 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfilter.h"
namespace QtConcurrent {

template <typename Sequence, typename KeepFunctor, typename T, typename C, typename U>
ThreadEngineStarter<void> filterInternal(Sequence &sequence, KeepFunctor keep, T (C::*reduce)(U))
{
typedef MemberFunctionWrapper1<T, C, U> ReduceFunctor;
typedef typename Sequence::const_iterator Iterator;
typedef FilterKernel<Sequence, KeepFunctor, ReduceFunctor> KernelType;
return startThreadEngine(new KernelType(sequence, keep, reduce));
}


template <typename Sequence, typename KeepFunctor>
QFuture<void> filter(Sequence &sequence, KeepFunctor keep)
{
return filterInternal(sequence, keep, &Sequence::append);
}

template <typename Sequence, typename T>
QFuture<void> filter(Sequence &sequence, bool (keep)(T))
{
return filterInternal(sequence, FunctionWrapper1<bool, T>(keep), &Sequence::append);
}

template <typename Sequence, typename C>
QFuture<void> filter(Sequence &sequence, bool (C::*keep)() const)
{
return filterInternal(sequence, ConstMemberFunctionWrapper<bool, C>(keep), &Sequence::append);
}


template <typename ResultType, typename Sequence, typename KeepFunctor, typename ReduceFunctor>
QFuture<ResultType> filteredReduced(const Sequence &sequence,
KeepFunctor keep,
ReduceFunctor reduce,
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return startFilteredReduced<ResultType>(sequence, keep, reduce, options);
}

template <typename ResultType, typename Sequence, typename T, typename ReduceFunctor>
QFuture<ResultType> filteredReduced(const Sequence &sequence,
bool (filter)(T),
ReduceFunctor reduce,
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return filteredReduced<ResultType>(sequence,
FunctionWrapper1<bool, T>(filter),
reduce,
options);
}

template <typename ResultType, typename Sequence, typename C, typename ReduceFunctor>
QFuture<ResultType> filteredReduced(const Sequence &sequence,
bool (C::*filter)() const,
ReduceFunctor reduce,
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return filteredReduced<ResultType>(sequence,
ConstMemberFunctionWrapper<bool, C>(filter),
reduce,
options);
}

template <typename Sequence, typename KeepFunctor, typename T, typename U, typename V>
QFuture<U> filteredReduced(const Sequence &sequence,
KeepFunctor keep,
T (reduce)(U &, V),
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return filteredReduced<U>(sequence,
keep,
FunctionWrapper2<T, U &, V>(reduce),
options);
}

template <typename Sequence, typename KeepFunctor, typename T, typename C, typename U>
QFuture<C> filteredReduced(const Sequence &sequence,
KeepFunctor keep,
T (C::*reduce)(U),
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return filteredReduced<C>(sequence,
keep,
MemberFunctionWrapper1<T, C, U>(reduce),
options);
}

template <typename Sequence, typename T, typename U, typename V, typename W>
QFuture<V> filteredReduced(const Sequence &sequence,
bool (keep)(T),
U (reduce)(V &, W),
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return filteredReduced<V>(sequence,
FunctionWrapper1<bool, T>(keep),
FunctionWrapper2<U, V &, W>(reduce),
options);
}

template <typename Sequence, typename C, typename T, typename U, typename V>
QFuture<U> filteredReduced(const Sequence &sequence,
bool (C::*keep)() const,
T (reduce)(U &, V),
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return filteredReduced<U>(sequence,
ConstMemberFunctionWrapper<bool, C>(keep),
FunctionWrapper2<T, U &, V>(reduce),
options);
}

template <typename Sequence, typename T, typename U, typename C, typename V>
QFuture<C> filteredReduced(const Sequence &sequence,
bool (keep)(T),
U (C::*reduce)(V),
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return filteredReduced<C>(sequence,
FunctionWrapper1<bool, T>(keep),
MemberFunctionWrapper1<U, C, V>(reduce),
options);
}

template <typename Sequence, typename C, typename T, typename D, typename U>
QFuture<D> filteredReduced(const Sequence &sequence,
bool (C::*keep)() const,
T (D::*reduce)(U),
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return filteredReduced<D>(sequence,
ConstMemberFunctionWrapper<bool, C>(keep),
MemberFunctionWrapper1<T, D, U>(reduce),
options);
}


template <typename ResultType, typename Iterator, typename KeepFunctor, typename ReduceFunctor>
QFuture<ResultType> filteredReduced(Iterator begin,
Iterator end,
KeepFunctor keep,
ReduceFunctor reduce,
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return startFilteredReduced<ResultType>(begin, end, keep, reduce, options);
}

template <typename ResultType, typename Iterator, typename T, typename ReduceFunctor>
QFuture<ResultType> filteredReduced(Iterator begin,
Iterator end,
bool (filter)(T),
ReduceFunctor reduce,
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return filteredReduced<ResultType>(begin,
end,
FunctionWrapper1<bool, T>(filter),
reduce,
options);
}

template <typename ResultType, typename Iterator, typename C, typename ReduceFunctor>
QFuture<ResultType> filteredReduced(Iterator begin,
Iterator end,
bool (C::*filter)() const,
ReduceFunctor reduce,
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return filteredReduced<ResultType>(begin,
end,
ConstMemberFunctionWrapper<bool, C>(filter),
reduce,
options);
}

template <typename Iterator, typename KeepFunctor, typename T, typename U, typename V>
QFuture<U> filteredReduced(Iterator begin,
Iterator end,
KeepFunctor keep,
T (reduce)(U &, V),
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return filteredReduced<U>(begin,
end,
keep,
FunctionWrapper2<T, U &, V>(reduce),
options);
}

template <typename Iterator, typename KeepFunctor, typename T, typename C, typename U>
QFuture<C> filteredReduced(Iterator begin,
Iterator end,
KeepFunctor keep,
T (C::*reduce)(U),
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return filteredReduced<C>(begin,
end,
keep,
MemberFunctionWrapper1<T, C, U>(reduce),
options);
}

template <typename Iterator, typename T, typename U, typename V, typename W>
QFuture<V> filteredReduced(Iterator begin,
Iterator end,
bool (keep)(T),
U (reduce)(V &, W),
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return filteredReduced<V>(begin,
end,
FunctionWrapper1<bool, T>(keep),
FunctionWrapper2<U, V &, W>(reduce),
options);
}

template <typename Iterator, typename C, typename T, typename U, typename V>
QFuture<U> filteredReduced(Iterator begin,
Iterator end,
bool (C::*keep)() const,
T (reduce)(U &, V),
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return filteredReduced<U>(begin,
end,
ConstMemberFunctionWrapper<bool, C>(keep),
FunctionWrapper2<T, U &, V>(reduce),
options);
}

template <typename Iterator, typename T, typename U, typename C, typename V>
QFuture<C> filteredReduced(Iterator begin,
Iterator end,
bool (keep)(T),
U (C::*reduce)(V),
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return filteredReduced<C>(begin,
end,
FunctionWrapper1<bool, T>(keep),
MemberFunctionWrapper1<U, C, V>(reduce),
options);
}

template <typename Iterator, typename C, typename T, typename D, typename U>
QFuture<D> filteredReduced(Iterator begin,
Iterator end,
bool (C::*keep)() const,
T (D::*reduce)(U),
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return filteredReduced<D>(begin,
end,
ConstMemberFunctionWrapper<bool, C>(keep),
MemberFunctionWrapper1<T, D, U>(reduce),
options);
}



template <typename Sequence, typename KeepFunctor>
QFuture<typename Sequence::value_type> filtered(const Sequence &sequence, KeepFunctor keep)
{
return startFiltered(sequence, keep);
}

template <typename Sequence, typename T>
QFuture<T> filtered(const Sequence &sequence, bool (keep)(T))
{
return startFiltered(sequence, FunctionWrapper1<bool, T>(keep));
}

template <typename Sequence, typename C>
QFuture<C> filtered(const Sequence &sequence, bool (C::*keep)() const)
{
return startFiltered(sequence, ConstMemberFunctionWrapper<bool, C>(keep));
}


template <typename Iterator, typename KeepFunctor>
QFuture<typename Iterator::value_type> filtered(Iterator begin, Iterator end, KeepFunctor keep)
{
return startFiltered(begin, end, keep);
}

template <typename Iterator, typename T>
QFuture<typename Iterator::value_type> filtered(Iterator begin, Iterator end, bool (keep)(T))
{
return startFiltered(begin, end, FunctionWrapper1<bool, T>(keep));
}

template <typename Iterator, typename C>
QFuture<typename Iterator::value_type> filtered(Iterator begin,
Iterator end,
bool (C::*keep)() const)
{
return startFiltered(begin, end, ConstMemberFunctionWrapper<bool, C>(keep));
}



template <typename Sequence, typename KeepFunctor>
void blockingFilter(Sequence &sequence, KeepFunctor keep)
{
filterInternal(sequence, keep, &Sequence::append).startBlocking();
}

template <typename Sequence, typename T>
void blockingFilter(Sequence &sequence, bool (keep)(T))
{
filterInternal(sequence, FunctionWrapper1<bool, T>(keep), &Sequence::append)
.startBlocking();
}

template <typename Sequence, typename C>
void blockingFilter(Sequence &sequence, bool (C::*keep)() const)
{
filterInternal(sequence,
ConstMemberFunctionWrapper<bool, C>(keep),
&Sequence::append)
.startBlocking();
}


template <typename ResultType, typename Sequence, typename KeepFunctor, typename ReduceFunctor>
ResultType blockingFilteredReduced(const Sequence &sequence,
KeepFunctor keep,
ReduceFunctor reduce,
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return startFilteredReduced<ResultType>(sequence, keep, reduce, options)
.startBlocking();
}

template <typename ResultType, typename Sequence, typename T, typename ReduceFunctor>
ResultType blockingFilteredReduced(const Sequence &sequence,
bool (filter)(T),
ReduceFunctor reduce,
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return blockingFilteredReduced<ResultType>
(sequence,
FunctionWrapper1<bool, T>(filter),
reduce,
options);
}

template <typename ResultType, typename Sequence, typename C, typename ReduceFunctor>
ResultType blockingFilteredReduced(const Sequence &sequence,
bool (C::*filter)() const,
ReduceFunctor reduce,
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return blockingFilteredReduced<ResultType>
(sequence,
ConstMemberFunctionWrapper<bool, C>(filter),
reduce,
options);
}

template <typename Sequence, typename KeepFunctor, typename T, typename U, typename V>
U blockingFilteredReduced(const Sequence &sequence,
KeepFunctor keep,
T (reduce)(U &, V),
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return blockingFilteredReduced<U>
(sequence,
keep,
FunctionWrapper2<T, U &, V>(reduce),
options);
}

template <typename Sequence, typename KeepFunctor, typename T, typename C, typename U>
C blockingFilteredReduced(const Sequence &sequence,
KeepFunctor keep,
T (C::*reduce)(U),
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return blockingFilteredReduced<C>
(sequence,
keep,
MemberFunctionWrapper1<T, C, U>(reduce),
options);
}

template <typename Sequence, typename T, typename U, typename V, typename W>
V blockingFilteredReduced(const Sequence &sequence,
bool (keep)(T),
U (reduce)(V &, W),
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return blockingFilteredReduced<V>
(sequence,
FunctionWrapper1<bool, T>(keep),
FunctionWrapper2<U, V &, W>(reduce),
options);
}

template <typename Sequence, typename C, typename T, typename U, typename V>
U blockingFilteredReduced(const Sequence &sequence,
bool (C::*keep)() const,
T (reduce)(U &, V),
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return blockingFilteredReduced<U>
(sequence,
ConstMemberFunctionWrapper<bool, C>(keep),
FunctionWrapper2<T, U &, V>(reduce),
options);
}

template <typename Sequence, typename T, typename U, typename C, typename V>
C blockingFilteredReduced(const Sequence &sequence,
bool (keep)(T),
U (C::*reduce)(V),
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return blockingFilteredReduced<C>
(sequence,
FunctionWrapper1<bool, T>(keep),
MemberFunctionWrapper1<U, C, V>(reduce),
options);
}

template <typename Sequence, typename C, typename T, typename D, typename U>
D blockingFilteredReduced(const Sequence &sequence,
bool (C::*keep)() const,
T (D::*reduce)(U),
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return blockingFilteredReduced<D>
(sequence,
ConstMemberFunctionWrapper<bool, C>(keep),
MemberFunctionWrapper1<T, D, U>(reduce),
options);
}


template <typename ResultType, typename Iterator, typename KeepFunctor, typename ReduceFunctor>
ResultType blockingFilteredReduced(Iterator begin,
Iterator end,
KeepFunctor keep,
ReduceFunctor reduce,
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return startFilteredReduced<ResultType>(begin, end, keep, reduce, options)
.startBlocking();
}

template <typename ResultType, typename Iterator, typename T, typename ReduceFunctor>
ResultType blockingFilteredReduced(Iterator begin,
Iterator end,
bool (filter)(T),
ReduceFunctor reduce,
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return blockingFilteredReduced<ResultType>
(begin,
end,
FunctionWrapper1<bool, T>(filter),
reduce,
options);
}

template <typename ResultType, typename Iterator, typename C, typename ReduceFunctor>
ResultType blockingFilteredReduced(Iterator begin,
Iterator end,
bool (C::*filter)() const,
ReduceFunctor reduce,
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return blockingFilteredReduced<ResultType>
(begin,
end,
ConstMemberFunctionWrapper<bool, C>(filter),
reduce,
options);
}

template <typename Iterator, typename KeepFunctor, typename T, typename U, typename V>
U blockingFilteredReduced(Iterator begin,
Iterator end,
KeepFunctor keep,
T (reduce)(U &, V),
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return blockingFilteredReduced<U>
(begin,
end,
keep,
FunctionWrapper2<T, U &, V>(reduce),
options);
}

template <typename Iterator, typename KeepFunctor, typename T, typename C, typename U>
C blockingFilteredReduced(Iterator begin,
Iterator end,
KeepFunctor keep,
T (C::*reduce)(U),
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return blockingFilteredReduced<C>
(begin,
end,
keep,
MemberFunctionWrapper1<T, C, U>(reduce),
options);
}

template <typename Iterator, typename T, typename U, typename V, typename W>
V blockingFilteredReduced(Iterator begin,
Iterator end,
bool (keep)(T),
U (reduce)(V &, W),
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return blockingFilteredReduced<V>
(begin,
end,
FunctionWrapper1<bool, T>(keep),
FunctionWrapper2<U, V &, W>(reduce),
options);
}

template <typename Iterator, typename C, typename T, typename U, typename V>
U blockingFilteredReduced(Iterator begin,
Iterator end,
bool (C::*keep)() const,
T (reduce)(U &, V),
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return blockingFilteredReduced<U>
(begin,
end,
ConstMemberFunctionWrapper<bool, C>(keep),
FunctionWrapper2<T, U &, V>(reduce),
options);
}

template <typename Iterator, typename T, typename U, typename C, typename V>
C blockingFilteredReduced(Iterator begin,
Iterator end,
bool (keep)(T),
U (C::*reduce)(V),
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return blockingFilteredReduced<C>
(begin,
end,
FunctionWrapper1<bool, T>(keep),
MemberFunctionWrapper1<U, C, V>(reduce),
options);
}

template <typename Iterator, typename C, typename T, typename D, typename U>
D blockingFilteredReduced(Iterator begin,
Iterator end,
bool (C::*keep)() const,
T (D::*reduce)(U),
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return blockingFilteredReduced<D>
(begin,
end,
ConstMemberFunctionWrapper<bool, C>(keep),
MemberFunctionWrapper1<T, D, U>(reduce),
options);
}


template <typename Sequence, typename KeepFunctor>
Sequence blockingFiltered(const Sequence &sequence, KeepFunctor keep)
{
return blockingFilteredReduced(sequence, keep, &Sequence::append, OrderedReduce);
}

template <typename Sequence, typename T>
Sequence blockingFiltered(const Sequence &sequence, bool (keep)(T))
{
return blockingFilteredReduced(sequence, keep, &Sequence::append, OrderedReduce);
}

template <typename Sequence, typename C>
Sequence blockingFiltered(const Sequence &sequence, bool (C::*filter)() const)
{
return blockingFilteredReduced(sequence,
filter,
&Sequence::append,
OrderedReduce);
}


template <typename OutputSequence, typename Iterator, typename KeepFunctor>
OutputSequence blockingFiltered(Iterator begin, Iterator end, KeepFunctor keep)
{
return blockingFilteredReduced(begin,
end,
keep,
&OutputSequence::append,
OrderedReduce);
}

template <typename OutputSequence, typename Iterator, typename T>
OutputSequence blockingFiltered(Iterator begin, Iterator end, bool (keep)(T))
{
return blockingFilteredReduced(begin,
end,
keep,
&OutputSequence::append,
OrderedReduce);
}

template <typename OutputSequence, typename Iterator, typename C>
OutputSequence blockingFiltered(Iterator begin, Iterator end, bool (C::*filter)() const)
{
return blockingFilteredReduced(begin,
end,
filter,
&OutputSequence::append,
OrderedReduce);
}

} 



# 733 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfilter.h"






# 10 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfilterkernel.h"















































































































































































































































































































































# 11 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfunctionwrappers.h"















































































































































































# 12 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentiteratekernel.h"

















































































































































































































































































































# 13 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmap.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmap.h"




# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmapkernel.h"










































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmap.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentreducekernel.h"
























































































































































































































































# 52 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmap.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfunctionwrappers.h"















































































































































































# 53 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmap.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"
















































































































































































































































# 54 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmap.h"


# 56 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmap.h"



typedef QtValidLicenseForCoreModule QtCoreModule;

















































# 109 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmap.h"
namespace QtConcurrent {


template <typename Sequence, typename MapFunctor>
QFuture<void> map(Sequence &sequence, MapFunctor map)
{
return startMap(sequence.begin(), sequence.end(), map);
}

template <typename Sequence, typename T, typename U>
QFuture<void> map(Sequence &sequence, T (map)(U))
{
return startMap(sequence.begin(), sequence.end(), FunctionWrapper1<T, U>(map));
}

template <typename Sequence, typename T, typename C>
QFuture<void> map(Sequence &sequence, T (C::*map)())
{
return startMap(sequence.begin(), sequence.end(), MemberFunctionWrapper<T, C>(map));
}


template <typename Iterator, typename MapFunctor>
QFuture<void> map(Iterator begin, Iterator end, MapFunctor map)
{
return startMap(begin, end, map);
}

template <typename Iterator, typename T, typename U>
QFuture<void> map(Iterator begin, Iterator end, T (map)(U))
{
return startMap(begin, end, FunctionWrapper1<T, U>(map));
}

template <typename Iterator, typename T, typename C>
QFuture<void> map(Iterator begin, Iterator end, T (C::*map)())
{
return startMap(begin, end, MemberFunctionWrapper<T, C>(map));
}


template <typename ResultType, typename Sequence, typename MapFunctor, typename ReduceFunctor>
QFuture<ResultType> mappedReduced(const Sequence &sequence,
MapFunctor map,
ReduceFunctor reduce,
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return startMappedReduced<typename MapFunctor::result_type, ResultType>
(sequence, map, reduce, options);
}

template <typename Sequence, typename MapFunctor, typename T, typename U, typename V>
QFuture<U> mappedReduced(const Sequence &sequence,
MapFunctor map,
T (reduce)(U &, V),
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return startMappedReduced<typename MapFunctor::result_type, U>
(sequence, map, FunctionWrapper2<T, U &, V>(reduce), options);
}

template <typename Sequence, typename MapFunctor, typename T, typename C, typename U>
QFuture<C> mappedReduced(const Sequence &sequence,
MapFunctor map,
T (C::*reduce)(U),
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return startMappedReduced<typename MapFunctor::result_type, C>
(sequence, map, MemberFunctionWrapper1<T, C, U>(reduce), options);
}

template <typename ResultType, typename Sequence, typename T, typename U, typename ReduceFunctor>
QFuture<ResultType> mappedReduced(const Sequence &sequence,
T (map)(U),
ReduceFunctor reduce,
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return startMappedReduced<T, ResultType>
(sequence, FunctionWrapper1<T, U>(map), reduce, options);
}

template <typename ResultType, typename Sequence, typename T, typename C, typename ReduceFunctor>
QFuture<ResultType> mappedReduced(const Sequence &sequence,
T (C::*map)() const,
ReduceFunctor reduce,
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return startMappedReduced<T, ResultType>
(sequence, ConstMemberFunctionWrapper<T, C>(map), reduce, options);
}

template <typename Sequence, typename T, typename U, typename V, typename W, typename X>
QFuture<W> mappedReduced(const Sequence &sequence,
T (map)(U),
V (reduce)(W &, X),
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return startMappedReduced<T, W>
(sequence, FunctionWrapper1<T, U>(map), FunctionWrapper2<V, W &, X>(reduce), options);
}

template <typename Sequence, typename T, typename C, typename U, typename V, typename W>
QFuture<V> mappedReduced(const Sequence &sequence,
T (C::*map)() const,
U (reduce)(V &, W),
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return startMappedReduced<T, V> (sequence, ConstMemberFunctionWrapper<T, C>(map),
FunctionWrapper2<U, V &, W>(reduce), options);
}

template <typename Sequence, typename T, typename U, typename V, typename C, typename W>
QFuture<C> mappedReduced(const Sequence &sequence,
T (map)(U),
V (C::*reduce)(W),
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return startMappedReduced<T, C> (sequence, FunctionWrapper1<T, U>(map),
MemberFunctionWrapper1<V, C, W>(reduce), options);
}

template <typename Sequence, typename T, typename C, typename U,typename D, typename V>
QFuture<D> mappedReduced(const Sequence &sequence,
T (C::*map)() const,
U (D::*reduce)(V),
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return startMappedReduced<T, D>(sequence, ConstMemberFunctionWrapper<T, C>(map),
MemberFunctionWrapper1<U, D, V>(reduce), options);
}


template <typename ResultType, typename Iterator, typename MapFunctor, typename ReduceFunctor>
QFuture<ResultType> mappedReduced(Iterator begin,
Iterator end,
MapFunctor map,
ReduceFunctor reduce,
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return startMappedReduced<ResultType, typename MapFunctor::result_type>
(begin, end, map, reduce, options);
}

template <typename Iterator, typename MapFunctor, typename T, typename U, typename V>
QFuture<U> mappedReduced(Iterator begin,
Iterator end,
MapFunctor map,
T (reduce)(U &, V),
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return startMappedReduced<typename MapFunctor::result_type, U>
(begin, end, map, FunctionWrapper2<T, U &, V>(reduce), options);
}

template <typename Iterator, typename MapFunctor, typename T, typename C, typename U>
QFuture<C> mappedReduced(Iterator begin,
Iterator end,
MapFunctor map,
T (C::*reduce)(U),
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return startMappedReduced<typename MapFunctor::result_type, C>
(begin, end, map, MemberFunctionWrapper1<T, C, U>(reduce), options);
}

template <typename ResultType, typename Iterator, typename T, typename U, typename ReduceFunctor>
QFuture<ResultType> mappedReduced(Iterator begin,
Iterator end,
T (map)(U),
ReduceFunctor reduce,
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return startMappedReduced<T, ResultType>
(begin, end, FunctionWrapper1<T, U>(map), reduce, options);
}

template <typename ResultType, typename Iterator, typename T, typename C, typename ReduceFunctor>
QFuture<ResultType> mappedReduced(Iterator begin,
Iterator end,
T (C::*map)() const,
ReduceFunctor reduce,
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return startMappedReduced<T, ResultType>
(begin, end, ConstMemberFunctionWrapper<T, C>(map), reduce, options);
}

template <typename Iterator, typename T, typename U, typename V, typename W, typename X>
QFuture<W> mappedReduced(Iterator begin,
Iterator end,
T (map)(U),
V (reduce)(W &, X),
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return startMappedReduced<T, W>
(begin, end, FunctionWrapper1<T, U>(map), FunctionWrapper2<V, W &, X>(reduce), options);
}

template <typename Iterator, typename T, typename C, typename U, typename V, typename W>
QFuture<V> mappedReduced(Iterator begin,
Iterator end,
T (C::*map)() const,
U (reduce)(V &, W),
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return startMappedReduced<T, V>(begin, end, ConstMemberFunctionWrapper<T, C>(map),
FunctionWrapper2<U, V &, W>(reduce), options);
}

template <typename Iterator, typename T, typename U, typename V, typename C, typename W>
QFuture<C> mappedReduced(Iterator begin,
Iterator end,
T (map)(U),
V (C::*reduce)(W),
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return startMappedReduced<T, C>
(begin, end, FunctionWrapper1<T, U>(map), MemberFunctionWrapper1<V, C, W>(reduce), options);
}

template <typename Iterator, typename T, typename C, typename U,typename D, typename V>
QFuture<D> mappedReduced(Iterator begin,
Iterator end,
T (C::*map)() const,
U (D::*reduce)(V),
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return startMappedReduced<T, D>(begin, end, ConstMemberFunctionWrapper<T, C>(map),
MemberFunctionWrapper1<U, D, V>(reduce), options);
}


template <typename Sequence, typename MapFunctor>
QFuture<typename MapFunctor::result_type> mapped(const Sequence &sequence, MapFunctor map)
{
return startMapped<typename MapFunctor::result_type>(sequence, map);
}

template <typename Sequence, typename T, typename U>
QFuture<T> mapped(const Sequence &sequence, T (map)(U))
{
return startMapped<T>(sequence, FunctionWrapper1<T, U>(map));
}

template <typename Sequence, typename T, typename C>
QFuture<T> mapped(const Sequence &sequence, T (C::*map)() const)
{
return startMapped<T>(sequence, ConstMemberFunctionWrapper<T, C>(map));
}


template <typename Iterator, typename MapFunctor>
QFuture<typename MapFunctor::result_type> mapped(Iterator begin, Iterator end, MapFunctor map)
{
return startMapped<typename MapFunctor::result_type>(begin, end, map);
}

template <typename Iterator, typename T, typename U>
QFuture<T> mapped(Iterator begin, Iterator end, T (map)(U))
{
return startMapped<T>(begin, end, FunctionWrapper1<T, U>(map));
}

template <typename Iterator, typename T, typename C>
QFuture<T> mapped(Iterator begin, Iterator end, T (C::*map)() const)
{
return startMapped<T>(begin, end, ConstMemberFunctionWrapper<T, C>(map));
}


template <typename Sequence, typename MapFunctor>
void blockingMap(Sequence &sequence, MapFunctor map)
{
startMap(sequence.begin(), sequence.end(), map).startBlocking();
}

template <typename Sequence, typename T, typename U>
void blockingMap(Sequence &sequence, T (map)(U))
{
startMap(sequence.begin(), sequence.end(), QtConcurrent::FunctionWrapper1<T, U>(map)).startBlocking();
}

template <typename Sequence, typename T, typename C>
void blockingMap(Sequence &sequence, T (C::*map)())
{
startMap(sequence.begin(), sequence.end(), QtConcurrent::MemberFunctionWrapper<T, C>(map)).startBlocking();
}

template <typename Iterator, typename MapFunctor>
void blockingMap(Iterator begin, Iterator end, MapFunctor map)
{
startMap(begin, end, map).startBlocking();
}

template <typename Iterator, typename T, typename U>
void blockingMap(Iterator begin, Iterator end, T (map)(U))
{
startMap(begin, end, QtConcurrent::FunctionWrapper1<T, U>(map)).startBlocking();
}

template <typename Iterator, typename T, typename C>
void blockingMap(Iterator begin, Iterator end, T (C::*map)())
{
startMap(begin, end, QtConcurrent::MemberFunctionWrapper<T, C>(map)).startBlocking();
}

template <typename ResultType, typename Sequence, typename MapFunctor, typename ReduceFunctor>
ResultType blockingMappedReduced(const Sequence &sequence,
MapFunctor map,
ReduceFunctor reduce,
ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce))
{
return QtConcurrent::startMappedReduced<typename MapFunctor::result_type, ResultType>
(sequence, map, reduce, options).startBlocking();
}

template <typename Sequence, typename MapFunctor, typename T, typename U, typename V>
U blockingMappedReduced(const Sequence &sequence,
MapFunctor map,
T (reduce)(U &, V),
QtConcurrent::ReduceOptions options = QtConcurrent::ReduceOptions(QtConcurrent::UnorderedReduce | QtConcurrent::SequentialReduce))
{
return QtConcurrent::startMappedReduced<typename MapFunctor::result_type, U>
(sequence,
map,
QtConcurrent::FunctionWrapper2<T, U &, V>(reduce),
options)
.startBlocking();
}

template <typename Sequence, typename MapFunctor, typename T, typename C, typename U>
C blockingMappedReduced(const Sequence &sequence,
MapFunctor map,
T (C::*reduce)(U),
QtConcurrent::ReduceOptions options = QtConcurrent::ReduceOptions(QtConcurrent::UnorderedReduce | QtConcurrent::SequentialReduce))
{
return QtConcurrent::startMappedReduced<typename MapFunctor::result_type, C>
(sequence,
map,
QtConcurrent::MemberFunctionWrapper1<T, C, U>(reduce),
options)
.startBlocking();
}

template <typename ResultType, typename Sequence, typename T, typename U, typename ReduceFunctor>
ResultType blockingMappedReduced(const Sequence &sequence,
T (map)(U),
ReduceFunctor reduce,
QtConcurrent::ReduceOptions options = QtConcurrent::ReduceOptions(QtConcurrent::UnorderedReduce | QtConcurrent::SequentialReduce))
{
return QtConcurrent::startMappedReduced<T, ResultType>
(sequence,
QtConcurrent::FunctionWrapper1<T, U>(map),
reduce,
options)
.startBlocking();
}

template <typename ResultType, typename Sequence, typename T, typename C, typename ReduceFunctor>
ResultType blockingMappedReduced(const Sequence &sequence,
T (C::*map)() const,
ReduceFunctor reduce,
QtConcurrent::ReduceOptions options = QtConcurrent::ReduceOptions(QtConcurrent::UnorderedReduce | QtConcurrent::SequentialReduce))
{
return QtConcurrent::startMappedReduced<T, ResultType>
(sequence,
QtConcurrent::ConstMemberFunctionWrapper<T, C>(map),
reduce,
options)
.startBlocking();
}

template <typename Sequence, typename T, typename U, typename V, typename W, typename X>
W blockingMappedReduced(const Sequence &sequence,
T (map)(U),
V (reduce)(W &, X),
QtConcurrent::ReduceOptions options = QtConcurrent::ReduceOptions(QtConcurrent::UnorderedReduce | QtConcurrent::SequentialReduce))
{
return QtConcurrent::startMappedReduced<T, W>
(sequence,
QtConcurrent::FunctionWrapper1<T, U>(map),
QtConcurrent::FunctionWrapper2<V, W &, X>(reduce),
options)
.startBlocking();
}

template <typename Sequence, typename T, typename C, typename U, typename V, typename W>
V blockingMappedReduced(const Sequence &sequence,
T (C::*map)() const,
U (reduce)(V &, W),
QtConcurrent::ReduceOptions options = QtConcurrent::ReduceOptions(QtConcurrent::UnorderedReduce | QtConcurrent::SequentialReduce))
{
return QtConcurrent::startMappedReduced<T, V>
(sequence,
QtConcurrent::ConstMemberFunctionWrapper<T, C>(map),
QtConcurrent::FunctionWrapper2<U, V &, W>(reduce),
options)
.startBlocking();
}

template <typename Sequence, typename T, typename U, typename V, typename C, typename W>
C blockingMappedReduced(const Sequence &sequence,
T (map)(U),
V (C::*reduce)(W),
QtConcurrent::ReduceOptions options = QtConcurrent::ReduceOptions(QtConcurrent::UnorderedReduce | QtConcurrent::SequentialReduce))
{
return QtConcurrent::startMappedReduced<T, C>
(sequence,
QtConcurrent::FunctionWrapper1<T, U>(map),
QtConcurrent::MemberFunctionWrapper1<V, C, W>(reduce),
options)
.startBlocking();
}

template <typename Sequence, typename T, typename C, typename U,typename D, typename V>
D blockingMappedReduced(const Sequence &sequence,
T (C::*map)() const,
U (D::*reduce)(V),
QtConcurrent::ReduceOptions options = QtConcurrent::ReduceOptions(QtConcurrent::UnorderedReduce | QtConcurrent::SequentialReduce))
{
return QtConcurrent::startMappedReduced<T, D>
(sequence,
QtConcurrent::ConstMemberFunctionWrapper<T, C>(map),
QtConcurrent::MemberFunctionWrapper1<U, D, V>(reduce),
options)
.startBlocking();
}

template <typename ResultType, typename Iterator, typename MapFunctor, typename ReduceFunctor>
ResultType blockingMappedReduced(Iterator begin,
Iterator end,
MapFunctor map,
ReduceFunctor reduce,
QtConcurrent::ReduceOptions options = QtConcurrent::ReduceOptions(QtConcurrent::UnorderedReduce | QtConcurrent::SequentialReduce))
{
return QtConcurrent::startMappedReduced<typename MapFunctor::result_type, ResultType>
(begin, end, map, reduce, options).startBlocking();
}

template <typename Iterator, typename MapFunctor, typename T, typename U, typename V>
U blockingMappedReduced(Iterator begin,
Iterator end,
MapFunctor map,
T (reduce)(U &, V),
QtConcurrent::ReduceOptions options = QtConcurrent::ReduceOptions(QtConcurrent::UnorderedReduce | QtConcurrent::SequentialReduce))
{
return QtConcurrent::startMappedReduced<typename MapFunctor::result_type, U>
(begin,
end,
map,
QtConcurrent::FunctionWrapper2<T, U &, V>(reduce),
options)
.startBlocking();
}

template <typename Iterator, typename MapFunctor, typename T, typename C, typename U>
C blockingMappedReduced(Iterator begin,
Iterator end,
MapFunctor map,
T (C::*reduce)(U),
QtConcurrent::ReduceOptions options = QtConcurrent::ReduceOptions(QtConcurrent::UnorderedReduce | QtConcurrent::SequentialReduce))
{
return QtConcurrent::startMappedReduced<typename MapFunctor::result_type, C>
(begin,
end,
map,
QtConcurrent::MemberFunctionWrapper1<T, C, U>(reduce),
options)
.startBlocking();
}

template <typename ResultType, typename Iterator, typename T, typename U, typename ReduceFunctor>
ResultType blockingMappedReduced(Iterator begin,
Iterator end,
T (map)(U),
ReduceFunctor reduce,
QtConcurrent::ReduceOptions options = QtConcurrent::ReduceOptions(QtConcurrent::UnorderedReduce | QtConcurrent::SequentialReduce))
{
return QtConcurrent::startMappedReduced<T, ResultType>
(begin,
end,
QtConcurrent::FunctionWrapper1<T, U>(map),
reduce,
options)
.startBlocking();
}

template <typename ResultType, typename Iterator, typename T, typename C, typename ReduceFunctor>
ResultType blockingMappedReduced(Iterator begin,
Iterator end,
T (C::*map)() const,
ReduceFunctor reduce,
QtConcurrent::ReduceOptions options = QtConcurrent::ReduceOptions(QtConcurrent::UnorderedReduce | QtConcurrent::SequentialReduce))
{
return QtConcurrent::startMappedReduced<T, ResultType>
(begin,
end,
QtConcurrent::ConstMemberFunctionWrapper<T, C>(map),
reduce,
options)
.startBlocking();
}

template <typename Iterator, typename T, typename U, typename V, typename W, typename X>
W blockingMappedReduced(Iterator begin,
Iterator end,
T (map)(U),
V (reduce)(W &, X),
QtConcurrent::ReduceOptions options = QtConcurrent::ReduceOptions(QtConcurrent::UnorderedReduce | QtConcurrent::SequentialReduce))
{
return QtConcurrent::startMappedReduced<T, W>
(begin,
end,
QtConcurrent::FunctionWrapper1<T, U>(map),
QtConcurrent::FunctionWrapper2<V, W &, X>(reduce),
options)
.startBlocking();
}

template <typename Iterator, typename T, typename C, typename U, typename V, typename W>
V blockingMappedReduced(Iterator begin,
Iterator end,
T (C::*map)() const,
U (reduce)(V &, W),
QtConcurrent::ReduceOptions options = QtConcurrent::ReduceOptions(QtConcurrent::UnorderedReduce | QtConcurrent::SequentialReduce))
{
return QtConcurrent::startMappedReduced<T, V>
(begin,
end,
QtConcurrent::ConstMemberFunctionWrapper<T, C>(map),
QtConcurrent::FunctionWrapper2<U, V &, W>(reduce),
options)
.startBlocking();
}

template <typename Iterator, typename T, typename U, typename V, typename C, typename W>
C blockingMappedReduced(Iterator begin,
Iterator end,
T (map)(U),
V (C::*reduce)(W),
QtConcurrent::ReduceOptions options = QtConcurrent::ReduceOptions(QtConcurrent::UnorderedReduce | QtConcurrent::SequentialReduce))
{
return QtConcurrent::startMappedReduced<T, C>
(begin,
end,
QtConcurrent::FunctionWrapper1<T, U>(map),
QtConcurrent::MemberFunctionWrapper1<V, C, W>(reduce),
options)
.startBlocking();
}

template <typename Iterator, typename T, typename C, typename U,typename D, typename V>
D blockingMappedReduced(Iterator begin,
Iterator end,
T (C::*map)() const,
U (D::*reduce)(V),
QtConcurrent::ReduceOptions options = QtConcurrent::ReduceOptions(QtConcurrent::UnorderedReduce | QtConcurrent::SequentialReduce))
{
return QtConcurrent::startMappedReduced<T, D>
(begin,
end,
QtConcurrent::ConstMemberFunctionWrapper<T, C>(map),
QtConcurrent::MemberFunctionWrapper1<U, D, V>(reduce),
options)
.startBlocking();
}


template <typename OutputSequence, typename InputSequence, typename MapFunctor>
OutputSequence blockingMapped(const InputSequence &sequence, MapFunctor map)
{
return blockingMappedReduced(sequence, map, &OutputSequence::append,
QtConcurrent::OrderedReduce);
}

template <typename OutputSequence, typename InputSequence, typename T, typename U>
OutputSequence blockingMapped(const InputSequence &sequence, T (map)(U))
{
return blockingMappedReduced(sequence, map, &OutputSequence::append,
QtConcurrent::OrderedReduce);
}

template <typename OutputSequence, typename InputSequence, typename T, typename C>
OutputSequence blockingMapped(const InputSequence &sequence, T (C::*map)() const)
{
return blockingMappedReduced(sequence, map, &OutputSequence::append,
QtConcurrent::OrderedReduce);
}



# 700 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmap.h"

template <template <typename> class Sequence, typename MapFunctor, typename T>
Sequence<typename MapFunctor::result_type> blockingMapped(const Sequence<T> &sequence, MapFunctor map)
{
typedef Sequence<typename MapFunctor::result_type> OutputSequence;
return blockingMappedReduced(sequence, map, &OutputSequence::append,
QtConcurrent::OrderedReduce);
}

template <template <typename> class Sequence, typename T, typename U, typename V>
Sequence<U> blockingMapped(const Sequence<T> &sequence, U (map)(V))
{
typedef Sequence<U> OutputSequence;
return blockingMappedReduced(sequence, map, &OutputSequence::append,
QtConcurrent::OrderedReduce);
}

template <template <typename> class Sequence, typename T, typename U, typename C>
Sequence<U> blockingMapped(const Sequence<T> &sequence, U (C::*map)() const)
{
typedef Sequence<U> OutputSequence;
return blockingMappedReduced(sequence, map, &OutputSequence::append,
QtConcurrent::OrderedReduce);
}



# 727 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmap.h"

template <typename MapFunctor>
QList<typename MapFunctor::result_type> blockingMapped(const QStringList &sequence, MapFunctor map)
{
typedef QList<typename MapFunctor::result_type> OutputSequence;
return blockingMappedReduced(sequence, map, &OutputSequence::append,
QtConcurrent::OrderedReduce);
}

template <typename U, typename V>
QList<U> blockingMapped(const QStringList &sequence, U (map)(V))
{
typedef QList<U> OutputSequence;
return blockingMappedReduced(sequence, map, &OutputSequence::append,
QtConcurrent::OrderedReduce);
}

template <typename U, typename C>
QList<U> blockingMapped(const QStringList &sequence, U (C::*map)() const)
{
typedef QList<U> OutputSequence;
return blockingMappedReduced(sequence, map, &OutputSequence::append,
QtConcurrent::OrderedReduce);
}


template <typename Sequence, typename Iterator, typename MapFunctor>
Sequence blockingMapped(Iterator begin, Iterator end, MapFunctor map)
{
return blockingMappedReduced(begin, end, map, &Sequence::append,
QtConcurrent::OrderedReduce);
}

template <typename Sequence, typename Iterator, typename T, typename U>
Sequence blockingMapped(Iterator begin, Iterator end, T (map)(U))
{
return blockingMappedReduced(begin, end, map, &Sequence::append,
QtConcurrent::OrderedReduce);
}

template <typename Sequence, typename Iterator, typename T, typename C>
Sequence blockingMapped(Iterator begin, Iterator end, T (C::*map)() const)
{
return blockingMappedReduced(begin, end, map, &Sequence::append,
QtConcurrent::OrderedReduce);
}

} 



# 778 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmap.h"






# 14 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmapkernel.h"










































































































































































































































































# 15 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmedian.h"




































































































































# 16 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentreducekernel.h"
























































































































































































































































# 17 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentresultstore.h"











































































































































































































































# 18 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentrun.h"















































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtCore/qtconcurrentrun.h"




# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentrunbase.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qtconcurrentrunbase.h"




# 1 "/home/eagle/qt-copy/include/QtCore/qfuture.h"
























































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtCore/qtconcurrentrunbase.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qrunnable.h"










































































# 52 "/home/eagle/qt-copy/include/QtCore/qtconcurrentrunbase.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qthreadpool.h"
































































































# 53 "/home/eagle/qt-copy/include/QtCore/qtconcurrentrunbase.h"


# 55 "/home/eagle/qt-copy/include/QtCore/qtconcurrentrunbase.h"



typedef QtValidLicenseForCoreModule QtCoreModule;



# 62 "/home/eagle/qt-copy/include/QtCore/qtconcurrentrunbase.h"
namespace QtConcurrent {

template <typename T>
struct SelectSpecialization
{
template <class Normal, class Void>
struct Type { typedef Normal type; };
};

template <>
struct SelectSpecialization<void>
{
template <class Normal, class Void>
struct Type { typedef Void type; };
};

template <typename T>
class RunFunctionTaskBase : public QFutureInterface<T> , public QRunnable
{
public:
QFuture<T> start()
{
this->reportStarted();
QFuture<T> future = this->future();
QThreadPool::globalInstance()->start(this,  0);
return future;
}

void run() {}
virtual void runFunctor() = 0;
};

template <typename T>
class RunFunctionTask : public RunFunctionTaskBase<T>
{
public:
void run()
{
if (this->isCanceled())
return;
this->runFunctor();
this->reportResult(result);
this->reportFinished();
}
T result;
};

template <>
class RunFunctionTask<void> : public RunFunctionTaskBase<void>
{
public:
void run()
{
if (this->isCanceled())
return;
this->runFunctor();
this->reportFinished();
}
};

} 



# 126 "/home/eagle/qt-copy/include/QtCore/qtconcurrentrunbase.h"






# 52 "/home/eagle/qt-copy/include/QtCore/qtconcurrentrun.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentstoredfunctioncall.h"















































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtCore/qtconcurrentstoredfunctioncall.h"



# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentrunbase.h"



































































































































# 51 "/home/eagle/qt-copy/include/QtCore/qtconcurrentstoredfunctioncall.h"


# 53 "/home/eagle/qt-copy/include/QtCore/qtconcurrentstoredfunctioncall.h"



typedef QtValidLicenseForCoreModule QtCoreModule;



# 60 "/home/eagle/qt-copy/include/QtCore/qtconcurrentstoredfunctioncall.h"
namespace QtConcurrent {
template <typename T, typename FunctionPointer>
struct StoredFunctorCall0: public RunFunctionTask<T>
{
inline StoredFunctorCall0(FunctionPointer _function)
: function(_function) {}
void runFunctor() { this->result = function(); }
FunctionPointer function;

};

template <typename T, typename FunctionPointer>
struct VoidStoredFunctorCall0: public RunFunctionTask<T>
{
inline VoidStoredFunctorCall0(FunctionPointer _function)
: function(_function) {}
void runFunctor() { function(); }
FunctionPointer function;

};

template <typename T, typename FunctionPointer>
struct SelectStoredFunctorCall0
{
typedef typename SelectSpecialization<T>::template
Type<StoredFunctorCall0 <T, FunctionPointer>,
VoidStoredFunctorCall0<T, FunctionPointer> >::type type;
};
template <typename T, typename FunctionPointer>
struct StoredFunctorPointerCall0: public RunFunctionTask<T>
{
inline StoredFunctorPointerCall0(FunctionPointer * _function)
: function(_function) {}
void runFunctor() { this->result =(*function)(); }
FunctionPointer * function;

};

template <typename T, typename FunctionPointer>
struct VoidStoredFunctorPointerCall0: public RunFunctionTask<T>
{
inline VoidStoredFunctorPointerCall0(FunctionPointer * _function)
: function(_function) {}
void runFunctor() {(*function)(); }
FunctionPointer * function;

};

template <typename T, typename FunctionPointer>
struct SelectStoredFunctorPointerCall0
{
typedef typename SelectSpecialization<T>::template
Type<StoredFunctorPointerCall0 <T, FunctionPointer>,
VoidStoredFunctorPointerCall0<T, FunctionPointer> >::type type;
};
template <typename T, typename Class>
class StoredMemberFunctionCall0 : public RunFunctionTask<T>
{
public:
StoredMemberFunctionCall0(T (Class::*_fn)() , const Class &_object)
: fn(_fn), object(_object){ }

void runFunctor()
{
this->result = (object.*fn)();
}
private:
T (Class::*fn)();
Class object;

};
template <typename T, typename Class>
class VoidStoredMemberFunctionCall0 : public RunFunctionTask<T>
{
public:
VoidStoredMemberFunctionCall0(T (Class::*_fn)() , const Class &_object)
: fn(_fn), object(_object){ }

void runFunctor()
{
(object.*fn)();
}
private:
T (Class::*fn)();
Class object;

};
template <typename T, typename Class>
struct SelectStoredMemberFunctionCall0
{
typedef typename SelectSpecialization<T>::template
Type<StoredMemberFunctionCall0 <T, Class>,
VoidStoredMemberFunctionCall0<T, Class> >::type type;
};
template <typename T, typename Class>
class StoredConstMemberFunctionCall0 : public RunFunctionTask<T>
{
public:
StoredConstMemberFunctionCall0(T (Class::*_fn)() const, const Class &_object)
: fn(_fn), object(_object){ }

void runFunctor()
{
this->result = (object.*fn)();
}
private:
T (Class::*fn)()const;
const Class object;

};
template <typename T, typename Class>
class VoidStoredConstMemberFunctionCall0 : public RunFunctionTask<T>
{
public:
VoidStoredConstMemberFunctionCall0(T (Class::*_fn)() const, const Class &_object)
: fn(_fn), object(_object){ }

void runFunctor()
{
(object.*fn)();
}
private:
T (Class::*fn)()const;
const Class object;

};
template <typename T, typename Class>
struct SelectStoredConstMemberFunctionCall0
{
typedef typename SelectSpecialization<T>::template
Type<StoredConstMemberFunctionCall0 <T, Class>,
VoidStoredConstMemberFunctionCall0<T, Class> >::type type;
};
template <typename T, typename Class>
class StoredMemberFunctionPointerCall0 : public RunFunctionTask<T>
{
public:
StoredMemberFunctionPointerCall0(T (Class::*_fn)() , Class *_object)
: fn(_fn), object(_object){ }

void runFunctor()
{
this->result = (object->*fn)();
}
private:
T (Class::*fn)();
Class *object;

};
template <typename T, typename Class>
class VoidStoredMemberFunctionPointerCall0 : public RunFunctionTask<T>
{
public:
VoidStoredMemberFunctionPointerCall0(T (Class::*_fn)() , Class *_object)
: fn(_fn), object(_object){ }

void runFunctor()
{
(object->*fn)();
}
private:
T (Class::*fn)();
Class *object;

};
template <typename T, typename Class>
struct SelectStoredMemberFunctionPointerCall0
{
typedef typename SelectSpecialization<T>::template
Type<StoredMemberFunctionPointerCall0 <T, Class>,
VoidStoredMemberFunctionPointerCall0<T, Class> >::type type;
};
template <typename T, typename Class>
class StoredConstMemberFunctionPointerCall0 : public RunFunctionTask<T>
{
public:
StoredConstMemberFunctionPointerCall0(T (Class::*_fn)() const, Class const *_object)
: fn(_fn), object(_object){ }

void runFunctor()
{
this->result = (object->*fn)();
}
private:
T (Class::*fn)()const;
Class const *object;

};
template <typename T, typename Class>
class VoidStoredConstMemberFunctionPointerCall0 : public RunFunctionTask<T>
{
public:
VoidStoredConstMemberFunctionPointerCall0(T (Class::*_fn)() const, Class const *_object)
: fn(_fn), object(_object){ }

void runFunctor()
{
(object->*fn)();
}
private:
T (Class::*fn)()const;
Class const *object;

};
template <typename T, typename Class>
struct SelectStoredConstMemberFunctionPointerCall0
{
typedef typename SelectSpecialization<T>::template
Type<StoredConstMemberFunctionPointerCall0 <T, Class>,
VoidStoredConstMemberFunctionPointerCall0<T, Class> >::type type;
};
template <typename T, typename FunctionPointer, typename Arg1>
struct StoredFunctorCall1: public RunFunctionTask<T>
{
inline StoredFunctorCall1(FunctionPointer _function, const Arg1 &_arg1)
: function(_function), arg1(_arg1) {}
void runFunctor() { this->result = function(arg1); }
FunctionPointer function;
Arg1 arg1;
};

template <typename T, typename FunctionPointer, typename Arg1>
struct VoidStoredFunctorCall1: public RunFunctionTask<T>
{
inline VoidStoredFunctorCall1(FunctionPointer _function, const Arg1 &_arg1)
: function(_function), arg1(_arg1) {}
void runFunctor() { function(arg1); }
FunctionPointer function;
Arg1 arg1;
};

template <typename T, typename FunctionPointer, typename Arg1>
struct SelectStoredFunctorCall1
{
typedef typename SelectSpecialization<T>::template
Type<StoredFunctorCall1 <T, FunctionPointer, Arg1>,
VoidStoredFunctorCall1<T, FunctionPointer, Arg1> >::type type;
};
template <typename T, typename FunctionPointer, typename Arg1>
struct StoredFunctorPointerCall1: public RunFunctionTask<T>
{
inline StoredFunctorPointerCall1(FunctionPointer * _function, const Arg1 &_arg1)
: function(_function), arg1(_arg1) {}
void runFunctor() { this->result =(*function)(arg1); }
FunctionPointer * function;
Arg1 arg1;
};

template <typename T, typename FunctionPointer, typename Arg1>
struct VoidStoredFunctorPointerCall1: public RunFunctionTask<T>
{
inline VoidStoredFunctorPointerCall1(FunctionPointer * _function, const Arg1 &_arg1)
: function(_function), arg1(_arg1) {}
void runFunctor() {(*function)(arg1); }
FunctionPointer * function;
Arg1 arg1;
};

template <typename T, typename FunctionPointer, typename Arg1>
struct SelectStoredFunctorPointerCall1
{
typedef typename SelectSpecialization<T>::template
Type<StoredFunctorPointerCall1 <T, FunctionPointer, Arg1>,
VoidStoredFunctorPointerCall1<T, FunctionPointer, Arg1> >::type type;
};
template <typename T, typename Class, typename Param1, typename Arg1>
class StoredMemberFunctionCall1 : public RunFunctionTask<T>
{
public:
StoredMemberFunctionCall1(T (Class::*_fn)(Param1) , const Class &_object, const Arg1 &_arg1)
: fn(_fn), object(_object), arg1(_arg1){ }

void runFunctor()
{
this->result = (object.*fn)(arg1);
}
private:
T (Class::*fn)(Param1);
Class object;
Arg1 arg1;
};
template <typename T, typename Class, typename Param1, typename Arg1>
class VoidStoredMemberFunctionCall1 : public RunFunctionTask<T>
{
public:
VoidStoredMemberFunctionCall1(T (Class::*_fn)(Param1) , const Class &_object, const Arg1 &_arg1)
: fn(_fn), object(_object), arg1(_arg1){ }

void runFunctor()
{
(object.*fn)(arg1);
}
private:
T (Class::*fn)(Param1);
Class object;
Arg1 arg1;
};
template <typename T, typename Class, typename Param1, typename Arg1>
struct SelectStoredMemberFunctionCall1
{
typedef typename SelectSpecialization<T>::template
Type<StoredMemberFunctionCall1 <T, Class, Param1, Arg1>,
VoidStoredMemberFunctionCall1<T, Class, Param1, Arg1> >::type type;
};
template <typename T, typename Class, typename Param1, typename Arg1>
class StoredConstMemberFunctionCall1 : public RunFunctionTask<T>
{
public:
StoredConstMemberFunctionCall1(T (Class::*_fn)(Param1) const, const Class &_object, const Arg1 &_arg1)
: fn(_fn), object(_object), arg1(_arg1){ }

void runFunctor()
{
this->result = (object.*fn)(arg1);
}
private:
T (Class::*fn)(Param1)const;
const Class object;
Arg1 arg1;
};
template <typename T, typename Class, typename Param1, typename Arg1>
class VoidStoredConstMemberFunctionCall1 : public RunFunctionTask<T>
{
public:
VoidStoredConstMemberFunctionCall1(T (Class::*_fn)(Param1) const, const Class &_object, const Arg1 &_arg1)
: fn(_fn), object(_object), arg1(_arg1){ }

void runFunctor()
{
(object.*fn)(arg1);
}
private:
T (Class::*fn)(Param1)const;
const Class object;
Arg1 arg1;
};
template <typename T, typename Class, typename Param1, typename Arg1>
struct SelectStoredConstMemberFunctionCall1
{
typedef typename SelectSpecialization<T>::template
Type<StoredConstMemberFunctionCall1 <T, Class, Param1, Arg1>,
VoidStoredConstMemberFunctionCall1<T, Class, Param1, Arg1> >::type type;
};
template <typename T, typename Class, typename Param1, typename Arg1>
class StoredMemberFunctionPointerCall1 : public RunFunctionTask<T>
{
public:
StoredMemberFunctionPointerCall1(T (Class::*_fn)(Param1) , Class *_object, const Arg1 &_arg1)
: fn(_fn), object(_object), arg1(_arg1){ }

void runFunctor()
{
this->result = (object->*fn)(arg1);
}
private:
T (Class::*fn)(Param1);
Class *object;
Arg1 arg1;
};
template <typename T, typename Class, typename Param1, typename Arg1>
class VoidStoredMemberFunctionPointerCall1 : public RunFunctionTask<T>
{
public:
VoidStoredMemberFunctionPointerCall1(T (Class::*_fn)(Param1) , Class *_object, const Arg1 &_arg1)
: fn(_fn), object(_object), arg1(_arg1){ }

void runFunctor()
{
(object->*fn)(arg1);
}
private:
T (Class::*fn)(Param1);
Class *object;
Arg1 arg1;
};
template <typename T, typename Class, typename Param1, typename Arg1>
struct SelectStoredMemberFunctionPointerCall1
{
typedef typename SelectSpecialization<T>::template
Type<StoredMemberFunctionPointerCall1 <T, Class, Param1, Arg1>,
VoidStoredMemberFunctionPointerCall1<T, Class, Param1, Arg1> >::type type;
};
template <typename T, typename Class, typename Param1, typename Arg1>
class StoredConstMemberFunctionPointerCall1 : public RunFunctionTask<T>
{
public:
StoredConstMemberFunctionPointerCall1(T (Class::*_fn)(Param1) const, Class const *_object, const Arg1 &_arg1)
: fn(_fn), object(_object), arg1(_arg1){ }

void runFunctor()
{
this->result = (object->*fn)(arg1);
}
private:
T (Class::*fn)(Param1)const;
Class const *object;
Arg1 arg1;
};
template <typename T, typename Class, typename Param1, typename Arg1>
class VoidStoredConstMemberFunctionPointerCall1 : public RunFunctionTask<T>
{
public:
VoidStoredConstMemberFunctionPointerCall1(T (Class::*_fn)(Param1) const, Class const *_object, const Arg1 &_arg1)
: fn(_fn), object(_object), arg1(_arg1){ }

void runFunctor()
{
(object->*fn)(arg1);
}
private:
T (Class::*fn)(Param1)const;
Class const *object;
Arg1 arg1;
};
template <typename T, typename Class, typename Param1, typename Arg1>
struct SelectStoredConstMemberFunctionPointerCall1
{
typedef typename SelectSpecialization<T>::template
Type<StoredConstMemberFunctionPointerCall1 <T, Class, Param1, Arg1>,
VoidStoredConstMemberFunctionPointerCall1<T, Class, Param1, Arg1> >::type type;
};
template <typename T, typename FunctionPointer, typename Arg1, typename Arg2>
struct StoredFunctorCall2: public RunFunctionTask<T>
{
inline StoredFunctorCall2(FunctionPointer _function, const Arg1 &_arg1, const Arg2 &_arg2)
: function(_function), arg1(_arg1), arg2(_arg2) {}
void runFunctor() { this->result = function(arg1, arg2); }
FunctionPointer function;
Arg1 arg1; Arg2 arg2;
};

template <typename T, typename FunctionPointer, typename Arg1, typename Arg2>
struct VoidStoredFunctorCall2: public RunFunctionTask<T>
{
inline VoidStoredFunctorCall2(FunctionPointer _function, const Arg1 &_arg1, const Arg2 &_arg2)
: function(_function), arg1(_arg1), arg2(_arg2) {}
void runFunctor() { function(arg1, arg2); }
FunctionPointer function;
Arg1 arg1; Arg2 arg2;
};

template <typename T, typename FunctionPointer, typename Arg1, typename Arg2>
struct SelectStoredFunctorCall2
{
typedef typename SelectSpecialization<T>::template
Type<StoredFunctorCall2 <T, FunctionPointer, Arg1, Arg2>,
VoidStoredFunctorCall2<T, FunctionPointer, Arg1, Arg2> >::type type;
};
template <typename T, typename FunctionPointer, typename Arg1, typename Arg2>
struct StoredFunctorPointerCall2: public RunFunctionTask<T>
{
inline StoredFunctorPointerCall2(FunctionPointer * _function, const Arg1 &_arg1, const Arg2 &_arg2)
: function(_function), arg1(_arg1), arg2(_arg2) {}
void runFunctor() { this->result =(*function)(arg1, arg2); }
FunctionPointer * function;
Arg1 arg1; Arg2 arg2;
};

template <typename T, typename FunctionPointer, typename Arg1, typename Arg2>
struct VoidStoredFunctorPointerCall2: public RunFunctionTask<T>
{
inline VoidStoredFunctorPointerCall2(FunctionPointer * _function, const Arg1 &_arg1, const Arg2 &_arg2)
: function(_function), arg1(_arg1), arg2(_arg2) {}
void runFunctor() {(*function)(arg1, arg2); }
FunctionPointer * function;
Arg1 arg1; Arg2 arg2;
};

template <typename T, typename FunctionPointer, typename Arg1, typename Arg2>
struct SelectStoredFunctorPointerCall2
{
typedef typename SelectSpecialization<T>::template
Type<StoredFunctorPointerCall2 <T, FunctionPointer, Arg1, Arg2>,
VoidStoredFunctorPointerCall2<T, FunctionPointer, Arg1, Arg2> >::type type;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2>
class StoredMemberFunctionCall2 : public RunFunctionTask<T>
{
public:
StoredMemberFunctionCall2(T (Class::*_fn)(Param1, Param2) , const Class &_object, const Arg1 &_arg1, const Arg2 &_arg2)
: fn(_fn), object(_object), arg1(_arg1), arg2(_arg2){ }

void runFunctor()
{
this->result = (object.*fn)(arg1, arg2);
}
private:
T (Class::*fn)(Param1, Param2);
Class object;
Arg1 arg1; Arg2 arg2;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2>
class VoidStoredMemberFunctionCall2 : public RunFunctionTask<T>
{
public:
VoidStoredMemberFunctionCall2(T (Class::*_fn)(Param1, Param2) , const Class &_object, const Arg1 &_arg1, const Arg2 &_arg2)
: fn(_fn), object(_object), arg1(_arg1), arg2(_arg2){ }

void runFunctor()
{
(object.*fn)(arg1, arg2);
}
private:
T (Class::*fn)(Param1, Param2);
Class object;
Arg1 arg1; Arg2 arg2;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2>
struct SelectStoredMemberFunctionCall2
{
typedef typename SelectSpecialization<T>::template
Type<StoredMemberFunctionCall2 <T, Class, Param1, Arg1, Param2, Arg2>,
VoidStoredMemberFunctionCall2<T, Class, Param1, Arg1, Param2, Arg2> >::type type;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2>
class StoredConstMemberFunctionCall2 : public RunFunctionTask<T>
{
public:
StoredConstMemberFunctionCall2(T (Class::*_fn)(Param1, Param2) const, const Class &_object, const Arg1 &_arg1, const Arg2 &_arg2)
: fn(_fn), object(_object), arg1(_arg1), arg2(_arg2){ }

void runFunctor()
{
this->result = (object.*fn)(arg1, arg2);
}
private:
T (Class::*fn)(Param1, Param2)const;
const Class object;
Arg1 arg1; Arg2 arg2;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2>
class VoidStoredConstMemberFunctionCall2 : public RunFunctionTask<T>
{
public:
VoidStoredConstMemberFunctionCall2(T (Class::*_fn)(Param1, Param2) const, const Class &_object, const Arg1 &_arg1, const Arg2 &_arg2)
: fn(_fn), object(_object), arg1(_arg1), arg2(_arg2){ }

void runFunctor()
{
(object.*fn)(arg1, arg2);
}
private:
T (Class::*fn)(Param1, Param2)const;
const Class object;
Arg1 arg1; Arg2 arg2;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2>
struct SelectStoredConstMemberFunctionCall2
{
typedef typename SelectSpecialization<T>::template
Type<StoredConstMemberFunctionCall2 <T, Class, Param1, Arg1, Param2, Arg2>,
VoidStoredConstMemberFunctionCall2<T, Class, Param1, Arg1, Param2, Arg2> >::type type;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2>
class StoredMemberFunctionPointerCall2 : public RunFunctionTask<T>
{
public:
StoredMemberFunctionPointerCall2(T (Class::*_fn)(Param1, Param2) , Class *_object, const Arg1 &_arg1, const Arg2 &_arg2)
: fn(_fn), object(_object), arg1(_arg1), arg2(_arg2){ }

void runFunctor()
{
this->result = (object->*fn)(arg1, arg2);
}
private:
T (Class::*fn)(Param1, Param2);
Class *object;
Arg1 arg1; Arg2 arg2;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2>
class VoidStoredMemberFunctionPointerCall2 : public RunFunctionTask<T>
{
public:
VoidStoredMemberFunctionPointerCall2(T (Class::*_fn)(Param1, Param2) , Class *_object, const Arg1 &_arg1, const Arg2 &_arg2)
: fn(_fn), object(_object), arg1(_arg1), arg2(_arg2){ }

void runFunctor()
{
(object->*fn)(arg1, arg2);
}
private:
T (Class::*fn)(Param1, Param2);
Class *object;
Arg1 arg1; Arg2 arg2;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2>
struct SelectStoredMemberFunctionPointerCall2
{
typedef typename SelectSpecialization<T>::template
Type<StoredMemberFunctionPointerCall2 <T, Class, Param1, Arg1, Param2, Arg2>,
VoidStoredMemberFunctionPointerCall2<T, Class, Param1, Arg1, Param2, Arg2> >::type type;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2>
class StoredConstMemberFunctionPointerCall2 : public RunFunctionTask<T>
{
public:
StoredConstMemberFunctionPointerCall2(T (Class::*_fn)(Param1, Param2) const, Class const *_object, const Arg1 &_arg1, const Arg2 &_arg2)
: fn(_fn), object(_object), arg1(_arg1), arg2(_arg2){ }

void runFunctor()
{
this->result = (object->*fn)(arg1, arg2);
}
private:
T (Class::*fn)(Param1, Param2)const;
Class const *object;
Arg1 arg1; Arg2 arg2;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2>
class VoidStoredConstMemberFunctionPointerCall2 : public RunFunctionTask<T>
{
public:
VoidStoredConstMemberFunctionPointerCall2(T (Class::*_fn)(Param1, Param2) const, Class const *_object, const Arg1 &_arg1, const Arg2 &_arg2)
: fn(_fn), object(_object), arg1(_arg1), arg2(_arg2){ }

void runFunctor()
{
(object->*fn)(arg1, arg2);
}
private:
T (Class::*fn)(Param1, Param2)const;
Class const *object;
Arg1 arg1; Arg2 arg2;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2>
struct SelectStoredConstMemberFunctionPointerCall2
{
typedef typename SelectSpecialization<T>::template
Type<StoredConstMemberFunctionPointerCall2 <T, Class, Param1, Arg1, Param2, Arg2>,
VoidStoredConstMemberFunctionPointerCall2<T, Class, Param1, Arg1, Param2, Arg2> >::type type;
};
template <typename T, typename FunctionPointer, typename Arg1, typename Arg2, typename Arg3>
struct StoredFunctorCall3: public RunFunctionTask<T>
{
inline StoredFunctorCall3(FunctionPointer _function, const Arg1 &_arg1, const Arg2 &_arg2, const Arg3 &_arg3)
: function(_function), arg1(_arg1), arg2(_arg2), arg3(_arg3) {}
void runFunctor() { this->result = function(arg1, arg2, arg3); }
FunctionPointer function;
Arg1 arg1; Arg2 arg2; Arg3 arg3;
};

template <typename T, typename FunctionPointer, typename Arg1, typename Arg2, typename Arg3>
struct VoidStoredFunctorCall3: public RunFunctionTask<T>
{
inline VoidStoredFunctorCall3(FunctionPointer _function, const Arg1 &_arg1, const Arg2 &_arg2, const Arg3 &_arg3)
: function(_function), arg1(_arg1), arg2(_arg2), arg3(_arg3) {}
void runFunctor() { function(arg1, arg2, arg3); }
FunctionPointer function;
Arg1 arg1; Arg2 arg2; Arg3 arg3;
};

template <typename T, typename FunctionPointer, typename Arg1, typename Arg2, typename Arg3>
struct SelectStoredFunctorCall3
{
typedef typename SelectSpecialization<T>::template
Type<StoredFunctorCall3 <T, FunctionPointer, Arg1, Arg2, Arg3>,
VoidStoredFunctorCall3<T, FunctionPointer, Arg1, Arg2, Arg3> >::type type;
};
template <typename T, typename FunctionPointer, typename Arg1, typename Arg2, typename Arg3>
struct StoredFunctorPointerCall3: public RunFunctionTask<T>
{
inline StoredFunctorPointerCall3(FunctionPointer * _function, const Arg1 &_arg1, const Arg2 &_arg2, const Arg3 &_arg3)
: function(_function), arg1(_arg1), arg2(_arg2), arg3(_arg3) {}
void runFunctor() { this->result =(*function)(arg1, arg2, arg3); }
FunctionPointer * function;
Arg1 arg1; Arg2 arg2; Arg3 arg3;
};

template <typename T, typename FunctionPointer, typename Arg1, typename Arg2, typename Arg3>
struct VoidStoredFunctorPointerCall3: public RunFunctionTask<T>
{
inline VoidStoredFunctorPointerCall3(FunctionPointer * _function, const Arg1 &_arg1, const Arg2 &_arg2, const Arg3 &_arg3)
: function(_function), arg1(_arg1), arg2(_arg2), arg3(_arg3) {}
void runFunctor() {(*function)(arg1, arg2, arg3); }
FunctionPointer * function;
Arg1 arg1; Arg2 arg2; Arg3 arg3;
};

template <typename T, typename FunctionPointer, typename Arg1, typename Arg2, typename Arg3>
struct SelectStoredFunctorPointerCall3
{
typedef typename SelectSpecialization<T>::template
Type<StoredFunctorPointerCall3 <T, FunctionPointer, Arg1, Arg2, Arg3>,
VoidStoredFunctorPointerCall3<T, FunctionPointer, Arg1, Arg2, Arg3> >::type type;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3>
class StoredMemberFunctionCall3 : public RunFunctionTask<T>
{
public:
StoredMemberFunctionCall3(T (Class::*_fn)(Param1, Param2, Param3) , const Class &_object, const Arg1 &_arg1, const Arg2 &_arg2, const Arg3 &_arg3)
: fn(_fn), object(_object), arg1(_arg1), arg2(_arg2), arg3(_arg3){ }

void runFunctor()
{
this->result = (object.*fn)(arg1, arg2, arg3);
}
private:
T (Class::*fn)(Param1, Param2, Param3);
Class object;
Arg1 arg1; Arg2 arg2; Arg3 arg3;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3>
class VoidStoredMemberFunctionCall3 : public RunFunctionTask<T>
{
public:
VoidStoredMemberFunctionCall3(T (Class::*_fn)(Param1, Param2, Param3) , const Class &_object, const Arg1 &_arg1, const Arg2 &_arg2, const Arg3 &_arg3)
: fn(_fn), object(_object), arg1(_arg1), arg2(_arg2), arg3(_arg3){ }

void runFunctor()
{
(object.*fn)(arg1, arg2, arg3);
}
private:
T (Class::*fn)(Param1, Param2, Param3);
Class object;
Arg1 arg1; Arg2 arg2; Arg3 arg3;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3>
struct SelectStoredMemberFunctionCall3
{
typedef typename SelectSpecialization<T>::template
Type<StoredMemberFunctionCall3 <T, Class, Param1, Arg1, Param2, Arg2, Param3, Arg3>,
VoidStoredMemberFunctionCall3<T, Class, Param1, Arg1, Param2, Arg2, Param3, Arg3> >::type type;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3>
class StoredConstMemberFunctionCall3 : public RunFunctionTask<T>
{
public:
StoredConstMemberFunctionCall3(T (Class::*_fn)(Param1, Param2, Param3) const, const Class &_object, const Arg1 &_arg1, const Arg2 &_arg2, const Arg3 &_arg3)
: fn(_fn), object(_object), arg1(_arg1), arg2(_arg2), arg3(_arg3){ }

void runFunctor()
{
this->result = (object.*fn)(arg1, arg2, arg3);
}
private:
T (Class::*fn)(Param1, Param2, Param3)const;
const Class object;
Arg1 arg1; Arg2 arg2; Arg3 arg3;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3>
class VoidStoredConstMemberFunctionCall3 : public RunFunctionTask<T>
{
public:
VoidStoredConstMemberFunctionCall3(T (Class::*_fn)(Param1, Param2, Param3) const, const Class &_object, const Arg1 &_arg1, const Arg2 &_arg2, const Arg3 &_arg3)
: fn(_fn), object(_object), arg1(_arg1), arg2(_arg2), arg3(_arg3){ }

void runFunctor()
{
(object.*fn)(arg1, arg2, arg3);
}
private:
T (Class::*fn)(Param1, Param2, Param3)const;
const Class object;
Arg1 arg1; Arg2 arg2; Arg3 arg3;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3>
struct SelectStoredConstMemberFunctionCall3
{
typedef typename SelectSpecialization<T>::template
Type<StoredConstMemberFunctionCall3 <T, Class, Param1, Arg1, Param2, Arg2, Param3, Arg3>,
VoidStoredConstMemberFunctionCall3<T, Class, Param1, Arg1, Param2, Arg2, Param3, Arg3> >::type type;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3>
class StoredMemberFunctionPointerCall3 : public RunFunctionTask<T>
{
public:
StoredMemberFunctionPointerCall3(T (Class::*_fn)(Param1, Param2, Param3) , Class *_object, const Arg1 &_arg1, const Arg2 &_arg2, const Arg3 &_arg3)
: fn(_fn), object(_object), arg1(_arg1), arg2(_arg2), arg3(_arg3){ }

void runFunctor()
{
this->result = (object->*fn)(arg1, arg2, arg3);
}
private:
T (Class::*fn)(Param1, Param2, Param3);
Class *object;
Arg1 arg1; Arg2 arg2; Arg3 arg3;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3>
class VoidStoredMemberFunctionPointerCall3 : public RunFunctionTask<T>
{
public:
VoidStoredMemberFunctionPointerCall3(T (Class::*_fn)(Param1, Param2, Param3) , Class *_object, const Arg1 &_arg1, const Arg2 &_arg2, const Arg3 &_arg3)
: fn(_fn), object(_object), arg1(_arg1), arg2(_arg2), arg3(_arg3){ }

void runFunctor()
{
(object->*fn)(arg1, arg2, arg3);
}
private:
T (Class::*fn)(Param1, Param2, Param3);
Class *object;
Arg1 arg1; Arg2 arg2; Arg3 arg3;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3>
struct SelectStoredMemberFunctionPointerCall3
{
typedef typename SelectSpecialization<T>::template
Type<StoredMemberFunctionPointerCall3 <T, Class, Param1, Arg1, Param2, Arg2, Param3, Arg3>,
VoidStoredMemberFunctionPointerCall3<T, Class, Param1, Arg1, Param2, Arg2, Param3, Arg3> >::type type;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3>
class StoredConstMemberFunctionPointerCall3 : public RunFunctionTask<T>
{
public:
StoredConstMemberFunctionPointerCall3(T (Class::*_fn)(Param1, Param2, Param3) const, Class const *_object, const Arg1 &_arg1, const Arg2 &_arg2, const Arg3 &_arg3)
: fn(_fn), object(_object), arg1(_arg1), arg2(_arg2), arg3(_arg3){ }

void runFunctor()
{
this->result = (object->*fn)(arg1, arg2, arg3);
}
private:
T (Class::*fn)(Param1, Param2, Param3)const;
Class const *object;
Arg1 arg1; Arg2 arg2; Arg3 arg3;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3>
class VoidStoredConstMemberFunctionPointerCall3 : public RunFunctionTask<T>
{
public:
VoidStoredConstMemberFunctionPointerCall3(T (Class::*_fn)(Param1, Param2, Param3) const, Class const *_object, const Arg1 &_arg1, const Arg2 &_arg2, const Arg3 &_arg3)
: fn(_fn), object(_object), arg1(_arg1), arg2(_arg2), arg3(_arg3){ }

void runFunctor()
{
(object->*fn)(arg1, arg2, arg3);
}
private:
T (Class::*fn)(Param1, Param2, Param3)const;
Class const *object;
Arg1 arg1; Arg2 arg2; Arg3 arg3;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3>
struct SelectStoredConstMemberFunctionPointerCall3
{
typedef typename SelectSpecialization<T>::template
Type<StoredConstMemberFunctionPointerCall3 <T, Class, Param1, Arg1, Param2, Arg2, Param3, Arg3>,
VoidStoredConstMemberFunctionPointerCall3<T, Class, Param1, Arg1, Param2, Arg2, Param3, Arg3> >::type type;
};
template <typename T, typename FunctionPointer, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
struct StoredFunctorCall4: public RunFunctionTask<T>
{
inline StoredFunctorCall4(FunctionPointer _function, const Arg1 &_arg1, const Arg2 &_arg2, const Arg3 &_arg3, const Arg4 &_arg4)
: function(_function), arg1(_arg1), arg2(_arg2), arg3(_arg3), arg4(_arg4) {}
void runFunctor() { this->result = function(arg1, arg2, arg3, arg4); }
FunctionPointer function;
Arg1 arg1; Arg2 arg2; Arg3 arg3; Arg4 arg4;
};

template <typename T, typename FunctionPointer, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
struct VoidStoredFunctorCall4: public RunFunctionTask<T>
{
inline VoidStoredFunctorCall4(FunctionPointer _function, const Arg1 &_arg1, const Arg2 &_arg2, const Arg3 &_arg3, const Arg4 &_arg4)
: function(_function), arg1(_arg1), arg2(_arg2), arg3(_arg3), arg4(_arg4) {}
void runFunctor() { function(arg1, arg2, arg3, arg4); }
FunctionPointer function;
Arg1 arg1; Arg2 arg2; Arg3 arg3; Arg4 arg4;
};

template <typename T, typename FunctionPointer, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
struct SelectStoredFunctorCall4
{
typedef typename SelectSpecialization<T>::template
Type<StoredFunctorCall4 <T, FunctionPointer, Arg1, Arg2, Arg3, Arg4>,
VoidStoredFunctorCall4<T, FunctionPointer, Arg1, Arg2, Arg3, Arg4> >::type type;
};
template <typename T, typename FunctionPointer, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
struct StoredFunctorPointerCall4: public RunFunctionTask<T>
{
inline StoredFunctorPointerCall4(FunctionPointer * _function, const Arg1 &_arg1, const Arg2 &_arg2, const Arg3 &_arg3, const Arg4 &_arg4)
: function(_function), arg1(_arg1), arg2(_arg2), arg3(_arg3), arg4(_arg4) {}
void runFunctor() { this->result =(*function)(arg1, arg2, arg3, arg4); }
FunctionPointer * function;
Arg1 arg1; Arg2 arg2; Arg3 arg3; Arg4 arg4;
};

template <typename T, typename FunctionPointer, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
struct VoidStoredFunctorPointerCall4: public RunFunctionTask<T>
{
inline VoidStoredFunctorPointerCall4(FunctionPointer * _function, const Arg1 &_arg1, const Arg2 &_arg2, const Arg3 &_arg3, const Arg4 &_arg4)
: function(_function), arg1(_arg1), arg2(_arg2), arg3(_arg3), arg4(_arg4) {}
void runFunctor() {(*function)(arg1, arg2, arg3, arg4); }
FunctionPointer * function;
Arg1 arg1; Arg2 arg2; Arg3 arg3; Arg4 arg4;
};

template <typename T, typename FunctionPointer, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
struct SelectStoredFunctorPointerCall4
{
typedef typename SelectSpecialization<T>::template
Type<StoredFunctorPointerCall4 <T, FunctionPointer, Arg1, Arg2, Arg3, Arg4>,
VoidStoredFunctorPointerCall4<T, FunctionPointer, Arg1, Arg2, Arg3, Arg4> >::type type;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3, typename Param4, typename Arg4>
class StoredMemberFunctionCall4 : public RunFunctionTask<T>
{
public:
StoredMemberFunctionCall4(T (Class::*_fn)(Param1, Param2, Param3, Param4) , const Class &_object, const Arg1 &_arg1, const Arg2 &_arg2, const Arg3 &_arg3, const Arg4 &_arg4)
: fn(_fn), object(_object), arg1(_arg1), arg2(_arg2), arg3(_arg3), arg4(_arg4){ }

void runFunctor()
{
this->result = (object.*fn)(arg1, arg2, arg3, arg4);
}
private:
T (Class::*fn)(Param1, Param2, Param3, Param4);
Class object;
Arg1 arg1; Arg2 arg2; Arg3 arg3; Arg4 arg4;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3, typename Param4, typename Arg4>
class VoidStoredMemberFunctionCall4 : public RunFunctionTask<T>
{
public:
VoidStoredMemberFunctionCall4(T (Class::*_fn)(Param1, Param2, Param3, Param4) , const Class &_object, const Arg1 &_arg1, const Arg2 &_arg2, const Arg3 &_arg3, const Arg4 &_arg4)
: fn(_fn), object(_object), arg1(_arg1), arg2(_arg2), arg3(_arg3), arg4(_arg4){ }

void runFunctor()
{
(object.*fn)(arg1, arg2, arg3, arg4);
}
private:
T (Class::*fn)(Param1, Param2, Param3, Param4);
Class object;
Arg1 arg1; Arg2 arg2; Arg3 arg3; Arg4 arg4;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3, typename Param4, typename Arg4>
struct SelectStoredMemberFunctionCall4
{
typedef typename SelectSpecialization<T>::template
Type<StoredMemberFunctionCall4 <T, Class, Param1, Arg1, Param2, Arg2, Param3, Arg3, Param4, Arg4>,
VoidStoredMemberFunctionCall4<T, Class, Param1, Arg1, Param2, Arg2, Param3, Arg3, Param4, Arg4> >::type type;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3, typename Param4, typename Arg4>
class StoredConstMemberFunctionCall4 : public RunFunctionTask<T>
{
public:
StoredConstMemberFunctionCall4(T (Class::*_fn)(Param1, Param2, Param3, Param4) const, const Class &_object, const Arg1 &_arg1, const Arg2 &_arg2, const Arg3 &_arg3, const Arg4 &_arg4)
: fn(_fn), object(_object), arg1(_arg1), arg2(_arg2), arg3(_arg3), arg4(_arg4){ }

void runFunctor()
{
this->result = (object.*fn)(arg1, arg2, arg3, arg4);
}
private:
T (Class::*fn)(Param1, Param2, Param3, Param4)const;
const Class object;
Arg1 arg1; Arg2 arg2; Arg3 arg3; Arg4 arg4;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3, typename Param4, typename Arg4>
class VoidStoredConstMemberFunctionCall4 : public RunFunctionTask<T>
{
public:
VoidStoredConstMemberFunctionCall4(T (Class::*_fn)(Param1, Param2, Param3, Param4) const, const Class &_object, const Arg1 &_arg1, const Arg2 &_arg2, const Arg3 &_arg3, const Arg4 &_arg4)
: fn(_fn), object(_object), arg1(_arg1), arg2(_arg2), arg3(_arg3), arg4(_arg4){ }

void runFunctor()
{
(object.*fn)(arg1, arg2, arg3, arg4);
}
private:
T (Class::*fn)(Param1, Param2, Param3, Param4)const;
const Class object;
Arg1 arg1; Arg2 arg2; Arg3 arg3; Arg4 arg4;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3, typename Param4, typename Arg4>
struct SelectStoredConstMemberFunctionCall4
{
typedef typename SelectSpecialization<T>::template
Type<StoredConstMemberFunctionCall4 <T, Class, Param1, Arg1, Param2, Arg2, Param3, Arg3, Param4, Arg4>,
VoidStoredConstMemberFunctionCall4<T, Class, Param1, Arg1, Param2, Arg2, Param3, Arg3, Param4, Arg4> >::type type;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3, typename Param4, typename Arg4>
class StoredMemberFunctionPointerCall4 : public RunFunctionTask<T>
{
public:
StoredMemberFunctionPointerCall4(T (Class::*_fn)(Param1, Param2, Param3, Param4) , Class *_object, const Arg1 &_arg1, const Arg2 &_arg2, const Arg3 &_arg3, const Arg4 &_arg4)
: fn(_fn), object(_object), arg1(_arg1), arg2(_arg2), arg3(_arg3), arg4(_arg4){ }

void runFunctor()
{
this->result = (object->*fn)(arg1, arg2, arg3, arg4);
}
private:
T (Class::*fn)(Param1, Param2, Param3, Param4);
Class *object;
Arg1 arg1; Arg2 arg2; Arg3 arg3; Arg4 arg4;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3, typename Param4, typename Arg4>
class VoidStoredMemberFunctionPointerCall4 : public RunFunctionTask<T>
{
public:
VoidStoredMemberFunctionPointerCall4(T (Class::*_fn)(Param1, Param2, Param3, Param4) , Class *_object, const Arg1 &_arg1, const Arg2 &_arg2, const Arg3 &_arg3, const Arg4 &_arg4)
: fn(_fn), object(_object), arg1(_arg1), arg2(_arg2), arg3(_arg3), arg4(_arg4){ }

void runFunctor()
{
(object->*fn)(arg1, arg2, arg3, arg4);
}
private:
T (Class::*fn)(Param1, Param2, Param3, Param4);
Class *object;
Arg1 arg1; Arg2 arg2; Arg3 arg3; Arg4 arg4;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3, typename Param4, typename Arg4>
struct SelectStoredMemberFunctionPointerCall4
{
typedef typename SelectSpecialization<T>::template
Type<StoredMemberFunctionPointerCall4 <T, Class, Param1, Arg1, Param2, Arg2, Param3, Arg3, Param4, Arg4>,
VoidStoredMemberFunctionPointerCall4<T, Class, Param1, Arg1, Param2, Arg2, Param3, Arg3, Param4, Arg4> >::type type;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3, typename Param4, typename Arg4>
class StoredConstMemberFunctionPointerCall4 : public RunFunctionTask<T>
{
public:
StoredConstMemberFunctionPointerCall4(T (Class::*_fn)(Param1, Param2, Param3, Param4) const, Class const *_object, const Arg1 &_arg1, const Arg2 &_arg2, const Arg3 &_arg3, const Arg4 &_arg4)
: fn(_fn), object(_object), arg1(_arg1), arg2(_arg2), arg3(_arg3), arg4(_arg4){ }

void runFunctor()
{
this->result = (object->*fn)(arg1, arg2, arg3, arg4);
}
private:
T (Class::*fn)(Param1, Param2, Param3, Param4)const;
Class const *object;
Arg1 arg1; Arg2 arg2; Arg3 arg3; Arg4 arg4;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3, typename Param4, typename Arg4>
class VoidStoredConstMemberFunctionPointerCall4 : public RunFunctionTask<T>
{
public:
VoidStoredConstMemberFunctionPointerCall4(T (Class::*_fn)(Param1, Param2, Param3, Param4) const, Class const *_object, const Arg1 &_arg1, const Arg2 &_arg2, const Arg3 &_arg3, const Arg4 &_arg4)
: fn(_fn), object(_object), arg1(_arg1), arg2(_arg2), arg3(_arg3), arg4(_arg4){ }

void runFunctor()
{
(object->*fn)(arg1, arg2, arg3, arg4);
}
private:
T (Class::*fn)(Param1, Param2, Param3, Param4)const;
Class const *object;
Arg1 arg1; Arg2 arg2; Arg3 arg3; Arg4 arg4;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3, typename Param4, typename Arg4>
struct SelectStoredConstMemberFunctionPointerCall4
{
typedef typename SelectSpecialization<T>::template
Type<StoredConstMemberFunctionPointerCall4 <T, Class, Param1, Arg1, Param2, Arg2, Param3, Arg3, Param4, Arg4>,
VoidStoredConstMemberFunctionPointerCall4<T, Class, Param1, Arg1, Param2, Arg2, Param3, Arg3, Param4, Arg4> >::type type;
};
template <typename T, typename FunctionPointer, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
struct StoredFunctorCall5: public RunFunctionTask<T>
{
inline StoredFunctorCall5(FunctionPointer _function, const Arg1 &_arg1, const Arg2 &_arg2, const Arg3 &_arg3, const Arg4 &_arg4, const Arg5 &_arg5)
: function(_function), arg1(_arg1), arg2(_arg2), arg3(_arg3), arg4(_arg4), arg5(_arg5) {}
void runFunctor() { this->result = function(arg1, arg2, arg3, arg4, arg5); }
FunctionPointer function;
Arg1 arg1; Arg2 arg2; Arg3 arg3; Arg4 arg4; Arg5 arg5;
};

template <typename T, typename FunctionPointer, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
struct VoidStoredFunctorCall5: public RunFunctionTask<T>
{
inline VoidStoredFunctorCall5(FunctionPointer _function, const Arg1 &_arg1, const Arg2 &_arg2, const Arg3 &_arg3, const Arg4 &_arg4, const Arg5 &_arg5)
: function(_function), arg1(_arg1), arg2(_arg2), arg3(_arg3), arg4(_arg4), arg5(_arg5) {}
void runFunctor() { function(arg1, arg2, arg3, arg4, arg5); }
FunctionPointer function;
Arg1 arg1; Arg2 arg2; Arg3 arg3; Arg4 arg4; Arg5 arg5;
};

template <typename T, typename FunctionPointer, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
struct SelectStoredFunctorCall5
{
typedef typename SelectSpecialization<T>::template
Type<StoredFunctorCall5 <T, FunctionPointer, Arg1, Arg2, Arg3, Arg4, Arg5>,
VoidStoredFunctorCall5<T, FunctionPointer, Arg1, Arg2, Arg3, Arg4, Arg5> >::type type;
};
template <typename T, typename FunctionPointer, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
struct StoredFunctorPointerCall5: public RunFunctionTask<T>
{
inline StoredFunctorPointerCall5(FunctionPointer * _function, const Arg1 &_arg1, const Arg2 &_arg2, const Arg3 &_arg3, const Arg4 &_arg4, const Arg5 &_arg5)
: function(_function), arg1(_arg1), arg2(_arg2), arg3(_arg3), arg4(_arg4), arg5(_arg5) {}
void runFunctor() { this->result =(*function)(arg1, arg2, arg3, arg4, arg5); }
FunctionPointer * function;
Arg1 arg1; Arg2 arg2; Arg3 arg3; Arg4 arg4; Arg5 arg5;
};

template <typename T, typename FunctionPointer, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
struct VoidStoredFunctorPointerCall5: public RunFunctionTask<T>
{
inline VoidStoredFunctorPointerCall5(FunctionPointer * _function, const Arg1 &_arg1, const Arg2 &_arg2, const Arg3 &_arg3, const Arg4 &_arg4, const Arg5 &_arg5)
: function(_function), arg1(_arg1), arg2(_arg2), arg3(_arg3), arg4(_arg4), arg5(_arg5) {}
void runFunctor() {(*function)(arg1, arg2, arg3, arg4, arg5); }
FunctionPointer * function;
Arg1 arg1; Arg2 arg2; Arg3 arg3; Arg4 arg4; Arg5 arg5;
};

template <typename T, typename FunctionPointer, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
struct SelectStoredFunctorPointerCall5
{
typedef typename SelectSpecialization<T>::template
Type<StoredFunctorPointerCall5 <T, FunctionPointer, Arg1, Arg2, Arg3, Arg4, Arg5>,
VoidStoredFunctorPointerCall5<T, FunctionPointer, Arg1, Arg2, Arg3, Arg4, Arg5> >::type type;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3, typename Param4, typename Arg4, typename Param5, typename Arg5>
class StoredMemberFunctionCall5 : public RunFunctionTask<T>
{
public:
StoredMemberFunctionCall5(T (Class::*_fn)(Param1, Param2, Param3, Param4, Param5) , const Class &_object, const Arg1 &_arg1, const Arg2 &_arg2, const Arg3 &_arg3, const Arg4 &_arg4, const Arg5 &_arg5)
: fn(_fn), object(_object), arg1(_arg1), arg2(_arg2), arg3(_arg3), arg4(_arg4), arg5(_arg5){ }

void runFunctor()
{
this->result = (object.*fn)(arg1, arg2, arg3, arg4, arg5);
}
private:
T (Class::*fn)(Param1, Param2, Param3, Param4, Param5);
Class object;
Arg1 arg1; Arg2 arg2; Arg3 arg3; Arg4 arg4; Arg5 arg5;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3, typename Param4, typename Arg4, typename Param5, typename Arg5>
class VoidStoredMemberFunctionCall5 : public RunFunctionTask<T>
{
public:
VoidStoredMemberFunctionCall5(T (Class::*_fn)(Param1, Param2, Param3, Param4, Param5) , const Class &_object, const Arg1 &_arg1, const Arg2 &_arg2, const Arg3 &_arg3, const Arg4 &_arg4, const Arg5 &_arg5)
: fn(_fn), object(_object), arg1(_arg1), arg2(_arg2), arg3(_arg3), arg4(_arg4), arg5(_arg5){ }

void runFunctor()
{
(object.*fn)(arg1, arg2, arg3, arg4, arg5);
}
private:
T (Class::*fn)(Param1, Param2, Param3, Param4, Param5);
Class object;
Arg1 arg1; Arg2 arg2; Arg3 arg3; Arg4 arg4; Arg5 arg5;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3, typename Param4, typename Arg4, typename Param5, typename Arg5>
struct SelectStoredMemberFunctionCall5
{
typedef typename SelectSpecialization<T>::template
Type<StoredMemberFunctionCall5 <T, Class, Param1, Arg1, Param2, Arg2, Param3, Arg3, Param4, Arg4, Param5, Arg5>,
VoidStoredMemberFunctionCall5<T, Class, Param1, Arg1, Param2, Arg2, Param3, Arg3, Param4, Arg4, Param5, Arg5> >::type type;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3, typename Param4, typename Arg4, typename Param5, typename Arg5>
class StoredConstMemberFunctionCall5 : public RunFunctionTask<T>
{
public:
StoredConstMemberFunctionCall5(T (Class::*_fn)(Param1, Param2, Param3, Param4, Param5) const, const Class &_object, const Arg1 &_arg1, const Arg2 &_arg2, const Arg3 &_arg3, const Arg4 &_arg4, const Arg5 &_arg5)
: fn(_fn), object(_object), arg1(_arg1), arg2(_arg2), arg3(_arg3), arg4(_arg4), arg5(_arg5){ }

void runFunctor()
{
this->result = (object.*fn)(arg1, arg2, arg3, arg4, arg5);
}
private:
T (Class::*fn)(Param1, Param2, Param3, Param4, Param5)const;
const Class object;
Arg1 arg1; Arg2 arg2; Arg3 arg3; Arg4 arg4; Arg5 arg5;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3, typename Param4, typename Arg4, typename Param5, typename Arg5>
class VoidStoredConstMemberFunctionCall5 : public RunFunctionTask<T>
{
public:
VoidStoredConstMemberFunctionCall5(T (Class::*_fn)(Param1, Param2, Param3, Param4, Param5) const, const Class &_object, const Arg1 &_arg1, const Arg2 &_arg2, const Arg3 &_arg3, const Arg4 &_arg4, const Arg5 &_arg5)
: fn(_fn), object(_object), arg1(_arg1), arg2(_arg2), arg3(_arg3), arg4(_arg4), arg5(_arg5){ }

void runFunctor()
{
(object.*fn)(arg1, arg2, arg3, arg4, arg5);
}
private:
T (Class::*fn)(Param1, Param2, Param3, Param4, Param5)const;
const Class object;
Arg1 arg1; Arg2 arg2; Arg3 arg3; Arg4 arg4; Arg5 arg5;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3, typename Param4, typename Arg4, typename Param5, typename Arg5>
struct SelectStoredConstMemberFunctionCall5
{
typedef typename SelectSpecialization<T>::template
Type<StoredConstMemberFunctionCall5 <T, Class, Param1, Arg1, Param2, Arg2, Param3, Arg3, Param4, Arg4, Param5, Arg5>,
VoidStoredConstMemberFunctionCall5<T, Class, Param1, Arg1, Param2, Arg2, Param3, Arg3, Param4, Arg4, Param5, Arg5> >::type type;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3, typename Param4, typename Arg4, typename Param5, typename Arg5>
class StoredMemberFunctionPointerCall5 : public RunFunctionTask<T>
{
public:
StoredMemberFunctionPointerCall5(T (Class::*_fn)(Param1, Param2, Param3, Param4, Param5) , Class *_object, const Arg1 &_arg1, const Arg2 &_arg2, const Arg3 &_arg3, const Arg4 &_arg4, const Arg5 &_arg5)
: fn(_fn), object(_object), arg1(_arg1), arg2(_arg2), arg3(_arg3), arg4(_arg4), arg5(_arg5){ }

void runFunctor()
{
this->result = (object->*fn)(arg1, arg2, arg3, arg4, arg5);
}
private:
T (Class::*fn)(Param1, Param2, Param3, Param4, Param5);
Class *object;
Arg1 arg1; Arg2 arg2; Arg3 arg3; Arg4 arg4; Arg5 arg5;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3, typename Param4, typename Arg4, typename Param5, typename Arg5>
class VoidStoredMemberFunctionPointerCall5 : public RunFunctionTask<T>
{
public:
VoidStoredMemberFunctionPointerCall5(T (Class::*_fn)(Param1, Param2, Param3, Param4, Param5) , Class *_object, const Arg1 &_arg1, const Arg2 &_arg2, const Arg3 &_arg3, const Arg4 &_arg4, const Arg5 &_arg5)
: fn(_fn), object(_object), arg1(_arg1), arg2(_arg2), arg3(_arg3), arg4(_arg4), arg5(_arg5){ }

void runFunctor()
{
(object->*fn)(arg1, arg2, arg3, arg4, arg5);
}
private:
T (Class::*fn)(Param1, Param2, Param3, Param4, Param5);
Class *object;
Arg1 arg1; Arg2 arg2; Arg3 arg3; Arg4 arg4; Arg5 arg5;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3, typename Param4, typename Arg4, typename Param5, typename Arg5>
struct SelectStoredMemberFunctionPointerCall5
{
typedef typename SelectSpecialization<T>::template
Type<StoredMemberFunctionPointerCall5 <T, Class, Param1, Arg1, Param2, Arg2, Param3, Arg3, Param4, Arg4, Param5, Arg5>,
VoidStoredMemberFunctionPointerCall5<T, Class, Param1, Arg1, Param2, Arg2, Param3, Arg3, Param4, Arg4, Param5, Arg5> >::type type;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3, typename Param4, typename Arg4, typename Param5, typename Arg5>
class StoredConstMemberFunctionPointerCall5 : public RunFunctionTask<T>
{
public:
StoredConstMemberFunctionPointerCall5(T (Class::*_fn)(Param1, Param2, Param3, Param4, Param5) const, Class const *_object, const Arg1 &_arg1, const Arg2 &_arg2, const Arg3 &_arg3, const Arg4 &_arg4, const Arg5 &_arg5)
: fn(_fn), object(_object), arg1(_arg1), arg2(_arg2), arg3(_arg3), arg4(_arg4), arg5(_arg5){ }

void runFunctor()
{
this->result = (object->*fn)(arg1, arg2, arg3, arg4, arg5);
}
private:
T (Class::*fn)(Param1, Param2, Param3, Param4, Param5)const;
Class const *object;
Arg1 arg1; Arg2 arg2; Arg3 arg3; Arg4 arg4; Arg5 arg5;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3, typename Param4, typename Arg4, typename Param5, typename Arg5>
class VoidStoredConstMemberFunctionPointerCall5 : public RunFunctionTask<T>
{
public:
VoidStoredConstMemberFunctionPointerCall5(T (Class::*_fn)(Param1, Param2, Param3, Param4, Param5) const, Class const *_object, const Arg1 &_arg1, const Arg2 &_arg2, const Arg3 &_arg3, const Arg4 &_arg4, const Arg5 &_arg5)
: fn(_fn), object(_object), arg1(_arg1), arg2(_arg2), arg3(_arg3), arg4(_arg4), arg5(_arg5){ }

void runFunctor()
{
(object->*fn)(arg1, arg2, arg3, arg4, arg5);
}
private:
T (Class::*fn)(Param1, Param2, Param3, Param4, Param5)const;
Class const *object;
Arg1 arg1; Arg2 arg2; Arg3 arg3; Arg4 arg4; Arg5 arg5;
};
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3, typename Param4, typename Arg4, typename Param5, typename Arg5>
struct SelectStoredConstMemberFunctionPointerCall5
{
typedef typename SelectSpecialization<T>::template
Type<StoredConstMemberFunctionPointerCall5 <T, Class, Param1, Arg1, Param2, Arg2, Param3, Arg3, Param4, Arg4, Param5, Arg5>,
VoidStoredConstMemberFunctionPointerCall5<T, Class, Param1, Arg1, Param2, Arg2, Param3, Arg3, Param4, Arg4, Param5, Arg5> >::type type;
};
} 



# 1325 "/home/eagle/qt-copy/include/QtCore/qtconcurrentstoredfunctioncall.h"






# 53 "/home/eagle/qt-copy/include/QtCore/qtconcurrentrun.h"


# 55 "/home/eagle/qt-copy/include/QtCore/qtconcurrentrun.h"



typedef QtValidLicenseForCoreModule QtCoreModule;












# 71 "/home/eagle/qt-copy/include/QtCore/qtconcurrentrun.h"
namespace QtConcurrent {

template <typename T>
QFuture<T> run(T (*functionPointer)())
{
return (new typename SelectStoredFunctorCall0<T, T (*)()>::type(functionPointer))->start();
}
template <typename T, typename Param1, typename Arg1>
QFuture<T> run(T (*functionPointer)(Param1), const Arg1 &arg1)
{
return (new typename SelectStoredFunctorCall1<T, T (*)(Param1), Arg1>::type(functionPointer, arg1))->start();
}
template <typename T, typename Param1, typename Arg1, typename Param2, typename Arg2>
QFuture<T> run(T (*functionPointer)(Param1, Param2), const Arg1 &arg1, const Arg2 &arg2)
{
return (new typename SelectStoredFunctorCall2<T, T (*)(Param1, Param2), Arg1, Arg2>::type(functionPointer, arg1, arg2))->start();
}
template <typename T, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3>
QFuture<T> run(T (*functionPointer)(Param1, Param2, Param3), const Arg1 &arg1, const Arg2 &arg2, const Arg3 &arg3)
{
return (new typename SelectStoredFunctorCall3<T, T (*)(Param1, Param2, Param3), Arg1, Arg2, Arg3>::type(functionPointer, arg1, arg2, arg3))->start();
}
template <typename T, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3, typename Param4, typename Arg4>
QFuture<T> run(T (*functionPointer)(Param1, Param2, Param3, Param4), const Arg1 &arg1, const Arg2 &arg2, const Arg3 &arg3, const Arg4 &arg4)
{
return (new typename SelectStoredFunctorCall4<T, T (*)(Param1, Param2, Param3, Param4), Arg1, Arg2, Arg3, Arg4>::type(functionPointer, arg1, arg2, arg3, arg4))->start();
}
template <typename T, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3, typename Param4, typename Arg4, typename Param5, typename Arg5>
QFuture<T> run(T (*functionPointer)(Param1, Param2, Param3, Param4, Param5), const Arg1 &arg1, const Arg2 &arg2, const Arg3 &arg3, const Arg4 &arg4, const Arg5 &arg5)
{
return (new typename SelectStoredFunctorCall5<T, T (*)(Param1, Param2, Param3, Param4, Param5), Arg1, Arg2, Arg3, Arg4, Arg5>::type(functionPointer, arg1, arg2, arg3, arg4, arg5))->start();
}

template <typename FunctionObject>
QFuture<typename FunctionObject::result_type> run(FunctionObject functionObject)
{
return (new typename SelectStoredFunctorCall0<typename FunctionObject::result_type, FunctionObject>::type(functionObject))->start();
}
template <typename FunctionObject, typename Arg1>
QFuture<typename FunctionObject::result_type> run(FunctionObject functionObject, const Arg1 &arg1)
{
return (new typename SelectStoredFunctorCall1<typename FunctionObject::result_type, FunctionObject, Arg1>::type(functionObject, arg1))->start();
}
template <typename FunctionObject, typename Arg1, typename Arg2>
QFuture<typename FunctionObject::result_type> run(FunctionObject functionObject, const Arg1 &arg1, const Arg2 &arg2)
{
return (new typename SelectStoredFunctorCall2<typename FunctionObject::result_type, FunctionObject, Arg1, Arg2>::type(functionObject, arg1, arg2))->start();
}
template <typename FunctionObject, typename Arg1, typename Arg2, typename Arg3>
QFuture<typename FunctionObject::result_type> run(FunctionObject functionObject, const Arg1 &arg1, const Arg2 &arg2, const Arg3 &arg3)
{
return (new typename SelectStoredFunctorCall3<typename FunctionObject::result_type, FunctionObject, Arg1, Arg2, Arg3>::type(functionObject, arg1, arg2, arg3))->start();
}
template <typename FunctionObject, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
QFuture<typename FunctionObject::result_type> run(FunctionObject functionObject, const Arg1 &arg1, const Arg2 &arg2, const Arg3 &arg3, const Arg4 &arg4)
{
return (new typename SelectStoredFunctorCall4<typename FunctionObject::result_type, FunctionObject, Arg1, Arg2, Arg3, Arg4>::type(functionObject, arg1, arg2, arg3, arg4))->start();
}
template <typename FunctionObject, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
QFuture<typename FunctionObject::result_type> run(FunctionObject functionObject, const Arg1 &arg1, const Arg2 &arg2, const Arg3 &arg3, const Arg4 &arg4, const Arg5 &arg5)
{
return (new typename SelectStoredFunctorCall5<typename FunctionObject::result_type, FunctionObject, Arg1, Arg2, Arg3, Arg4, Arg5>::type(functionObject, arg1, arg2, arg3, arg4, arg5))->start();
}

template <typename FunctionObject>
QFuture<typename FunctionObject::result_type> run(FunctionObject *functionObject)
{
return (new typename SelectStoredFunctorPointerCall0<typename FunctionObject::result_type, FunctionObject>::type(functionObject))->start();
}
template <typename FunctionObject, typename Arg1>
QFuture<typename FunctionObject::result_type> run(FunctionObject *functionObject, const Arg1 &arg1)
{
return (new typename SelectStoredFunctorPointerCall1<typename FunctionObject::result_type, FunctionObject, Arg1>::type(functionObject, arg1))->start();
}
template <typename FunctionObject, typename Arg1, typename Arg2>
QFuture<typename FunctionObject::result_type> run(FunctionObject *functionObject, const Arg1 &arg1, const Arg2 &arg2)
{
return (new typename SelectStoredFunctorPointerCall2<typename FunctionObject::result_type, FunctionObject, Arg1, Arg2>::type(functionObject, arg1, arg2))->start();
}
template <typename FunctionObject, typename Arg1, typename Arg2, typename Arg3>
QFuture<typename FunctionObject::result_type> run(FunctionObject *functionObject, const Arg1 &arg1, const Arg2 &arg2, const Arg3 &arg3)
{
return (new typename SelectStoredFunctorPointerCall3<typename FunctionObject::result_type, FunctionObject, Arg1, Arg2, Arg3>::type(functionObject, arg1, arg2, arg3))->start();
}
template <typename FunctionObject, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
QFuture<typename FunctionObject::result_type> run(FunctionObject *functionObject, const Arg1 &arg1, const Arg2 &arg2, const Arg3 &arg3, const Arg4 &arg4)
{
return (new typename SelectStoredFunctorPointerCall4<typename FunctionObject::result_type, FunctionObject, Arg1, Arg2, Arg3, Arg4>::type(functionObject, arg1, arg2, arg3, arg4))->start();
}
template <typename FunctionObject, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
QFuture<typename FunctionObject::result_type> run(FunctionObject *functionObject, const Arg1 &arg1, const Arg2 &arg2, const Arg3 &arg3, const Arg4 &arg4, const Arg5 &arg5)
{
return (new typename SelectStoredFunctorPointerCall5<typename FunctionObject::result_type, FunctionObject, Arg1, Arg2, Arg3, Arg4, Arg5>::type(functionObject, arg1, arg2, arg3, arg4, arg5))->start();
}

template <typename T, typename Class>
QFuture<T> run(const Class &object, T (Class::*fn)())
{
return (new typename SelectStoredMemberFunctionCall0<T, Class>::type(fn, object))->start();
}
template <typename T, typename Class, typename Param1, typename Arg1>
QFuture<T> run(const Class &object, T (Class::*fn)(Param1), const Arg1 &arg1)
{
return (new typename SelectStoredMemberFunctionCall1<T, Class, Param1, Arg1>::type(fn, object, arg1))->start();
}
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2>
QFuture<T> run(const Class &object, T (Class::*fn)(Param1, Param2), const Arg1 &arg1, const Arg2 &arg2)
{
return (new typename SelectStoredMemberFunctionCall2<T, Class, Param1, Arg1, Param2, Arg2>::type(fn, object, arg1, arg2))->start();
}
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3>
QFuture<T> run(const Class &object, T (Class::*fn)(Param1, Param2, Param3), const Arg1 &arg1, const Arg2 &arg2, const Arg3 &arg3)
{
return (new typename SelectStoredMemberFunctionCall3<T, Class, Param1, Arg1, Param2, Arg2, Param3, Arg3>::type(fn, object, arg1, arg2, arg3))->start();
}
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3, typename Param4, typename Arg4>
QFuture<T> run(const Class &object, T (Class::*fn)(Param1, Param2, Param3, Param4), const Arg1 &arg1, const Arg2 &arg2, const Arg3 &arg3, const Arg4 &arg4)
{
return (new typename SelectStoredMemberFunctionCall4<T, Class, Param1, Arg1, Param2, Arg2, Param3, Arg3, Param4, Arg4>::type(fn, object, arg1, arg2, arg3, arg4))->start();
}
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3, typename Param4, typename Arg4, typename Param5, typename Arg5>
QFuture<T> run(const Class &object, T (Class::*fn)(Param1, Param2, Param3, Param4, Param5), const Arg1 &arg1, const Arg2 &arg2, const Arg3 &arg3, const Arg4 &arg4, const Arg5 &arg5)
{
return (new typename SelectStoredMemberFunctionCall5<T, Class, Param1, Arg1, Param2, Arg2, Param3, Arg3, Param4, Arg4, Param5, Arg5>::type(fn, object, arg1, arg2, arg3, arg4, arg5))->start();
}

template <typename T, typename Class>
QFuture<T> run(const Class &object, T (Class::*fn)() const)
{
return (new typename SelectStoredConstMemberFunctionCall0<T, Class>::type(fn, object))->start();
}
template <typename T, typename Class, typename Param1, typename Arg1>
QFuture<T> run(const Class &object, T (Class::*fn)(Param1) const, const Arg1 &arg1)
{
return (new typename SelectStoredConstMemberFunctionCall1<T, Class, Param1, Arg1>::type(fn, object, arg1))->start();
}
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2>
QFuture<T> run(const Class &object, T (Class::*fn)(Param1, Param2) const, const Arg1 &arg1, const Arg2 &arg2)
{
return (new typename SelectStoredConstMemberFunctionCall2<T, Class, Param1, Arg1, Param2, Arg2>::type(fn, object, arg1, arg2))->start();
}
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3>
QFuture<T> run(const Class &object, T (Class::*fn)(Param1, Param2, Param3) const, const Arg1 &arg1, const Arg2 &arg2, const Arg3 &arg3)
{
return (new typename SelectStoredConstMemberFunctionCall3<T, Class, Param1, Arg1, Param2, Arg2, Param3, Arg3>::type(fn, object, arg1, arg2, arg3))->start();
}
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3, typename Param4, typename Arg4>
QFuture<T> run(const Class &object, T (Class::*fn)(Param1, Param2, Param3, Param4) const, const Arg1 &arg1, const Arg2 &arg2, const Arg3 &arg3, const Arg4 &arg4)
{
return (new typename SelectStoredConstMemberFunctionCall4<T, Class, Param1, Arg1, Param2, Arg2, Param3, Arg3, Param4, Arg4>::type(fn, object, arg1, arg2, arg3, arg4))->start();
}
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3, typename Param4, typename Arg4, typename Param5, typename Arg5>
QFuture<T> run(const Class &object, T (Class::*fn)(Param1, Param2, Param3, Param4, Param5) const, const Arg1 &arg1, const Arg2 &arg2, const Arg3 &arg3, const Arg4 &arg4, const Arg5 &arg5)
{
return (new typename SelectStoredConstMemberFunctionCall5<T, Class, Param1, Arg1, Param2, Arg2, Param3, Arg3, Param4, Arg4, Param5, Arg5>::type(fn, object, arg1, arg2, arg3, arg4, arg5))->start();
}

template <typename T, typename Class>
QFuture<T> run(Class *object, T (Class::*fn)())
{
return (new typename SelectStoredMemberFunctionPointerCall0<T, Class>::type(fn, object))->start();
}
template <typename T, typename Class, typename Param1, typename Arg1>
QFuture<T> run(Class *object, T (Class::*fn)(Param1), const Arg1 &arg1)
{
return (new typename SelectStoredMemberFunctionPointerCall1<T, Class, Param1, Arg1>::type(fn, object, arg1))->start();
}
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2>
QFuture<T> run(Class *object, T (Class::*fn)(Param1, Param2), const Arg1 &arg1, const Arg2 &arg2)
{
return (new typename SelectStoredMemberFunctionPointerCall2<T, Class, Param1, Arg1, Param2, Arg2>::type(fn, object, arg1, arg2))->start();
}
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3>
QFuture<T> run(Class *object, T (Class::*fn)(Param1, Param2, Param3), const Arg1 &arg1, const Arg2 &arg2, const Arg3 &arg3)
{
return (new typename SelectStoredMemberFunctionPointerCall3<T, Class, Param1, Arg1, Param2, Arg2, Param3, Arg3>::type(fn, object, arg1, arg2, arg3))->start();
}
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3, typename Param4, typename Arg4>
QFuture<T> run(Class *object, T (Class::*fn)(Param1, Param2, Param3, Param4), const Arg1 &arg1, const Arg2 &arg2, const Arg3 &arg3, const Arg4 &arg4)
{
return (new typename SelectStoredMemberFunctionPointerCall4<T, Class, Param1, Arg1, Param2, Arg2, Param3, Arg3, Param4, Arg4>::type(fn, object, arg1, arg2, arg3, arg4))->start();
}
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3, typename Param4, typename Arg4, typename Param5, typename Arg5>
QFuture<T> run(Class *object, T (Class::*fn)(Param1, Param2, Param3, Param4, Param5), const Arg1 &arg1, const Arg2 &arg2, const Arg3 &arg3, const Arg4 &arg4, const Arg5 &arg5)
{
return (new typename SelectStoredMemberFunctionPointerCall5<T, Class, Param1, Arg1, Param2, Arg2, Param3, Arg3, Param4, Arg4, Param5, Arg5>::type(fn, object, arg1, arg2, arg3, arg4, arg5))->start();
}

template <typename T, typename Class>
QFuture<T> run(const Class *object, T (Class::*fn)() const)
{
return (new typename SelectStoredConstMemberFunctionPointerCall0<T, Class>::type(fn, object))->start();
}
template <typename T, typename Class, typename Param1, typename Arg1>
QFuture<T> run(const Class *object, T (Class::*fn)(Param1) const, const Arg1 &arg1)
{
return (new typename SelectStoredConstMemberFunctionPointerCall1<T, Class, Param1, Arg1>::type(fn, object, arg1))->start();
}
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2>
QFuture<T> run(const Class *object, T (Class::*fn)(Param1, Param2) const, const Arg1 &arg1, const Arg2 &arg2)
{
return (new typename SelectStoredConstMemberFunctionPointerCall2<T, Class, Param1, Arg1, Param2, Arg2>::type(fn, object, arg1, arg2))->start();
}
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3>
QFuture<T> run(const Class *object, T (Class::*fn)(Param1, Param2, Param3) const, const Arg1 &arg1, const Arg2 &arg2, const Arg3 &arg3)
{
return (new typename SelectStoredConstMemberFunctionPointerCall3<T, Class, Param1, Arg1, Param2, Arg2, Param3, Arg3>::type(fn, object, arg1, arg2, arg3))->start();
}
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3, typename Param4, typename Arg4>
QFuture<T> run(const Class *object, T (Class::*fn)(Param1, Param2, Param3, Param4) const, const Arg1 &arg1, const Arg2 &arg2, const Arg3 &arg3, const Arg4 &arg4)
{
return (new typename SelectStoredConstMemberFunctionPointerCall4<T, Class, Param1, Arg1, Param2, Arg2, Param3, Arg3, Param4, Arg4>::type(fn, object, arg1, arg2, arg3, arg4))->start();
}
template <typename T, typename Class, typename Param1, typename Arg1, typename Param2, typename Arg2, typename Param3, typename Arg3, typename Param4, typename Arg4, typename Param5, typename Arg5>
QFuture<T> run(const Class *object, T (Class::*fn)(Param1, Param2, Param3, Param4, Param5) const, const Arg1 &arg1, const Arg2 &arg2, const Arg3 &arg3, const Arg4 &arg4, const Arg5 &arg5)
{
return (new typename SelectStoredConstMemberFunctionPointerCall5<T, Class, Param1, Arg1, Param2, Arg2, Param3, Arg3, Param4, Arg4, Param5, Arg5>::type(fn, object, arg1, arg2, arg3, arg4, arg5))->start();
}

} 



# 294 "/home/eagle/qt-copy/include/QtCore/qtconcurrentrun.h"






# 19 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentrunbase.h"



































































































































# 20 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentstoredfunctioncall.h"


















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 21 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentthreadengine.h"



















































































































































































































































































































# 22 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qthreadpool.h"
































































































# 23 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qendian.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qendian.h"


# 49 "/home/eagle/qt-copy/include/QtCore/qendian.h"




typedef QtValidLicenseForCoreModule QtCoreModule;




inline void qbswap_helper(const uchar *src, uchar *dest, int size)
{
for (int i = 0; i < size ; ++i) dest[i] = src[size - 1 - i];
}







template <typename T> inline void qbswap(const T src, uchar *dest)
{
qbswap_helper(reinterpret_cast<const uchar *>(&src), dest, sizeof(T));
}



template <typename T> inline void qToUnaligned(const T src, uchar *dest)
{
qMemCopy(dest, &src, sizeof(T));
}

















































# 129 "/home/eagle/qt-copy/include/QtCore/qendian.h"
template <typename T> inline T qFromLittleEndian(const uchar *src);
template <> inline quint64 qFromLittleEndian<quint64>(const uchar *src)
{
return 0
| src[0]
| src[1] * static_cast<unsigned long long>(0x0000000000000100ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 

| src[2] * static_cast<unsigned long long>(0x0000000000010000ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 

| src[3] * static_cast<unsigned long long>(0x0000000001000000ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 

| src[4] * static_cast<unsigned long long>(0x0000000100000000ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 

| src[5] * static_cast<unsigned long long>(0x0000010000000000ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 

| src[6] * static_cast<unsigned long long>(0x0001000000000000ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 

| src[7] * static_cast<unsigned long long>(0x0100000000000000ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 
;
}

template <> inline quint32 qFromLittleEndian<quint32>(const uchar *src)
{
return 0
| src[0]
| src[1] * quint32(0x00000100)
| src[2] * quint32(0x00010000)
| src[3] * quint32(0x01000000);
}

template <> inline quint16 qFromLittleEndian<quint16>(const uchar *src)
{
return 0
| src[0]
| src[1] * 0x0100;
}


template <> inline qint64 qFromLittleEndian<qint64>(const uchar *src)
{ return static_cast<qint64>(qFromLittleEndian<quint64>(src)); }

template <> inline qint32 qFromLittleEndian<qint32>(const uchar *src)
{ return static_cast<qint32>(qFromLittleEndian<quint32>(src)); }

template <> inline qint16 qFromLittleEndian<qint16>(const uchar *src)
{ return static_cast<qint16>(qFromLittleEndian<quint16>(src)); }
# 168 "/home/eagle/qt-copy/include/QtCore/qendian.h"


# 170 "/home/eagle/qt-copy/include/QtCore/qendian.h"
















































# 218 "/home/eagle/qt-copy/include/QtCore/qendian.h"
template <class T> inline T qFromBigEndian(const uchar *src);
template<>
inline quint64 qFromBigEndian<quint64>(const uchar *src)
{
return 0
| src[7]
| src[6] * static_cast<unsigned long long>(0x0000000000000100ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 

| src[5] * static_cast<unsigned long long>(0x0000000000010000ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 

| src[4] * static_cast<unsigned long long>(0x0000000001000000ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 

| src[3] * static_cast<unsigned long long>(0x0000000100000000ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 

| src[2] * static_cast<unsigned long long>(0x0000010000000000ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 

| src[1] * static_cast<unsigned long long>(0x0001000000000000ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 

| src[0] * static_cast<unsigned long long>(0x0100000000000000ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 
;
}

template<>
inline quint32 qFromBigEndian<quint32>(const uchar *src)
{
return 0
| src[3]
| src[2] * quint32(0x00000100)
| src[1] * quint32(0x00010000)
| src[0] * quint32(0x01000000);
}

template<>
inline quint16 qFromBigEndian<quint16>(const uchar *src)
{
return 0
| src[1]
| src[0] * quint16(0x0100);
}



template <> inline qint64 qFromBigEndian<qint64>(const uchar *src)
{ return static_cast<qint64>(qFromBigEndian<quint64>(src)); }

template <> inline qint32 qFromBigEndian<qint32>(const uchar *src)
{ return static_cast<qint32>(qFromBigEndian<quint32>(src)); }

template <> inline qint16 qFromBigEndian<qint16>(const uchar *src)
{ return static_cast<qint16>(qFromBigEndian<quint16>(src)); }
# 261 "/home/eagle/qt-copy/include/QtCore/qendian.h"

# 262 "/home/eagle/qt-copy/include/QtCore/qendian.h"






template <typename T> T qbswap(T source);
template <> inline quint64 qbswap<quint64>(quint64 source)
{
return 0
| ((source & static_cast<unsigned long long>(0x00000000000000ffULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 
) << 56)
| ((source & static_cast<unsigned long long>(0x000000000000ff00ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 
) << 40)
| ((source & static_cast<unsigned long long>(0x0000000000ff0000ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 
) << 24)
| ((source & static_cast<unsigned long long>(0x00000000ff000000ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 
) << 8)
| ((source & static_cast<unsigned long long>(0x000000ff00000000ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 
) >> 8)
| ((source & static_cast<unsigned long long>(0x0000ff0000000000ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 
) >> 24)
| ((source & static_cast<unsigned long long>(0x00ff000000000000ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 
) >> 40)
| ((source & static_cast<unsigned long long>(0xff00000000000000ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 
) >> 56);
}

template <> inline quint32 qbswap<quint32>(quint32 source)
{
return 0
| ((source & 0x000000ff) << 24)
| ((source & 0x0000ff00) << 8)
| ((source & 0x00ff0000) >> 8)
| ((source & 0xff000000) >> 24);
}

template <> inline quint16 qbswap<quint16>(quint16 source)
{
return 0
| ((source & 0x00ff) << 8)
| ((source & 0xff00) >> 8);
}


template <> inline qint64 qbswap<qint64>(qint64 source)
{
return qbswap<quint64>(quint64(source));
}

template <> inline qint32 qbswap<qint32>(qint32 source)
{
return qbswap<quint32>(quint32(source));
}

template <> inline qint16 qbswap<qint16>(qint16 source)
{
return qbswap<quint16>(quint16(source));
}

# 314 "/home/eagle/qt-copy/include/QtCore/qendian.h"
















# 330 "/home/eagle/qt-copy/include/QtCore/qendian.h"
template <typename T> inline T qToBigEndian(T source)
{ return qbswap<T>(source); }
template <typename T> inline T qFromBigEndian(T source)
{ return qbswap<T>(source); }
template <typename T> inline T qToLittleEndian(T source)
{ return source; }
template <typename T> inline T qFromLittleEndian(T source)
{ return source; }
template <typename T> inline void qToBigEndian(T src, uchar *dest)
{ qbswap<T>(src, dest); }
template <typename T> inline void qToLittleEndian(T src, uchar *dest)
{ qToUnaligned<T>(src, dest); }



# 345 "/home/eagle/qt-copy/include/QtCore/qendian.h"





# 24 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





























































































































































































































































































# 286 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 291 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 296 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 301 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 306 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 311 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 316 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 321 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 326 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 331 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 336 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 341 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 346 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 351 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 356 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 361 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 366 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 371 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 376 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 381 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 386 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 391 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 396 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 401 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 406 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 411 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 416 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 421 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 426 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 431 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 436 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 441 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 446 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 451 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 456 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 461 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 466 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 471 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 476 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 481 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 486 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 491 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 496 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 501 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 506 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 511 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 516 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 521 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 526 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 531 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 536 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 541 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 546 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 551 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 556 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 561 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 566 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 571 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 576 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 581 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 586 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 591 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 596 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 601 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 606 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 611 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 616 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 621 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 626 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 631 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 636 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 641 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 646 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 651 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 656 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 661 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 666 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 671 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 676 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 681 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 686 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 691 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 696 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 701 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 706 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 711 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 716 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 721 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 726 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 731 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 736 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 741 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 746 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 751 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 756 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 761 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 766 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 771 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 776 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 781 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 786 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 25 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 26 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlibraryinfo.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qlibraryinfo.h"


# 49 "/home/eagle/qt-copy/include/QtCore/qlibraryinfo.h"




typedef QtValidLicenseForCoreModule QtCoreModule;



# 57 "/home/eagle/qt-copy/include/QtCore/qlibraryinfo.h"
class  QLibraryInfo
{
public:
static QString licensee();
static QString licensedProducts();

static QString buildKey();

enum LibraryLocation
{
PrefixPath,
DocumentationPath,
HeadersPath,
LibrariesPath,
BinariesPath,
PluginsPath,
DataPath,
TranslationsPath,
SettingsPath,
DemosPath,
ExamplesPath
};
static QString location(LibraryLocation); 

private:
QLibraryInfo();
};



# 87 "/home/eagle/qt-copy/include/QtCore/qlibraryinfo.h"





# 27 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 28 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qnumeric.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qnumeric.h"


# 49 "/home/eagle/qt-copy/include/QtCore/qnumeric.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

 bool qIsInf(double d);
 bool qIsNaN(double d);
 bool qIsFinite(double d);
 bool qIsInf(float f);
 bool qIsNaN(float f);
 bool qIsFinite(float f);
 double qSNaN();
 double qQNaN();
 double qInf();





# 69 "/home/eagle/qt-copy/include/QtCore/qnumeric.h"





# 29 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstractfileengine.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qdir.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qdir.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qfileinfo.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qfile.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"






























































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qfile.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtCore/qfile.h"







# 55 "/home/eagle/qt-copy/include/QtCore/qfile.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class QAbstractFileEngine;
class QFilePrivate;

class  QFile : public QIODevice
{

# 67 "/home/eagle/qt-copy/include/QtCore/qfile.h"
Q_OBJECT

# 69 "/home/eagle/qt-copy/include/QtCore/qfile.h"
inline QFilePrivate* d_func() { return reinterpret_cast<QFilePrivate *>(d_ptr); } inline const QFilePrivate* d_func() const { return reinterpret_cast<const QFilePrivate *>(d_ptr); } friend class QFilePrivate;

public:

enum FileError {
NoError = 0,
ReadError = 1,
WriteError = 2,
FatalError = 3,
ResourceError = 4,
OpenError = 5,
AbortError = 6,
TimeOutError = 7,
UnspecifiedError = 8,
RemoveError = 9,
RenameError = 10,
PositionError = 11,
ResizeError = 12,
PermissionsError = 13,
CopyError = 14



# 92 "/home/eagle/qt-copy/include/QtCore/qfile.h"
};

enum Permission {
ReadOwner = 0x4000, WriteOwner = 0x2000, ExeOwner = 0x1000,
ReadUser = 0x0400, WriteUser = 0x0200, ExeUser = 0x0100,
ReadGroup = 0x0040, WriteGroup = 0x0020, ExeGroup = 0x0010,
ReadOther = 0x0004, WriteOther = 0x0002, ExeOther = 0x0001
};
typedef QFlags<Permission> Permissions;

QFile();
QFile(const QString &name);

# 105 "/home/eagle/qt-copy/include/QtCore/qfile.h"
explicit QFile(QObject *parent);
QFile(const QString &name, QObject *parent);

# 108 "/home/eagle/qt-copy/include/QtCore/qfile.h"
~QFile();

FileError error() const;
void unsetError();

QString fileName() const;
void setFileName(const QString &name);

typedef QByteArray (*EncoderFn)(const QString &fileName);
typedef QString (*DecoderFn)(const QByteArray &localfileName);
static QByteArray encodeName(const QString &fileName);
static QString decodeName(const QByteArray &localFileName);
inline static QString decodeName(const char *localFileName)
{ return decodeName(QByteArray(localFileName)); };
static void setEncodingFunction(EncoderFn);
static void setDecodingFunction(DecoderFn);

bool exists() const;
static bool exists(const QString &fileName);

QString readLink() const;
static QString readLink(const QString &fileName);
inline QString symLinkTarget() const { return readLink(); }
inline static QString symLinkTarget(const QString &fileName) { return readLink(fileName); }

bool remove();
static bool remove(const QString &fileName);

bool rename(const QString &newName);
static bool rename(const QString &oldName, const QString &newName);

bool link(const QString &newName);
static bool link(const QString &oldname, const QString &newName);

bool copy(const QString &newName);
static bool copy(const QString &fileName, const QString &newName);

bool isSequential() const;

bool open(OpenMode flags);
bool open(FILE *f, OpenMode flags);
bool open(int fd, OpenMode flags);
virtual void close();

qint64 size() const;
qint64 pos() const;
bool seek(qint64 offset);
bool atEnd() const;
bool flush();

bool resize(qint64 sz);
static bool resize(const QString &filename, qint64 sz);

Permissions permissions() const;
static Permissions permissions(const QString &filename);
bool setPermissions(Permissions permissionSpec);
static bool setPermissions(const QString &filename, Permissions permissionSpec);

int handle() const;

enum MemoryMapFlags {
NoOptions = 0
};

uchar *map(qint64 offset, qint64 size, MemoryMapFlags flags = NoOptions);
bool unmap(uchar *address);

virtual QAbstractFileEngine *fileEngine() const;









# 185 "/home/eagle/qt-copy/include/QtCore/qfile.h"
protected:



# 189 "/home/eagle/qt-copy/include/QtCore/qfile.h"
QFile(QFilePrivate &dd, QObject *parent = 0);


# 192 "/home/eagle/qt-copy/include/QtCore/qfile.h"
qint64 readData(char *data, qint64 maxlen);
qint64 writeData(const char *data, qint64 len);
qint64 readLineData(char *data, qint64 maxlen);

private:
QFile(const QFile &); QFile &operator=(const QFile &);
};

inline QFlags<QFile::Permissions::enum_type> operator|(QFile::Permissions::enum_type f1, QFile::Permissions::enum_type f2) { return QFlags<QFile::Permissions::enum_type>(f1) | f2; } inline QFlags<QFile::Permissions::enum_type> operator|(QFile::Permissions::enum_type f1, QFlags<QFile::Permissions::enum_type> f2) { return f2 | f1; }






# 47 "/home/eagle/qt-copy/include/QtCore/qfileinfo.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qlist.h"











































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtCore/qfileinfo.h"


# 50 "/home/eagle/qt-copy/include/QtCore/qfileinfo.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class QDir;
class QDateTime;
class QFileInfoPrivate;

class  QFileInfo
{
public:
QFileInfo();
QFileInfo(const QString &file);
QFileInfo(const QFile &file);
QFileInfo(const QDir &dir, const QString &file);
QFileInfo(const QFileInfo &fileinfo);
~QFileInfo();

QFileInfo &operator=(const QFileInfo &fileinfo);
bool operator==(const QFileInfo &fileinfo); 
bool operator==(const QFileInfo &fileinfo) const;
inline bool operator!=(const QFileInfo &fileinfo) { return !(operator==(fileinfo)); } 
inline bool operator!=(const QFileInfo &fileinfo) const { return !(operator==(fileinfo)); }

void setFile(const QString &file);
void setFile(const QFile &file);
void setFile(const QDir &dir, const QString &file);
bool exists() const;
void refresh();

QString filePath() const;
QString absoluteFilePath() const;
QString canonicalFilePath() const;
QString fileName() const;
QString baseName() const;
QString completeBaseName() const;
QString suffix() const;
QString bundleName() const;
QString completeSuffix() const;

QString path() const;
QString absolutePath() const;
QString canonicalPath() const;
QDir dir() const;
QDir absoluteDir() const;

bool isReadable() const;
bool isWritable() const;
bool isExecutable() const;
bool isHidden() const;

bool isRelative() const;
inline bool isAbsolute() const { return !isRelative(); }
bool makeAbsolute();

bool isFile() const;
bool isDir() const;
bool isSymLink() const;
bool isRoot() const;
bool isBundle() const;

QString readLink() const;
inline QString symLinkTarget() const { return readLink(); }

QString owner() const;
uint ownerId() const;
QString group() const;
uint groupId() const;

bool permission(QFile::Permissions permissions) const;
QFile::Permissions permissions() const;

qint64 size() const;

QDateTime created() const;
QDateTime lastModified() const;
QDateTime lastRead() const;

void detach();

bool caching() const;
void setCaching(bool on);



































# 169 "/home/eagle/qt-copy/include/QtCore/qfileinfo.h"
protected:
QFileInfoPrivate *d_ptr;
private:
inline QFileInfoPrivate* d_func() { return reinterpret_cast<QFileInfoPrivate *>(d_ptr); } inline const QFileInfoPrivate* d_func() const { return reinterpret_cast<const QFileInfoPrivate *>(d_ptr); } friend class QFileInfoPrivate;
};
template <> class QTypeInfo<QFileInfo> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QFileInfo)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QFileInfo"; } };





# 180 "/home/eagle/qt-copy/include/QtCore/qfileinfo.h"
typedef QList<QFileInfo> QFileInfoList;




# 185 "/home/eagle/qt-copy/include/QtCore/qfileinfo.h"





# 48 "/home/eagle/qt-copy/include/QtCore/qdir.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"
















































































































































































































































# 49 "/home/eagle/qt-copy/include/QtCore/qdir.h"


# 51 "/home/eagle/qt-copy/include/QtCore/qdir.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class QDirPrivate;

class  QDir
{
protected:
QDirPrivate *d_ptr;
private:
inline QDirPrivate* d_func() { return reinterpret_cast<QDirPrivate *>(d_ptr); } inline const QDirPrivate* d_func() const { return reinterpret_cast<const QDirPrivate *>(d_ptr); } friend class QDirPrivate;
public:
enum Filter { Dirs = 0x001,
Files = 0x002,
Drives = 0x004,
NoSymLinks = 0x008,
AllEntries = Dirs | Files | Drives,
TypeMask = 0x00f,




# 76 "/home/eagle/qt-copy/include/QtCore/qdir.h"
Readable = 0x010,
Writable = 0x020,
Executable = 0x040,
PermissionMask = 0x070,




# 84 "/home/eagle/qt-copy/include/QtCore/qdir.h"
Modified = 0x080,
Hidden = 0x100,
System = 0x200,

AccessMask = 0x3F0,

AllDirs = 0x400,
CaseSensitive = 0x800,
NoDotAndDotDot = 0x1000,

NoFilter = -1



# 98 "/home/eagle/qt-copy/include/QtCore/qdir.h"
};
typedef QFlags<Filter> Filters;




# 104 "/home/eagle/qt-copy/include/QtCore/qdir.h"
enum SortFlag { Name = 0x00,
Time = 0x01,
Size = 0x02,
Unsorted = 0x03,
SortByMask = 0x03,

DirsFirst = 0x04,
Reversed = 0x08,
IgnoreCase = 0x10,
DirsLast = 0x20,
LocaleAware = 0x40, 
Type = 0x80,
NoSort = -1



# 120 "/home/eagle/qt-copy/include/QtCore/qdir.h"
};
typedef QFlags<SortFlag> SortFlags;

QDir(const QDir &);
QDir(const QString &path = QString());
QDir(const QString &path, const QString &nameFilter,
SortFlags sort = SortFlags(Name | IgnoreCase), Filters filter = AllEntries);
~QDir();

QDir &operator=(const QDir &);
QDir &operator=(const QString &path);

void setPath(const QString &path);
QString path() const;
QString absolutePath() const;
QString canonicalPath() const;

static void addResourceSearchPath(const QString &path);

static void setSearchPaths(const QString &prefix, const QStringList &searchPaths);
static void addSearchPath(const QString &prefix, const QString &path);
static QStringList searchPaths(const QString &prefix);

QString dirName() const;
QString filePath(const QString &fileName) const;
QString absoluteFilePath(const QString &fileName) const;
QString relativeFilePath(const QString &fileName) const;


# 149 "/home/eagle/qt-copy/include/QtCore/qdir.h"
 static QString convertSeparators(const QString &pathName);

# 151 "/home/eagle/qt-copy/include/QtCore/qdir.h"
static QString toNativeSeparators(const QString &pathName);
static QString fromNativeSeparators(const QString &pathName);

bool cd(const QString &dirName);
bool cdUp();

QStringList nameFilters() const;
void setNameFilters(const QStringList &nameFilters);

Filters filter() const;
void setFilter(Filters filter);
SortFlags sorting() const;
void setSorting(SortFlags sort);

uint count() const;
QString operator[](int) const;

static QStringList nameFiltersFromString(const QString &nameFilter);

QStringList entryList(Filters filters = NoFilter, SortFlags sort = NoSort) const;
QStringList entryList(const QStringList &nameFilters, Filters filters = NoFilter,
SortFlags sort = NoSort) const;

QFileInfoList entryInfoList(Filters filters = NoFilter, SortFlags sort = NoSort) const;
QFileInfoList entryInfoList(const QStringList &nameFilters, Filters filters = NoFilter,
SortFlags sort = NoSort) const;

bool mkdir(const QString &dirName) const;
bool rmdir(const QString &dirName) const;
bool mkpath(const QString &dirPath) const;
bool rmpath(const QString &dirPath) const;

bool isReadable() const;
bool exists() const;
bool isRoot() const;

static bool isRelativePath(const QString &path);
inline static bool isAbsolutePath(const QString &path) { return !isRelativePath(path); }
bool isRelative() const;
inline bool isAbsolute() const { return !isRelative(); }
bool makeAbsolute();

bool operator==(const QDir &dir) const;
inline bool operator!=(const QDir &dir) const { return !operator==(dir); }

bool remove(const QString &fileName);
bool rename(const QString &oldName, const QString &newName);
bool exists(const QString &name) const;

static QFileInfoList drives();

static QChar separator();

static bool setCurrent(const QString &path);
static inline QDir current() { return QDir(currentPath()); }
static QString currentPath();

static inline QDir home() { return QDir(homePath()); }
static QString homePath();
static inline QDir root() { return QDir(rootPath()); }
static QString rootPath();
static inline QDir temp() { return QDir(tempPath()); }
static QString tempPath();


# 216 "/home/eagle/qt-copy/include/QtCore/qdir.h"
static bool match(const QStringList &filters, const QString &fileName);
static bool match(const QString &filter, const QString &fileName);

# 219 "/home/eagle/qt-copy/include/QtCore/qdir.h"
static QString cleanPath(const QString &path);
void refresh() const;






























# 251 "/home/eagle/qt-copy/include/QtCore/qdir.h"
};

inline QFlags<QDir::Filters::enum_type> operator|(QDir::Filters::enum_type f1, QDir::Filters::enum_type f2) { return QFlags<QDir::Filters::enum_type>(f1) | f2; } inline QFlags<QDir::Filters::enum_type> operator|(QDir::Filters::enum_type f1, QFlags<QDir::Filters::enum_type> f2) { return f2 | f1; }
inline QFlags<QDir::SortFlags::enum_type> operator|(QDir::SortFlags::enum_type f1, QDir::SortFlags::enum_type f2) { return QFlags<QDir::SortFlags::enum_type>(f1) | f2; } inline QFlags<QDir::SortFlags::enum_type> operator|(QDir::SortFlags::enum_type f1, QFlags<QDir::SortFlags::enum_type> f2) { return f2 | f1; }


# 257 "/home/eagle/qt-copy/include/QtCore/qdir.h"
class QDebug;
 QDebug operator<<(QDebug debug, QDir::Filters filters);
 QDebug operator<<(QDebug debug, const QDir &dir);


# 262 "/home/eagle/qt-copy/include/QtCore/qdir.h"





# 47 "/home/eagle/qt-copy/include/QtCore/qabstractfileengine.h"






# 53 "/home/eagle/qt-copy/include/QtCore/qabstractfileengine.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class QFileExtension;
class QFileExtensionResult;
class QVariant;
class QAbstractFileEngineIterator;
class QAbstractFileEnginePrivate;

class  QAbstractFileEngine
{
public:
enum FileFlag {

ReadOwnerPerm = 0x4000, WriteOwnerPerm = 0x2000, ExeOwnerPerm = 0x1000,
ReadUserPerm = 0x0400, WriteUserPerm = 0x0200, ExeUserPerm = 0x0100,
ReadGroupPerm = 0x0040, WriteGroupPerm = 0x0020, ExeGroupPerm = 0x0010,
ReadOtherPerm = 0x0004, WriteOtherPerm = 0x0002, ExeOtherPerm = 0x0001,


LinkType = 0x10000,
FileType = 0x20000,
DirectoryType = 0x40000,
BundleType = 0x80000,


HiddenFlag = 0x0100000,
LocalDiskFlag = 0x0200000,
ExistsFlag = 0x0400000,
RootFlag = 0x0800000,
Refresh = 0x1000000,


PermsMask = 0x0000FFFF,
TypesMask = 0x000F0000,
FlagsMask = 0x0FF00000,
FileInfoAll = FlagsMask | PermsMask | TypesMask
};
typedef QFlags<FileFlag> FileFlags;

enum FileName {
DefaultName,
BaseName,
PathName,
AbsoluteName,
AbsolutePathName,
LinkName,
CanonicalName,
CanonicalPathName,
BundleName
};
enum FileOwner {
OwnerUser,
OwnerGroup
};
enum FileTime {
CreationTime,
ModificationTime,
AccessTime
};

virtual ~QAbstractFileEngine();

virtual bool open(QIODevice::OpenMode openMode);
virtual bool close();
virtual bool flush();
virtual qint64 size() const;
virtual qint64 pos() const;
virtual bool seek(qint64 pos);
virtual bool isSequential() const;
virtual bool remove();
virtual bool copy(const QString &newName);
virtual bool rename(const QString &newName);
virtual bool link(const QString &newName);
virtual bool mkdir(const QString &dirName, bool createParentDirectories) const;
virtual bool rmdir(const QString &dirName, bool recurseParentDirectories) const;
virtual bool setSize(qint64 size);
virtual bool caseSensitive() const;
virtual bool isRelativePath() const;
virtual QStringList entryList(QDir::Filters filters, const QStringList &filterNames) const;
virtual FileFlags fileFlags(FileFlags type=FileInfoAll) const;
virtual bool setPermissions(uint perms);
virtual QString fileName(FileName file=DefaultName) const;
virtual uint ownerId(FileOwner) const;
virtual QString owner(FileOwner) const;
virtual QDateTime fileTime(FileTime time) const;
virtual void setFileName(const QString &file);
virtual int handle() const;
bool atEnd() const;
uchar *map(qint64 offset, qint64 size, QFile::MemoryMapFlags flags);
bool unmap(uchar *ptr);

typedef QAbstractFileEngineIterator Iterator;
virtual Iterator *beginEntryList(QDir::Filters filters, const QStringList &filterNames);
virtual Iterator *endEntryList();

virtual qint64 read(char *data, qint64 maxlen);
virtual qint64 readLine(char *data, qint64 maxlen);
virtual qint64 write(const char *data, qint64 len);

QFile::FileError error() const;
QString errorString() const;

enum Extension {
AtEndExtension,
FastReadLineExtension,
MapExtension,
UnMapExtension
};
class ExtensionOption
{};
class ExtensionReturn
{};

class MapExtensionOption : public ExtensionOption {
public:
qint64 offset;
qint64 size;
QFile::MemoryMapFlags flags;
};
class MapExtensionReturn : public ExtensionReturn {
public:
uchar *address;
};

class UnMapExtensionOption : public ExtensionOption {
public:
uchar *address;
};

virtual bool extension(Extension extension, const ExtensionOption *option = 0, ExtensionReturn *output = 0);
virtual bool supportsExtension(Extension extension) const;


static QAbstractFileEngine *create(const QString &fileName);

protected:
void setError(QFile::FileError error, const QString &str);

QAbstractFileEngine();
QAbstractFileEngine(QAbstractFileEnginePrivate &);

QAbstractFileEnginePrivate *d_ptr;
private:
inline QAbstractFileEnginePrivate* d_func() { return reinterpret_cast<QAbstractFileEnginePrivate *>(d_ptr); } inline const QAbstractFileEnginePrivate* d_func() const { return reinterpret_cast<const QAbstractFileEnginePrivate *>(d_ptr); } friend class QAbstractFileEnginePrivate;
QAbstractFileEngine(const QAbstractFileEngine &); QAbstractFileEngine &operator=(const QAbstractFileEngine &);
};

inline QFlags<QAbstractFileEngine::FileFlags::enum_type> operator|(QAbstractFileEngine::FileFlags::enum_type f1, QAbstractFileEngine::FileFlags::enum_type f2) { return QFlags<QAbstractFileEngine::FileFlags::enum_type>(f1) | f2; } inline QFlags<QAbstractFileEngine::FileFlags::enum_type> operator|(QAbstractFileEngine::FileFlags::enum_type f1, QFlags<QAbstractFileEngine::FileFlags::enum_type> f2) { return f2 | f1; }

class  QAbstractFileEngineHandler
{
public:
QAbstractFileEngineHandler();
virtual ~QAbstractFileEngineHandler();
virtual QAbstractFileEngine *create(const QString &fileName) const = 0;
};

class QAbstractFileEngineIteratorPrivate;
class  QAbstractFileEngineIterator
{
public:
QAbstractFileEngineIterator(QDir::Filters filters, const QStringList &nameFilters);
virtual ~QAbstractFileEngineIterator();

virtual QString next() = 0;
virtual bool hasNext() const = 0;

QString path() const;
QStringList nameFilters() const;
QDir::Filters filters() const;

virtual QString currentFileName() const = 0;
virtual QFileInfo currentFileInfo() const;
QString currentFilePath() const;

protected:
enum EntryInfoType {
};
virtual QVariant entryInfo(EntryInfoType type) const;

private:
QAbstractFileEngineIterator(const QAbstractFileEngineIterator &); QAbstractFileEngineIterator &operator=(const QAbstractFileEngineIterator &);
friend class QDirIterator;
friend class QDirIteratorPrivate;
void setPath(const QString &path);
QAbstractFileEngineIteratorPrivate *d;
};






# 30 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbuffer.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"






























































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qbuffer.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"












































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtCore/qbuffer.h"


# 50 "/home/eagle/qt-copy/include/QtCore/qbuffer.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class QObject;
class QBufferPrivate;

class  QBuffer : public QIODevice
{

# 62 "/home/eagle/qt-copy/include/QtCore/qbuffer.h"
Q_OBJECT


# 65 "/home/eagle/qt-copy/include/QtCore/qbuffer.h"
public:

# 67 "/home/eagle/qt-copy/include/QtCore/qbuffer.h"
explicit QBuffer(QObject *parent = 0);
QBuffer(QByteArray *buf, QObject *parent = 0);




# 73 "/home/eagle/qt-copy/include/QtCore/qbuffer.h"
~QBuffer();

QByteArray &buffer();
const QByteArray &buffer() const;
void setBuffer(QByteArray *a);

void setData(const QByteArray &data);
inline void setData(const char *data, int len);
const QByteArray &data() const;

bool open(OpenMode openMode);

void close();
qint64 size() const;
qint64 pos() const;
bool seek(qint64 off);
bool atEnd() const;
bool canReadLine() const;

protected:
qint64 readData(char *data, qint64 maxlen);
qint64 writeData(const char *data, qint64 len);

private:
inline QBufferPrivate* d_func() { return reinterpret_cast<QBufferPrivate *>(d_ptr); } inline const QBufferPrivate* d_func() const { return reinterpret_cast<const QBufferPrivate *>(d_ptr); } friend class QBufferPrivate;
QBuffer(const QBuffer &); QBuffer &operator=(const QBuffer &);


};

inline void QBuffer::setData(const char *adata, int alen)
{ setData(QByteArray(adata, alen)); }






# 31 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdatastream.h"









































































































































































































































































































































































































































# 32 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdebug.h"






































































































































































































































































# 33 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdir.h"










































































































































































































































































# 34 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdiriterator.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qdir.h"










































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qdiriterator.h"


# 49 "/home/eagle/qt-copy/include/QtCore/qdiriterator.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class QDirIteratorPrivate;
class  QDirIterator {
public:
enum IteratorFlag {
NoIteratorFlags = 0x0,
FollowSymlinks = 0x1,
Subdirectories = 0x2
};
typedef QFlags<IteratorFlag> IteratorFlags;

QDirIterator(const QDir &dir, IteratorFlags flags = NoIteratorFlags);
QDirIterator(const QString &path,
IteratorFlags flags = NoIteratorFlags);
QDirIterator(const QString &path,
QDir::Filters filter,
IteratorFlags flags = NoIteratorFlags);
QDirIterator(const QString &path,
const QStringList &nameFilters,
QDir::Filters filters = QDir::NoFilter,
IteratorFlags flags = NoIteratorFlags);

virtual ~QDirIterator();

QString next();
bool hasNext() const;

QString fileName() const;
QString filePath() const;
QFileInfo fileInfo() const;
QString path() const;

private:
QDirIterator(const QDirIterator &); QDirIterator &operator=(const QDirIterator &);

QDirIteratorPrivate *d;
friend class QDir;
};

inline QFlags<QDirIterator::IteratorFlags::enum_type> operator|(QDirIterator::IteratorFlags::enum_type f1, QDirIterator::IteratorFlags::enum_type f2) { return QFlags<QDirIterator::IteratorFlags::enum_type>(f1) | f2; } inline QFlags<QDirIterator::IteratorFlags::enum_type> operator|(QDirIterator::IteratorFlags::enum_type f1, QFlags<QDirIterator::IteratorFlags::enum_type> f2) { return f2 | f1; }






# 35 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfile.h"














































































































































































































# 36 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfileinfo.h"





























































































































































































# 37 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfilesystemwatcher.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qfilesystemwatcher.h"




# 51 "/home/eagle/qt-copy/include/QtCore/qfilesystemwatcher.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class QFileSystemWatcherPrivate;

class  QFileSystemWatcher : public QObject
{
Q_OBJECT
inline QFileSystemWatcherPrivate* d_func() { return reinterpret_cast<QFileSystemWatcherPrivate *>(d_ptr); } inline const QFileSystemWatcherPrivate* d_func() const { return reinterpret_cast<const QFileSystemWatcherPrivate *>(d_ptr); } friend class QFileSystemWatcherPrivate;

public:
QFileSystemWatcher(QObject *parent = 0);
QFileSystemWatcher(const QStringList &paths, QObject *parent = 0);
~QFileSystemWatcher();

void addPath(const QString &file);
void addPaths(const QStringList &files);
void removePath(const QString &file);
void removePaths(const QStringList &files);

QStringList files() const;
QStringList directories() const;

signals:
void fileChanged(const QString &path);
void directoryChanged(const QString &path);

private:


};







# 38 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfsfileengine.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qabstractfileengine.h"

























































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qfsfileengine.h"




# 51 "/home/eagle/qt-copy/include/QtCore/qfsfileengine.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class QFSFileEnginePrivate;

class  QFSFileEngine : public QAbstractFileEngine
{
inline QFSFileEnginePrivate* d_func() { return reinterpret_cast<QFSFileEnginePrivate *>(d_ptr); } inline const QFSFileEnginePrivate* d_func() const { return reinterpret_cast<const QFSFileEnginePrivate *>(d_ptr); } friend class QFSFileEnginePrivate;
public:
QFSFileEngine();
explicit QFSFileEngine(const QString &file);
~QFSFileEngine();

bool open(QIODevice::OpenMode openMode);
bool open(QIODevice::OpenMode flags, FILE *fh);
bool close();
bool flush();
qint64 size() const;
qint64 pos() const;
bool seek(qint64);
bool isSequential() const;
bool remove();
bool copy(const QString &newName);
bool rename(const QString &newName);
bool link(const QString &newName);
bool mkdir(const QString &dirName, bool createParentDirectories) const;
bool rmdir(const QString &dirName, bool recurseParentDirectories) const;
bool setSize(qint64 size);
bool caseSensitive() const;
bool isRelativePath() const;
QStringList entryList(QDir::Filters filters, const QStringList &filterNames) const;
FileFlags fileFlags(FileFlags type) const;
bool setPermissions(uint perms);
QString fileName(FileName file) const;
uint ownerId(FileOwner) const;
QString owner(FileOwner) const;
QDateTime fileTime(FileTime time) const;
void setFileName(const QString &file);
int handle() const;

Iterator *beginEntryList(QDir::Filters filters, const QStringList &filterNames);
Iterator *endEntryList();

qint64 read(char *data, qint64 maxlen);
qint64 readLine(char *data, qint64 maxlen);
qint64 write(const char *data, qint64 len);

bool extension(Extension extension, const ExtensionOption *option = 0, ExtensionReturn *output = 0);
bool supportsExtension(Extension extension) const;


bool open(QIODevice::OpenMode flags, int fd);
static bool setCurrentPath(const QString &path);
static QString currentPath(const QString &path = QString());
static QString homePath();
static QString rootPath();
static QString tempPath();
static QFileInfoList drives();

protected:
QFSFileEngine(QFSFileEnginePrivate &dd);
};








# 39 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"






























































































































































































































































# 40 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qprocess.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"






























































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qprocess.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"
















































































































































































































































# 48 "/home/eagle/qt-copy/include/QtCore/qprocess.h"


# 50 "/home/eagle/qt-copy/include/QtCore/qprocess.h"




typedef QtValidLicenseForCoreModule QtCoreModule;




# 59 "/home/eagle/qt-copy/include/QtCore/qprocess.h"
typedef qint64 Q_PID;






# 66 "/home/eagle/qt-copy/include/QtCore/qprocess.h"
class QProcessPrivate;

class  QProcess : public QIODevice
{
Q_OBJECT
public:
enum ProcessError {
FailedToStart, 
Crashed,
Timedout,
ReadError,
WriteError,
UnknownError
};
enum ProcessState {
NotRunning,
Starting,
Running
};
enum ProcessChannel {
StandardOutput,
StandardError
};
enum ProcessChannelMode {
SeparateChannels,
MergedChannels,
ForwardedChannels
};
enum ExitStatus {
NormalExit,
CrashExit
};

explicit QProcess(QObject *parent = 0);
virtual ~QProcess();

void start(const QString &program, const QStringList &arguments, OpenMode mode = ReadWrite);
void start(const QString &program, OpenMode mode = ReadWrite);

ProcessChannelMode readChannelMode() const;
void setReadChannelMode(ProcessChannelMode mode);
ProcessChannelMode processChannelMode() const;
void setProcessChannelMode(ProcessChannelMode mode);

ProcessChannel readChannel() const;
void setReadChannel(ProcessChannel channel);

void closeReadChannel(ProcessChannel channel);
void closeWriteChannel();

void setStandardInputFile(const QString &fileName);
void setStandardOutputFile(const QString &fileName, OpenMode mode = Truncate);
void setStandardErrorFile(const QString &fileName, OpenMode mode = Truncate);
void setStandardOutputProcess(QProcess *destination);

QString workingDirectory() const;
void setWorkingDirectory(const QString &dir);

void setEnvironment(const QStringList &environment);
QStringList environment() const;

QProcess::ProcessError error() const;
QProcess::ProcessState state() const;


Q_PID pid() const;

bool waitForStarted(int msecs = 30000);
bool waitForReadyRead(int msecs = 30000);
bool waitForBytesWritten(int msecs = 30000);
bool waitForFinished(int msecs = 30000);

QByteArray readAllStandardOutput();
QByteArray readAllStandardError();

int exitCode() const;
QProcess::ExitStatus exitStatus() const;


qint64 bytesAvailable() const;
qint64 bytesToWrite() const;
bool isSequential() const;
bool canReadLine() const;
void close();
bool atEnd() const;

static int execute(const QString &program, const QStringList &arguments);
static int execute(const QString &program);

static bool startDetached(const QString &program, const QStringList &arguments, const QString &workingDirectory,
qint64 *pid = 0);
static bool startDetached(const QString &program, const QStringList &arguments);
static bool startDetached(const QString &program);

static QStringList systemEnvironment();

public slots:
void terminate();
void kill();

signals:
void started();
void finished(int exitCode);
void finished(int exitCode, QProcess::ExitStatus exitStatus);
void error(QProcess::ProcessError error);
void stateChanged(QProcess::ProcessState state);

void readyReadStandardOutput();
void readyReadStandardError();

protected:
void setProcessState(ProcessState state);

virtual void setupChildProcess();


qint64 readData(char *data, qint64 maxlen);
qint64 writeData(const char *data, qint64 len);

private:
inline QProcessPrivate* d_func() { return reinterpret_cast<QProcessPrivate *>(d_ptr); } inline const QProcessPrivate* d_func() const { return reinterpret_cast<const QProcessPrivate *>(d_ptr); } friend class QProcessPrivate;
QProcess(const QProcess &); QProcess &operator=(const QProcess &);







friend class QProcessManager;
};



# 200 "/home/eagle/qt-copy/include/QtCore/qprocess.h"





# 41 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qresource.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qresource.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qlocale.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qlocale.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qobjectdefs.h"











































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtCore/qlocale.h"


# 50 "/home/eagle/qt-copy/include/QtCore/qlocale.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class QDataStream;
class QDate;
class QDateTime;
class QTime;
class QVariant;

class QLocale;


# 65 "/home/eagle/qt-copy/include/QtCore/qlocale.h"
class  QSystemLocale
{
public:
QSystemLocale();
virtual ~QSystemLocale();

enum QueryType {
LanguageId, 
CountryId, 
DecimalPoint, 
GroupSeparator, 
ZeroDigit, 
NegativeSign, 
DateFormatLong, 
DateFormatShort, 
TimeFormatLong, 
TimeFormatShort, 
DayNameLong, 
DayNameShort, 
MonthNameLong, 
MonthNameShort, 
DateToStringLong, 
DateToStringShort, 
TimeToStringLong, 
TimeToStringShort, 
DateTimeFormatLong, 
DateTimeFormatShort, 
DateTimeToStringLong, 
DateTimeToStringShort, 
MeasurementSystem 
};
virtual QVariant query(QueryType type, QVariant in) const;
virtual QLocale fallbackLocale() const;






# 104 "/home/eagle/qt-copy/include/QtCore/qlocale.h"
};


# 107 "/home/eagle/qt-copy/include/QtCore/qlocale.h"
struct QLocalePrivate;
class  QLocale
{

Q_ENUMS(Language)
Q_ENUMS(Country)
friend class QString;
friend class QByteArray;
friend class QIntValidator;
friend class QDoubleValidator;

public:
enum Language {
C = 1,
Abkhazian = 2,
Afan = 3,
Afar = 4,
Afrikaans = 5,
Albanian = 6,
Amharic = 7,
Arabic = 8,
Armenian = 9,
Assamese = 10,
Aymara = 11,
Azerbaijani = 12,
Bashkir = 13,
Basque = 14,
Bengali = 15,
Bhutani = 16,
Bihari = 17,
Bislama = 18,
Breton = 19,
Bulgarian = 20,
Burmese = 21,
Byelorussian = 22,
Cambodian = 23,
Catalan = 24,
Chinese = 25,
Corsican = 26,
Croatian = 27,
Czech = 28,
Danish = 29,
Dutch = 30,
English = 31,
Esperanto = 32,
Estonian = 33,
Faroese = 34,
FijiLanguage = 35,
Finnish = 36,
French = 37,
Frisian = 38,
Gaelic = 39,
Galician = 40,
Georgian = 41,
German = 42,
Greek = 43,
Greenlandic = 44,
Guarani = 45,
Gujarati = 46,
Hausa = 47,
Hebrew = 48,
Hindi = 49,
Hungarian = 50,
Icelandic = 51,
Indonesian = 52,
Interlingua = 53,
Interlingue = 54,
Inuktitut = 55,
Inupiak = 56,
Irish = 57,
Italian = 58,
Japanese = 59,
Javanese = 60,
Kannada = 61,
Kashmiri = 62,
Kazakh = 63,
Kinyarwanda = 64,
Kirghiz = 65,
Korean = 66,
Kurdish = 67,
Kurundi = 68,
Laothian = 69,
Latin = 70,
Latvian = 71,
Lingala = 72,
Lithuanian = 73,
Macedonian = 74,
Malagasy = 75,
Malay = 76,
Malayalam = 77,
Maltese = 78,
Maori = 79,
Marathi = 80,
Moldavian = 81,
Mongolian = 82,
NauruLanguage = 83,
Nepali = 84,
Norwegian = 85,
NorwegianBokmal = Norwegian,
Occitan = 86,
Oriya = 87,
Pashto = 88,
Persian = 89,
Polish = 90,
Portuguese = 91,
Punjabi = 92,
Quechua = 93,
RhaetoRomance = 94,
Romanian = 95,
Russian = 96,
Samoan = 97,
Sangho = 98,
Sanskrit = 99,
Serbian = 100,
SerboCroatian = 101,
Sesotho = 102,
Setswana = 103,
Shona = 104,
Sindhi = 105,
Singhalese = 106,
Siswati = 107,
Slovak = 108,
Slovenian = 109,
Somali = 110,
Spanish = 111,
Sundanese = 112,
Swahili = 113,
Swedish = 114,
Tagalog = 115,
Tajik = 116,
Tamil = 117,
Tatar = 118,
Telugu = 119,
Thai = 120,
Tibetan = 121,
Tigrinya = 122,
TongaLanguage = 123,
Tsonga = 124,
Turkish = 125,
Turkmen = 126,
Twi = 127,
Uigur = 128,
Ukrainian = 129,
Urdu = 130,
Uzbek = 131,
Vietnamese = 132,
Volapuk = 133,
Welsh = 134,
Wolof = 135,
Xhosa = 136,
Yiddish = 137,
Yoruba = 138,
Zhuang = 139,
Zulu = 140,
NorwegianNynorsk = 141,
Nynorsk = NorwegianNynorsk, 
Bosnian = 142,
Divehi = 143,
Manx = 144,
Cornish = 145,
Akan = 146,
Konkani = 147,
Ga = 148,
Igbo = 149,
Kamba = 150,
Syriac = 151,
Blin = 152,
Geez = 153,
Koro = 154,
Sidamo = 155,
Atsam = 156,
Tigre = 157,
Jju = 158,
Friulian = 159,
Venda = 160,
Ewe = 161,
Walamo = 162,
Hawaiian = 163,
Tyap = 164,
Chewa = 165,
LastLanguage = Chewa
};

enum Country {
AnyCountry = 0,
Afghanistan = 1,
Albania = 2,
Algeria = 3,
AmericanSamoa = 4,
Andorra = 5,
Angola = 6,
Anguilla = 7,
Antarctica = 8,
AntiguaAndBarbuda = 9,
Argentina = 10,
Armenia = 11,
Aruba = 12,
Australia = 13,
Austria = 14,
Azerbaijan = 15,
Bahamas = 16,
Bahrain = 17,
Bangladesh = 18,
Barbados = 19,
Belarus = 20,
Belgium = 21,
Belize = 22,
Benin = 23,
Bermuda = 24,
Bhutan = 25,
Bolivia = 26,
BosniaAndHerzegowina = 27,
Botswana = 28,
BouvetIsland = 29,
Brazil = 30,
BritishIndianOceanTerritory = 31,
BruneiDarussalam = 32,
Bulgaria = 33,
BurkinaFaso = 34,
Burundi = 35,
Cambodia = 36,
Cameroon = 37,
Canada = 38,
CapeVerde = 39,
CaymanIslands = 40,
CentralAfricanRepublic = 41,
Chad = 42,
Chile = 43,
China = 44,
ChristmasIsland = 45,
CocosIslands = 46,
Colombia = 47,
Comoros = 48,
DemocraticRepublicOfCongo = 49,
PeoplesRepublicOfCongo = 50,
CookIslands = 51,
CostaRica = 52,
IvoryCoast = 53,
Croatia = 54,
Cuba = 55,
Cyprus = 56,
CzechRepublic = 57,
Denmark = 58,
Djibouti = 59,
Dominica = 60,
DominicanRepublic = 61,
EastTimor = 62,
Ecuador = 63,
Egypt = 64,
ElSalvador = 65,
EquatorialGuinea = 66,
Eritrea = 67,
Estonia = 68,
Ethiopia = 69,
FalklandIslands = 70,
FaroeIslands = 71,
FijiCountry = 72,
Finland = 73,
France = 74,
MetropolitanFrance = 75,
FrenchGuiana = 76,
FrenchPolynesia = 77,
FrenchSouthernTerritories = 78,
Gabon = 79,
Gambia = 80,
Georgia = 81,
Germany = 82,
Ghana = 83,
Gibraltar = 84,
Greece = 85,
Greenland = 86,
Grenada = 87,
Guadeloupe = 88,
Guam = 89,
Guatemala = 90,
Guinea = 91,
GuineaBissau = 92,
Guyana = 93,
Haiti = 94,
HeardAndMcDonaldIslands = 95,
Honduras = 96,
HongKong = 97,
Hungary = 98,
Iceland = 99,
India = 100,
Indonesia = 101,
Iran = 102,
Iraq = 103,
Ireland = 104,
Israel = 105,
Italy = 106,
Jamaica = 107,
Japan = 108,
Jordan = 109,
Kazakhstan = 110,
Kenya = 111,
Kiribati = 112,
DemocraticRepublicOfKorea = 113,
RepublicOfKorea = 114,
Kuwait = 115,
Kyrgyzstan = 116,
Lao = 117,
Latvia = 118,
Lebanon = 119,
Lesotho = 120,
Liberia = 121,
LibyanArabJamahiriya = 122,
Liechtenstein = 123,
Lithuania = 124,
Luxembourg = 125,
Macau = 126,
Macedonia = 127,
Madagascar = 128,
Malawi = 129,
Malaysia = 130,
Maldives = 131,
Mali = 132,
Malta = 133,
MarshallIslands = 134,
Martinique = 135,
Mauritania = 136,
Mauritius = 137,
Mayotte = 138,
Mexico = 139,
Micronesia = 140,
Moldova = 141,
Monaco = 142,
Mongolia = 143,
Montserrat = 144,
Morocco = 145,
Mozambique = 146,
Myanmar = 147,
Namibia = 148,
NauruCountry = 149,
Nepal = 150,
Netherlands = 151,
NetherlandsAntilles = 152,
NewCaledonia = 153,
NewZealand = 154,
Nicaragua = 155,
Niger = 156,
Nigeria = 157,
Niue = 158,
NorfolkIsland = 159,
NorthernMarianaIslands = 160,
Norway = 161,
Oman = 162,
Pakistan = 163,
Palau = 164,
PalestinianTerritory = 165,
Panama = 166,
PapuaNewGuinea = 167,
Paraguay = 168,
Peru = 169,
Philippines = 170,
Pitcairn = 171,
Poland = 172,
Portugal = 173,
PuertoRico = 174,
Qatar = 175,
Reunion = 176,
Romania = 177,
RussianFederation = 178,
Rwanda = 179,
SaintKittsAndNevis = 180,
StLucia = 181,
StVincentAndTheGrenadines = 182,
Samoa = 183,
SanMarino = 184,
SaoTomeAndPrincipe = 185,
SaudiArabia = 186,
Senegal = 187,
Seychelles = 188,
SierraLeone = 189,
Singapore = 190,
Slovakia = 191,
Slovenia = 192,
SolomonIslands = 193,
Somalia = 194,
SouthAfrica = 195,
SouthGeorgiaAndTheSouthSandwichIslands = 196,
Spain = 197,
SriLanka = 198,
StHelena = 199,
StPierreAndMiquelon = 200,
Sudan = 201,
Suriname = 202,
SvalbardAndJanMayenIslands = 203,
Swaziland = 204,
Sweden = 205,
Switzerland = 206,
SyrianArabRepublic = 207,
Taiwan = 208,
Tajikistan = 209,
Tanzania = 210,
Thailand = 211,
Togo = 212,
Tokelau = 213,
TongaCountry = 214,
TrinidadAndTobago = 215,
Tunisia = 216,
Turkey = 217,
Turkmenistan = 218,
TurksAndCaicosIslands = 219,
Tuvalu = 220,
Uganda = 221,
Ukraine = 222,
UnitedArabEmirates = 223,
UnitedKingdom = 224,
UnitedStates = 225,
UnitedStatesMinorOutlyingIslands = 226,
Uruguay = 227,
Uzbekistan = 228,
Vanuatu = 229,
VaticanCityState = 230,
Venezuela = 231,
VietNam = 232,
BritishVirginIslands = 233,
USVirginIslands = 234,
WallisAndFutunaIslands = 235,
WesternSahara = 236,
Yemen = 237,
Yugoslavia = 238,
Zambia = 239,
Zimbabwe = 240,
SerbiaAndMontenegro = 241,
LastCountry = SerbiaAndMontenegro
};

enum MeasurementSystem { MetricSystem, ImperialSystem };

enum FormatType { LongFormat, ShortFormat };
enum NumberOption { OmitGroupSeparator = 0x01, RejectGroupSeparator = 0x02 };
typedef QFlags<NumberOption> NumberOptions;

QLocale();
QLocale(const QString &name);
QLocale(Language language, Country country = AnyCountry);
QLocale(const QLocale &other);

QLocale &operator=(const QLocale &other);

Language language() const;
Country country() const;
QString name() const;

short toShort(const QString &s, bool *ok = 0, int base = 0) const;
ushort toUShort(const QString &s, bool *ok = 0, int base = 0) const;
int toInt(const QString &s, bool *ok = 0, int base = 0) const;
uint toUInt(const QString &s, bool *ok = 0, int base = 0) const;
qlonglong toLongLong(const QString &s, bool *ok = 0, int base = 0) const;
qlonglong toULongLong(const QString &s, bool *ok = 0, int base = 0) const;
float toFloat(const QString &s, bool *ok = 0) const;
double toDouble(const QString &s, bool *ok = 0) const;

QString toString(qlonglong i) const;
QString toString(qulonglong i) const;
inline QString toString(short i) const;
inline QString toString(ushort i) const;
inline QString toString(int i) const;
inline QString toString(uint i) const;
QString toString(double i, char f = 'g', int prec = 6) const;
inline QString toString(float i, char f = 'g', int prec = 6) const;
QString toString(const QDate &date, const QString &formatStr) const;
QString toString(const QDate &date, FormatType format = LongFormat) const;
QString toString(const QTime &time, const QString &formatStr) const;
QString toString(const QTime &time, FormatType format = LongFormat) const;
QString toString(const QDateTime &dateTime, FormatType format = LongFormat) const;
QString toString(const QDateTime &dateTime, const QString &format) const;

QString dateFormat(FormatType format = LongFormat) const;
QString timeFormat(FormatType format = LongFormat) const;
QString dateTimeFormat(FormatType format = LongFormat) const;

# 581 "/home/eagle/qt-copy/include/QtCore/qlocale.h"
QDate toDate(const QString &string, FormatType = LongFormat) const;
QTime toTime(const QString &string, FormatType = LongFormat) const;
QDateTime toDateTime(const QString &string, FormatType format = LongFormat) const;
QDate toDate(const QString &string, const QString &format) const;
QTime toTime(const QString &string, const QString &format) const;
QDateTime toDateTime(const QString &string, const QString &format) const;


# 589 "/home/eagle/qt-copy/include/QtCore/qlocale.h"
QChar decimalPoint() const;
QChar groupSeparator() const;
QChar percent() const;
QChar zeroDigit() const;
QChar negativeSign() const;
QChar exponential() const;

QString monthName(int, FormatType format = LongFormat) const;
QString dayName(int, FormatType format = LongFormat) const;

MeasurementSystem measurementSystem() const;

inline bool operator==(const QLocale &other) const;
inline bool operator!=(const QLocale &other) const;

static QString languageToString(Language language);
static QString countryToString(Country country);
static void setDefault(const QLocale &locale);

static QLocale c() { return QLocale(C); }
static QLocale system();

static QList<Country> countriesForLanguage(Language lang);

void setNumberOptions(NumberOptions options);
NumberOptions numberOptions() const;


struct Data {
quint16 index;
quint16 numberOptions;
}



# 624 "/home/eagle/qt-copy/include/QtCore/qlocale.h"
;
private:
friend struct QLocalePrivate;


union {
void *v;
Data p;
};
const QLocalePrivate *d() const;
};
template <> class QTypeInfo<QLocale> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QLocale)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QLocale"; } };
inline QFlags<QLocale::NumberOptions::enum_type> operator|(QLocale::NumberOptions::enum_type f1, QLocale::NumberOptions::enum_type f2) { return QFlags<QLocale::NumberOptions::enum_type>(f1) | f2; } inline QFlags<QLocale::NumberOptions::enum_type> operator|(QLocale::NumberOptions::enum_type f1, QFlags<QLocale::NumberOptions::enum_type> f2) { return f2 | f1; }

inline QString QLocale::toString(short i) const
{ return toString(qlonglong(i)); }
inline QString QLocale::toString(ushort i) const
{ return toString(qulonglong(i)); }
inline QString QLocale::toString(int i) const
{ return toString(qlonglong(i)); }
inline QString QLocale::toString(uint i) const
{ return toString(qulonglong(i)); }
inline QString QLocale::toString(float i, char f, int prec) const
{ return toString(double(i), f, prec); }
inline bool QLocale::operator==(const QLocale &other) const
{ return d() == other.d() && numberOptions() == other.numberOptions(); }
inline bool QLocale::operator!=(const QLocale &other) const
{ return d() != other.d() || numberOptions() != other.numberOptions(); }


# 654 "/home/eagle/qt-copy/include/QtCore/qlocale.h"
 QDataStream &operator<<(QDataStream &, const QLocale &);
 QDataStream &operator>>(QDataStream &, QLocale &);


# 658 "/home/eagle/qt-copy/include/QtCore/qlocale.h"





# 48 "/home/eagle/qt-copy/include/QtCore/qresource.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"
















































































































































































































































# 49 "/home/eagle/qt-copy/include/QtCore/qresource.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qlist.h"











































































































































































































































































































































































































































































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtCore/qresource.h"


# 52 "/home/eagle/qt-copy/include/QtCore/qresource.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class QResourcePrivate;

class  QResource
{
public:
QResource(const QString &file=QString(), const QLocale &locale=QLocale());
~QResource();

void setFileName(const QString &file);
QString fileName() const;
QString absoluteFilePath() const;

void setLocale(const QLocale &locale);
QLocale locale() const;

bool isValid() const;

bool isCompressed() const;
qint64 size() const;
const uchar *data() const;

static void addSearchPath(const QString &path);
static QStringList searchPaths();

static bool registerResource(const QString &rccFilename, const QString &resourceRoot=QString());
static bool unregisterResource(const QString &rccFilename, const QString &resourceRoot=QString());

static bool registerResource(const uchar *rccData, const QString &resourceRoot=QString());
static bool unregisterResource(const uchar *rccData, const QString &resourceRoot=QString());

protected:
friend class QResourceFileEngine;
friend class QResourceFileEngineIterator;
bool isDir() const;
inline bool isFile() const { return !isDir(); }
QStringList children() const;

protected:
QResourcePrivate *d_ptr;

private:
inline QResourcePrivate* d_func() { return reinterpret_cast<QResourcePrivate *>(d_ptr); } inline const QResourcePrivate* d_func() const { return reinterpret_cast<const QResourcePrivate *>(d_ptr); } friend class QResourcePrivate;
};






# 42 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsettings.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qsettings.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qvariant.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qatomic.h"

























































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qvariant.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"












































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtCore/qvariant.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qlist.h"











































































































































































































































































































































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtCore/qvariant.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qatomic.h"

























































































































































































































# 48 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"



# 1 "/home/eagle/qt-copy/include/QtCore/qdatastream.h"









































































































































































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"







# 58 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class  QMetaType {
public:
enum Type {

Void = 0, Bool = 1, Int = 2, UInt = 3, LongLong = 4, ULongLong = 5,
Double = 6, QChar = 7, QVariantMap = 8, QVariantList = 9,
QString = 10, QStringList = 11, QByteArray = 12,
QBitArray = 13, QDate = 14, QTime = 15, QDateTime = 16, QUrl = 17,
QLocale = 18, QRect = 19, QRectF = 20, QSize = 21, QSizeF = 22,
QLine = 23, QLineF = 24, QPoint = 25, QPointF = 26, QRegExp = 27,
LastCoreType = 27 ,

FirstGuiType = 63 ,



# 80 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"
QFont = 64, QPixmap = 65, QBrush = 66, QColor = 67, QPalette = 68,
QIcon = 69, QImage = 70, QPolygon = 71, QRegion = 72, QBitmap = 73,
QCursor = 74, QSizePolicy = 75, QKeySequence = 76, QPen = 77,
QTextLength = 78, QTextFormat = 79, QMatrix = 80, QTransform = 81,
LastGuiType = 81 ,

FirstCoreExtType = 128 ,
VoidStar = 128, Long = 129, Short = 130, Char = 131, ULong = 132,
UShort = 133, UChar = 134, Float = 135, QObjectStar = 136, QWidgetStar = 137,
LastCoreExtType = 137 ,

User = 256
};

typedef void (*Destructor)(void *);
typedef void *(*Constructor)(const void *);


# 98 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"
typedef void (*SaveOperator)(QDataStream &, const void *);
typedef void (*LoadOperator)(QDataStream &, void *);
static void registerStreamOperators(const char *typeName, SaveOperator saveOp,
LoadOperator loadOp);

# 103 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"
static int registerType(const char *typeName, Destructor destructor,
Constructor constructor);
static int type(const char *typeName);
static const char *typeName(int type);
static bool isRegistered(int type);
static void *construct(int type, const void *copy = 0);
static void destroy(int type, void *data);
static void unregisterType(const char *typeName);


# 113 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"
static bool save(QDataStream &stream, int type, const void *data);
static bool load(QDataStream &stream, int type, void *data);

# 116 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"
};

template <typename T>
void qMetaTypeDeleteHelper(T *t)
{
delete t;
}

template <typename T>
void *qMetaTypeConstructHelper(const T *t)
{
if (!t)
return new T;
return new T(*static_cast<const T*>(t));
}


# 133 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"
template <typename T>
void qMetaTypeSaveHelper(QDataStream &stream, const T *t)
{
stream << *t;
}

template <typename T>
void qMetaTypeLoadHelper(QDataStream &stream, T *t)
{
stream >> *t;
}


# 146 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"
template <typename T>
int qRegisterMetaType(const char *typeName

# 149 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"
, T *  = 0

# 151 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"
)
{
typedef void*(*ConstructPtr)(const T*);
ConstructPtr cptr = qMetaTypeConstructHelper<T>;
typedef void(*DeletePtr)(T*);
DeletePtr dptr = qMetaTypeDeleteHelper<T>;

return QMetaType::registerType(typeName, reinterpret_cast<QMetaType::Destructor>(dptr),
reinterpret_cast<QMetaType::Constructor>(cptr));
}


# 163 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"
template <typename T>
void qRegisterMetaTypeStreamOperators(const char *typeName

# 166 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"
, T *  = 0

# 168 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"
)
{
typedef void(*SavePtr)(QDataStream &, const T *);
typedef void(*LoadPtr)(QDataStream &, T *);
SavePtr sptr = qMetaTypeSaveHelper<T>;
LoadPtr lptr = qMetaTypeLoadHelper<T>;

qRegisterMetaType<T>(typeName);
QMetaType::registerStreamOperators(typeName, reinterpret_cast<QMetaType::SaveOperator>(sptr),
reinterpret_cast<QMetaType::LoadOperator>(lptr));
}


# 181 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"
template <typename T>
struct QMetaTypeId
{
enum { Defined = 0 };
};

template <typename T>
struct QMetaTypeId2
{
enum { Defined = QMetaTypeId<T>::Defined };
static inline int qt_metatype_id() { return QMetaTypeId<T>::qt_metatype_id(); }
};

template <typename T>
inline int qMetaTypeId(

# 197 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"
T *  = 0

# 199 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"
)
{
return QMetaTypeId2<T>::qt_metatype_id();
}

template <typename T>
inline int qRegisterMetaType(

# 207 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"
T * dummy = 0

# 209 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"
)
{



# 214 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"
return qMetaTypeId(dummy);

# 216 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"
}





# 243 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"
class QString;
class QByteArray;
class QChar;
class QStringList;
class QBitArray;
class QDate;
class QTime;
class QDateTime;
class QUrl;
class QLocale;
class QRect;
class QRectF;
class QSize;
class QSizeF;
class QLine;
class QLineF;
class QPoint;
class QPointF;

# 262 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"
class QRegExp;

# 264 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"
class QWidget;
class QObject;




# 270 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"
class QFont;
class QPixmap;
class QBrush;
class QColor;
class QPalette;
class QIcon;
class QImage;
class QPolygon;
class QRegion;
class QBitmap;
class QCursor;
class QSizePolicy;
class QKeySequence;
class QPen;
class QTextLength;
class QTextFormat;
class QMatrix;
class QTransform;



 template<> struct QMetaTypeId2<QString> { enum { Defined = 1, MetaType = QMetaType::QString }; static inline int qt_metatype_id() { return QMetaType::QString; } }; 
 template<> struct QMetaTypeId2<int> { enum { Defined = 1, MetaType = QMetaType::Int }; static inline int qt_metatype_id() { return QMetaType::Int; } }; 
 template<> struct QMetaTypeId2<uint> { enum { Defined = 1, MetaType = QMetaType::UInt }; static inline int qt_metatype_id() { return QMetaType::UInt; } }; 
 template<> struct QMetaTypeId2<bool> { enum { Defined = 1, MetaType = QMetaType::Bool }; static inline int qt_metatype_id() { return QMetaType::Bool; } }; 
 template<> struct QMetaTypeId2<double> { enum { Defined = 1, MetaType = QMetaType::Double }; static inline int qt_metatype_id() { return QMetaType::Double; } }; 
 template<> struct QMetaTypeId2<QByteArray> { enum { Defined = 1, MetaType = QMetaType::QByteArray }; static inline int qt_metatype_id() { return QMetaType::QByteArray; } }; 
 template<> struct QMetaTypeId2<QChar> { enum { Defined = 1, MetaType = QMetaType::QChar }; static inline int qt_metatype_id() { return QMetaType::QChar; } }; 
 template<> struct QMetaTypeId2<long> { enum { Defined = 1, MetaType = QMetaType::Long }; static inline int qt_metatype_id() { return QMetaType::Long; } }; 
 template<> struct QMetaTypeId2<short> { enum { Defined = 1, MetaType = QMetaType::Short }; static inline int qt_metatype_id() { return QMetaType::Short; } }; 
 template<> struct QMetaTypeId2<char> { enum { Defined = 1, MetaType = QMetaType::Char }; static inline int qt_metatype_id() { return QMetaType::Char; } }; 
 template<> struct QMetaTypeId2<ulong> { enum { Defined = 1, MetaType = QMetaType::ULong }; static inline int qt_metatype_id() { return QMetaType::ULong; } }; 
 template<> struct QMetaTypeId2<ushort> { enum { Defined = 1, MetaType = QMetaType::UShort }; static inline int qt_metatype_id() { return QMetaType::UShort; } }; 
 template<> struct QMetaTypeId2<uchar> { enum { Defined = 1, MetaType = QMetaType::UChar }; static inline int qt_metatype_id() { return QMetaType::UChar; } }; 
 template<> struct QMetaTypeId2<float> { enum { Defined = 1, MetaType = QMetaType::Float }; static inline int qt_metatype_id() { return QMetaType::Float; } }; 
 template<> struct QMetaTypeId2<QObject *> { enum { Defined = 1, MetaType = QMetaType::QObjectStar }; static inline int qt_metatype_id() { return QMetaType::QObjectStar; } }; 
 template<> struct QMetaTypeId2<QWidget *> { enum { Defined = 1, MetaType = QMetaType::QWidgetStar }; static inline int qt_metatype_id() { return QMetaType::QWidgetStar; } }; 
 template<> struct QMetaTypeId2<void *> { enum { Defined = 1, MetaType = QMetaType::VoidStar }; static inline int qt_metatype_id() { return QMetaType::VoidStar; } }; 
 template<> struct QMetaTypeId2<qlonglong> { enum { Defined = 1, MetaType = QMetaType::LongLong }; static inline int qt_metatype_id() { return QMetaType::LongLong; } }; 
 template<> struct QMetaTypeId2<qulonglong> { enum { Defined = 1, MetaType = QMetaType::ULongLong }; static inline int qt_metatype_id() { return QMetaType::ULongLong; } }; 
 template<> struct QMetaTypeId2<QStringList> { enum { Defined = 1, MetaType = QMetaType::QStringList }; static inline int qt_metatype_id() { return QMetaType::QStringList; } }; 
 template<> struct QMetaTypeId2<QBitArray> { enum { Defined = 1, MetaType = QMetaType::QBitArray }; static inline int qt_metatype_id() { return QMetaType::QBitArray; } }; 
 template<> struct QMetaTypeId2<QDate> { enum { Defined = 1, MetaType = QMetaType::QDate }; static inline int qt_metatype_id() { return QMetaType::QDate; } }; 
 template<> struct QMetaTypeId2<QTime> { enum { Defined = 1, MetaType = QMetaType::QTime }; static inline int qt_metatype_id() { return QMetaType::QTime; } }; 
 template<> struct QMetaTypeId2<QDateTime> { enum { Defined = 1, MetaType = QMetaType::QDateTime }; static inline int qt_metatype_id() { return QMetaType::QDateTime; } }; 
 template<> struct QMetaTypeId2<QUrl> { enum { Defined = 1, MetaType = QMetaType::QUrl }; static inline int qt_metatype_id() { return QMetaType::QUrl; } }; 
 template<> struct QMetaTypeId2<QLocale> { enum { Defined = 1, MetaType = QMetaType::QLocale }; static inline int qt_metatype_id() { return QMetaType::QLocale; } }; 
 template<> struct QMetaTypeId2<QRect> { enum { Defined = 1, MetaType = QMetaType::QRect }; static inline int qt_metatype_id() { return QMetaType::QRect; } }; 
 template<> struct QMetaTypeId2<QRectF> { enum { Defined = 1, MetaType = QMetaType::QRectF }; static inline int qt_metatype_id() { return QMetaType::QRectF; } }; 
 template<> struct QMetaTypeId2<QSize> { enum { Defined = 1, MetaType = QMetaType::QSize }; static inline int qt_metatype_id() { return QMetaType::QSize; } }; 
 template<> struct QMetaTypeId2<QSizeF> { enum { Defined = 1, MetaType = QMetaType::QSizeF }; static inline int qt_metatype_id() { return QMetaType::QSizeF; } }; 
 template<> struct QMetaTypeId2<QLine> { enum { Defined = 1, MetaType = QMetaType::QLine }; static inline int qt_metatype_id() { return QMetaType::QLine; } }; 
 template<> struct QMetaTypeId2<QLineF> { enum { Defined = 1, MetaType = QMetaType::QLineF }; static inline int qt_metatype_id() { return QMetaType::QLineF; } }; 
 template<> struct QMetaTypeId2<QPoint> { enum { Defined = 1, MetaType = QMetaType::QPoint }; static inline int qt_metatype_id() { return QMetaType::QPoint; } }; 
 template<> struct QMetaTypeId2<QPointF> { enum { Defined = 1, MetaType = QMetaType::QPointF }; static inline int qt_metatype_id() { return QMetaType::QPointF; } }; 

# 326 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"
 template<> struct QMetaTypeId2<QRegExp> { enum { Defined = 1, MetaType = QMetaType::QRegExp }; static inline int qt_metatype_id() { return QMetaType::QRegExp; } }; 





# 332 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"
 template<> struct QMetaTypeId2<QFont> { enum { Defined = 1, MetaType = QMetaType::QFont }; static inline int qt_metatype_id() { return QMetaType::QFont; } }; 
 template<> struct QMetaTypeId2<QPixmap> { enum { Defined = 1, MetaType = QMetaType::QPixmap }; static inline int qt_metatype_id() { return QMetaType::QPixmap; } }; 
 template<> struct QMetaTypeId2<QBrush> { enum { Defined = 1, MetaType = QMetaType::QBrush }; static inline int qt_metatype_id() { return QMetaType::QBrush; } }; 
 template<> struct QMetaTypeId2<QColor> { enum { Defined = 1, MetaType = QMetaType::QColor }; static inline int qt_metatype_id() { return QMetaType::QColor; } }; 
 template<> struct QMetaTypeId2<QPalette> { enum { Defined = 1, MetaType = QMetaType::QPalette }; static inline int qt_metatype_id() { return QMetaType::QPalette; } }; 
 template<> struct QMetaTypeId2<QIcon> { enum { Defined = 1, MetaType = QMetaType::QIcon }; static inline int qt_metatype_id() { return QMetaType::QIcon; } }; 
 template<> struct QMetaTypeId2<QImage> { enum { Defined = 1, MetaType = QMetaType::QImage }; static inline int qt_metatype_id() { return QMetaType::QImage; } }; 
 template<> struct QMetaTypeId2<QPolygon> { enum { Defined = 1, MetaType = QMetaType::QPolygon }; static inline int qt_metatype_id() { return QMetaType::QPolygon; } }; 
 template<> struct QMetaTypeId2<QRegion> { enum { Defined = 1, MetaType = QMetaType::QRegion }; static inline int qt_metatype_id() { return QMetaType::QRegion; } }; 
 template<> struct QMetaTypeId2<QBitmap> { enum { Defined = 1, MetaType = QMetaType::QBitmap }; static inline int qt_metatype_id() { return QMetaType::QBitmap; } }; 
 template<> struct QMetaTypeId2<QCursor> { enum { Defined = 1, MetaType = QMetaType::QCursor }; static inline int qt_metatype_id() { return QMetaType::QCursor; } }; 
 template<> struct QMetaTypeId2<QSizePolicy> { enum { Defined = 1, MetaType = QMetaType::QSizePolicy }; static inline int qt_metatype_id() { return QMetaType::QSizePolicy; } }; 
 template<> struct QMetaTypeId2<QKeySequence> { enum { Defined = 1, MetaType = QMetaType::QKeySequence }; static inline int qt_metatype_id() { return QMetaType::QKeySequence; } }; 
 template<> struct QMetaTypeId2<QPen> { enum { Defined = 1, MetaType = QMetaType::QPen }; static inline int qt_metatype_id() { return QMetaType::QPen; } }; 
 template<> struct QMetaTypeId2<QTextLength> { enum { Defined = 1, MetaType = QMetaType::QTextLength }; static inline int qt_metatype_id() { return QMetaType::QTextLength; } }; 
 template<> struct QMetaTypeId2<QTextFormat> { enum { Defined = 1, MetaType = QMetaType::QTextFormat }; static inline int qt_metatype_id() { return QMetaType::QTextFormat; } }; 
 template<> struct QMetaTypeId2<QMatrix> { enum { Defined = 1, MetaType = QMetaType::QMatrix }; static inline int qt_metatype_id() { return QMetaType::QMatrix; } }; 
 template<> struct QMetaTypeId2<QTransform> { enum { Defined = 1, MetaType = QMetaType::QTransform }; static inline int qt_metatype_id() { return QMetaType::QTransform; } }; 




# 50 "/home/eagle/qt-copy/include/QtCore/qvariant.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qmap.h"






















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtCore/qvariant.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 52 "/home/eagle/qt-copy/include/QtCore/qvariant.h"


# 54 "/home/eagle/qt-copy/include/QtCore/qvariant.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class QBitArray;
class QDataStream;
class QDate;
class QDateTime;
class QLine;
class QLineF;
class QLocale;
class QMatrix;
class QTransform;
class QStringList;
class QTime;
class QPoint;
class QPointF;
class QSize;
class QSizeF;
class QRect;
class QRectF;

# 78 "/home/eagle/qt-copy/include/QtCore/qvariant.h"
class QRegExp;

# 80 "/home/eagle/qt-copy/include/QtCore/qvariant.h"
class QTextFormat;
class QTextLength;
class QUrl;
class QVariant;
class QVariantComparisonHelper;


# 87 "/home/eagle/qt-copy/include/QtCore/qvariant.h"
template <typename T>
inline QVariant qVariantFromValue(const T &);

template <typename T>
inline void qVariantSetValue(QVariant &, const T &);

template<typename T>
inline T qVariantValue(const QVariant &);

template<typename T>
inline bool qVariantCanConvert(const QVariant &);


# 100 "/home/eagle/qt-copy/include/QtCore/qvariant.h"
class  QVariant
{
public:
enum Type {
Invalid = 0,

Bool = 1,
Int = 2,
UInt = 3,
LongLong = 4,
ULongLong = 5,
Double = 6,
Char = 7,
Map = 8,
List = 9,
String = 10,
StringList = 11,
ByteArray = 12,
BitArray = 13,
Date = 14,
Time = 15,
DateTime = 16,
Url = 17,
Locale = 18,
Rect = 19,
RectF = 20,
Size = 21,
SizeF = 22,
Line = 23,
LineF = 24,
Point = 25,
PointF = 26,
RegExp = 27,
LastCoreType = RegExp,





# 139 "/home/eagle/qt-copy/include/QtCore/qvariant.h"
Font = 64,
Pixmap = 65,
Brush = 66,
Color = 67,
Palette = 68,
Icon = 69,
Image = 70,
Polygon = 71,
Region = 72,
Bitmap = 73,
Cursor = 74,
SizePolicy = 75,
KeySequence = 76,
Pen = 77,
TextLength = 78,
TextFormat = 79,
Matrix = 80,
Transform = 81,
LastGuiType = Transform,

UserType = 127,





# 165 "/home/eagle/qt-copy/include/QtCore/qvariant.h"
LastType = 0xffffffff 
};

inline QVariant();
~QVariant();
QVariant(Type type);
QVariant(int typeOrUserType, const void *copy);
QVariant(const QVariant &other);


# 175 "/home/eagle/qt-copy/include/QtCore/qvariant.h"
QVariant(QDataStream &s);


# 178 "/home/eagle/qt-copy/include/QtCore/qvariant.h"
QVariant(int i);
QVariant(uint ui);
QVariant(qlonglong ll);
QVariant(qulonglong ull);
QVariant(bool b);
QVariant(double d);

# 185 "/home/eagle/qt-copy/include/QtCore/qvariant.h"
 QVariant(const char *str);


# 188 "/home/eagle/qt-copy/include/QtCore/qvariant.h"
QVariant(const QByteArray &bytearray);
QVariant(const QBitArray &bitarray);
QVariant(const QString &string);
QVariant(const QLatin1String &string);
QVariant(const QStringList &stringlist);
QVariant(const QChar &qchar);
QVariant(const QDate &date);
QVariant(const QTime &time);
QVariant(const QDateTime &datetime);
QVariant(const QList<QVariant> &list);
QVariant(const QMap<QString,QVariant> &map);

# 200 "/home/eagle/qt-copy/include/QtCore/qvariant.h"
QVariant(const QSize &size);
QVariant(const QSizeF &size);
QVariant(const QPoint &pt);
QVariant(const QPointF &pt);
QVariant(const QLine &line);
QVariant(const QLineF &line);
QVariant(const QRect &rect);
QVariant(const QRectF &rect);

# 209 "/home/eagle/qt-copy/include/QtCore/qvariant.h"
QVariant(const QUrl &url);
QVariant(const QLocale &locale);

# 212 "/home/eagle/qt-copy/include/QtCore/qvariant.h"
QVariant(const QRegExp &regExp);

# 214 "/home/eagle/qt-copy/include/QtCore/qvariant.h"
QVariant(Qt::GlobalColor color);

QVariant& operator=(const QVariant &other);

Type type() const;
int userType() const;
const char *typeName() const;

bool canConvert(Type t) const;
bool convert(Type t);








# 232 "/home/eagle/qt-copy/include/QtCore/qvariant.h"
inline bool isValid() const;
bool isNull() const;

void clear();

void detach();
inline bool isDetached() const;

int toInt(bool *ok = 0) const;
uint toUInt(bool *ok = 0) const;
qlonglong toLongLong(bool *ok = 0) const;
qulonglong toULongLong(bool *ok = 0) const;
bool toBool() const;
double toDouble(bool *ok = 0) const;
QByteArray toByteArray() const;
QBitArray toBitArray() const;
QString toString() const;
QStringList toStringList() const;
QChar toChar() const;
QDate toDate() const;
QTime toTime() const;
QDateTime toDateTime() const;
QList<QVariant> toList() const;
QMap<QString, QVariant> toMap() const;


# 258 "/home/eagle/qt-copy/include/QtCore/qvariant.h"
QPoint toPoint() const;
QPointF toPointF() const;
QRect toRect() const;
QSize toSize() const;
QSizeF toSizeF() const;
QLine toLine() const;
QLineF toLineF() const;
QRectF toRectF() const;

# 267 "/home/eagle/qt-copy/include/QtCore/qvariant.h"
QUrl toUrl() const;
QLocale toLocale() const;

# 270 "/home/eagle/qt-copy/include/QtCore/qvariant.h"
QRegExp toRegExp() const;
























# 295 "/home/eagle/qt-copy/include/QtCore/qvariant.h"
void load(QDataStream &ds);
void save(QDataStream &ds) const;

# 298 "/home/eagle/qt-copy/include/QtCore/qvariant.h"
static const char *typeToName(Type type);
static Type nameToType(const char *name);







# 307 "/home/eagle/qt-copy/include/QtCore/qvariant.h"
void *data();
const void *constData() const;
inline const void *data() const { return constData(); }


# 312 "/home/eagle/qt-copy/include/QtCore/qvariant.h"
template<typename T>
inline void setValue(const T &value);

template<typename T>
inline T value() const
{ return qVariantValue<T>(*this); }

template<typename T>
static inline QVariant fromValue(const T &value)
{ return qVariantFromValue(value); }

template<typename T>
bool canConvert() const
{ return qVariantCanConvert<T>(*this); }


# 328 "/home/eagle/qt-copy/include/QtCore/qvariant.h"
public:

# 330 "/home/eagle/qt-copy/include/QtCore/qvariant.h"
struct PrivateShared
{
inline PrivateShared() : ref(1) { }
inline PrivateShared(void *v) : ptr(v), ref(1) { }
void *ptr;
QAtomicInt ref;
};
struct Private
{
inline Private(): type(Invalid), is_shared(false), is_null(true) { data.ptr = 0; }
inline Private(const Private &other)
: data(other.data), type(other.type),
is_shared(other.is_shared), is_null(other.is_null)
{}
union Data
{
char c;
int i;
uint u;
bool b;
double d;
qlonglong ll;
qulonglong ull;
void *ptr;
PrivateShared *shared;
} data;
uint type : 30;
uint is_shared : 1;
uint is_null : 1;
};
public:
typedef void (*f_construct)(Private *, const void *);
typedef void (*f_clear)(Private *);
typedef bool (*f_null)(const Private *);

# 365 "/home/eagle/qt-copy/include/QtCore/qvariant.h"
typedef void (*f_load)(Private *, QDataStream &);
typedef void (*f_save)(const Private *, QDataStream &);

# 368 "/home/eagle/qt-copy/include/QtCore/qvariant.h"
typedef bool (*f_compare)(const Private *, const Private *);
typedef bool (*f_convert)(const QVariant::Private *d, Type t, void *, bool *);
typedef bool (*f_canConvert)(const QVariant::Private *d, Type t);
typedef void (*f_debugStream)(QDebug, const QVariant &);
struct Handler {
f_construct construct;
f_clear clear;
f_null isNull;

# 377 "/home/eagle/qt-copy/include/QtCore/qvariant.h"
f_load load;
f_save save;

# 380 "/home/eagle/qt-copy/include/QtCore/qvariant.h"
f_compare compare;
f_convert convert;
f_canConvert canConvert;
f_debugStream debugStream;
};


# 387 "/home/eagle/qt-copy/include/QtCore/qvariant.h"
inline bool operator==(const QVariant &v) const
{ return cmp(v); }
inline bool operator!=(const QVariant &v) const
{ return !cmp(v); }

protected:
friend inline bool qvariant_cast_helper(const QVariant &, QVariant::Type, void *);
friend int qRegisterGuiVariant();
friend int qUnregisterGuiVariant();
friend inline bool operator==(const QVariant &, const QVariantComparisonHelper &);

# 398 "/home/eagle/qt-copy/include/QtCore/qvariant.h"
friend  QDebug operator<<(QDebug, const QVariant &);

# 400 "/home/eagle/qt-copy/include/QtCore/qvariant.h"
Private d;

static const Handler *handler;

void create(int type, const void *copy);



# 408 "/home/eagle/qt-copy/include/QtCore/qvariant.h"
bool cmp(const QVariant &other) const;

private:





# 416 "/home/eagle/qt-copy/include/QtCore/qvariant.h"

inline QVariant(bool, int) { qt_noop(); }

# 419 "/home/eagle/qt-copy/include/QtCore/qvariant.h"
public:
typedef Private DataPtr;
inline DataPtr &data_ptr() { return d; }
};

typedef QList<QVariant> QVariantList;
typedef QMap<QString, QVariant> QVariantMap;

inline bool qvariant_cast_helper(const QVariant &v, QVariant::Type tp, void *ptr)
{ return QVariant::handler->convert(&v.d, tp, ptr, 0); }

template <typename T>
inline QVariant qVariantFromValue(const T &t)
{
return QVariant(qMetaTypeId<T>(reinterpret_cast<T *>(0)), &t);
}

template <>
inline QVariant qVariantFromValue(const QVariant &t) { return t; }

template <typename T>
inline void qVariantSetValue(QVariant &v, const T &t)
{
v = QVariant(qMetaTypeId<T>(reinterpret_cast<T *>(0)), &t);
}

inline QVariant::QVariant() {}
inline bool QVariant::isValid() const { return d.type != Invalid; }









































# 488 "/home/eagle/qt-copy/include/QtCore/qvariant.h"
template<typename T>
inline void QVariant::setValue(const T &avalue)
{ qVariantSetValue(*this, avalue); }



# 494 "/home/eagle/qt-copy/include/QtCore/qvariant.h"
 QDataStream& operator>> (QDataStream& s, QVariant& p);
 QDataStream& operator<< (QDataStream& s, const QVariant& p);
 QDataStream& operator>> (QDataStream& s, QVariant::Type& p);
 QDataStream& operator<< (QDataStream& s, const QVariant::Type p);


# 500 "/home/eagle/qt-copy/include/QtCore/qvariant.h"
inline bool QVariant::isDetached() const
{ return !d.is_shared || d.data.shared->ref == 1; }







# 509 "/home/eagle/qt-copy/include/QtCore/qvariant.h"



class QVariantComparisonHelper
{
public:
inline QVariantComparisonHelper(const QVariant &var)
: v(&var) {}
private:
friend inline bool operator==(const QVariant &, const QVariantComparisonHelper &);
const QVariant *v;
};

inline bool operator==(const QVariant &v1, const QVariantComparisonHelper &v2)
{
return v1.cmp(*v2.v);
}

inline bool operator!=(const QVariant &v1, const QVariantComparisonHelper &v2)
{
return !operator==(v1, v2);
}





























# 560 "/home/eagle/qt-copy/include/QtCore/qvariant.h"
template<typename T> T qvariant_cast(const QVariant &v)
{
const int vid = qMetaTypeId<T>(static_cast<T *>(0));
if (vid == v.userType())
return *reinterpret_cast<const T *>(v.constData());
if (vid < int(QMetaType::User)) {
T t;
if (qvariant_cast_helper(v, QVariant::Type(vid), &t))
return t;
}
return T();
}

template<typename T>
inline T qVariantValue(const QVariant &variant)
{ return qvariant_cast<T>(variant); }

template<typename T>
inline bool qVariantCanConvert(const QVariant &variant)
{
return variant.canConvert(static_cast<QVariant::Type>(
qMetaTypeId<T>(static_cast<T *>(0))));
}


# 585 "/home/eagle/qt-copy/include/QtCore/qvariant.h"
template <> inline bool qIsDetached<QVariant>(QVariant &t) { return t.isDetached(); } template <typename T> inline void qSwap(T &, T &); template <> inline void qSwap<QVariant>(QVariant &value1, QVariant &value2) { const QVariant::DataPtr t = value1.data_ptr(); value1.data_ptr() = value2.data_ptr(); value2.data_ptr() = t; }
template <> class QTypeInfo<QVariant> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QVariant)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QVariant"; } };


# 589 "/home/eagle/qt-copy/include/QtCore/qvariant.h"
 QDebug operator<<(QDebug, const QVariant &);
 QDebug operator<<(QDebug, const QVariant::Type);


# 593 "/home/eagle/qt-copy/include/QtCore/qvariant.h"


 template<> struct QMetaTypeId2<QVariantList> { enum { Defined = 1, MetaType = QMetaType::QVariantList }; static inline int qt_metatype_id() { return QMetaType::QVariantList; } }; 
 template<> struct QMetaTypeId2<QVariantMap> { enum { Defined = 1, MetaType = QMetaType::QVariantMap }; static inline int qt_metatype_id() { return QMetaType::QVariantMap; } }; 




# 48 "/home/eagle/qt-copy/include/QtCore/qsettings.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtCore/qsettings.h"


# 51 "/home/eagle/qt-copy/include/QtCore/qsettings.h"



typedef QtValidLicenseForCoreModule QtCoreModule;










# 65 "/home/eagle/qt-copy/include/QtCore/qsettings.h"






# 71 "/home/eagle/qt-copy/include/QtCore/qsettings.h"
class QIODevice;
class QSettingsPrivate;


# 75 "/home/eagle/qt-copy/include/QtCore/qsettings.h"
class  QSettings : public QObject



# 79 "/home/eagle/qt-copy/include/QtCore/qsettings.h"
{

# 81 "/home/eagle/qt-copy/include/QtCore/qsettings.h"
Q_OBJECT



# 85 "/home/eagle/qt-copy/include/QtCore/qsettings.h"
inline QSettingsPrivate* d_func() { return reinterpret_cast<QSettingsPrivate *>(d_ptr); } inline const QSettingsPrivate* d_func() const { return reinterpret_cast<const QSettingsPrivate *>(d_ptr); } friend class QSettingsPrivate;

public:
enum Status {
NoError = 0,
AccessError,
FormatError
};

enum Format {
NativeFormat,
IniFormat,

InvalidFormat = 16,
CustomFormat1,
CustomFormat2,
CustomFormat3,
CustomFormat4,
CustomFormat5,
CustomFormat6,
CustomFormat7,
CustomFormat8,
CustomFormat9,
CustomFormat10,
CustomFormat11,
CustomFormat12,
CustomFormat13,
CustomFormat14,
CustomFormat15,
CustomFormat16
};

enum Scope {
UserScope,
SystemScope





# 125 "/home/eagle/qt-copy/include/QtCore/qsettings.h"
};


# 128 "/home/eagle/qt-copy/include/QtCore/qsettings.h"
explicit QSettings(const QString &organization,
const QString &application = QString(), QObject *parent = 0);
QSettings(Scope scope, const QString &organization,
const QString &application = QString(), QObject *parent = 0);
QSettings(Format format, Scope scope, const QString &organization,
const QString &application = QString(), QObject *parent = 0);
QSettings(const QString &fileName, Format format, QObject *parent = 0);
explicit QSettings(QObject *parent = 0);









# 145 "/home/eagle/qt-copy/include/QtCore/qsettings.h"
~QSettings();

void clear();
void sync();
Status status() const;

void beginGroup(const QString &prefix);
void endGroup();
QString group() const;

int beginReadArray(const QString &prefix);
void beginWriteArray(const QString &prefix, int size = -1);
void endArray();
void setArrayIndex(int i);

QStringList allKeys() const;
QStringList childKeys() const;
QStringList childGroups() const;
bool isWritable() const;

void setValue(const QString &key, const QVariant &value);
QVariant value(const QString &key, const QVariant &defaultValue = QVariant()) const;

void remove(const QString &key);
bool contains(const QString &key) const;

void setFallbacksEnabled(bool b);
bool fallbacksEnabled() const;

QString fileName() const;
Format format() const;
Scope scope() const;
QString organizationName() const;
QString applicationName() const;

static void setDefaultFormat(Format format);
static Format defaultFormat();
static void setSystemIniPath(const QString &dir); 
static void setUserIniPath(const QString &dir); 
static void setPath(Format format, Scope scope, const QString &path);

typedef QMap<QString, QVariant> SettingsMap;
typedef bool (*ReadFunc)(QIODevice &device, SettingsMap &map);
typedef bool (*WriteFunc)(QIODevice &device, const SettingsMap &map);

static Format registerFormat(const QString &extension, ReadFunc readFunc, WriteFunc writeFunc,
Qt::CaseSensitivity caseSensitivity = Qt::CaseSensitive);


































































































# 290 "/home/eagle/qt-copy/include/QtCore/qsettings.h"
protected:

# 292 "/home/eagle/qt-copy/include/QtCore/qsettings.h"
bool event(QEvent *event);


# 295 "/home/eagle/qt-copy/include/QtCore/qsettings.h"
private:




# 300 "/home/eagle/qt-copy/include/QtCore/qsettings.h"
QSettings(const QSettings &); QSettings &operator=(const QSettings &);
};





# 307 "/home/eagle/qt-copy/include/QtCore/qsettings.h"



# 43 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtemporaryfile.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"






























































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qtemporaryfile.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qfile.h"














































































































































































































# 48 "/home/eagle/qt-copy/include/QtCore/qtemporaryfile.h"






# 54 "/home/eagle/qt-copy/include/QtCore/qtemporaryfile.h"




typedef QtValidLicenseForCoreModule QtCoreModule;



# 62 "/home/eagle/qt-copy/include/QtCore/qtemporaryfile.h"
class QTemporaryFilePrivate;

class  QTemporaryFile : public QFile
{

# 67 "/home/eagle/qt-copy/include/QtCore/qtemporaryfile.h"
Q_OBJECT

# 69 "/home/eagle/qt-copy/include/QtCore/qtemporaryfile.h"
inline QTemporaryFilePrivate* d_func() { return reinterpret_cast<QTemporaryFilePrivate *>(d_ptr); } inline const QTemporaryFilePrivate* d_func() const { return reinterpret_cast<const QTemporaryFilePrivate *>(d_ptr); } friend class QTemporaryFilePrivate;

public:
QTemporaryFile();
explicit QTemporaryFile(const QString &templateName);

# 75 "/home/eagle/qt-copy/include/QtCore/qtemporaryfile.h"
explicit QTemporaryFile(QObject *parent);
QTemporaryFile(const QString &templateName, QObject *parent);

# 78 "/home/eagle/qt-copy/include/QtCore/qtemporaryfile.h"
~QTemporaryFile();

bool autoRemove() const;
void setAutoRemove(bool b);


bool open() { return open(QIODevice::ReadWrite); }

QString fileName() const;
QString fileTemplate() const;
void setFileTemplate(const QString &name);

inline static QTemporaryFile *createLocalFile(const QString &fileName)
{ QFile file(fileName); return createLocalFile(file); }
static QTemporaryFile *createLocalFile(QFile &file);

virtual QAbstractFileEngine *fileEngine() const;

protected:
bool open(OpenMode flags);

private:
friend class QFile;
QTemporaryFile(const QTemporaryFile &); QTemporaryFile &operator=(const QTemporaryFile &);
};



# 106 "/home/eagle/qt-copy/include/QtCore/qtemporaryfile.h"





# 44 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextstream.h"



















































































































































































































































































































































































# 45 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qurl.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"












































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qurl.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qobjectdefs.h"











































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtCore/qurl.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qpair.h"

































































































































# 49 "/home/eagle/qt-copy/include/QtCore/qurl.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtCore/qurl.h"


# 52 "/home/eagle/qt-copy/include/QtCore/qurl.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class QUrlPrivate;
class QDataStream;

class  QUrl
{
public:
enum ParsingMode {
TolerantMode,
StrictMode
};


enum FormattingOption {
None = 0x0,
RemoveScheme = 0x1,
RemovePassword = 0x2,
RemoveUserInfo = RemovePassword | 0x4,
RemovePort = 0x8,
RemoveAuthority = RemoveUserInfo | RemovePort | 0x10,
RemovePath = 0x20,
RemoveQuery = 0x40,
RemoveFragment = 0x80,

StripTrailingSlash = 0x10000
};
typedef QFlags<FormattingOption> FormattingOptions;

QUrl();
QUrl(const QString &url);
QUrl(const QString &url, ParsingMode mode);

QUrl(const QUrl &copy);
QUrl &operator =(const QUrl &copy);
QUrl &operator =(const QString &url);
~QUrl();

void setUrl(const QString &url);
void setUrl(const QString &url, ParsingMode mode);

void setEncodedUrl(const QByteArray &url);
void setEncodedUrl(const QByteArray &url, ParsingMode mode);


bool isValid() const;

bool isEmpty() const;

void clear();

void setScheme(const QString &scheme);
QString scheme() const;

void setAuthority(const QString &authority);
QString authority() const;

void setUserInfo(const QString &userInfo);
QString userInfo() const;

void setUserName(const QString &userName);
QString userName() const;
void setEncodedUserName(const QByteArray &userName);
QByteArray encodedUserName() const;

void setPassword(const QString &password);
QString password() const;
void setEncodedPassword(const QByteArray &password);
QByteArray encodedPassword() const;

void setHost(const QString &host);
QString host() const;
void setEncodedHost(const QByteArray &host);
QByteArray encodedHost() const;

void setPort(int port);
int port() const;
int port(int defaultPort) const;


void setPath(const QString &path);
QString path() const;
void setEncodedPath(const QByteArray &path);
QByteArray encodedPath() const;

bool hasQuery() const;

void setEncodedQuery(const QByteArray &query);
QByteArray encodedQuery() const;

void setQueryDelimiters(char valueDelimiter, char pairDelimiter);
char queryValueDelimiter() const;
char queryPairDelimiter() const;

void setQueryItems(const QList<QPair<QString, QString> > &query);
void addQueryItem(const QString &key, const QString &value);
QList<QPair<QString, QString> > queryItems() const;
bool hasQueryItem(const QString &key) const;
QString queryItemValue(const QString &key) const;
QStringList allQueryItemValues(const QString &key) const;
void removeQueryItem(const QString &key);
void removeAllQueryItems(const QString &key);

void setEncodedQueryItems(const QList<QPair<QByteArray, QByteArray> > &query);
void addEncodedQueryItem(const QByteArray &key, const QByteArray &value);
QList<QPair<QByteArray, QByteArray> > encodedQueryItems() const;
bool hasEncodedQueryItem(const QByteArray &key) const;
QByteArray encodedQueryItemValue(const QByteArray &key) const;
QList<QByteArray> allEncodedQueryItemValues(const QByteArray &key) const;
void removeEncodedQueryItem(const QByteArray &key);
void removeAllEncodedQueryItems(const QByteArray &key);

void setFragment(const QString &fragment);
QString fragment() const;
void setEncodedFragment(const QByteArray &fragment);
QByteArray encodedFragment() const;
bool hasFragment() const;

QUrl resolved(const QUrl &relative) const;

bool isRelative() const;
bool isParentOf(const QUrl &url) const;

static QUrl fromLocalFile(const QString &localfile);
QString toLocalFile() const;

QString toString(FormattingOptions options = None) const;

QByteArray toEncoded(FormattingOptions options = None) const;
static QUrl fromEncoded(const QByteArray &url);
static QUrl fromEncoded(const QByteArray &url, ParsingMode mode);


void detach();
bool isDetached() const;

bool operator <(const QUrl &url) const;
bool operator ==(const QUrl &url) const;
bool operator !=(const QUrl &url) const;

static QString fromPercentEncoding(const QByteArray &);
static QByteArray toPercentEncoding(const QString &,
const QByteArray &exclude = QByteArray(),
const QByteArray &include = QByteArray());
static QString fromPunycode(const QByteArray &);
static QByteArray toPunycode(const QString &);
static QString fromAce(const QByteArray &);
static QByteArray toAce(const QString &);
static QStringList idnWhitelist();
static void setIdnWhitelist(const QStringList &);














































# 252 "/home/eagle/qt-copy/include/QtCore/qurl.h"
QString errorString() const;

protected:




# 259 "/home/eagle/qt-copy/include/QtCore/qurl.h"
private:
QUrlPrivate *d;
public:
typedef QUrlPrivate * DataPtr;
inline DataPtr &data_ptr() { return d; }
};

template <> class QTypeInfo<QUrl> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QUrl)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QUrl"; } };
template <> inline bool qIsDetached<QUrl>(QUrl &t) { return t.isDetached(); } template <typename T> inline void qSwap(T &, T &); template <> inline void qSwap<QUrl>(QUrl &value1, QUrl &value2) { const QUrl::DataPtr t = value1.data_ptr(); value1.data_ptr() = value2.data_ptr(); value2.data_ptr() = t; }
inline QFlags<QUrl::FormattingOptions::enum_type> operator|(QUrl::FormattingOptions::enum_type f1, QUrl::FormattingOptions::enum_type f2) { return QFlags<QUrl::FormattingOptions::enum_type>(f1) | f2; } inline QFlags<QUrl::FormattingOptions::enum_type> operator|(QUrl::FormattingOptions::enum_type f1, QFlags<QUrl::FormattingOptions::enum_type> f2) { return f2 | f1; }


# 271 "/home/eagle/qt-copy/include/QtCore/qurl.h"
 QDataStream &operator<<(QDataStream &, const QUrl &);
 QDataStream &operator>>(QDataStream &, QUrl &);



# 276 "/home/eagle/qt-copy/include/QtCore/qurl.h"
 QDebug operator<<(QDebug, const QUrl &);


# 279 "/home/eagle/qt-copy/include/QtCore/qurl.h"





# 46 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstracteventdispatcher.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qabstracteventdispatcher.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qeventloop.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qeventloop.h"


# 49 "/home/eagle/qt-copy/include/QtCore/qeventloop.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class QEventLoopPrivate;

class  QEventLoop : public QObject
{
Q_OBJECT
inline QEventLoopPrivate* d_func() { return reinterpret_cast<QEventLoopPrivate *>(d_ptr); } inline const QEventLoopPrivate* d_func() const { return reinterpret_cast<const QEventLoopPrivate *>(d_ptr); } friend class QEventLoopPrivate;

public:
explicit QEventLoop(QObject *parent = 0);
~QEventLoop();

enum ProcessEventsFlag {
AllEvents = 0x00,
ExcludeUserInputEvents = 0x01,
ExcludeSocketNotifiers = 0x02,
WaitForMoreEvents = 0x04,




# 75 "/home/eagle/qt-copy/include/QtCore/qeventloop.h"
X11ExcludeTimers = 0x08


# 78 "/home/eagle/qt-copy/include/QtCore/qeventloop.h"
, DeferredDeletion = 0x10

# 80 "/home/eagle/qt-copy/include/QtCore/qeventloop.h"
};
typedef QFlags<ProcessEventsFlag> ProcessEventsFlags;

bool processEvents(ProcessEventsFlags flags = AllEvents);
void processEvents(ProcessEventsFlags flags, int maximumTime);

int exec(ProcessEventsFlags flags = AllEvents);
void exit(int returnCode = 0);
bool isRunning() const;

void wakeUp();

public slots:
void quit();
};

inline QFlags<QEventLoop::ProcessEventsFlags::enum_type> operator|(QEventLoop::ProcessEventsFlags::enum_type f1, QEventLoop::ProcessEventsFlags::enum_type f2) { return QFlags<QEventLoop::ProcessEventsFlags::enum_type>(f1) | f2; } inline QFlags<QEventLoop::ProcessEventsFlags::enum_type> operator|(QEventLoop::ProcessEventsFlags::enum_type f1, QFlags<QEventLoop::ProcessEventsFlags::enum_type> f2) { return f2 | f1; }






# 48 "/home/eagle/qt-copy/include/QtCore/qabstracteventdispatcher.h"


# 50 "/home/eagle/qt-copy/include/QtCore/qabstracteventdispatcher.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class QAbstractEventDispatcherPrivate;
class QSocketNotifier;
template <typename T1, typename T2> struct QPair;

class  QAbstractEventDispatcher : public QObject
{
Q_OBJECT
inline QAbstractEventDispatcherPrivate* d_func() { return reinterpret_cast<QAbstractEventDispatcherPrivate *>(d_ptr); } inline const QAbstractEventDispatcherPrivate* d_func() const { return reinterpret_cast<const QAbstractEventDispatcherPrivate *>(d_ptr); } friend class QAbstractEventDispatcherPrivate;

public:
typedef QPair<int, int> TimerInfo;

explicit QAbstractEventDispatcher(QObject *parent = 0);
~QAbstractEventDispatcher();

static QAbstractEventDispatcher *instance(QThread *thread = 0);

virtual bool processEvents(QEventLoop::ProcessEventsFlags flags) = 0;
virtual bool hasPendingEvents() = 0;

virtual void registerSocketNotifier(QSocketNotifier *notifier) = 0;
virtual void unregisterSocketNotifier(QSocketNotifier *notifier) = 0;

int registerTimer(int interval, QObject *object);
virtual void registerTimer(int timerId, int interval, QObject *object) = 0;
virtual bool unregisterTimer(int timerId) = 0;
virtual bool unregisterTimers(QObject *object) = 0;
virtual QList<TimerInfo> registeredTimers(QObject *object) const = 0;

virtual void wakeUp() = 0;
virtual void interrupt() = 0;
virtual void flush() = 0;

virtual void startingUp();
virtual void closingDown();

typedef bool(*EventFilter)(void *message);
EventFilter setEventFilter(EventFilter filter);
bool filterEvent(void *message);

signals:
void aboutToBlock();
void awake();

protected:
QAbstractEventDispatcher(QAbstractEventDispatcherPrivate &,
QObject *parent);
};






# 47 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstractitemmodel.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qvariant.h"






















































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qabstractitemmodel.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtCore/qabstractitemmodel.h"


# 50 "/home/eagle/qt-copy/include/QtCore/qabstractitemmodel.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class QAbstractItemModel;
class QPersistentModelIndex;

class  QModelIndex
{
friend class QAbstractItemModel;
friend class QProxyModel;
public:
inline QModelIndex() : r(-1), c(-1), p(0), m(0) {}
inline QModelIndex(const QModelIndex &other)
: r(other.r), c(other.c), p(other.p), m(other.m) {}
inline ~QModelIndex() { p = 0; m = 0; }
inline int row() const { return r; }
inline int column() const { return c; }
inline void *internalPointer() const { return p; }
inline qint64 internalId() const { return reinterpret_cast<qint64>(p); }
inline QModelIndex parent() const;
inline QModelIndex sibling(int row, int column) const;
inline QModelIndex child(int row, int column) const;
inline QVariant data(int role = Qt::DisplayRole) const;
inline Qt::ItemFlags flags() const;
inline const QAbstractItemModel *model() const { return m; }
inline bool isValid() const { return (r >= 0) && (c >= 0) && (m != 0); }
inline bool operator==(const QModelIndex &other) const
{ return (other.r == r) && (other.p == p) && (other.c == c) && (other.m == m); }
inline bool operator!=(const QModelIndex &other) const
{ return !(*this == other); }
inline bool operator<(const QModelIndex &other) const
{
if (r < other.r) return true;
if (r == other.r) {
if (c < other.c) return true;
if (c == other.c) {
if (p < other.p) return true;
if (p == other.p) return m < other.m;
}
}
return false; }
private:
inline QModelIndex(int row, int column, void *ptr, const QAbstractItemModel *model);
int r, c;
void *p;
const QAbstractItemModel *m;
};
template <> class QTypeInfo<QModelIndex> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QModelIndex)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QModelIndex"; } };


# 103 "/home/eagle/qt-copy/include/QtCore/qabstractitemmodel.h"
 QDebug operator<<(QDebug, const QModelIndex &);


# 106 "/home/eagle/qt-copy/include/QtCore/qabstractitemmodel.h"
class QPersistentModelIndexData;

class  QPersistentModelIndex
{
public:
QPersistentModelIndex();
QPersistentModelIndex(const QModelIndex &index);
QPersistentModelIndex(const QPersistentModelIndex &other);
~QPersistentModelIndex();
bool operator<(const QPersistentModelIndex &other) const;
bool operator==(const QPersistentModelIndex &other) const;
inline bool operator!=(const QPersistentModelIndex &other) const
{ return !operator==(other); }
QPersistentModelIndex &operator=(const QPersistentModelIndex &other);
bool operator==(const QModelIndex &other) const;
bool operator!=(const QModelIndex &other) const;
QPersistentModelIndex &operator=(const QModelIndex &other);
operator const QModelIndex&() const;
int row() const;
int column() const;
void *internalPointer() const;
qint64 internalId() const;
QModelIndex parent() const;
QModelIndex sibling(int row, int column) const;
QModelIndex child(int row, int column) const;
QVariant data(int role = Qt::DisplayRole) const;
Qt::ItemFlags flags() const;
const QAbstractItemModel *model() const;
bool isValid() const;
private:
QPersistentModelIndexData *d;

# 138 "/home/eagle/qt-copy/include/QtCore/qabstractitemmodel.h"
friend  QDebug operator<<(QDebug, const QPersistentModelIndex &);

# 140 "/home/eagle/qt-copy/include/QtCore/qabstractitemmodel.h"
};
template <> class QTypeInfo<QPersistentModelIndex> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QPersistentModelIndex)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QPersistentModelIndex"; } };


# 144 "/home/eagle/qt-copy/include/QtCore/qabstractitemmodel.h"
 QDebug operator<<(QDebug, const QPersistentModelIndex &);


# 147 "/home/eagle/qt-copy/include/QtCore/qabstractitemmodel.h"
template<typename T> class QList;
typedef QList<QModelIndex> QModelIndexList;

class QMimeData;
class QAbstractItemModelPrivate;
template <class Key, class T> class QMap;


class  QAbstractItemModel : public QObject
{
Q_OBJECT

friend class QPersistentModelIndexData;
public:

explicit QAbstractItemModel(QObject *parent = 0);
virtual ~QAbstractItemModel();

bool hasIndex(int row, int column, const QModelIndex &parent = QModelIndex()) const;
virtual QModelIndex index(int row, int column,
const QModelIndex &parent = QModelIndex()) const = 0;
virtual QModelIndex parent(const QModelIndex &child) const = 0;

inline QModelIndex sibling(int row, int column, const QModelIndex &idx) const
{ return index(row, column, parent(idx)); }

virtual int rowCount(const QModelIndex &parent = QModelIndex()) const = 0;
virtual int columnCount(const QModelIndex &parent = QModelIndex()) const = 0;
virtual bool hasChildren(const QModelIndex &parent = QModelIndex()) const;

virtual QVariant data(const QModelIndex &index, int role = Qt::DisplayRole) const = 0;
virtual bool setData(const QModelIndex &index, const QVariant &value, int role = Qt::EditRole);

virtual QVariant headerData(int section, Qt::Orientation orientation,
int role = Qt::DisplayRole) const;
virtual bool setHeaderData(int section, Qt::Orientation orientation, const QVariant &value,
int role = Qt::EditRole);

virtual QMap<int, QVariant> itemData(const QModelIndex &index) const;
virtual bool setItemData(const QModelIndex &index, const QMap<int, QVariant> &roles);

virtual QStringList mimeTypes() const;
virtual QMimeData *mimeData(const QModelIndexList &indexes) const;
virtual bool dropMimeData(const QMimeData *data, Qt::DropAction action,
int row, int column, const QModelIndex &parent);
virtual Qt::DropActions supportedDropActions() const;

Qt::DropActions supportedDragActions() const;
void setSupportedDragActions(Qt::DropActions);

virtual bool insertRows(int row, int count, const QModelIndex &parent = QModelIndex());
virtual bool insertColumns(int column, int count, const QModelIndex &parent = QModelIndex());
virtual bool removeRows(int row, int count, const QModelIndex &parent = QModelIndex());
virtual bool removeColumns(int column, int count, const QModelIndex &parent = QModelIndex());

inline bool insertRow(int row, const QModelIndex &parent = QModelIndex());
inline bool insertColumn(int column, const QModelIndex &parent = QModelIndex());
inline bool removeRow(int row, const QModelIndex &parent = QModelIndex());
inline bool removeColumn(int column, const QModelIndex &parent = QModelIndex());

virtual void fetchMore(const QModelIndex &parent);
virtual bool canFetchMore(const QModelIndex &parent) const;
virtual Qt::ItemFlags flags(const QModelIndex &index) const;
virtual void sort(int column, Qt::SortOrder order = Qt::AscendingOrder);
virtual QModelIndex buddy(const QModelIndex &index) const;
virtual QModelIndexList match(const QModelIndex &start, int role,
const QVariant &value, int hits = 1,
Qt::MatchFlags flags =
Qt::MatchFlags(Qt::MatchStartsWith|Qt::MatchWrap)) const;
virtual QSize span(const QModelIndex &index) const;


# 219 "/home/eagle/qt-copy/include/QtCore/qabstractitemmodel.h"
inline QObject *parent() const { return QObject::parent(); }




# 224 "/home/eagle/qt-copy/include/QtCore/qabstractitemmodel.h"
signals:
void dataChanged(const QModelIndex &topLeft, const QModelIndex &bottomRight);
void headerDataChanged(Qt::Orientation orientation, int first, int last);
void layoutChanged();
void layoutAboutToBeChanged();


# 231 "/home/eagle/qt-copy/include/QtCore/qabstractitemmodel.h"
private: 

# 233 "/home/eagle/qt-copy/include/QtCore/qabstractitemmodel.h"
void rowsAboutToBeInserted(const QModelIndex &parent, int first, int last);
void rowsInserted(const QModelIndex &parent, int first, int last);

void rowsAboutToBeRemoved(const QModelIndex &parent, int first, int last);
void rowsRemoved(const QModelIndex &parent, int first, int last);

void columnsAboutToBeInserted(const QModelIndex &parent, int first, int last);
void columnsInserted(const QModelIndex &parent, int first, int last);

void columnsAboutToBeRemoved(const QModelIndex &parent, int first, int last);
void columnsRemoved(const QModelIndex &parent, int first, int last);

void modelAboutToBeReset();
void modelReset();

public slots:
virtual bool submit();
virtual void revert();

protected:
QAbstractItemModel(QAbstractItemModelPrivate &dd, QObject *parent = 0);

inline QModelIndex createIndex(int row, int column, void *data = 0) const;
inline QModelIndex createIndex(int row, int column, int id) const;
inline QModelIndex createIndex(int row, int column, quint32 id) const;

void encodeData(const QModelIndexList &indexes, QDataStream &stream) const;
bool decodeData(int row, int column, const QModelIndex &parent, QDataStream &stream);

void beginInsertRows(const QModelIndex &parent, int first, int last);
void endInsertRows();

void beginRemoveRows(const QModelIndex &parent, int first, int last);
void endRemoveRows();

void beginInsertColumns(const QModelIndex &parent, int first, int last);
void endInsertColumns();

void beginRemoveColumns(const QModelIndex &parent, int first, int last);
void endRemoveColumns();

void reset();

void changePersistentIndex(const QModelIndex &from, const QModelIndex &to);
void changePersistentIndexList(const QModelIndexList &from, const QModelIndexList &to);
QModelIndexList persistentIndexList() const;

private:
inline QAbstractItemModelPrivate* d_func() { return reinterpret_cast<QAbstractItemModelPrivate *>(d_ptr); } inline const QAbstractItemModelPrivate* d_func() const { return reinterpret_cast<const QAbstractItemModelPrivate *>(d_ptr); } friend class QAbstractItemModelPrivate;
QAbstractItemModel(const QAbstractItemModel &); QAbstractItemModel &operator=(const QAbstractItemModel &);
};

inline bool QAbstractItemModel::insertRow(int arow, const QModelIndex &aparent)
{ return insertRows(arow, 1, aparent); }
inline bool QAbstractItemModel::insertColumn(int acolumn, const QModelIndex &aparent)
{ return insertColumns(acolumn, 1, aparent); }
inline bool QAbstractItemModel::removeRow(int arow, const QModelIndex &aparent)
{ return removeRows(arow, 1, aparent); }
inline bool QAbstractItemModel::removeColumn(int acolumn, const QModelIndex &aparent)
{ return removeColumns(acolumn, 1, aparent); }

inline QModelIndex QAbstractItemModel::createIndex(int arow, int acolumn, void *adata) const
{ return QModelIndex(arow, acolumn, adata, this); }
inline QModelIndex QAbstractItemModel::createIndex(int arow, int acolumn, int aid) const




# 301 "/home/eagle/qt-copy/include/QtCore/qabstractitemmodel.h"
{ return QModelIndex(arow, acolumn, reinterpret_cast<void*>(aid), this); }



# 305 "/home/eagle/qt-copy/include/QtCore/qabstractitemmodel.h"
inline QModelIndex QAbstractItemModel::createIndex(int arow, int acolumn, quint32 aid) const




# 310 "/home/eagle/qt-copy/include/QtCore/qabstractitemmodel.h"
{ return QModelIndex(arow, acolumn, reinterpret_cast<void*>(aid), this); }





# 316 "/home/eagle/qt-copy/include/QtCore/qabstractitemmodel.h"
class  QAbstractTableModel : public QAbstractItemModel
{
Q_OBJECT

public:
explicit QAbstractTableModel(QObject *parent = 0);
~QAbstractTableModel();

QModelIndex index(int row, int column, const QModelIndex &parent = QModelIndex()) const;
bool dropMimeData(const QMimeData *data, Qt::DropAction action,
int row, int column, const QModelIndex &parent);
protected:
QAbstractTableModel(QAbstractItemModelPrivate &dd, QObject *parent);

private:
QAbstractTableModel(const QAbstractTableModel &); QAbstractTableModel &operator=(const QAbstractTableModel &);
QModelIndex parent(const QModelIndex &child) const;
bool hasChildren(const QModelIndex &parent) const;
};

class  QAbstractListModel : public QAbstractItemModel
{
Q_OBJECT

public:
explicit QAbstractListModel(QObject *parent = 0);
~QAbstractListModel();

QModelIndex index(int row, int column = 0, const QModelIndex &parent = QModelIndex()) const;
bool dropMimeData(const QMimeData *data, Qt::DropAction action,
int row, int column, const QModelIndex &parent);
protected:
QAbstractListModel(QAbstractItemModelPrivate &dd, QObject *parent);

private:
QAbstractListModel(const QAbstractListModel &); QAbstractListModel &operator=(const QAbstractListModel &);
QModelIndex parent(const QModelIndex &child) const;
int columnCount(const QModelIndex &parent) const;
bool hasChildren(const QModelIndex &parent) const;
};



inline QModelIndex::QModelIndex(int arow, int acolumn, void *adata,
const QAbstractItemModel *amodel)
: r(arow), c(acolumn), p(adata), m(amodel) {}

inline QModelIndex QModelIndex::parent() const
{ return m ? m->parent(*this) : QModelIndex(); }

inline QModelIndex QModelIndex::sibling(int arow, int acolumn) const
{ return m ? (r == arow && c == acolumn) ? *this : m->index(arow, acolumn, m->parent(*this)) : QModelIndex(); }

inline QModelIndex QModelIndex::child(int arow, int acolumn) const
{ return m ? m->index(arow, acolumn, *this) : QModelIndex(); }

inline QVariant QModelIndex::data(int arole) const
{ return m ? m->data(*this, arole) : QVariant(); }

inline Qt::ItemFlags QModelIndex::flags() const
{ return m ? m->flags(*this) : Qt::ItemFlags(0); }

inline uint qHash(const QModelIndex &index)
{ return uint((index.row() << 4) + index.column() + index.internalId()); }






# 48 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbasictimer.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qbasictimer.h"


# 49 "/home/eagle/qt-copy/include/QtCore/qbasictimer.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class QObject;

class  QBasicTimer
{
int id;
public:
inline QBasicTimer() : id(0) {}
inline ~QBasicTimer() { if (id) stop(); }

inline bool isActive() const { return id != 0; }
inline int timerId() const { return id; }

void start(int msec, QObject *obj);
void stop();
};
template <> class QTypeInfo<QBasicTimer> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QBasicTimer)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QBasicTimer"; } };






# 49 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcoreapplication.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qcoreapplication.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qcoreevent.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qcoreevent.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"












































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtCore/qcoreevent.h"


# 50 "/home/eagle/qt-copy/include/QtCore/qcoreevent.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class QEventPrivate;
class  QEvent 
{

public:
enum Type {






None = 0, 
Timer = 1, 
MouseButtonPress = 2, 
MouseButtonRelease = 3, 
MouseButtonDblClick = 4, 
MouseMove = 5, 
KeyPress = 6, 
KeyRelease = 7, 
FocusIn = 8, 
FocusOut = 9, 
Enter = 10, 
Leave = 11, 
Paint = 12, 
Move = 13, 
Resize = 14, 
Create = 15, 
Destroy = 16, 
Show = 17, 
Hide = 18, 
Close = 19, 
Quit = 20, 
ParentChange = 21, 
ParentAboutToChange = 131, 



# 94 "/home/eagle/qt-copy/include/QtCore/qcoreevent.h"
ThreadChange = 22, 
WindowActivate = 24, 
WindowDeactivate = 25, 
ShowToParent = 26, 
HideToParent = 27, 
Wheel = 31, 
WindowTitleChange = 33, 
WindowIconChange = 34, 
ApplicationWindowIconChange = 35, 
ApplicationFontChange = 36, 
ApplicationLayoutDirectionChange = 37, 
ApplicationPaletteChange = 38, 
PaletteChange = 39, 
Clipboard = 40, 
Speech = 42, 
MetaCall = 43, 
SockAct = 50, 
WinEventAct = 132, 
DeferredDelete = 52, 
DragEnter = 60, 
DragMove = 61, 
DragLeave = 62, 
Drop = 63, 
DragResponse = 64, 
ChildAdded = 68, 
ChildPolished = 69, 





# 125 "/home/eagle/qt-copy/include/QtCore/qcoreevent.h"
ChildRemoved = 71, 
ShowWindowRequest = 73, 
PolishRequest = 74, 
Polish = 75, 
LayoutRequest = 76, 
UpdateRequest = 77, 
UpdateLater = 78, 

EmbeddingControl = 79, 
ActivateControl = 80, 
DeactivateControl = 81, 
ContextMenu = 82, 
InputMethod = 83, 
AccessibilityPrepare = 86, 
TabletMove = 87, 
LocaleChange = 88, 
LanguageChange = 89, 
LayoutDirectionChange = 90, 
Style = 91, 
TabletPress = 92, 
TabletRelease = 93, 
OkRequest = 94, 
HelpRequest = 95, 

IconDrag = 96, 

FontChange = 97, 
EnabledChange = 98, 
ActivationChange = 99, 
StyleChange = 100, 
IconTextChange = 101, 
ModifiedChange = 102, 
MouseTrackingChange = 109, 

WindowBlocked = 103, 
WindowUnblocked = 104, 
WindowStateChange = 105,

ToolTip = 110,
WhatsThis = 111,
StatusTip = 112,

ActionChanged = 113,
ActionAdded = 114,
ActionRemoved = 115,

FileOpen = 116, 

Shortcut = 117, 
ShortcutOverride = 51, 







# 182 "/home/eagle/qt-copy/include/QtCore/qcoreevent.h"
WhatsThisClicked = 118,





# 188 "/home/eagle/qt-copy/include/QtCore/qcoreevent.h"
ToolBarChange = 120, 

ApplicationActivate = 121, 
ApplicationActivated = ApplicationActivate, 
ApplicationDeactivate = 122, 
ApplicationDeactivated = ApplicationDeactivate, 

QueryWhatsThis = 123, 
EnterWhatsThisMode = 124,
LeaveWhatsThisMode = 125,

ZOrderChange = 126, 

HoverEnter = 127, 
HoverLeave = 128, 
HoverMove = 129, 

AccessibilityHelp = 119, 
AccessibilityDescription = 130, 







# 214 "/home/eagle/qt-copy/include/QtCore/qcoreevent.h"
AcceptDropsChange = 152,

MenubarUpdated = 153, 


ZeroTimerEvent = 154, 

GraphicsSceneMouseMove = 155, 
GraphicsSceneMousePress = 156,
GraphicsSceneMouseRelease = 157,
GraphicsSceneMouseDoubleClick = 158,
GraphicsSceneContextMenu = 159,
GraphicsSceneHoverEnter = 160,
GraphicsSceneHoverMove = 161,
GraphicsSceneHoverLeave = 162,
GraphicsSceneHelp = 163,
GraphicsSceneDragEnter = 164,
GraphicsSceneDragMove = 165,
GraphicsSceneDragLeave = 166,
GraphicsSceneDrop = 167,
GraphicsSceneWheel = 168,

KeyboardLayoutChange = 169, 

DynamicPropertyChange = 170, 

TabletEnterProximity = 171,
TabletLeaveProximity = 172,

NonClientAreaMouseMove = 173,
NonClientAreaMouseButtonPress = 174,
NonClientAreaMouseButtonRelease = 175,
NonClientAreaMouseButtonDblClick = 176,

MacSizeChange = 177, 

ContentsRectChange = 178, 

MacGLWindowChange = 179, 

FutureCallOut = 180,

GraphicsSceneResize = 181,
GraphicsSceneMove = 182,

CursorChange = 183,
ToolTipChange = 184,

NetworkReplyUpdated = 185, 

GrabMouse = 186,
UngrabMouse = 187,
GrabKeyboard = 188,
UngrabKeyboard = 189,

User = 1000, 
MaxUser = 65535 
};

QEvent(Type type);
virtual ~QEvent();
inline Type type() const { return static_cast<Type>(t); }
inline bool spontaneous() const { return spont; }

inline void setAccepted(bool accepted) { m_accept = accepted; }
inline bool isAccepted() const { return m_accept; }

inline void accept() { m_accept = true; }
inline void ignore() { m_accept = false; }

static int registerEventType(int hint = -1);

protected:
QEventPrivate *d;
ushort t;

private:
ushort posted : 1;
ushort spont : 1;
ushort m_accept : 1;
ushort reserved : 13;

friend class QCoreApplication;
friend class QCoreApplicationPrivate;
friend class QThreadData;
friend class QApplication;
friend class QApplicationPrivate;
friend class Q3AccelManager;
friend class QShortcutMap;
friend class QETWidget;
};

class  QTimerEvent : public QEvent
{
public:
QTimerEvent( int timerId );
~QTimerEvent();
int timerId() const { return id; }
protected:
int id;
};

class QObject;

class  QChildEvent : public QEvent
{
public:
QChildEvent( Type type, QObject *child );
~QChildEvent();
QObject *child() const { return c; }
bool added() const { return type() == ChildAdded; }



# 328 "/home/eagle/qt-copy/include/QtCore/qcoreevent.h"
bool polished() const { return type() == ChildPolished; }
bool removed() const { return type() == ChildRemoved; }
protected:
QObject *c;
};












# 345 "/home/eagle/qt-copy/include/QtCore/qcoreevent.h"
class  QDynamicPropertyChangeEvent : public QEvent
{
public:
QDynamicPropertyChangeEvent(const QByteArray &name);
~QDynamicPropertyChangeEvent();

inline QByteArray propertyName() const { return n; }

private:
QByteArray n;
};






# 48 "/home/eagle/qt-copy/include/QtCore/qcoreapplication.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qeventloop.h"






































































































# 49 "/home/eagle/qt-copy/include/QtCore/qcoreapplication.h"










# 59 "/home/eagle/qt-copy/include/QtCore/qcoreapplication.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class QCoreApplicationPrivate;
class QTextCodec;
class QTranslator;
class QPostEventList;
class QStringList;



# 73 "/home/eagle/qt-copy/include/QtCore/qcoreapplication.h"
class  QCoreApplication : public QObject
{
Q_OBJECT
Q_PROPERTY(QString applicationName READ applicationName WRITE setApplicationName)
Q_PROPERTY(QString applicationVersion READ applicationVersion WRITE setApplicationVersion)
Q_PROPERTY(QString organizationName READ organizationName WRITE setOrganizationName)
Q_PROPERTY(QString organizationDomain READ organizationDomain WRITE setOrganizationDomain)

inline QCoreApplicationPrivate* d_func() { return reinterpret_cast<QCoreApplicationPrivate *>(d_ptr); } inline const QCoreApplicationPrivate* d_func() const { return reinterpret_cast<const QCoreApplicationPrivate *>(d_ptr); } friend class QCoreApplicationPrivate;
public:
QCoreApplication(int &argc, char **argv);
~QCoreApplication();


# 87 "/home/eagle/qt-copy/include/QtCore/qcoreapplication.h"
 static int argc();
 static char **argv();

# 90 "/home/eagle/qt-copy/include/QtCore/qcoreapplication.h"
static QStringList arguments();

static void setAttribute(Qt::ApplicationAttribute attribute, bool on = true);
static bool testAttribute(Qt::ApplicationAttribute attribute);

static void setOrganizationDomain(const QString &orgDomain);
static QString organizationDomain();
static void setOrganizationName(const QString &orgName);
static QString organizationName();
static void setApplicationName(const QString &application);
static QString applicationName();
static void setApplicationVersion(const QString &version);
static QString applicationVersion();

static QCoreApplication *instance() { return self; }

static int exec();
static void processEvents(QEventLoop::ProcessEventsFlags flags = QEventLoop::AllEvents);
static void processEvents(QEventLoop::ProcessEventsFlags flags, int maxtime);
static void exit(int retcode=0);

static bool sendEvent(QObject *receiver, QEvent *event);
static void postEvent(QObject *receiver, QEvent *event);
static void postEvent(QObject *receiver, QEvent *event, int priority);
static void sendPostedEvents(QObject *receiver, int event_type);
static void sendPostedEvents();
static void removePostedEvents(QObject *receiver);
static void removePostedEvents(QObject *receiver, int eventType);
static bool hasPendingEvents();

virtual bool notify(QObject *, QEvent *);

static bool startingUp();
static bool closingDown();

static QString applicationDirPath();
static QString applicationFilePath();
static qint64 applicationPid();


# 130 "/home/eagle/qt-copy/include/QtCore/qcoreapplication.h"
static void setLibraryPaths(const QStringList &);
static QStringList libraryPaths();
static void addLibraryPath(const QString &);
static void removeLibraryPath(const QString &);



# 137 "/home/eagle/qt-copy/include/QtCore/qcoreapplication.h"
static void installTranslator(QTranslator * messageFile);
static void removeTranslator(QTranslator * messageFile);

# 140 "/home/eagle/qt-copy/include/QtCore/qcoreapplication.h"
enum Encoding { CodecForTr, UnicodeUTF8, DefaultCodec = CodecForTr };

static QString translate(const char * context,
const char * key,
const char * comment = 0,
Encoding encoding = CodecForTr);
static QString translate(const char * context,
const char * key,
const char * comment,
Encoding encoding, int n);

static void flush();






















# 174 "/home/eagle/qt-copy/include/QtCore/qcoreapplication.h"
typedef bool (*EventFilter)(void *message, long *result);
EventFilter setEventFilter(EventFilter filter);
bool filterEvent(void *message, long *result);

public slots:
static void quit();

signals:
void aboutToQuit();
void unixSignal(int);

protected:
bool event(QEvent *);

virtual bool compressEvent(QEvent *, QObject *receiver, QPostEventList *);

protected:
QCoreApplication(QCoreApplicationPrivate &p);

private:
static bool sendSpontaneousEvent(QObject *receiver, QEvent *event);
bool notifyInternal(QObject *receiver, QEvent *event);

void init();

static QCoreApplication *self;

friend class QEventDispatcherUNIXPrivate;
friend class QApplication;
friend class QApplicationPrivate;
friend class QETWidget;
friend class Q3AccelManager;
friend class QShortcutMap;
friend class QWidget;
friend class QWidgetPrivate;
friend bool qt_sendSpontaneousEvent(QObject*, QEvent*);
friend  QString qAppName();
friend class QClassFactory;
};

inline bool QCoreApplication::sendEvent(QObject *receiver, QEvent *event)
{ if (event) event->spont = false; return self ? self->notifyInternal(receiver, event) : false; }

inline bool QCoreApplication::sendSpontaneousEvent(QObject *receiver, QEvent *event)
{ if (event) event->spont = true; return self ? self->notifyInternal(receiver, event) : false; }

inline void QCoreApplication::sendPostedEvents() { sendPostedEvents(0, 0); }





























# 250 "/home/eagle/qt-copy/include/QtCore/qcoreapplication.h"



# 266 "/home/eagle/qt-copy/include/QtCore/qcoreapplication.h"
typedef void (*QtCleanUpFunction)();

 void qAddPostRoutine(QtCleanUpFunction);
 void qRemovePostRoutine(QtCleanUpFunction);
 QString qAppName(); 






# 277 "/home/eagle/qt-copy/include/QtCore/qcoreapplication.h"





# 50 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcoreevent.h"




































































































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qeventloop.h"






































































































# 52 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmath.h"
















































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtCore/qmath.h"


# 51 "/home/eagle/qt-copy/include/QtCore/qmath.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

inline int qCeil(qreal v)
{

# 60 "/home/eagle/qt-copy/include/QtCore/qmath.h"
if (sizeof(qreal) == sizeof(float))
return int(ceilf(v));
else

# 64 "/home/eagle/qt-copy/include/QtCore/qmath.h"
return int(ceil(v));
}

inline int qFloor(qreal v)
{

# 70 "/home/eagle/qt-copy/include/QtCore/qmath.h"
if (sizeof(qreal) == sizeof(float))
return int(floorf(v));
else

# 74 "/home/eagle/qt-copy/include/QtCore/qmath.h"
return int(floor(v));
}

inline qreal qSin(qreal v)
{

# 80 "/home/eagle/qt-copy/include/QtCore/qmath.h"
if (sizeof(qreal) == sizeof(float))
return sinf(v);
else

# 84 "/home/eagle/qt-copy/include/QtCore/qmath.h"
return sin(v);
}

inline qreal qCos(qreal v)
{

# 90 "/home/eagle/qt-copy/include/QtCore/qmath.h"
if (sizeof(qreal) == sizeof(float))
return cosf(v);
else

# 94 "/home/eagle/qt-copy/include/QtCore/qmath.h"
return cos(v);
}

inline qreal qSqrt(qreal v)
{

# 100 "/home/eagle/qt-copy/include/QtCore/qmath.h"
if (sizeof(qreal) == sizeof(float))
return sqrtf(v);
else

# 104 "/home/eagle/qt-copy/include/QtCore/qmath.h"
return sqrt(v);
}

inline qreal qLn(qreal v)
{

# 110 "/home/eagle/qt-copy/include/QtCore/qmath.h"
if (sizeof(qreal) == sizeof(float))
return logf(v);
else

# 114 "/home/eagle/qt-copy/include/QtCore/qmath.h"
return log(v);
}

inline qreal qPow(qreal x, qreal y)
{

# 120 "/home/eagle/qt-copy/include/QtCore/qmath.h"
if (sizeof(qreal) == sizeof(float))
return powf(x, y);
else

# 124 "/home/eagle/qt-copy/include/QtCore/qmath.h"
return pow(x, y);
}






# 53 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmetaobject.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobjectdefs.h"











































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qmetaobject.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qvariant.h"






















































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtCore/qmetaobject.h"


# 50 "/home/eagle/qt-copy/include/QtCore/qmetaobject.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

template <typename T> class QList;

class  QMetaMethod
{
public:
inline QMetaMethod() : mobj(0),handle(0) {}

const char *signature() const;
const char *typeName() const;
QList<QByteArray> parameterTypes() const;
QList<QByteArray> parameterNames() const;
const char *tag() const;
enum Access { Private, Protected, Public };
Access access() const;
enum MethodType { Method, Signal, Slot };
MethodType methodType() const;
enum Attributes { Compatibility = 0x1, Cloned = 0x2, Scriptable = 0x4 };
int attributes() const;

inline const QMetaObject *enclosingMetaObject() const { return mobj; }

private:
const QMetaObject *mobj;
uint handle;
friend struct QMetaObject;
};
template <> class QTypeInfo<QMetaMethod> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QMetaMethod)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QMetaMethod"; } };

class  QMetaEnum
{
public:
inline QMetaEnum() : mobj(0),handle(0) {}

const char *name() const;
bool isFlag() const;

int keyCount() const;
const char *key(int index) const;
int value(int index) const;

const char *scope() const;

int keyToValue(const char *key) const;
const char* valueToKey(int value) const;
int keysToValue(const char * keys) const;
QByteArray valueToKeys(int value) const;

inline const QMetaObject *enclosingMetaObject() const { return mobj; }

inline bool isValid() const { return name() != 0; }
private:
const QMetaObject *mobj;
uint handle;
friend struct QMetaObject;
};
template <> class QTypeInfo<QMetaEnum> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QMetaEnum)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QMetaEnum"; } };

class  QMetaProperty
{
public:
QMetaProperty();

const char *name() const;
const char *typeName() const;
QVariant::Type type() const;
int userType() const;

bool isReadable() const;
bool isWritable() const;
bool isResettable() const;
bool isDesignable(const QObject *obj = 0) const;
bool isScriptable(const QObject *obj = 0) const;
bool isStored(const QObject *obj = 0) const;
bool isEditable(const QObject *obj = 0) const;
bool isUser(const QObject *obj = 0) const;

bool isFlagType() const;
bool isEnumType() const;
QMetaEnum enumerator() const;

QVariant read(const QObject *obj) const;
bool write(QObject *obj, const QVariant &value) const;
bool reset(QObject *obj) const;

bool hasStdCppSet() const;
inline bool isValid() const { return isReadable(); }
inline const QMetaObject *enclosingMetaObject() const { return mobj; }

private:
const QMetaObject *mobj;
uint handle;
int idx;
QMetaEnum menum;
friend struct QMetaObject;
};

class  QMetaClassInfo
{
public:
inline QMetaClassInfo() : mobj(0),handle(0) {}
const char *name() const;
const char *value() const;
inline const QMetaObject *enclosingMetaObject() const { return mobj; }
private:
const QMetaObject *mobj;
uint handle;
friend struct QMetaObject;
};
template <> class QTypeInfo<QMetaClassInfo> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QMetaClassInfo)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QMetaClassInfo"; } };






# 54 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"












































































































































































































































































































































# 55 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmimedata.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qvariant.h"






















































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qmimedata.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtCore/qmimedata.h"


# 50 "/home/eagle/qt-copy/include/QtCore/qmimedata.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class QUrl;
class QMimeDataPrivate;

class  QMimeData : public QObject
{
Q_OBJECT
public:
QMimeData();
~QMimeData();

QList<QUrl> urls() const;
void setUrls(const QList<QUrl> &urls);
bool hasUrls() const;

QString text() const;
void setText(const QString &text);
bool hasText() const;

QString html() const;
void setHtml(const QString &html);
bool hasHtml() const;

QVariant imageData() const;
void setImageData(const QVariant &image);
bool hasImage() const;

QVariant colorData() const;
void setColorData(const QVariant &color);
bool hasColor() const;

QByteArray data(const QString &mimetype) const;
void setData(const QString &mimetype, const QByteArray &data);
void removeFormat(const QString &mimetype);

virtual bool hasFormat(const QString &mimetype) const;
virtual QStringList formats() const;

void clear();
protected:
virtual QVariant retrieveData(const QString &mimetype,
QVariant::Type preferredType) const;
private:
QMimeData(const QMimeData &); QMimeData &operator=(const QMimeData &);
inline QMimeDataPrivate* d_func() { return reinterpret_cast<QMimeDataPrivate *>(d_ptr); } inline const QMimeDataPrivate* d_func() const { return reinterpret_cast<const QMimeDataPrivate *>(d_ptr); } friend class QMimeDataPrivate;
};






# 56 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 57 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qobjectcleanuphandler.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qobjectcleanuphandler.h"


# 49 "/home/eagle/qt-copy/include/QtCore/qobjectcleanuphandler.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class  QObjectCleanupHandler : public QObject
{
Q_OBJECT

public:
QObjectCleanupHandler();
~QObjectCleanupHandler();

QObject* add(QObject* object);
void remove(QObject *object);
bool isEmpty() const;
void clear();

private:

QObjectList cleanupObjects;

private slots:
void objectDestroyed(QObject *);
};






# 58 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qobjectdefs.h"











































































































































































































































































































































































































# 59 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpointer.h"


















































































































































# 60 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsharedmemory.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qsharedmemory.h"


# 49 "/home/eagle/qt-copy/include/QtCore/qsharedmemory.h"




typedef QtValidLicenseForCoreModule QtCoreModule;



# 57 "/home/eagle/qt-copy/include/QtCore/qsharedmemory.h"
class QSharedMemoryPrivate;

class  QSharedMemory : public QObject
{
Q_OBJECT
inline QSharedMemoryPrivate* d_func() { return reinterpret_cast<QSharedMemoryPrivate *>(d_ptr); } inline const QSharedMemoryPrivate* d_func() const { return reinterpret_cast<const QSharedMemoryPrivate *>(d_ptr); } friend class QSharedMemoryPrivate;

public:
enum AccessMode
{
ReadOnly,
ReadWrite
};

enum SharedMemoryError
{
NoError,
PermissionDenied,
InvalidSize,
KeyError,
AlreadyExists,
NotFound,
LockError,
OutOfResources,
UnknownError
};

QSharedMemory(QObject *parent = 0);
QSharedMemory(const QString &key, QObject *parent = 0);
~QSharedMemory();

void setKey(const QString &key);
QString key() const;

bool create(int size, AccessMode mode = ReadWrite);
int size() const;

bool attach(AccessMode mode = ReadWrite);
bool isAttached() const;
bool detach();

void *data();
const void* constData() const;
const void *data() const;


# 103 "/home/eagle/qt-copy/include/QtCore/qsharedmemory.h"
bool lock();
bool unlock();


# 107 "/home/eagle/qt-copy/include/QtCore/qsharedmemory.h"
SharedMemoryError error() const;
QString errorString() const;

private:
QSharedMemory(const QSharedMemory &); QSharedMemory &operator=(const QSharedMemory &);
};



# 116 "/home/eagle/qt-copy/include/QtCore/qsharedmemory.h"






# 61 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsignalmapper.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qsignalmapper.h"


# 49 "/home/eagle/qt-copy/include/QtCore/qsignalmapper.h"




typedef QtValidLicenseForCoreModule QtCoreModule;


# 56 "/home/eagle/qt-copy/include/QtCore/qsignalmapper.h"
class QSignalMapperPrivate;

class  QSignalMapper : public QObject
{
Q_OBJECT
inline QSignalMapperPrivate* d_func() { return reinterpret_cast<QSignalMapperPrivate *>(d_ptr); } inline const QSignalMapperPrivate* d_func() const { return reinterpret_cast<const QSignalMapperPrivate *>(d_ptr); } friend class QSignalMapperPrivate;
public:
explicit QSignalMapper(QObject *parent = 0);
~QSignalMapper();

void setMapping(QObject *sender, int id);
void setMapping(QObject *sender, const QString &text);
void setMapping(QObject *sender, QWidget *widget);
void setMapping(QObject *sender, QObject *object);
void removeMappings(QObject *sender);

QObject *mapping(int id) const;
QObject *mapping(const QString &text) const;
QObject *mapping(QWidget *widget) const;
QObject *mapping(QObject *object) const;

signals:
void mapped(int);
void mapped(const QString &);
void mapped(QWidget *);
void mapped(QObject *);

public slots:
void map();
void map(QObject *sender);

private:
QSignalMapper(const QSignalMapper &); QSignalMapper &operator=(const QSignalMapper &);






# 95 "/home/eagle/qt-copy/include/QtCore/qsignalmapper.h"
};


# 98 "/home/eagle/qt-copy/include/QtCore/qsignalmapper.h"





# 62 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsocketnotifier.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qsocketnotifier.h"


# 49 "/home/eagle/qt-copy/include/QtCore/qsocketnotifier.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class  QSocketNotifier : public QObject
{
Q_OBJECT
inline QObjectPrivate* d_func() { return reinterpret_cast<QObjectPrivate *>(d_ptr); } inline const QObjectPrivate* d_func() const { return reinterpret_cast<const QObjectPrivate *>(d_ptr); } friend class QObjectPrivate;

public:
enum Type { Read, Write, Exception };

QSocketNotifier(int socket, Type, QObject *parent = 0);



# 67 "/home/eagle/qt-copy/include/QtCore/qsocketnotifier.h"
~QSocketNotifier();

inline int socket() const { return sockfd; }
inline Type type() const { return sntype; }

inline bool isEnabled() const { return snenabled; }

public slots:
void setEnabled(bool);

signals:
void activated(int socket);

protected:
bool event(QEvent *);

private:
QSocketNotifier(const QSocketNotifier &); QSocketNotifier &operator=(const QSocketNotifier &);

int sockfd;
Type sntype;
bool snenabled;
};






# 63 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsystemsemaphore.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qsystemsemaphore.h"


# 49 "/home/eagle/qt-copy/include/QtCore/qsystemsemaphore.h"




typedef QtValidLicenseForCoreModule QtCoreModule;



# 57 "/home/eagle/qt-copy/include/QtCore/qsystemsemaphore.h"
class QSystemSemaphorePrivate;

class  QSystemSemaphore
{

public:
enum AccessMode
{
Open,
Create
};

enum SystemSemaphoreError
{
NoError,
PermissionDenied,
KeyError,
AlreadyExists,
NotFound,
OutOfResources,
UnknownError
};

QSystemSemaphore(const QString &key, int initialValue = 0, AccessMode mode = Open);
~QSystemSemaphore();

void setKey(const QString &key, int initialValue = 0, AccessMode mode = Open);
QString key() const;

bool acquire();
bool release(int n = 1);

SystemSemaphoreError error() const;
QString errorString() const;

private:
QSystemSemaphore(const QSystemSemaphore &); QSystemSemaphore &operator=(const QSystemSemaphore &);
QSystemSemaphorePrivate *d;
};



# 99 "/home/eagle/qt-copy/include/QtCore/qsystemsemaphore.h"






# 64 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtimer.h"
















































# 1 "/home/eagle/qt-copy/include/QtCore/qbasictimer.h"












































































# 49 "/home/eagle/qt-copy/include/QtCore/qtimer.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtCore/qtimer.h"


# 52 "/home/eagle/qt-copy/include/QtCore/qtimer.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class  QTimer : public QObject
{
Q_OBJECT
Q_PROPERTY(bool singleShot READ isSingleShot WRITE setSingleShot)
Q_PROPERTY(int interval READ interval WRITE setInterval)
Q_PROPERTY(bool active READ isActive)
public:
explicit QTimer(QObject *parent = 0);



# 69 "/home/eagle/qt-copy/include/QtCore/qtimer.h"
~QTimer();

inline bool isActive() const { return id >= 0; }
int timerId() const { return id; }

void setInterval(int msec);
int interval() const { return inter; }

inline void setSingleShot(bool singleShot);
inline bool isSingleShot() const { return single; }

static void singleShot(int msec, QObject *receiver, const char *member);

public slots:
void start(int msec);

void start();
void stop();






# 93 "/home/eagle/qt-copy/include/QtCore/qtimer.h"
signals:
void timeout();

protected:
void timerEvent(QTimerEvent *);

private:
QTimer(const QTimer &); QTimer &operator=(const QTimer &);

inline int startTimer(int){ return -1;}
inline void killTimer(int){}

int id, inter, del;
uint single : 1;
uint nulltimer : 1;
};

inline void QTimer::setSingleShot(bool asingleShot) { single = asingleShot; }








# 65 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtranslator.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qtranslator.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"












































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtCore/qtranslator.h"


# 50 "/home/eagle/qt-copy/include/QtCore/qtranslator.h"




typedef QtValidLicenseForCoreModule QtCoreModule;



# 58 "/home/eagle/qt-copy/include/QtCore/qtranslator.h"
class QTranslatorPrivate;

class  QTranslator : public QObject
{
Q_OBJECT
public:
explicit QTranslator(QObject *parent = 0);



# 68 "/home/eagle/qt-copy/include/QtCore/qtranslator.h"
~QTranslator();


virtual QString translate(const char *context, const char *sourceText,
const char *comment = 0) const;
QString translate(const char *context, const char *sourceText, const char *comment,
int n) const;

virtual bool isEmpty() const;

bool load(const QString & filename,
const QString & directory = QString(),
const QString & search_delimiters = QString(),
const QString & suffix = QString());
bool load(const uchar *data, int len);






# 89 "/home/eagle/qt-copy/include/QtCore/qtranslator.h"
private:
QTranslator(const QTranslator &); QTranslator &operator=(const QTranslator &);
inline QTranslatorPrivate* d_func() { return reinterpret_cast<QTranslatorPrivate *>(d_ptr); } inline const QTranslatorPrivate* d_func() const { return reinterpret_cast<const QTranslatorPrivate *>(d_ptr); } friend class QTranslatorPrivate;
};



# 96 "/home/eagle/qt-copy/include/QtCore/qtranslator.h"





# 66 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qvariant.h"






















































































































































































































































































































































































































































































































































































































# 67 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfactoryinterface.h"





































































# 68 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlibrary.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qlibrary.h"


# 49 "/home/eagle/qt-copy/include/QtCore/qlibrary.h"




typedef QtValidLicenseForCoreModule QtCoreModule;








# 62 "/home/eagle/qt-copy/include/QtCore/qlibrary.h"
class QLibraryPrivate;

class  QLibrary : public QObject
{
Q_OBJECT
Q_PROPERTY(QString fileName READ fileName WRITE setFileName)
Q_PROPERTY(LoadHints loadHints READ loadHints WRITE setLoadHints)

public:
enum LoadHint {
ResolveAllSymbolsHint = 0x01,
ExportExternalSymbolsHint = 0x02,
LoadArchiveMemberHint = 0x04
};
typedef QFlags<LoadHint> LoadHints;

explicit QLibrary(QObject *parent = 0);
explicit QLibrary(const QString& fileName, QObject *parent = 0);
explicit QLibrary(const QString& fileName, int verNum, QObject *parent = 0);
explicit QLibrary(const QString& fileName, const QString &version, QObject *parent = 0);
~QLibrary();

void *resolve(const char *symbol);
static void *resolve(const QString &fileName, const char *symbol);
static void *resolve(const QString &fileName, int verNum, const char *symbol);
static void *resolve(const QString &fileName, const QString &version, const char *symbol);

bool load();
bool unload();
bool isLoaded() const;

static bool isLibrary(const QString &fileName);

void setFileName(const QString &fileName);
QString fileName() const;

void setFileNameAndVersion(const QString &fileName, int verNum);
void setFileNameAndVersion(const QString &fileName, const QString &version);
QString errorString() const;

void setLoadHints(LoadHints hints);
LoadHints loadHints() const;




# 108 "/home/eagle/qt-copy/include/QtCore/qlibrary.h"
private:
QLibraryPrivate *d;
bool did_load;
QLibrary(const QLibrary &); QLibrary &operator=(const QLibrary &);
};

inline QFlags<QLibrary::LoadHints::enum_type> operator|(QLibrary::LoadHints::enum_type f1, QLibrary::LoadHints::enum_type f2) { return QFlags<QLibrary::LoadHints::enum_type>(f1) | f2; } inline QFlags<QLibrary::LoadHints::enum_type> operator|(QLibrary::LoadHints::enum_type f1, QFlags<QLibrary::LoadHints::enum_type> f2) { return f2 | f1; }



# 118 "/home/eagle/qt-copy/include/QtCore/qlibrary.h"





# 69 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qplugin.h"
















































































































# 70 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpluginloader.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qlibrary.h"


























































































































# 47 "/home/eagle/qt-copy/include/QtCore/qpluginloader.h"









# 56 "/home/eagle/qt-copy/include/QtCore/qpluginloader.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class QLibraryPrivate;

class  QPluginLoader : public QObject
{
Q_OBJECT
Q_PROPERTY(QString fileName READ fileName WRITE setFileName)
Q_PROPERTY(QLibrary::LoadHints loadHints READ loadHints WRITE setLoadHints)
public:
explicit QPluginLoader(QObject *parent = 0);
explicit QPluginLoader(const QString &fileName, QObject *parent = 0);
~QPluginLoader();

QObject *instance();

static QObjectList staticInstances();

bool load();
bool unload();
bool isLoaded() const;

void setFileName(const QString &fileName);
QString fileName() const;

QString errorString() const;

void setLoadHints(QLibrary::LoadHints loadHints);
QLibrary::LoadHints loadHints() const;

private:
QLibraryPrivate *d;
bool did_load;
QPluginLoader(const QPluginLoader &); QPluginLoader &operator=(const QPluginLoader &);
};








# 71 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/quuid.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/quuid.h"


# 49 "/home/eagle/qt-copy/include/QtCore/quuid.h"
















# 65 "/home/eagle/qt-copy/include/QtCore/quuid.h"


typedef QtValidLicenseForCoreModule QtCoreModule;

struct  QUuid
{
enum Variant {
VarUnknown =-1,
NCS = 0, 
DCE = 2, 
Microsoft = 6, 
Reserved = 7 
};

enum Version {
VerUnknown =-1,
Time = 1, 
EmbeddedPOSIX = 2, 
Name = 3, 
Random = 4 
};

QUuid()
{
data1 = 0;
data2 = 0;
data3 = 0;
for(int i = 0; i < 8; i++)
data4[i] = 0;
}
QUuid(uint l, ushort w1, ushort w2, uchar b1, uchar b2, uchar b3, uchar b4, uchar b5, uchar b6, uchar b7, uchar b8)
{
data1 = l;
data2 = w1;
data3 = w2;
data4[0] = b1;
data4[1] = b2;
data4[2] = b3;
data4[3] = b4;
data4[4] = b5;
data4[5] = b6;
data4[6] = b7;
data4[7] = b8;
}

# 110 "/home/eagle/qt-copy/include/QtCore/quuid.h"
QUuid(const QString &);
QUuid(const char *);
QString toString() const;
operator QString() const { return toString(); }

# 115 "/home/eagle/qt-copy/include/QtCore/quuid.h"
bool isNull() const;

bool operator==(const QUuid &orig) const
{
uint i;
if (data1 != orig.data1 || data2 != orig.data2 ||
data3 != orig.data3)
return false;

for(i = 0; i < 8; i++)
if (data4[i] != orig.data4[i])
return false;

return true;
}

bool operator!=(const QUuid &orig) const
{
return !(*this == orig);
}

bool operator<(const QUuid &other) const;
bool operator>(const QUuid &other) const;



































# 173 "/home/eagle/qt-copy/include/QtCore/quuid.h"
static QUuid createUuid();
QUuid::Variant variant() const;
QUuid::Version version() const;

uint data1;
ushort data2;
ushort data3;
uchar data4[8];
};


# 184 "/home/eagle/qt-copy/include/QtCore/quuid.h"
 QDataStream &operator<<(QDataStream &, const QUuid &);
 QDataStream &operator>>(QDataStream &, QUuid &);


# 188 "/home/eagle/qt-copy/include/QtCore/quuid.h"





# 72 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qatomic.h"

























































































































































































































# 73 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbasicatomic.h"




















































































































































































































# 74 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmutex.h"



































































































































































































# 75 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qreadwritelock.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qreadwritelock.h"



# 50 "/home/eagle/qt-copy/include/QtCore/qreadwritelock.h"




typedef QtValidLicenseForCoreModule QtCoreModule;



# 58 "/home/eagle/qt-copy/include/QtCore/qreadwritelock.h"
struct QReadWriteLockPrivate;

class  QReadWriteLock
{
public:
enum RecursionMode { NonRecursive, Recursive };

QReadWriteLock(); 
QReadWriteLock(RecursionMode recursionMode);
~QReadWriteLock();

void lockForRead();
bool tryLockForRead();
bool tryLockForRead(int timeout);

void lockForWrite();
bool tryLockForWrite();
bool tryLockForWrite(int timeout);

void unlock();

private:
QReadWriteLock(const QReadWriteLock &); QReadWriteLock &operator=(const QReadWriteLock &);
QReadWriteLockPrivate *d;

friend class QWaitCondition;
};






# 91 "/home/eagle/qt-copy/include/QtCore/qreadwritelock.h"
class  QReadLocker
{
public:
inline QReadLocker(QReadWriteLock *readWriteLock);

inline ~QReadLocker()
{ unlock(); }

inline void unlock()
{
if (q_lock) {
if ((q_val & quintptr(1u)) == quintptr(1u)) {
q_val &= ~quintptr(1u);
q_lock->unlock();
}
}
}

inline void relock()
{
if (q_lock) {
if ((q_val & quintptr(1u)) == quintptr(0u)) {
q_lock->lockForRead();
q_val |= quintptr(1u);
}
}
}

inline QReadWriteLock *readWriteLock() const
{ return reinterpret_cast<QReadWriteLock *>(q_val & ~quintptr(1u)); }

private:
QReadLocker(const QReadLocker &); QReadLocker &operator=(const QReadLocker &);
union {
QReadWriteLock *q_lock;
quintptr q_val;
};
};

inline QReadLocker::QReadLocker(QReadWriteLock *areadWriteLock)
: q_lock(areadWriteLock)
{
qt_noop();
relock();
}

class  QWriteLocker
{
public:
inline QWriteLocker(QReadWriteLock *readWriteLock);

inline ~QWriteLocker()
{ unlock(); }

inline void unlock()
{
if (q_lock) {
if ((q_val & quintptr(1u)) == quintptr(1u)) {
q_val &= ~quintptr(1u);
q_lock->unlock();
}
}
}

inline void relock()
{
if (q_lock) {
if ((q_val & quintptr(1u)) == quintptr(0u)) {
q_lock->lockForWrite();
q_val |= quintptr(1u);
}
}
}

inline QReadWriteLock *readWriteLock() const
{ return reinterpret_cast<QReadWriteLock *>(q_val & ~quintptr(1u)); }


private:
QWriteLocker(const QWriteLocker &); QWriteLocker &operator=(const QWriteLocker &);
union{
QReadWriteLock *q_lock;
quintptr q_val;
};
};

inline QWriteLocker::QWriteLocker(QReadWriteLock *areadWriteLock)
: q_lock(areadWriteLock)
{
qt_noop();
relock();
}

























































# 240 "/home/eagle/qt-copy/include/QtCore/qreadwritelock.h"





# 76 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsemaphore.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qsemaphore.h"


# 49 "/home/eagle/qt-copy/include/QtCore/qsemaphore.h"




typedef QtValidLicenseForCoreModule QtCoreModule;



# 57 "/home/eagle/qt-copy/include/QtCore/qsemaphore.h"
class QSemaphorePrivate;

class  QSemaphore
{
public:
explicit QSemaphore(int n = 0);
~QSemaphore();

void acquire(int n = 1);
bool tryAcquire(int n = 1);
bool tryAcquire(int n, int timeout);

void release(int n = 1);

int available() const;

private:
QSemaphore(const QSemaphore &); QSemaphore &operator=(const QSemaphore &);

QSemaphorePrivate *d;
};



# 81 "/home/eagle/qt-copy/include/QtCore/qsemaphore.h"





# 77 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qthread.h"




































































































































































# 78 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qthreadstorage.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qthreadstorage.h"




# 51 "/home/eagle/qt-copy/include/QtCore/qthreadstorage.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class  QThreadStorageData
{
public:
explicit QThreadStorageData(void (*func)(void *));
~QThreadStorageData();

void** get() const;
void** set(void* p);

static void finish(void**);
int id;
};


# 71 "/home/eagle/qt-copy/include/QtCore/qthreadstorage.h"



template <typename T>
inline
T *&qThreadStorage_localData(QThreadStorageData &d, T **)
{
void **v = d.get();
if (!v) v = d.set(0);
return *(reinterpret_cast<T**>(v));
}

template <typename T>
inline
T *qThreadStorage_localData_const(const QThreadStorageData &d, T **)
{
void **v = d.get();
return v ? *(reinterpret_cast<T**>(v)) : 0;
}

template <typename T>
inline
void qThreadStorage_setLocalData(QThreadStorageData &d, T **t)
{ (void) d.set(*t); }



# 98 "/home/eagle/qt-copy/include/QtCore/qthreadstorage.h"

template <typename T>
inline
T &qThreadStorage_localData(QThreadStorageData &d, T *)
{
void **v = d.get();
if (!v) v = d.set(new T());
return *(reinterpret_cast<T*>(*v));
}

template <typename T>
inline
T qThreadStorage_localData_const(const QThreadStorageData &d, T *)
{
void **v = d.get();
return v ? *(reinterpret_cast<T*>(*v)) : T();
}

template <typename T>
inline
void qThreadStorage_setLocalData(QThreadStorageData &d, T *t)
{ (void) d.set(new T(*t)); }



# 123 "/home/eagle/qt-copy/include/QtCore/qthreadstorage.h"



# 126 "/home/eagle/qt-copy/include/QtCore/qthreadstorage.h"
template <class T>
class QThreadStorage
{
private:
QThreadStorageData d;

QThreadStorage(const QThreadStorage &); QThreadStorage &operator=(const QThreadStorage &);

static inline void deleteData(void *x)
{ delete static_cast<T>(x); }

public:
inline QThreadStorage() : d(deleteData) { }
inline ~QThreadStorage() { }

inline bool hasLocalData() const
{ return d.get() != 0; }

inline T& localData()
{ return qThreadStorage_localData(d, reinterpret_cast<T*>(0)); }
inline T localData() const
{ return qThreadStorage_localData_const(d, reinterpret_cast<T*>(0)); }

inline void setLocalData(T t)
{ qThreadStorage_setLocalData(d, &t); }
};








# 79 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qwaitcondition.h"











































































































# 80 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qalgorithms.h"

















































































































































































































































































































































































































































































































































































# 81 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbitarray.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"












































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qbitarray.h"


# 49 "/home/eagle/qt-copy/include/QtCore/qbitarray.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class QBitRef;
class  QBitArray
{
friend  QDataStream &operator<<(QDataStream &, const QBitArray &);
friend  QDataStream &operator>>(QDataStream &, QBitArray &);
friend  uint qHash(const QBitArray &key);
QByteArray d;

public:
inline QBitArray() {}
explicit QBitArray(int size, bool val = false);
QBitArray(const QBitArray &other) : d(other.d) {}
inline QBitArray &operator=(const QBitArray &other) { d = other.d; return *this; }

inline int size() const { return (d.size() << 3) - *d.constData(); }
inline int count() const { return (d.size() << 3) - *d.constData(); }
int count(bool on) const;


inline bool isEmpty() const { return d.isEmpty(); }
inline bool isNull() const { return d.isNull(); }

void resize(int size);

inline void detach() { d.detach(); }
inline bool isDetached() const { return d.isDetached(); }
inline void clear() { d.clear(); }

bool testBit(int i) const;
void setBit(int i);
void setBit(int i, bool val);
void clearBit(int i);
bool toggleBit(int i);

bool at(int i) const;
QBitRef operator[](int i);
bool operator[](int i) const;
QBitRef operator[](uint i);
bool operator[](uint i) const;

QBitArray& operator&=(const QBitArray &);
QBitArray& operator|=(const QBitArray &);
QBitArray& operator^=(const QBitArray &);
QBitArray operator~() const;

inline bool operator==(const QBitArray& a) const { return d == a.d; }
inline bool operator!=(const QBitArray& a) const { return d != a.d; }

inline bool fill(bool val, int size = -1);
void fill(bool val, int first, int last);

inline void truncate(int pos) { if (pos < size()) resize(pos); }

public:
typedef QByteArray::DataPtr DataPtr;
inline DataPtr &data_ptr() { return d.data_ptr(); }
};

inline bool QBitArray::fill(bool aval, int asize)
{ *this = QBitArray((asize < 0 ? this->size() : asize), aval); return true; }

 QBitArray operator&(const QBitArray &, const QBitArray &);
 QBitArray operator|(const QBitArray &, const QBitArray &);
 QBitArray operator^(const QBitArray &, const QBitArray &);

inline bool QBitArray::testBit(int i) const
{ qt_noop();
return (*(reinterpret_cast<const uchar*>(d.constData())+1+(i>>3)) & (1 << (i & 7))) != 0; }

inline void QBitArray::setBit(int i)
{ qt_noop();
*(reinterpret_cast<uchar*>(d.data())+1+(i>>3)) |= (1 << (i & 7)); }

inline void QBitArray::clearBit(int i)
{ qt_noop();
*(reinterpret_cast<uchar*>(d.data())+1+(i>>3)) &= ~(1 << (i & 7)); }

inline void QBitArray::setBit(int i, bool val)
{ if (val) setBit(i); else clearBit(i); }

inline bool QBitArray::toggleBit(int i)
{ qt_noop();
uchar b = 1<< (i&7); uchar* p = reinterpret_cast<uchar*>(d.data())+1+(i>>3);
uchar c = *p&b; *p^=b; return c!=0; }

inline bool QBitArray::operator[](int i) const { return testBit(i); }
inline bool QBitArray::operator[](uint i) const { return testBit(i); }
inline bool QBitArray::at(int i) const { return testBit(i); }

class  QBitRef
{
private:
QBitArray& a;
int i;
inline QBitRef(QBitArray& array, int idx) : a(array), i(idx) {}
friend class QBitArray;
public:
inline operator bool() const { return a.testBit(i); }
inline bool operator!() const { return !a.testBit(i); }
QBitRef& operator=(const QBitRef& val) { a.setBit(i, val); return *this; }
QBitRef& operator=(bool val) { a.setBit(i, val); return *this; }
};

inline QBitRef QBitArray::operator[](int i)
{ qt_noop(); return QBitRef(*this, i); }
inline QBitRef QBitArray::operator[](uint i)
{ return QBitRef(*this, i); }



# 165 "/home/eagle/qt-copy/include/QtCore/qbitarray.h"
 QDataStream &operator<<(QDataStream &, const QBitArray &);
 QDataStream &operator>>(QDataStream &, QBitArray &);


# 169 "/home/eagle/qt-copy/include/QtCore/qbitarray.h"
template <> class QTypeInfo<QBitArray> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QBitArray)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QBitArray"; } };
template <> inline bool qIsDetached<QBitArray>(QBitArray &t) { return t.isDetached(); } template <typename T> inline void qSwap(T &, T &); template <> inline void qSwap<QBitArray>(QBitArray &value1, QBitArray &value2) { const QBitArray::DataPtr t = value1.data_ptr(); value1.data_ptr() = value2.data_ptr(); value2.data_ptr() = t; }






# 82 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"












































































































































































































































































































































































































































































































































































































# 83 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbytearraymatcher.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"












































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qbytearraymatcher.h"


# 49 "/home/eagle/qt-copy/include/QtCore/qbytearraymatcher.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class QByteArrayMatcherPrivate;

class  QByteArrayMatcher
{
public:
QByteArrayMatcher();
explicit QByteArrayMatcher(const QByteArray &pattern);
QByteArrayMatcher(const QByteArrayMatcher &other);
~QByteArrayMatcher();

QByteArrayMatcher &operator=(const QByteArrayMatcher &other);

void setPattern(const QByteArray &pattern);

int indexIn(const QByteArray &ba, int from = 0) const;
inline QByteArray pattern() const { return q_pattern; }

private:
QByteArrayMatcherPrivate *d;
QByteArray q_pattern;
uint q_skiptable[256];
};






# 84 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcache.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qhash.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qcache.h"


# 49 "/home/eagle/qt-copy/include/QtCore/qcache.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

template <class Key, class T>
class QCache
{
struct Node {
inline Node() : keyPtr(0) {}
inline Node(T *data, int cost)
: keyPtr(0), t(data), c(cost), p(0), n(0) {}
const Key *keyPtr; T *t; int c; Node *p,*n;
};
Node *f, *l;
QHash<Key, Node> hash;
void *unused;
int mx, total;

inline void unlink(Node &n) {
if (n.p) n.p->n = n.n;
if (n.n) n.n->p = n.p;
if (l == &n) l = n.p;
if (f == &n) f = n.n;
total -= n.c;
delete n.t;
hash.remove(*n.keyPtr);
}
inline T *relink(const Key &key) {
typename QHash<Key, Node>::iterator i = hash.find(key);
if (typename QHash<Key, Node>::const_iterator(i) == hash.constEnd())
return 0;

Node &n = *i;
if (f != &n) {
if (n.p) n.p->n = n.n;
if (n.n) n.n->p = n.p;
if (l == &n) l = n.p;
n.p = 0;
n.n = f;
f->p = &n;
f = &n;
}
return n.t;
}

QCache(const QCache &); QCache &operator=(const QCache &);

public:
inline explicit QCache(int maxCost = 100);




# 104 "/home/eagle/qt-copy/include/QtCore/qcache.h"
inline ~QCache() { clear(); }

inline int maxCost() const { return mx; }
void setMaxCost(int m);
inline int totalCost() const { return total; }

inline int size() const { return hash.size(); }
inline int count() const { return hash.size(); }
inline bool isEmpty() const { return hash.isEmpty(); }
inline QList<Key> keys() const { return hash.keys(); }

void clear();

bool insert(const Key &key, T *object, int cost = 1);
T *object(const Key &key) const;
inline bool contains(const Key &key) const { return hash.contains(key); }
T *operator[](const Key &key) const;

bool remove(const Key &key);
T *take(const Key &key);

private:
void trim(int m);





# 132 "/home/eagle/qt-copy/include/QtCore/qcache.h"
};

template <class Key, class T>
inline QCache<Key, T>::QCache(int amaxCost)
: f(0), l(0), mx(amaxCost), total(0) {}

template <class Key, class T>
inline void QCache<Key,T>::clear()
{ while (f) { delete f->t; f = f->n; }
hash.clear(); l = 0; total = 0; }

template <class Key, class T>
inline void QCache<Key,T>::setMaxCost(int m)
{ mx = m; trim(mx); }

template <class Key, class T>
inline T *QCache<Key,T>::object(const Key &key) const
{ return const_cast<QCache<Key,T>*>(this)->relink(key); }

template <class Key, class T>
inline T *QCache<Key,T>::operator[](const Key &key) const
{ return object(key); }

template <class Key, class T>
inline bool QCache<Key,T>::remove(const Key &key)
{
typename QHash<Key, Node>::iterator i = hash.find(key);
if (typename QHash<Key, Node>::const_iterator(i) == hash.constEnd()) {
return false;
} else {
unlink(*i);
return true;
}
}

template <class Key, class T>
inline T *QCache<Key,T>::take(const Key &key)
{
typename QHash<Key, Node>::iterator i = hash.find(key);
if (i == hash.end())
return 0;

Node &n = *i;
T *t = n.t;
n.t = 0;
unlink(n);
return t;
}

template <class Key, class T>
bool QCache<Key,T>::insert(const Key &akey, T *aobject, int acost)
{
remove(akey);
if (acost > mx) {
delete aobject;
return false;
}
trim(mx - acost);
Node sn(aobject, acost);
typename QHash<Key, Node>::iterator i = hash.insert(akey, sn);
total += acost;
Node *n = &i.value();
n->keyPtr = &i.key();
if (f) f->p = n;
n->n = f;
f = n;
if (!l) l = f;
return true;
}

template <class Key, class T>
void QCache<Key,T>::trim(int m)
{
Node *n = l;
while (n && total > m) {
Node *u = n;
n = n->p;
if (qIsDetached(*u->t))
unlink(*u);
}
}






# 85 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qchar.h"















































































































































































































































































































































































































# 86 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcontainerfwd.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qcontainerfwd.h"


# 49 "/home/eagle/qt-copy/include/QtCore/qcontainerfwd.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

template <class Key, class T> class QCache;
template <class Key, class T> class QHash;
template <class T> class QLinkedList;
template <class T> class QList;
template <class Key, class T> class QMap;
template <class Key, class T> class QMultiHash;
template <class Key, class T> class QMultiMap;
template <class T1, class T2> struct QPair;
template <class T> class QQueue;
template <class T> class QSet;
template <class T> class QStack;
template<class T, int Prealloc = 256> class QVarLengthArray;
template <class T> class QVector;






# 87 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcryptographichash.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"












































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qcryptographichash.h"


# 49 "/home/eagle/qt-copy/include/QtCore/qcryptographichash.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class QCryptographicHashPrivate;

class  QCryptographicHash
{
public:
enum Algorithm {
Md4,
Md5,
Sha1
};

QCryptographicHash(Algorithm method);
~QCryptographicHash();

void reset();

void addData(const char *data, int length);
void addData(const QByteArray &data);

QByteArray result() const;

static QByteArray hash(const QByteArray &data, Algorithm method);
private:
QCryptographicHash(const QCryptographicHash &); QCryptographicHash &operator=(const QCryptographicHash &);
QCryptographicHashPrivate *d;
};






# 88 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"


# 50 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class  QDate
{
public:
QDate() { jd = 0; }
QDate(int y, int m, int d);

bool isNull() const { return jd == 0; }
bool isValid() const;

int year() const;
int month() const;
int day() const;
int dayOfWeek() const;
int dayOfYear() const;
int daysInMonth() const;
int daysInYear() const;
int weekNumber(int *yearNum = 0) const;






# 79 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"
static QString shortMonthName(int month);
static QString shortDayName(int weekday);
static QString longMonthName(int month);
static QString longDayName(int weekday);


# 85 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"
QString toString(Qt::DateFormat f = Qt::TextDate) const;
QString toString(const QString &format) const;

# 88 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"
bool setYMD(int y, int m, int d);
bool setDate(int year, int month, int date);

QDate addDays(int days) const;
QDate addMonths(int months) const;
QDate addYears(int years) const;
int daysTo(const QDate &) const;

bool operator==(const QDate &other) const { return jd == other.jd; }
bool operator!=(const QDate &other) const { return jd != other.jd; }
bool operator<(const QDate &other) const { return jd < other.jd; }
bool operator<=(const QDate &other) const { return jd <= other.jd; }
bool operator>(const QDate &other) const { return jd > other.jd; }
bool operator>=(const QDate &other) const { return jd >= other.jd; }

static QDate currentDate();

# 105 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"
static QDate fromString(const QString &s, Qt::DateFormat f = Qt::TextDate);
static QDate fromString(const QString &s, const QString &format);

# 108 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"
static bool isValid(int y, int m, int d);
static bool isLeapYear(int year);




# 114 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"

static uint gregorianToJulian(int y, int m, int d);
static void julianToGregorian(uint jd, int &y, int &m, int &d);





# 122 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"
static inline QDate fromJulianDay(int jd) { QDate d; d.jd = jd; return d; }
inline int toJulianDay() const { return jd; }

private:
uint jd;

friend class QDateTime;
friend class QDateTimePrivate;

# 131 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"
friend  QDataStream &operator<<(QDataStream &, const QDate &);
friend  QDataStream &operator>>(QDataStream &, QDate &);

# 134 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"
};
template <> class QTypeInfo<QDate> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QDate)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QDate"; } };

class  QTime
{
public:
QTime(): mds(NullTime)



# 144 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"
{}
QTime(int h, int m, int s = 0, int ms = 0);

bool isNull() const { return mds == NullTime; }
bool isValid() const;

int hour() const;
int minute() const;
int second() const;
int msec() const;

# 155 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"
QString toString(Qt::DateFormat f = Qt::TextDate) const;
QString toString(const QString &format) const;

# 158 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"
bool setHMS(int h, int m, int s, int ms = 0);

QTime addSecs(int secs) const;
int secsTo(const QTime &) const;
QTime addMSecs(int ms) const;
int msecsTo(const QTime &) const;

bool operator==(const QTime &other) const { return mds == other.mds; }
bool operator!=(const QTime &other) const { return mds != other.mds; }
bool operator<(const QTime &other) const { return mds < other.mds; }
bool operator<=(const QTime &other) const { return mds <= other.mds; }
bool operator>(const QTime &other) const { return mds > other.mds; }
bool operator>=(const QTime &other) const { return mds >= other.mds; }

static QTime currentTime();

# 174 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"
static QTime fromString(const QString &s, Qt::DateFormat f = Qt::TextDate);
static QTime fromString(const QString &s, const QString &format);

# 177 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"
static bool isValid(int h, int m, int s, int ms = 0);





# 183 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"
void start();
int restart();
int elapsed() const;
private:
enum TimeFlag { NullTime = -1 };
inline int ds() const { return mds == -1 ? 0 : mds; }
int mds;




# 194 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"
friend class QDateTime;
friend class QDateTimePrivate;

# 197 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"
friend  QDataStream &operator<<(QDataStream &, const QTime &);
friend  QDataStream &operator>>(QDataStream &, QTime &);

# 200 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"
};
template <> class QTypeInfo<QTime> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QTime)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QTime"; } };

class QDateTimePrivate;

class  QDateTime
{
public:
QDateTime();
explicit QDateTime(const QDate &);
QDateTime(const QDate &, const QTime &, Qt::TimeSpec spec = Qt::LocalTime);
QDateTime(const QDateTime &other);
~QDateTime();

QDateTime &operator=(const QDateTime &other);

bool isNull() const;
bool isValid() const;

QDate date() const;
QTime time() const;
Qt::TimeSpec timeSpec() const;
uint toTime_t() const;
void setDate(const QDate &date);
void setTime(const QTime &time);
void setTimeSpec(Qt::TimeSpec spec);
void setTime_t(uint secsSince1Jan1970UTC);

# 228 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"
QString toString(Qt::DateFormat f = Qt::TextDate) const;
QString toString(const QString &format) const;

# 231 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"
QDateTime addDays(int days) const;
QDateTime addMonths(int months) const;
QDateTime addYears(int years) const;
QDateTime addSecs(int secs) const;
QDateTime addMSecs(qint64 msecs) const;
QDateTime toTimeSpec(Qt::TimeSpec spec) const;
inline QDateTime toLocalTime() const { return toTimeSpec(Qt::LocalTime); }
inline QDateTime toUTC() const { return toTimeSpec(Qt::UTC); }
int daysTo(const QDateTime &) const;
int secsTo(const QDateTime &) const;

bool operator==(const QDateTime &other) const;
inline bool operator!=(const QDateTime &other) const { return !(*this == other); }
bool operator<(const QDateTime &other) const;
inline bool operator<=(const QDateTime &other) const { return !(other < *this); }
inline bool operator>(const QDateTime &other) const { return other < *this; }
inline bool operator>=(const QDateTime &other) const { return !(*this < other); }

void setUtcOffset(int seconds);
int utcOffset() const;

static QDateTime currentDateTime();

# 254 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"
static QDateTime fromString(const QString &s, Qt::DateFormat f = Qt::TextDate);
static QDateTime fromString(const QString &s, const QString &format);

# 257 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"
static QDateTime fromTime_t(uint secsSince1Jan1970UTC);
















# 274 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"
private:
friend class QDateTimePrivate;
void detach();
QDateTimePrivate *d;


# 280 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"
friend  QDataStream &operator<<(QDataStream &, const QDateTime &);
friend  QDataStream &operator>>(QDataStream &, QDateTime &);

# 283 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"
};
template <> class QTypeInfo<QDateTime> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QDateTime)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QDateTime"; } };




















# 305 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"
 QDataStream &operator<<(QDataStream &, const QDate &);
 QDataStream &operator>>(QDataStream &, QDate &);
 QDataStream &operator<<(QDataStream &, const QTime &);
 QDataStream &operator>>(QDataStream &, QTime &);
 QDataStream &operator<<(QDataStream &, const QDateTime &);
 QDataStream &operator>>(QDataStream &, QDateTime &);



# 314 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"
 QDebug operator<<(QDebug, const QDate &);
 QDebug operator<<(QDebug, const QTime &);
 QDebug operator<<(QDebug, const QDateTime &);


# 319 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"





# 89 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qhash.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 90 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qiterator.h"








































































# 91 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qline.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qpoint.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qpoint.h"


# 49 "/home/eagle/qt-copy/include/QtCore/qpoint.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class  QPoint
{
public:
QPoint();
QPoint(int xpos, int ypos);

bool isNull() const;

int x() const;
int y() const;
void setX(int x);
void setY(int y);

int manhattanLength() const;

int &rx();
int &ry();

QPoint &operator+=(const QPoint &p);
QPoint &operator-=(const QPoint &p);
QPoint &operator*=(qreal c);
QPoint &operator/=(qreal c);

friend inline bool operator==(const QPoint &, const QPoint &);
friend inline bool operator!=(const QPoint &, const QPoint &);
friend inline const QPoint operator+(const QPoint &, const QPoint &);
friend inline const QPoint operator-(const QPoint &, const QPoint &);
friend inline const QPoint operator*(const QPoint &, qreal);
friend inline const QPoint operator*(qreal, const QPoint &);
friend inline const QPoint operator-(const QPoint &);
friend inline const QPoint operator/(const QPoint &, qreal);

private:
friend class QTransform;




# 93 "/home/eagle/qt-copy/include/QtCore/qpoint.h"
int xp;
int yp;

# 96 "/home/eagle/qt-copy/include/QtCore/qpoint.h"
};

template <> class QTypeInfo<QPoint> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QPoint)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QPoint"; } };





# 104 "/home/eagle/qt-copy/include/QtCore/qpoint.h"
 QDataStream &operator<<(QDataStream &, const QPoint &);
 QDataStream &operator>>(QDataStream &, QPoint &);


# 108 "/home/eagle/qt-copy/include/QtCore/qpoint.h"




inline QPoint::QPoint()
{ xp=0; yp=0; }

inline QPoint::QPoint(int xpos, int ypos)
{ xp = xpos; yp = ypos; }

inline bool QPoint::isNull() const
{ return xp == 0 && yp == 0; }

inline int QPoint::x() const
{ return xp; }

inline int QPoint::y() const
{ return yp; }

inline void QPoint::setX(int xpos)
{ xp = xpos; }

inline void QPoint::setY(int ypos)
{ yp = ypos; }

inline int &QPoint::rx()
{ return xp; }

inline int &QPoint::ry()
{ return yp; }

inline QPoint &QPoint::operator+=(const QPoint &p)
{ xp+=p.xp; yp+=p.yp; return *this; }

inline QPoint &QPoint::operator-=(const QPoint &p)
{ xp-=p.xp; yp-=p.yp; return *this; }

inline QPoint &QPoint::operator*=(qreal c)
{ xp = qRound(xp*c); yp = qRound(yp*c); return *this; }

inline bool operator==(const QPoint &p1, const QPoint &p2)
{ return p1.xp == p2.xp && p1.yp == p2.yp; }

inline bool operator!=(const QPoint &p1, const QPoint &p2)
{ return p1.xp != p2.xp || p1.yp != p2.yp; }

inline const QPoint operator+(const QPoint &p1, const QPoint &p2)
{ return QPoint(p1.xp+p2.xp, p1.yp+p2.yp); }

inline const QPoint operator-(const QPoint &p1, const QPoint &p2)
{ return QPoint(p1.xp-p2.xp, p1.yp-p2.yp); }

inline const QPoint operator*(const QPoint &p, qreal c)
{ return QPoint(qRound(p.xp*c), qRound(p.yp*c)); }

inline const QPoint operator*(qreal c, const QPoint &p)
{ return QPoint(qRound(p.xp*c), qRound(p.yp*c)); }

inline const QPoint operator-(const QPoint &p)
{ return QPoint(-p.xp, -p.yp); }

inline QPoint &QPoint::operator/=(qreal c)
{
qt_noop();
xp = qRound(xp/c);
yp = qRound(yp/c);
return *this;
}

inline const QPoint operator/(const QPoint &p, qreal c)
{
qt_noop();
return QPoint(qRound(p.xp/c), qRound(p.yp/c));
}


# 184 "/home/eagle/qt-copy/include/QtCore/qpoint.h"
 QDebug operator<<(QDebug, const QPoint &);






# 191 "/home/eagle/qt-copy/include/QtCore/qpoint.h"
class  QPointF
{
public:
QPointF();
QPointF(const QPoint &p);
QPointF(qreal xpos, qreal ypos);

bool isNull() const;

qreal x() const;
qreal y() const;
void setX(qreal x);
void setY(qreal y);

qreal &rx();
qreal &ry();

QPointF &operator+=(const QPointF &p);
QPointF &operator-=(const QPointF &p);
QPointF &operator*=(qreal c);
QPointF &operator/=(qreal c);

friend inline bool operator==(const QPointF &, const QPointF &);
friend inline bool operator!=(const QPointF &, const QPointF &);
friend inline const QPointF operator+(const QPointF &, const QPointF &);
friend inline const QPointF operator-(const QPointF &, const QPointF &);
friend inline const QPointF operator*(qreal, const QPointF &);
friend inline const QPointF operator*(const QPointF &, qreal);
friend inline const QPointF operator-(const QPointF &);
friend inline const QPointF operator/(const QPointF &, qreal);

QPoint toPoint() const;

private:
friend class QMatrix;
friend class QTransform;

qreal xp;
qreal yp;
};

template <> class QTypeInfo<QPointF> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QPointF)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QPointF"; } };





# 238 "/home/eagle/qt-copy/include/QtCore/qpoint.h"
 QDataStream &operator<<(QDataStream &, const QPointF &);
 QDataStream &operator>>(QDataStream &, QPointF &);


# 242 "/home/eagle/qt-copy/include/QtCore/qpoint.h"




inline QPointF::QPointF() : xp(0), yp(0) { }

inline QPointF::QPointF(qreal xpos, qreal ypos) : xp(xpos), yp(ypos) { }

inline QPointF::QPointF(const QPoint &p) : xp(p.x()), yp(p.y()) { }

inline bool QPointF::isNull() const
{
return qIsNull(xp) && qIsNull(yp);
}

inline qreal QPointF::x() const
{
return xp;
}

inline qreal QPointF::y() const
{
return yp;
}

inline void QPointF::setX(qreal xpos)
{
xp = xpos;
}

inline void QPointF::setY(qreal ypos)
{
yp = ypos;
}

inline qreal &QPointF::rx()
{
return xp;
}

inline qreal &QPointF::ry()
{
return yp;
}

inline QPointF &QPointF::operator+=(const QPointF &p)
{
xp+=p.xp;
yp+=p.yp;
return *this;
}

inline QPointF &QPointF::operator-=(const QPointF &p)
{
xp-=p.xp; yp-=p.yp; return *this;
}

inline QPointF &QPointF::operator*=(qreal c)
{
xp*=c; yp*=c; return *this;
}

inline bool operator==(const QPointF &p1, const QPointF &p2)
{
return qFuzzyCompare(p1.xp, p2.xp) && qFuzzyCompare(p1.yp, p2.yp);
}

inline bool operator!=(const QPointF &p1, const QPointF &p2)
{
return !qFuzzyCompare(p1.xp, p2.xp) || !qFuzzyCompare(p1.yp, p2.yp);
}

inline const QPointF operator+(const QPointF &p1, const QPointF &p2)
{
return QPointF(p1.xp+p2.xp, p1.yp+p2.yp);
}

inline const QPointF operator-(const QPointF &p1, const QPointF &p2)
{
return QPointF(p1.xp-p2.xp, p1.yp-p2.yp);
}

inline const QPointF operator*(const QPointF &p, qreal c)
{
return QPointF(p.xp*c, p.yp*c);
}

inline const QPointF operator*(qreal c, const QPointF &p)
{
return QPointF(p.xp*c, p.yp*c);
}

inline const QPointF operator-(const QPointF &p)
{
return QPointF(-p.xp, -p.yp);
}

inline QPointF &QPointF::operator/=(qreal c)
{
qt_noop();
xp/=c;
yp/=c;
return *this;
}

inline const QPointF operator/(const QPointF &p, qreal c)
{
qt_noop();
return QPointF(p.xp/c, p.yp/c);
}

inline QPoint QPointF::toPoint() const
{
return QPoint(qRound(xp), qRound(yp));
}


# 359 "/home/eagle/qt-copy/include/QtCore/qpoint.h"
 QDebug operator<<(QDebug d, const QPointF &p);


# 362 "/home/eagle/qt-copy/include/QtCore/qpoint.h"





# 47 "/home/eagle/qt-copy/include/QtCore/qline.h"


# 49 "/home/eagle/qt-copy/include/QtCore/qline.h"




typedef QtValidLicenseForCoreModule QtCoreModule;





class  QLine
{
public:
inline QLine();
inline QLine(const QPoint &pt1, const QPoint &pt2);
inline QLine(int x1, int y1, int x2, int y2);

inline bool isNull() const;

inline QPoint p1() const;
inline QPoint p2() const;

inline int x1() const;
inline int y1() const;

inline int x2() const;
inline int y2() const;

inline int dx() const;
inline int dy() const;

inline void translate(const QPoint &p);
inline void translate(int dx, int dy);

inline QLine translated(const QPoint &p) const;
inline QLine translated(int dx, int dy) const;

inline void setP1(const QPoint &p1);
inline void setP2(const QPoint &p2);
inline void setPoints(const QPoint &p1, const QPoint &p2);
inline void setLine(int x1, int y1, int x2, int y2);

inline bool operator==(const QLine &d) const;
inline bool operator!=(const QLine &d) const { return !(*this == d); }

private:
QPoint pt1, pt2;
};
template <> class QTypeInfo<QLine> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QLine)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QLine"; } };





inline QLine::QLine() { }

inline QLine::QLine(const QPoint &pt1_, const QPoint &pt2_) : pt1(pt1_), pt2(pt2_) { }

inline QLine::QLine(int x1pos, int y1pos, int x2pos, int y2pos) : pt1(QPoint(x1pos, y1pos)), pt2(QPoint(x2pos, y2pos)) { }

inline bool QLine::isNull() const
{
return pt1 == pt2;
}

inline int QLine::x1() const
{
return pt1.x();
}

inline int QLine::y1() const
{
return pt1.y();
}

inline int QLine::x2() const
{
return pt2.x();
}

inline int QLine::y2() const
{
return pt2.y();
}

inline QPoint QLine::p1() const
{
return pt1;
}

inline QPoint QLine::p2() const
{
return pt2;
}

inline int QLine::dx() const
{
return pt2.x() - pt1.x();
}

inline int QLine::dy() const
{
return pt2.y() - pt1.y();
}

inline void QLine::translate(const QPoint &point)
{
pt1 += point;
pt2 += point;
}

inline void QLine::translate(int adx, int ady)
{
this->translate(QPoint(adx, ady));
}

inline QLine QLine::translated(const QPoint &p) const
{
return QLine(pt1 + p, pt2 + p);
}

inline QLine QLine::translated(int adx, int ady) const
{
return translated(QPoint(adx, ady));
}

inline void QLine::setP1(const QPoint &aP1)
{
pt1 = aP1;
}

inline void QLine::setP2(const QPoint &aP2)
{
pt2 = aP2;
}

inline void QLine::setPoints(const QPoint &aP1, const QPoint &aP2)
{
pt1 = aP1;
pt2 = aP2;
}

inline void QLine::setLine(int aX1, int aY1, int aX2, int aY2)
{
pt1 = QPoint(aX1, aY1);
pt2 = QPoint(aX2, aY2);
}

inline bool QLine::operator==(const QLine &d) const
{
return pt1 == d.pt1 && pt2 == d.pt2;
}


# 203 "/home/eagle/qt-copy/include/QtCore/qline.h"
 QDebug operator<<(QDebug d, const QLine &p);



# 207 "/home/eagle/qt-copy/include/QtCore/qline.h"
 QDataStream &operator<<(QDataStream &, const QLine &);
 QDataStream &operator>>(QDataStream &, QLine &);


# 211 "/home/eagle/qt-copy/include/QtCore/qline.h"



class  QLineF {
public:

enum IntersectType { NoIntersection, BoundedIntersection, UnboundedIntersection };

inline QLineF();
inline QLineF(const QPointF &pt1, const QPointF &pt2);
inline QLineF(qreal x1, qreal y1, qreal x2, qreal y2);
inline QLineF(const QLine &line) : pt1(line.p1()), pt2(line.p2()) { }

static QLineF fromPolar(qreal length, qreal angle);

bool isNull() const;

inline QPointF p1() const;
inline QPointF p2() const;

inline qreal x1() const;
inline qreal y1() const;

inline qreal x2() const;
inline qreal y2() const;

inline qreal dx() const;
inline qreal dy() const;

qreal length() const;
void setLength(qreal len);

qreal angle() const;
void setAngle(qreal angle);

qreal angleTo(const QLineF &l) const;

QLineF unitVector() const;
QLineF normalVector() const;


IntersectType intersect(const QLineF &l, QPointF *intersectionPoint) const;

qreal angle(const QLineF &l) const;

QPointF pointAt(qreal t) const;
inline void translate(const QPointF &p);
inline void translate(qreal dx, qreal dy);

inline QLineF translated(const QPointF &p) const;
inline QLineF translated(qreal dx, qreal dy) const;

inline void setP1(const QPointF &p1);
inline void setP2(const QPointF &p2);
inline void setPoints(const QPointF &p1, const QPointF &p2);
inline void setLine(qreal x1, qreal y1, qreal x2, qreal y2);

inline bool operator==(const QLineF &d) const;
inline bool operator!=(const QLineF &d) const { return !(*this == d); }

QLine toLine() const;

private:
QPointF pt1, pt2;
};
template <> class QTypeInfo<QLineF> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QLineF)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QLineF"; } };





inline QLineF::QLineF()
{
}

inline QLineF::QLineF(const QPointF &apt1, const QPointF &apt2)
: pt1(apt1), pt2(apt2)
{
}

inline QLineF::QLineF(qreal x1pos, qreal y1pos, qreal x2pos, qreal y2pos)
: pt1(x1pos, y1pos), pt2(x2pos, y2pos)
{
}

inline qreal QLineF::x1() const
{
return pt1.x();
}

inline qreal QLineF::y1() const
{
return pt1.y();
}

inline qreal QLineF::x2() const
{
return pt2.x();
}

inline qreal QLineF::y2() const
{
return pt2.y();
}

inline QPointF QLineF::p1() const
{
return pt1;
}

inline QPointF QLineF::p2() const
{
return pt2;
}

inline qreal QLineF::dx() const
{
return pt2.x() - pt1.x();
}

inline qreal QLineF::dy() const
{
return pt2.y() - pt1.y();
}

inline QLineF QLineF::normalVector() const
{
return QLineF(p1(), p1() + QPointF(dy(), -dx()));
}

inline void QLineF::translate(const QPointF &point)
{
pt1 += point;
pt2 += point;
}

inline void QLineF::translate(qreal adx, qreal ady)
{
this->translate(QPointF(adx, ady));
}

inline QLineF QLineF::translated(const QPointF &p) const
{
return QLineF(pt1 + p, pt2 + p);
}

inline QLineF QLineF::translated(qreal adx, qreal ady) const
{
return translated(QPointF(adx, ady));
}

inline void QLineF::setLength(qreal len)
{
if (isNull())
return;
QLineF v = unitVector();
pt2 = QPointF(pt1.x() + v.dx() * len, pt1.y() + v.dy() * len);
}

inline QPointF QLineF::pointAt(qreal t) const
{
qreal vx = pt2.x() - pt1.x();
qreal vy = pt2.y() - pt1.y();
return QPointF(pt1.x() + vx * t, pt1.y() + vy * t);
}

inline QLine QLineF::toLine() const
{
return QLine(pt1.toPoint(), pt2.toPoint());
}


inline void QLineF::setP1(const QPointF &aP1)
{
pt1 = aP1;
}

inline void QLineF::setP2(const QPointF &aP2)
{
pt2 = aP2;
}

inline void QLineF::setPoints(const QPointF &aP1, const QPointF &aP2)
{
pt1 = aP1;
pt2 = aP2;
}

inline void QLineF::setLine(qreal aX1, qreal aY1, qreal aX2, qreal aY2)
{
pt1 = QPointF(aX1, aY1);
pt2 = QPointF(aX2, aY2);
}


inline bool QLineF::operator==(const QLineF &d) const
{
return pt1 == d.pt1 && pt2 == d.pt2;
}




# 414 "/home/eagle/qt-copy/include/QtCore/qline.h"
 QDebug operator<<(QDebug d, const QLineF &p);



# 418 "/home/eagle/qt-copy/include/QtCore/qline.h"
 QDataStream &operator<<(QDataStream &, const QLineF &);
 QDataStream &operator>>(QDataStream &, QLineF &);


# 422 "/home/eagle/qt-copy/include/QtCore/qline.h"





# 92 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlinkedlist.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qiterator.h"








































































# 47 "/home/eagle/qt-copy/include/QtCore/qlinkedlist.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qatomic.h"

























































































































































































































# 48 "/home/eagle/qt-copy/include/QtCore/qlinkedlist.h"







# 55 "/home/eagle/qt-copy/include/QtCore/qlinkedlist.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

struct  QLinkedListData
{
QLinkedListData *n, *p;
QBasicAtomicInt ref;
int size;
uint sharable : 1;

static QLinkedListData shared_null;
};

template <typename T>
struct QLinkedListNode
{
inline QLinkedListNode(const T &arg): t(arg) { }
QLinkedListNode *n, *p;
T t;
};

template <class T>
class QLinkedList
{
typedef QLinkedListNode<T> Node;
union { QLinkedListData *d; QLinkedListNode<T> *e; };

public:
inline QLinkedList() : d(&QLinkedListData::shared_null) { d->ref.ref(); }
inline QLinkedList(const QLinkedList<T> &l) : d(l.d) { d->ref.ref(); if (!d->sharable) detach(); }
~QLinkedList();
QLinkedList<T> &operator=(const QLinkedList<T> &);
bool operator==(const QLinkedList<T> &l) const;
inline bool operator!=(const QLinkedList<T> &l) const { return !(*this == l); }

inline int size() const { return d->size; }
inline void detach()
{ if (d->ref != 1) detach_helper(); }
inline bool isDetached() const { return d->ref == 1; }
inline void setSharable(bool sharable) { if (!sharable) detach(); d->sharable = sharable; }

inline bool isEmpty() const { return d->size == 0; }

void clear();

void append(const T &);
void prepend(const T &);
T takeFirst();
T takeLast();
int removeAll(const T &t);
bool removeOne(const T &t);
bool contains(const T &t) const;
int count(const T &t) const;

class const_iterator;

class iterator
{
public:
typedef std::bidirectional_iterator_tag iterator_category;
typedef ptrdiff_t difference_type;
typedef T value_type;
typedef T *pointer;
typedef T &reference;
Node *i;
inline iterator() : i(0) {}
inline iterator(Node *n) : i(n) {}
inline iterator(const iterator &o) : i(o.i) {}
inline iterator &operator=(const iterator &o) { i = o.i; return *this; }
inline T &operator*() const { return i->t; }
inline T *operator->() const { return &i->t; }
inline bool operator==(const iterator &o) const { return i == o.i; }
inline bool operator!=(const iterator &o) const { return i != o.i; }
inline bool operator==(const const_iterator &o) const
{ return i == o.i; }
inline bool operator!=(const const_iterator &o) const
{ return i != o.i; }
inline iterator &operator++() { i = i->n; return *this; }
inline iterator operator++(int) { Node *n = i; i = i->n; return n; }
inline iterator &operator--() { i = i->p; return *this; }
inline iterator operator--(int) { Node *n = i; i = i->p; return n; }
inline iterator operator+(int j) const
{ Node *n = i; if (j > 0) while (j--) n = n->n; else while (j++) n = n->p; return n; }
inline iterator operator-(int j) const { return operator+(-j); }
inline iterator &operator+=(int j) { return *this = *this + j; }
inline iterator &operator-=(int j) { return *this = *this - j; }
};
friend class iterator;

class const_iterator
{
public:
typedef std::bidirectional_iterator_tag iterator_category;
typedef ptrdiff_t difference_type;
typedef T value_type;
typedef const T *pointer;
typedef const T &reference;
Node *i;
inline const_iterator() : i(0) {}
inline const_iterator(Node *n) : i(n) {}
inline const_iterator(const const_iterator &o) : i(o.i){}
inline const_iterator(iterator ci) : i(ci.i){}
inline const_iterator &operator=(const const_iterator &o) { i = o.i; return *this; }
inline const T &operator*() const { return i->t; }
inline const T *operator->() const { return &i->t; }
inline bool operator==(const const_iterator &o) const { return i == o.i; }
inline bool operator!=(const const_iterator &o) const { return i != o.i; }
inline const_iterator &operator++() { i = i->n; return *this; }
inline const_iterator operator++(int) { Node *n = i; i = i->n; return n; }
inline const_iterator &operator--() { i = i->p; return *this; }
inline const_iterator operator--(int) { Node *n = i; i = i->p; return n; }
inline const_iterator operator+(int j) const
{ Node *n = i; if (j > 0) while (j--) n = n->n; else while (j++) n = n->p; return n; }
inline const_iterator operator-(int j) const { return operator+(-j); }
inline const_iterator &operator+=(int j) { return *this = *this + j; }
inline const_iterator &operator-=(int j) { return *this = *this - j; }
};
friend class const_iterator;


inline iterator begin() { detach(); return e->n; }
inline const_iterator begin() const { return e->n; }
inline const_iterator constBegin() const { return e->n; }
inline iterator end() { detach(); return e; }
inline const_iterator end() const { return e; }
inline const_iterator constEnd() const { return e; }
iterator insert(iterator before, const T &t);
iterator erase(iterator pos);
iterator erase(iterator first, iterator last);


typedef iterator Iterator;
typedef const_iterator ConstIterator;
inline int count() const { return d->size; }
inline T& first() { qt_noop(); return *begin(); }
inline const T& first() const { qt_noop(); return *begin(); }
T& last() { qt_noop(); return *(--end()); }
const T& last() const { qt_noop(); return *(--end()); }
inline void removeFirst() { qt_noop(); erase(begin()); }
inline void removeLast() { qt_noop(); erase(--end()); }


inline void push_back(const T &t) { append(t); }
inline void push_front(const T &t) { prepend(t); }
inline T& front() { return first(); }
inline const T& front() const { return first(); }
inline T& back() { return last(); }
inline const T& back() const { return last(); }
inline void pop_front() { removeFirst(); }
inline void pop_back() { removeLast(); }
inline bool empty() const { return isEmpty(); }
typedef int size_type;
typedef T value_type;
typedef value_type *pointer;
typedef const value_type *const_pointer;
typedef value_type &reference;
typedef const value_type &const_reference;
typedef ptrdiff_t difference_type;























# 239 "/home/eagle/qt-copy/include/QtCore/qlinkedlist.h"

QLinkedList<T> &operator+=(const QLinkedList<T> &l);
QLinkedList<T> operator+(const QLinkedList<T> &l) const;
inline QLinkedList<T> &operator+=(const T &t) { append(t); return *this; }
inline QLinkedList<T> &operator<< (const T &t) { append(t); return *this; }
inline QLinkedList<T> &operator<<(const QLinkedList<T> &l) { *this += l; return *this; }

private:
void detach_helper();
void free(QLinkedListData*);
};

template <typename T>
inline QLinkedList<T>::~QLinkedList()
{
if (!d)
return;
if (!d->ref.deref())
free(d);
}

template <typename T>
void QLinkedList<T>::detach_helper()
{
union { QLinkedListData *d; Node *e; } x;
x.d = new QLinkedListData;
x.d->ref = 1;
x.d->size = d->size;
x.d->sharable = true;
Node *i = e->n, *j = x.e;
while (i != e) {
j->n = new Node(i->t);
j->n->p = j;
i = i->n;
j = j->n;
}
j->n = x.e;
x.e->p = j;
if (!d->ref.deref())
free(d);
d = x.d;
}

template <typename T>
void QLinkedList<T>::free(QLinkedListData *x)
{
Node *y = reinterpret_cast<Node*>(x);
Node *i = y->n;
if (x->ref == 0) {
while(i != y) {
Node *n = i;
i = i->n;
delete n;
}
delete x;
}
}

template <typename T>
void QLinkedList<T>::clear()
{
*this = QLinkedList<T>();
}

template <typename T>
QLinkedList<T> &QLinkedList<T>::operator=(const QLinkedList<T> &l)
{
if (d != l.d) {
l.d->ref.ref();
if (!d->ref.deref())
free(d);
d = l.d;
if (!d->sharable)
detach_helper();
}
return *this;
}

template <typename T>
bool QLinkedList<T>::operator== (const QLinkedList<T> &l) const
{
if (d->size != l.d->size)
return false;
if (e == l.e)
return true;
Node *i = e->n;
Node *il = l.e->n;
while (i != e) {
if (! (i->t == il->t))
return false;
i = i->n;
il = il->n;
}
return true;
}

template <typename T>
void QLinkedList<T>::append(const T &t)
{
detach();
Node *i = new Node(t);
i->n = e;
i->p = e->p;
i->p->n = i;
e->p = i;
d->size++;
}

template <typename T>
void QLinkedList<T>::prepend(const T &t)
{
detach();
Node *i = new Node(t);
i->n = e->n;
i->p = e;
i->n->p = i;
e->n = i;
d->size++;
}

template <typename T>
int QLinkedList<T>::removeAll(const T &_t)
{
detach();
const T t = _t;
Node *i = e->n;
int c = 0;
while (i != e) {
if (i->t == t) {
Node *n = i;
i->n->p = i->p;
i->p->n = i->n;
i = i->n;
delete n;
c++;
} else {
i = i->n;
}
}
d->size-=c;
return c;
}

template <typename T>
bool QLinkedList<T>::removeOne(const T &_t)
{
detach();
iterator it = qFind(begin(), end(), _t);
if (it != end()) {
erase(it);
return true;
}
return false;
}

template <typename T>
inline T QLinkedList<T>::takeFirst()
{
T t = first();
removeFirst();
return t;
}

template <typename T>
inline T QLinkedList<T>::takeLast()
{
T t = last();
removeLast();
return t;
}

template <typename T>
bool QLinkedList<T>::contains(const T &t) const
{
Node *i = e;
while ((i = i->n) != e)
if (i->t == t)
return true;
return false;
}

template <typename T>
int QLinkedList<T>::count(const T &t) const
{
Node *i = e;
int c = 0;
while ((i = i->n) != e)
if (i->t == t)
c++;
return c;
}


template <typename T>
typename QLinkedList<T>::iterator QLinkedList<T>::insert(iterator before, const T &t)
{
Node *i = before.i;
Node *m = new Node(t);
m->n = i;
m->p = i->p;
m->p->n = m;
i->p = m;
d->size++;
return m;
}

template <typename T>
typename QLinkedList<T>::iterator QLinkedList<T>::erase(typename QLinkedList<T>::iterator afirst,
typename QLinkedList<T>::iterator alast)
{
while (afirst != alast)
erase(afirst++);
return alast;
}


template <typename T>
typename QLinkedList<T>::iterator QLinkedList<T>::erase(iterator pos)
{
detach();
Node *i = pos.i;
if (i != e) {
Node *n = i;
i->n->p = i->p;
i->p->n = i->n;
i = i->n;
delete n;
d->size--;
}
return i;
}

template <typename T>
QLinkedList<T> &QLinkedList<T>::operator+=(const QLinkedList<T> &l)
{
detach();
int n = l.d->size;
d->size += n;
Node *o = l.e->n;
while (n--) {
Node *i = new Node(o->t);
o = o->n;
i->n = e;
i->p = e->p;
i->p->n = i;
e->p = i;
}
return *this;
}

template <typename T>
QLinkedList<T> QLinkedList<T>::operator+(const QLinkedList<T> &l) const
{
QLinkedList<T> n = *this;
n += l;
return n;
}

template <class T> class QLinkedListIterator { typedef typename QLinkedList<T>::const_iterator const_iterator; QLinkedList<T> c; const_iterator i; public: inline QLinkedListIterator(const QLinkedList<T> &container) : c(container), i(c.constBegin()) {} inline QLinkedListIterator &operator=(const QLinkedList<T> &container) { c = container; i = c.constBegin(); return *this; } inline void toFront() { i = c.constBegin(); } inline void toBack() { i = c.constEnd(); } inline bool hasNext() const { return i != c.constEnd(); } inline const T &next() { return *i++; } inline const T &peekNext() const { return *i; } inline bool hasPrevious() const { return i != c.constBegin(); } inline const T &previous() { return *--i; } inline const T &peekPrevious() const { const_iterator p = i; return *--p; } inline bool findNext(const T &t) { while (i != c.constEnd()) if (*i++ == t) return true; return false; } inline bool findPrevious(const T &t) { while (i != c.constBegin()) if (*(--i) == t) return true; return false; } };
template <class T> class QMutableLinkedListIterator { typedef typename QLinkedList<T>::iterator iterator; typedef typename QLinkedList<T>::const_iterator const_iterator; QLinkedList<T> *c; iterator i, n; inline bool item_exists() const { return const_iterator(n) != c->constEnd(); } public: inline QMutableLinkedListIterator(QLinkedList<T> &container) : c(&container) { c->setSharable(false); i = c->begin(); n = c->end(); } inline ~QMutableLinkedListIterator() { c->setSharable(true); } inline QMutableLinkedListIterator &operator=(QLinkedList<T> &container) { c->setSharable(true); c = &container; c->setSharable(false); i = c->begin(); n = c->end(); return *this; } inline void toFront() { i = c->begin(); n = c->end(); } inline void toBack() { i = c->end(); n = i; } inline bool hasNext() const { return c->constEnd() != const_iterator(i); } inline T &next() { n = i++; return *n; } inline T &peekNext() const { return *i; } inline bool hasPrevious() const { return c->constBegin() != const_iterator(i); } inline T &previous() { n = --i; return *n; } inline T &peekPrevious() const { iterator p = i; return *--p; } inline void remove() { if (c->constEnd() != const_iterator(n)) { i = c->erase(n); n = c->end(); } } inline void setValue(const T &t) const { if (c->constEnd() != const_iterator(n)) *n = t; } inline T &value() { qt_noop(); return *n; } inline const T &value() const { qt_noop(); return *n; } inline void insert(const T &t) { n = i = c->insert(i, t); ++i; } inline bool findNext(const T &t) { while (c->constEnd() != const_iterator(n = i)) if (*i++ == t) return true; return false; } inline bool findPrevious(const T &t) { while (c->constBegin() != const_iterator(i)) if (*(n = --i) == t) return true; n = c->end(); return false; } };






# 93 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlist.h"











































































































































































































































































































































































































































































































































































































































































































# 94 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlocale.h"






















































































































































































































































































































































































































































































































































































































































































# 95 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmap.h"






















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 96 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpair.h"

































































































































# 97 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpoint.h"






































































































































































































































































































































































# 98 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qqueue.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qlist.h"











































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qqueue.h"


# 49 "/home/eagle/qt-copy/include/QtCore/qqueue.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

template <class T>
class QQueue : public QList<T>
{
public:
inline QQueue() {}
inline ~QQueue() {}
inline void enqueue(const T &t) { QList<T>::append(t); }
inline T dequeue() { return QList<T>::takeFirst(); }
inline T &head() { return QList<T>::first(); }
inline const T &head() const { return QList<T>::first(); }
};






# 99 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qrect.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qsize.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qsize.h"


# 49 "/home/eagle/qt-copy/include/QtCore/qsize.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class  QSize
{
public:
QSize();
QSize(int w, int h);

bool isNull() const;
bool isEmpty() const;
bool isValid() const;

int width() const;
int height() const;
void setWidth(int w);
void setHeight(int h);
void transpose();

void scale(int w, int h, Qt::AspectRatioMode mode);
void scale(const QSize &s, Qt::AspectRatioMode mode);

QSize expandedTo(const QSize &) const;
QSize boundedTo(const QSize &) const;

int &rwidth();
int &rheight();

QSize &operator+=(const QSize &);
QSize &operator-=(const QSize &);
QSize &operator*=(qreal c);
QSize &operator/=(qreal c);

friend inline bool operator==(const QSize &, const QSize &);
friend inline bool operator!=(const QSize &, const QSize &);
friend inline const QSize operator+(const QSize &, const QSize &);
friend inline const QSize operator-(const QSize &, const QSize &);
friend inline const QSize operator*(const QSize &, qreal);
friend inline const QSize operator*(qreal, const QSize &);
friend inline const QSize operator/(const QSize &, qreal);

private:
int wd;
int ht;
};
template <> class QTypeInfo<QSize> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QSize)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QSize"; } };





 QDataStream &operator<<(QDataStream &, const QSize &);
 QDataStream &operator>>(QDataStream &, QSize &);






inline QSize::QSize()
{ wd = ht = -1; }

inline QSize::QSize(int w, int h)
{ wd = w; ht = h; }

inline bool QSize::isNull() const
{ return wd==0 && ht==0; }

inline bool QSize::isEmpty() const
{ return wd<1 || ht<1; }

inline bool QSize::isValid() const
{ return wd>=0 && ht>=0; }

inline int QSize::width() const
{ return wd; }

inline int QSize::height() const
{ return ht; }

inline void QSize::setWidth(int w)
{ wd = w; }

inline void QSize::setHeight(int h)
{ ht = h; }

inline void QSize::scale(int w, int h, Qt::AspectRatioMode mode)
{ scale(QSize(w, h), mode); }

inline int &QSize::rwidth()
{ return wd; }

inline int &QSize::rheight()
{ return ht; }

inline QSize &QSize::operator+=(const QSize &s)
{ wd+=s.wd; ht+=s.ht; return *this; }

inline QSize &QSize::operator-=(const QSize &s)
{ wd-=s.wd; ht-=s.ht; return *this; }

inline QSize &QSize::operator*=(qreal c)
{ wd = qRound(wd*c); ht = qRound(ht*c); return *this; }

inline bool operator==(const QSize &s1, const QSize &s2)
{ return s1.wd == s2.wd && s1.ht == s2.ht; }

inline bool operator!=(const QSize &s1, const QSize &s2)
{ return s1.wd != s2.wd || s1.ht != s2.ht; }

inline const QSize operator+(const QSize & s1, const QSize & s2)
{ return QSize(s1.wd+s2.wd, s1.ht+s2.ht); }

inline const QSize operator-(const QSize &s1, const QSize &s2)
{ return QSize(s1.wd-s2.wd, s1.ht-s2.ht); }

inline const QSize operator*(const QSize &s, qreal c)
{ return QSize(qRound(s.wd*c), qRound(s.ht*c)); }

inline const QSize operator*(qreal c, const QSize &s)
{ return QSize(qRound(s.wd*c), qRound(s.ht*c)); }

inline QSize &QSize::operator/=(qreal c)
{
qt_noop();
wd = qRound(wd/c); ht = qRound(ht/c);
return *this;
}

inline const QSize operator/(const QSize &s, qreal c)
{
qt_noop();
return QSize(qRound(s.wd/c), qRound(s.ht/c));
}

inline QSize QSize::expandedTo(const QSize & otherSize) const
{
return QSize(qMax(wd,otherSize.wd), qMax(ht,otherSize.ht));
}

inline QSize QSize::boundedTo(const QSize & otherSize) const
{
return QSize(qMin(wd,otherSize.wd), qMin(ht,otherSize.ht));
}


# 198 "/home/eagle/qt-copy/include/QtCore/qsize.h"
 QDebug operator<<(QDebug, const QSize &);



# 202 "/home/eagle/qt-copy/include/QtCore/qsize.h"
class  QSizeF
{
public:
QSizeF();
QSizeF(const QSize &sz);
QSizeF(qreal w, qreal h);

bool isNull() const;
bool isEmpty() const;
bool isValid() const;

qreal width() const;
qreal height() const;
void setWidth(qreal w);
void setHeight(qreal h);
void transpose();

void scale(qreal w, qreal h, Qt::AspectRatioMode mode);
void scale(const QSizeF &s, Qt::AspectRatioMode mode);

QSizeF expandedTo(const QSizeF &) const;
QSizeF boundedTo(const QSizeF &) const;

qreal &rwidth();
qreal &rheight();

QSizeF &operator+=(const QSizeF &);
QSizeF &operator-=(const QSizeF &);
QSizeF &operator*=(qreal c);
QSizeF &operator/=(qreal c);

friend inline bool operator==(const QSizeF &, const QSizeF &);
friend inline bool operator!=(const QSizeF &, const QSizeF &);
friend inline const QSizeF operator+(const QSizeF &, const QSizeF &);
friend inline const QSizeF operator-(const QSizeF &, const QSizeF &);
friend inline const QSizeF operator*(const QSizeF &, qreal);
friend inline const QSizeF operator*(qreal, const QSizeF &);
friend inline const QSizeF operator/(const QSizeF &, qreal);

inline QSize toSize() const;

private:
qreal wd;
qreal ht;
};
template <> class QTypeInfo<QSizeF> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QSizeF)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QSizeF"; } };






 QDataStream &operator<<(QDataStream &, const QSizeF &);
 QDataStream &operator>>(QDataStream &, QSizeF &);






inline QSizeF::QSizeF()
{ wd = ht = -1.; }

inline QSizeF::QSizeF(const QSize &sz)
: wd(sz.width()), ht(sz.height())
{
}

inline QSizeF::QSizeF(qreal w, qreal h)
{ wd = w; ht = h; }

inline bool QSizeF::isNull() const
{ return qIsNull(wd) && qIsNull(ht); }

inline bool QSizeF::isEmpty() const
{ return wd <= 0. || ht <= 0.; }

inline bool QSizeF::isValid() const
{ return wd >= 0. && ht >= 0.; }

inline qreal QSizeF::width() const
{ return wd; }

inline qreal QSizeF::height() const
{ return ht; }

inline void QSizeF::setWidth(qreal w)
{ wd = w; }

inline void QSizeF::setHeight(qreal h)
{ ht = h; }

inline void QSizeF::scale(qreal w, qreal h, Qt::AspectRatioMode mode)
{ scale(QSizeF(w, h), mode); }

inline qreal &QSizeF::rwidth()
{ return wd; }

inline qreal &QSizeF::rheight()
{ return ht; }

inline QSizeF &QSizeF::operator+=(const QSizeF &s)
{ wd += s.wd; ht += s.ht; return *this; }

inline QSizeF &QSizeF::operator-=(const QSizeF &s)
{ wd -= s.wd; ht -= s.ht; return *this; }

inline QSizeF &QSizeF::operator*=(qreal c)
{ wd *= c; ht *= c; return *this; }

inline bool operator==(const QSizeF &s1, const QSizeF &s2)
{ return qFuzzyCompare(s1.wd, s2.wd) && qFuzzyCompare(s1.ht, s2.ht); }

inline bool operator!=(const QSizeF &s1, const QSizeF &s2)
{ return !qFuzzyCompare(s1.wd, s2.wd) || !qFuzzyCompare(s1.ht, s2.ht); }

inline const QSizeF operator+(const QSizeF & s1, const QSizeF & s2)
{ return QSizeF(s1.wd+s2.wd, s1.ht+s2.ht); }

inline const QSizeF operator-(const QSizeF &s1, const QSizeF &s2)
{ return QSizeF(s1.wd-s2.wd, s1.ht-s2.ht); }

inline const QSizeF operator*(const QSizeF &s, qreal c)
{ return QSizeF(s.wd*c, s.ht*c); }

inline const QSizeF operator*(qreal c, const QSizeF &s)
{ return QSizeF(s.wd*c, s.ht*c); }

inline QSizeF &QSizeF::operator/=(qreal c)
{
qt_noop();
wd = wd/c; ht = ht/c;
return *this;
}

inline const QSizeF operator/(const QSizeF &s, qreal c)
{
qt_noop();
return QSizeF(s.wd/c, s.ht/c);
}

inline QSizeF QSizeF::expandedTo(const QSizeF & otherSize) const
{
return QSizeF(qMax(wd,otherSize.wd), qMax(ht,otherSize.ht));
}

inline QSizeF QSizeF::boundedTo(const QSizeF & otherSize) const
{
return QSizeF(qMin(wd,otherSize.wd), qMin(ht,otherSize.ht));
}

inline QSize QSizeF::toSize() const
{
return QSize(qRound(wd), qRound(ht));
}


# 359 "/home/eagle/qt-copy/include/QtCore/qsize.h"
 QDebug operator<<(QDebug, const QSizeF &);


# 362 "/home/eagle/qt-copy/include/QtCore/qsize.h"





# 47 "/home/eagle/qt-copy/include/QtCore/qrect.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qpoint.h"






































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtCore/qrect.h"






# 54 "/home/eagle/qt-copy/include/QtCore/qrect.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class  QRect
{
public:
QRect() { x1 = y1 = 0; x2 = y2 = -1; }
QRect(const QPoint &topleft, const QPoint &bottomright);
QRect(const QPoint &topleft, const QSize &size);
QRect(int left, int top, int width, int height);

bool isNull() const;
bool isEmpty() const;
bool isValid() const;

int left() const;
int top() const;
int right() const;
int bottom() const;
QRect normalized() const;










# 87 "/home/eagle/qt-copy/include/QtCore/qrect.h"
int x() const;
int y() const;
void setLeft(int pos);
void setTop(int pos);
void setRight(int pos);
void setBottom(int pos);
void setX(int x);
void setY(int y);

void setTopLeft(const QPoint &p);
void setBottomRight(const QPoint &p);
void setTopRight(const QPoint &p);
void setBottomLeft(const QPoint &p);

QPoint topLeft() const;
QPoint bottomRight() const;
QPoint topRight() const;
QPoint bottomLeft() const;
QPoint center() const;

void moveLeft(int pos);
void moveTop(int pos);
void moveRight(int pos);
void moveBottom(int pos);
void moveTopLeft(const QPoint &p);
void moveBottomRight(const QPoint &p);
void moveTopRight(const QPoint &p);
void moveBottomLeft(const QPoint &p);
void moveCenter(const QPoint &p);

inline void translate(int dx, int dy);
inline void translate(const QPoint &p);
inline QRect translated(int dx, int dy) const;
inline QRect translated(const QPoint &p) const;

void moveTo(int x, int t);
void moveTo(const QPoint &p);






# 130 "/home/eagle/qt-copy/include/QtCore/qrect.h"
void setRect(int x, int y, int w, int h);
inline void getRect(int *x, int *y, int *w, int *h) const;

void setCoords(int x1, int y1, int x2, int y2);



# 137 "/home/eagle/qt-copy/include/QtCore/qrect.h"
inline void getCoords(int *x1, int *y1, int *x2, int *y2) const;

inline void adjust(int x1, int y1, int x2, int y2);
inline QRect adjusted(int x1, int y1, int x2, int y2) const;

QSize size() const;
int width() const;
int height() const;
void setWidth(int w);
void setHeight(int h);
void setSize(const QSize &s);

QRect operator|(const QRect &r) const;
QRect operator&(const QRect &r) const;
QRect& operator|=(const QRect &r);
QRect& operator&=(const QRect &r);

bool contains(const QPoint &p, bool proper=false) const;
bool contains(int x, int y) const; 
bool contains(int x, int y, bool proper) const;
bool contains(const QRect &r, bool proper = false) const;
QRect unite(const QRect &r) const; 
QRect united(const QRect &other) const;
QRect intersect(const QRect &r) const; 
QRect intersected(const QRect &other) const;
bool intersects(const QRect &r) const;

friend  inline bool operator==(const QRect &, const QRect &);
friend  inline bool operator!=(const QRect &, const QRect &);







# 173 "/home/eagle/qt-copy/include/QtCore/qrect.h"
private:









# 183 "/home/eagle/qt-copy/include/QtCore/qrect.h"
int x1;
int y1;
int x2;
int y2;


# 189 "/home/eagle/qt-copy/include/QtCore/qrect.h"
};
template <> class QTypeInfo<QRect> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QRect)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QRect"; } };

 inline bool operator==(const QRect &, const QRect &);
 inline bool operator!=(const QRect &, const QRect &);






# 200 "/home/eagle/qt-copy/include/QtCore/qrect.h"
 QDataStream &operator<<(QDataStream &, const QRect &);
 QDataStream &operator>>(QDataStream &, QRect &);


# 204 "/home/eagle/qt-copy/include/QtCore/qrect.h"




inline QRect::QRect(int aleft, int atop, int awidth, int aheight)
{
x1 = aleft;
y1 = atop;
x2 = (aleft + awidth - 1);
y2 = (atop + aheight - 1);
}

inline QRect::QRect(const QPoint &atopLeft, const QPoint &abottomRight)
{
x1 = atopLeft.x();
y1 = atopLeft.y();
x2 = abottomRight.x();
y2 = abottomRight.y();
}

inline QRect::QRect(const QPoint &atopLeft, const QSize &asize)
{
x1 = atopLeft.x();
y1 = atopLeft.y();
x2 = (x1+asize.width() - 1);
y2 = (y1+asize.height() - 1);
}

inline bool QRect::isNull() const
{ return x2 == x1 - 1 && y2 == y1 - 1; }

inline bool QRect::isEmpty() const
{ return x1 > x2 || y1 > y2; }

inline bool QRect::isValid() const
{ return x1 <= x2 && y1 <= y2; }

inline int QRect::left() const
{ return x1; }

inline int QRect::top() const
{ return y1; }

inline int QRect::right() const
{ return x2; }

inline int QRect::bottom() const
{ return y2; }

inline int QRect::x() const
{ return x1; }

inline int QRect::y() const
{ return y1; }

inline void QRect::setLeft(int pos)
{ x1 = pos; }

inline void QRect::setTop(int pos)
{ y1 = pos; }

inline void QRect::setRight(int pos)
{ x2 = pos; }

inline void QRect::setBottom(int pos)
{ y2 = pos; }

inline void QRect::setTopLeft(const QPoint &p)
{ x1 = p.x(); y1 = p.y(); }

inline void QRect::setBottomRight(const QPoint &p)
{ x2 = p.x(); y2 = p.y(); }

inline void QRect::setTopRight(const QPoint &p)
{ x2 = p.x(); y1 = p.y(); }

inline void QRect::setBottomLeft(const QPoint &p)
{ x1 = p.x(); y2 = p.y(); }

inline void QRect::setX(int ax)
{ x1 = ax; }

inline void QRect::setY(int ay)
{ y1 = ay; }

inline QPoint QRect::topLeft() const
{ return QPoint(x1, y1); }

inline QPoint QRect::bottomRight() const
{ return QPoint(x2, y2); }

inline QPoint QRect::topRight() const
{ return QPoint(x2, y1); }

inline QPoint QRect::bottomLeft() const
{ return QPoint(x1, y2); }

inline QPoint QRect::center() const
{ return QPoint((x1+x2)/2, (y1+y2)/2); }

inline int QRect::width() const
{ return x2 - x1 + 1; }

inline int QRect::height() const
{ return y2 - y1 + 1; }

inline QSize QRect::size() const
{ return QSize(width(), height()); }

inline void QRect::translate(int dx, int dy)
{
x1 += dx;
y1 += dy;
x2 += dx;
y2 += dy;
}

inline void QRect::translate(const QPoint &p)
{
x1 += p.x();
y1 += p.y();
x2 += p.x();
y2 += p.y();
}

inline QRect QRect::translated(int dx, int dy) const
{ return QRect(QPoint(x1 + dx, y1 + dy), QPoint(x2 + dx, y2 + dy)); }

inline QRect QRect::translated(const QPoint &p) const
{ return QRect(QPoint(x1 + p.x(), y1 + p.y()), QPoint(x2 + p.x(), y2 + p.y())); }

inline void QRect::moveTo(int ax, int ay)
{
x2 += ax - x1;
y2 += ay - y1;
x1 = ax;
y1 = ay;
}

inline void QRect::moveTo(const QPoint &p)
{
x2 += p.x() - x1;
y2 += p.y() - y1;
x1 = p.x();
y1 = p.y();
}

inline void QRect::moveLeft(int pos)
{ x2 += (pos - x1); x1 = pos; }

inline void QRect::moveTop(int pos)
{ y2 += (pos - y1); y1 = pos; }

inline void QRect::moveRight(int pos)
{
x1 += (pos - x2);
x2 = pos;
}

inline void QRect::moveBottom(int pos)
{
y1 += (pos - y2);
y2 = pos;
}

inline void QRect::moveTopLeft(const QPoint &p)
{
moveLeft(p.x());
moveTop(p.y());
}

inline void QRect::moveBottomRight(const QPoint &p)
{
moveRight(p.x());
moveBottom(p.y());
}

inline void QRect::moveTopRight(const QPoint &p)
{
moveRight(p.x());
moveTop(p.y());
}

inline void QRect::moveBottomLeft(const QPoint &p)
{
moveLeft(p.x());
moveBottom(p.y());
}

inline void QRect::getRect(int *ax, int *ay, int *aw, int *ah) const
{
*ax = x1;
*ay = y1;
*aw = x2 - x1 + 1;
*ah = y2 - y1 + 1;
}

inline void QRect::setRect(int ax, int ay, int aw, int ah)
{
x1 = ax;
y1 = ay;
x2 = (ax + aw - 1);
y2 = (ay + ah - 1);
}

inline void QRect::getCoords(int *xp1, int *yp1, int *xp2, int *yp2) const
{
*xp1 = x1;
*yp1 = y1;
*xp2 = x2;
*yp2 = y2;
}

inline void QRect::setCoords(int xp1, int yp1, int xp2, int yp2)
{
x1 = xp1;
y1 = yp1;
x2 = xp2;
y2 = yp2;
}








# 432 "/home/eagle/qt-copy/include/QtCore/qrect.h"
inline QRect QRect::adjusted(int xp1, int yp1, int xp2, int yp2) const
{ return QRect(QPoint(x1 + xp1, y1 + yp1), QPoint(x2 + xp2, y2 + yp2)); }

inline void QRect::adjust(int dx1, int dy1, int dx2, int dy2)
{
x1 += dx1;
y1 += dy1;
x2 += dx2;
y2 += dy2;
}

inline void QRect::setWidth(int w)
{ x2 = (x1 + w - 1); }

inline void QRect::setHeight(int h)
{ y2 = (y1 + h - 1); }

inline void QRect::setSize(const QSize &s)
{
x2 = (s.width() + x1 - 1);
y2 = (s.height() + y1 - 1);
}

inline bool QRect::contains(int ax, int ay, bool aproper) const
{
return contains(QPoint(ax, ay), aproper);
}

inline bool QRect::contains(int ax, int ay) const
{
return contains(QPoint(ax, ay), false);
}

inline QRect& QRect::operator|=(const QRect &r)
{
*this = *this | r;
return *this;
}

inline QRect& QRect::operator&=(const QRect &r)
{
*this = *this & r;
return *this;
}

inline QRect QRect::intersect(const QRect &r) const
{
return *this & r;
}

inline QRect QRect::intersected(const QRect &other) const
{
return intersect(other);
}

inline QRect QRect::unite(const QRect &r) const
{
return *this | r;
}

inline QRect QRect::united(const QRect &r) const
{
return unite(r);
}

inline bool operator==(const QRect &r1, const QRect &r2)
{
return r1.x1==r2.x1 && r1.x2==r2.x2 && r1.y1==r2.y1 && r1.y2==r2.y2;
}

inline bool operator!=(const QRect &r1, const QRect &r2)
{
return r1.x1!=r2.x1 || r1.x2!=r2.x2 || r1.y1!=r2.y1 || r1.y2!=r2.y2;
}


# 508 "/home/eagle/qt-copy/include/QtCore/qrect.h"
 QDebug operator<<(QDebug, const QRect &);



# 512 "/home/eagle/qt-copy/include/QtCore/qrect.h"
class  QRectF
{
public:
QRectF() { xp = yp = 0.; w = h = 0.; }
QRectF(const QPointF &topleft, const QSizeF &size);
QRectF(const QPointF &topleft, const QPointF &bottomRight);
QRectF(qreal left, qreal top, qreal width, qreal height);
QRectF(const QRect &rect);

bool isNull() const;
bool isEmpty() const;
bool isValid() const;
QRectF normalized() const;

inline qreal left() const { return xp; }
inline qreal top() const { return yp; }
inline qreal right() const { return xp + w; }
inline qreal bottom() const { return yp + h; }

inline qreal x() const;
inline qreal y() const;
inline void setLeft(qreal pos);
inline void setTop(qreal pos);
inline void setRight(qreal pos);
inline void setBottom(qreal pos);
inline void setX(qreal pos) { setLeft(pos); }
inline void setY(qreal pos) { setTop(pos); }

inline QPointF topLeft() const { return QPointF(xp, yp); }
inline QPointF bottomRight() const { return QPointF(xp+w, yp+h); }
inline QPointF topRight() const { return QPointF(xp+w, yp); }
inline QPointF bottomLeft() const { return QPointF(xp, yp+h); }
inline QPointF center() const;

void setTopLeft(const QPointF &p);
void setBottomRight(const QPointF &p);
void setTopRight(const QPointF &p);
void setBottomLeft(const QPointF &p);

void moveLeft(qreal pos);
void moveTop(qreal pos);
void moveRight(qreal pos);
void moveBottom(qreal pos);
void moveTopLeft(const QPointF &p);
void moveBottomRight(const QPointF &p);
void moveTopRight(const QPointF &p);
void moveBottomLeft(const QPointF &p);
void moveCenter(const QPointF &p);

void translate(qreal dx, qreal dy);
void translate(const QPointF &p);

QRectF translated(qreal dx, qreal dy) const;
QRectF translated(const QPointF &p) const;

void moveTo(qreal x, qreal t);
void moveTo(const QPointF &p);

void setRect(qreal x, qreal y, qreal w, qreal h);
void getRect(qreal *x, qreal *y, qreal *w, qreal *h) const;

void setCoords(qreal x1, qreal y1, qreal x2, qreal y2);
void getCoords(qreal *x1, qreal *y1, qreal *x2, qreal *y2) const;

inline void adjust(qreal x1, qreal y1, qreal x2, qreal y2);
inline QRectF adjusted(qreal x1, qreal y1, qreal x2, qreal y2) const;

QSizeF size() const;
qreal width() const;
qreal height() const;
void setWidth(qreal w);
void setHeight(qreal h);
void setSize(const QSizeF &s);

QRectF operator|(const QRectF &r) const;
QRectF operator&(const QRectF &r) const;
QRectF& operator|=(const QRectF &r);
QRectF& operator&=(const QRectF &r);

bool contains(const QPointF &p) const;
bool contains(qreal x, qreal y) const;
bool contains(const QRectF &r) const;
QRectF unite(const QRectF &r) const; 
QRectF united(const QRectF &other) const;
QRectF intersect(const QRectF &r) const; 
QRectF intersected(const QRectF &other) const;
bool intersects(const QRectF &r) const;

friend  inline bool operator==(const QRectF &, const QRectF &);
friend  inline bool operator!=(const QRectF &, const QRectF &);

QRect toRect() const;
QRect toAlignedRect() const;

private:
qreal xp;
qreal yp;
qreal w;
qreal h;
};
template <> class QTypeInfo<QRectF> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QRectF)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QRectF"; } };

 inline bool operator==(const QRectF &, const QRectF &);
 inline bool operator!=(const QRectF &, const QRectF &);






# 622 "/home/eagle/qt-copy/include/QtCore/qrect.h"
 QDataStream &operator<<(QDataStream &, const QRectF &);
 QDataStream &operator>>(QDataStream &, QRectF &);


# 626 "/home/eagle/qt-copy/include/QtCore/qrect.h"




inline QRectF::QRectF(qreal aleft, qreal atop, qreal awidth, qreal aheight)
: xp(aleft), yp(atop), w(awidth), h(aheight)
{
}

inline QRectF::QRectF(const QPointF &atopLeft, const QSizeF &asize)
{
xp = atopLeft.x();
yp = atopLeft.y();
w = asize.width();
h = asize.height();
}

inline QRectF::QRectF(const QPointF &atopLeft, const QPointF &abottomRight)
{
xp = atopLeft.x();
yp = atopLeft.y();
w = abottomRight.x() - xp;
h = abottomRight.y() - yp;
}

inline QRectF::QRectF(const QRect &r)
: xp(r.x()), yp(r.y()), w(r.width()), h(r.height())
{
}

inline bool QRectF::isNull() const
{ return qIsNull(w) && qIsNull(h); }

inline bool QRectF::isEmpty() const
{ return w <= 0. || h <= 0.; }

inline bool QRectF::isValid() const
{ return w > 0. && h > 0.; }

inline qreal QRectF::x() const
{ return xp; }

inline qreal QRectF::y() const
{ return yp; }

inline void QRectF::setLeft(qreal pos) { qreal diff = pos - xp; xp += diff; w -= diff; }

inline void QRectF::setRight(qreal pos) { w = pos - xp; }

inline void QRectF::setTop(qreal pos) { qreal diff = pos - yp; yp += diff; h -= diff; }

inline void QRectF::setBottom(qreal pos) { h = pos - yp; }

inline void QRectF::setTopLeft(const QPointF &p) { setLeft(p.x()); setTop(p.y()); }

inline void QRectF::setTopRight(const QPointF &p) { setRight(p.x()); setTop(p.y()); }

inline void QRectF::setBottomLeft(const QPointF &p) { setLeft(p.x()); setBottom(p.y()); }

inline void QRectF::setBottomRight(const QPointF &p) { setRight(p.x()); setBottom(p.y()); }

inline QPointF QRectF::center() const
{ return QPointF(xp + w/2, yp + h/2); }

inline void QRectF::moveLeft(qreal pos) { xp = pos; }

inline void QRectF::moveTop(qreal pos) { yp = pos; }

inline void QRectF::moveRight(qreal pos) { xp = pos - w; }

inline void QRectF::moveBottom(qreal pos) { yp = pos - h; }

inline void QRectF::moveTopLeft(const QPointF &p) { moveLeft(p.x()); moveTop(p.y()); }

inline void QRectF::moveTopRight(const QPointF &p) { moveRight(p.x()); moveTop(p.y()); }

inline void QRectF::moveBottomLeft(const QPointF &p) { moveLeft(p.x()); moveBottom(p.y()); }

inline void QRectF::moveBottomRight(const QPointF &p) { moveRight(p.x()); moveBottom(p.y()); }

inline void QRectF::moveCenter(const QPointF &p) { xp = p.x() - w/2; yp = p.y() - h/2; }

inline qreal QRectF::width() const
{ return w; }

inline qreal QRectF::height() const
{ return h; }

inline QSizeF QRectF::size() const
{ return QSizeF(w, h); }

inline void QRectF::translate(qreal dx, qreal dy)
{
xp += dx;
yp += dy;
}

inline void QRectF::translate(const QPointF &p)
{
xp += p.x();
yp += p.y();
}

inline void QRectF::moveTo(qreal ax, qreal ay)
{
xp = ax;
yp = ay;
}

inline void QRectF::moveTo(const QPointF &p)
{
xp = p.x();
yp = p.y();
}

inline QRectF QRectF::translated(qreal dx, qreal dy) const
{ return QRectF(xp + dx, yp + dy, w, h); }

inline QRectF QRectF::translated(const QPointF &p) const
{ return QRectF(xp + p.x(), yp + p.y(), w, h); }

inline void QRectF::getRect(qreal *ax, qreal *ay, qreal *aaw, qreal *aah) const
{
*ax = this->xp;
*ay = this->yp;
*aaw = this->w;
*aah = this->h;
}

inline void QRectF::setRect(qreal ax, qreal ay, qreal aaw, qreal aah)
{
this->xp = ax;
this->yp = ay;
this->w = aaw;
this->h = aah;
}

inline void QRectF::getCoords(qreal *xp1, qreal *yp1, qreal *xp2, qreal *yp2) const
{
*xp1 = xp;
*yp1 = yp;
*xp2 = xp + w;
*yp2 = yp + h;
}

inline void QRectF::setCoords(qreal xp1, qreal yp1, qreal xp2, qreal yp2)
{
xp = xp1;
yp = yp1;
w = xp2 - xp1;
h = yp2 - yp1;
}

inline void QRectF::adjust(qreal xp1, qreal yp1, qreal xp2, qreal yp2)
{ xp += xp1; yp += yp1; w += xp2 - xp1; h += yp2 - yp1; }

inline QRectF QRectF::adjusted(qreal xp1, qreal yp1, qreal xp2, qreal yp2) const
{ return QRectF(xp + xp1, yp + yp1, w + xp2 - xp1, h + yp2 - yp1); }

inline void QRectF::setWidth(qreal aw)
{ this->w = aw; }

inline void QRectF::setHeight(qreal ah)
{ this->h = ah; }

inline void QRectF::setSize(const QSizeF &s)
{
w = s.width();
h = s.height();
}

inline bool QRectF::contains(qreal ax, qreal ay) const
{
return contains(QPointF(ax, ay));
}

inline QRectF& QRectF::operator|=(const QRectF &r)
{
*this = *this | r;
return *this;
}

inline QRectF& QRectF::operator&=(const QRectF &r)
{
*this = *this & r;
return *this;
}

inline QRectF QRectF::intersect(const QRectF &r) const
{
return *this & r;
}

inline QRectF QRectF::intersected(const QRectF &r) const
{
return intersect(r);
}

inline QRectF QRectF::unite(const QRectF &r) const
{
return *this | r;
}

inline QRectF QRectF::united(const QRectF &r) const
{
return unite(r);
}

inline bool operator==(const QRectF &r1, const QRectF &r2)
{
return qFuzzyCompare(r1.xp, r2.xp) && qFuzzyCompare(r1.yp, r2.yp)
&& qFuzzyCompare(r1.w, r2.w) && qFuzzyCompare(r1.h, r2.h);
}

inline bool operator!=(const QRectF &r1, const QRectF &r2)
{
return !qFuzzyCompare(r1.xp, r2.xp) || !qFuzzyCompare(r1.yp, r2.yp)
|| !qFuzzyCompare(r1.w, r2.w) || !qFuzzyCompare(r1.h, r2.h);
}

inline QRect QRectF::toRect() const
{
return QRect(qRound(xp), qRound(yp), qRound(w), qRound(h));
}


# 852 "/home/eagle/qt-copy/include/QtCore/qrect.h"
 QDebug operator<<(QDebug, const QRectF &);


# 855 "/home/eagle/qt-copy/include/QtCore/qrect.h"





# 100 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qregexp.h"

























































































































































# 101 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qset.h"


































































































































































































































































































































































# 102 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qshareddata.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qshareddata.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qatomic.h"

























































































































































































































# 48 "/home/eagle/qt-copy/include/QtCore/qshareddata.h"


# 50 "/home/eagle/qt-copy/include/QtCore/qshareddata.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

template <class T> class QSharedDataPointer;

class  QSharedData
{
public:
mutable QAtomicInt ref;

inline QSharedData() : ref(0) { }
inline QSharedData(const QSharedData &) : ref(0) { }

private:

QSharedData &operator=(const QSharedData &);
};

template <class T> class QSharedDataPointer
{
public:
inline void detach() { if (d && d->ref != 1) detach_helper(); }
inline T &operator*() { detach(); return *d; }
inline const T &operator*() const { return *d; }
inline T *operator->() { detach(); return d; }
inline const T *operator->() const { return d; }
inline operator T *() { detach(); return d; }
inline operator const T *() const { return d; }
inline T *data() { detach(); return d; }
inline const T *data() const { return d; }
inline const T *constData() const { return d; }

inline bool operator==(const QSharedDataPointer<T> &other) const { return d == other.d; }
inline bool operator!=(const QSharedDataPointer<T> &other) const { return d != other.d; }

inline QSharedDataPointer() { d = 0; }
inline ~QSharedDataPointer() { if (d && !d->ref.deref()) delete d; }

explicit QSharedDataPointer(T *data);
inline QSharedDataPointer(const QSharedDataPointer<T> &o) : d(o.d) { if (d) d->ref.ref(); }
inline QSharedDataPointer<T> & operator=(const QSharedDataPointer<T> &o) {
if (o.d != d) {
if (o.d)
o.d->ref.ref();
if (d && !d->ref.deref())
delete d;
d = o.d;
}
return *this;
}
inline QSharedDataPointer &operator=(T *o) {
if (o != d) {
if (o)
o->ref.ref();
if (d && !d->ref.deref())
delete d;
d = o;
}
return *this;
}

inline bool operator!() const { return !d; }

private:
void detach_helper();

T *d;
};

template <class T> class QExplicitlySharedDataPointer
{
public:
typedef T Type;

inline T &operator*() { return *d; }
inline const T &operator*() const { return *d; }
inline T *operator->() { return d; }
inline T *operator->() const { return d; }
inline T *data() const { return d; }
inline const T *constData() const { return d; }

inline void detach() { if (d && d->ref != 1) detach_helper(); }

inline void reset()
{
if(d && !d->ref.deref())
delete d;

d = 0;
}

inline operator bool () const { return d != 0; }

inline bool operator==(const QExplicitlySharedDataPointer<T> &other) const { return d == other.d; }
inline bool operator!=(const QExplicitlySharedDataPointer<T> &other) const { return d != other.d; }
inline bool operator==(const T *ptr) const { return d == ptr; }
inline bool operator!=(const T *ptr) const { return d != ptr; }

inline QExplicitlySharedDataPointer() { d = 0; }
inline ~QExplicitlySharedDataPointer() { if (d && !d->ref.deref()) delete d; }

explicit QExplicitlySharedDataPointer(T *data);
inline QExplicitlySharedDataPointer(const QExplicitlySharedDataPointer<T> &o) : d(o.d) { if (d) d->ref.ref(); }


# 158 "/home/eagle/qt-copy/include/QtCore/qshareddata.h"
template<class X>
inline QExplicitlySharedDataPointer(const QExplicitlySharedDataPointer<X> &o) : d(static_cast<T *>(o.data()))
{
if(d)
d->ref.ref();
}


# 166 "/home/eagle/qt-copy/include/QtCore/qshareddata.h"
inline QExplicitlySharedDataPointer<T> & operator=(const QExplicitlySharedDataPointer<T> &o) {
if (o.d != d) {
if (o.d)
o.d->ref.ref();
if (d && !d->ref.deref())
delete d;
d = o.d;
}
return *this;
}
inline QExplicitlySharedDataPointer &operator=(T *o) {
if (o != d) {
if (o)
o->ref.ref();
if (d && !d->ref.deref())
delete d;
d = o;
}
return *this;
}

inline bool operator!() const { return !d; }

private:
void detach_helper();

T *d;
};

template <class T>
inline QSharedDataPointer<T>::QSharedDataPointer(T *adata) : d(adata)
{ if (d) d->ref.ref(); }

template <class T>
 void QSharedDataPointer<T>::detach_helper()
{
T *x = new T(*d);
x->ref.ref();
if (!d->ref.deref())
delete d;
d = x;
}

template <class T>
 void QExplicitlySharedDataPointer<T>::detach_helper()
{
T *x = new T(*d);
x->ref.ref();
if (!d->ref.deref())
delete d;
d = x;
}

template <class T>
inline QExplicitlySharedDataPointer<T>::QExplicitlySharedDataPointer(T *adata) : d(adata)
{ if (d) d->ref.ref(); }






# 103 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsize.h"






































































































































































































































































































































































# 104 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstack.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qvector.h"































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qstack.h"


# 49 "/home/eagle/qt-copy/include/QtCore/qstack.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

template<class T>
class QStack : public QVector<T>
{
public:
inline QStack() {}
inline ~QStack() {}
inline void push(const T &t) { QVector<T>::append(t); }
T pop();
T &top();
const T &top() const;
};

template<class T>
inline T QStack<T>::pop()
{ qt_noop(); T t = this->data()[this->size() -1];
this->resize(this->size()-1); return t; }

template<class T>
inline T &QStack<T>::top()
{ qt_noop(); this->detach(); return this->data()[this->size()-1]; }

template<class T>
inline const T &QStack<T>::top() const
{ qt_noop(); return this->data()[this->size()-1]; }






# 105 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 106 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"
















































































































































































































































# 107 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstringmatcher.h"




























































































# 108 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextboundaryfinder.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qchar.h"















































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qtextboundaryfinder.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtCore/qtextboundaryfinder.h"


# 50 "/home/eagle/qt-copy/include/QtCore/qtextboundaryfinder.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class QTextBoundaryFinderPrivate;

class  QTextBoundaryFinder
{
public:
QTextBoundaryFinder();
QTextBoundaryFinder(const QTextBoundaryFinder &other);
QTextBoundaryFinder &operator=(const QTextBoundaryFinder &other);
~QTextBoundaryFinder();

enum BoundaryType {
Grapheme,
Word,
Line,
Sentence
};

enum BoundaryReason {
NotAtBoundary = 0,
StartWord = 1,
EndWord = 2

};
typedef QFlags<BoundaryReason > BoundaryReasons;

QTextBoundaryFinder(BoundaryType type, const QString &string);
QTextBoundaryFinder(BoundaryType type, const QChar *chars, int length, unsigned char *buffer = 0, int bufferSize = 0);

inline bool isValid() const { return d; }

inline BoundaryType type() const { return t; }
QString string() const;

void toStart();
void toEnd();
int position() const;
void setPosition(int position);

int toNextBoundary();
int toPreviousBoundary();

bool isAtBoundary() const;
BoundaryReasons boundaryReasons() const;

private:
BoundaryType t;
QString s;
const QChar *chars;
int length;
int pos;
uint freePrivate : 1;
uint unused : 31;
QTextBoundaryFinderPrivate *d;
};







# 109 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtimeline.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtCore/qtimeline.h"


# 49 "/home/eagle/qt-copy/include/QtCore/qtimeline.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

class QTimeLinePrivate;
class  QTimeLine : public QObject
{
Q_OBJECT
Q_PROPERTY(int duration READ duration WRITE setDuration)
Q_PROPERTY(int updateInterval READ updateInterval WRITE setUpdateInterval)
Q_PROPERTY(int currentTime READ currentTime WRITE setCurrentTime)
Q_PROPERTY(Direction direction READ direction WRITE setDirection)
Q_PROPERTY(int loopCount READ loopCount WRITE setLoopCount)
Q_PROPERTY(CurveShape curveShape READ curveShape WRITE setCurveShape)
public:
enum State {
NotRunning,
Paused,
Running
};
enum Direction {
Forward,
Backward
};
enum CurveShape {
EaseInCurve,
EaseOutCurve,
EaseInOutCurve,
LinearCurve,
SineCurve,
CosineCurve
};

explicit QTimeLine(int duration = 1000, QObject *parent = 0);
virtual ~QTimeLine();

State state() const;

int loopCount() const;
void setLoopCount(int count);

Direction direction() const;
void setDirection(Direction direction);

int duration() const;
void setDuration(int duration);

int startFrame() const;
void setStartFrame(int frame);
int endFrame() const;
void setEndFrame(int frame);
void setFrameRange(int startFrame, int endFrame);

int updateInterval() const;
void setUpdateInterval(int interval);

CurveShape curveShape() const;
void setCurveShape(CurveShape shape);

int currentTime() const;
int currentFrame() const;
qreal currentValue() const;

int frameForTime(int msec) const;
virtual qreal valueForTime(int msec) const;

public slots:
void start();
void resume();
void stop();
void setPaused(bool paused);
void setCurrentTime(int msec);
void toggleDirection();

signals:
void valueChanged(qreal x);
void frameChanged(int);
void stateChanged(QTimeLine::State newState);
void finished();

protected:
void timerEvent(QTimerEvent *event);

private:
QTimeLine(const QTimeLine &); QTimeLine &operator=(const QTimeLine &);
inline QTimeLinePrivate* d_func() { return reinterpret_cast<QTimeLinePrivate *>(d_ptr); } inline const QTimeLinePrivate* d_func() const { return reinterpret_cast<const QTimeLinePrivate *>(d_ptr); } friend class QTimeLinePrivate;
};







# 110 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qvarlengtharray.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qcontainerfwd.h"









































































# 47 "/home/eagle/qt-copy/include/QtCore/qvarlengtharray.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtCore/qvarlengtharray.h"



# 51 "/home/eagle/qt-copy/include/QtCore/qvarlengtharray.h"




typedef QtValidLicenseForCoreModule QtCoreModule;


template<class T, int Prealloc>
class QVarLengthArray
{
public:
inline explicit QVarLengthArray(int size = 0);

inline QVarLengthArray(const QVarLengthArray<T, Prealloc> &other)
: a(Prealloc), s(0), ptr(reinterpret_cast<T *>(array))
{
append(other.constData(), other.size());
}

inline ~QVarLengthArray() {
if (QTypeInfo<T>::isComplex) {
T *i = ptr + s;
while (i-- != ptr)
i->~T();
}
if (ptr != reinterpret_cast<T *>(array))
qFree(ptr);
}
inline QVarLengthArray<T, Prealloc> &operator=(const QVarLengthArray<T, Prealloc> &other)
{
if (this != &other) {
clear();
append(other.constData(), other.size());
}
return *this;
}

inline int size() const { return s; }
inline int count() const { return s; }
inline bool isEmpty() const { return (s == 0); }
inline void resize(int size);
inline void clear() { resize(0); }

inline int capacity() const { return a; }
inline void reserve(int size);

inline T &operator[](int idx) {
qt_noop();
return ptr[idx];
}
inline const T &operator[](int idx) const {
qt_noop();
return ptr[idx];
}

inline void append(const T &t) {
const int idx = s++;
if (s == a)
realloc(s, s<<1);
if (QTypeInfo<T>::isComplex) {
new (ptr + idx) T(t);
} else {
ptr[idx] = t;
}
}
void append(const T *buf, int size);

inline T *data() { return ptr; }
inline const T *data() const { return ptr; }
inline const T * constData() const { return ptr; }

private:
void realloc(int size, int alloc);

int a;
int s;
T *ptr;
union {

char array[sizeof(qint64) * (((Prealloc * sizeof(T)) / sizeof(qint64)) + 1)];
qint64 q_for_alignment_1;
double q_for_alignment_2;
};
};

template <class T, int Prealloc>
inline QVarLengthArray<T, Prealloc>::QVarLengthArray(int asize)
: s(asize) {
if (s > Prealloc) {
ptr = reinterpret_cast<T *>(qMalloc(s * sizeof(T)));
a = s;
} else {
ptr = reinterpret_cast<T *>(array);
a = Prealloc;
}
if (QTypeInfo<T>::isComplex) {
T *i = ptr + s;
while (i != ptr)
new (--i) T;
}
}

template <class T, int Prealloc>
inline void QVarLengthArray<T, Prealloc>::resize(int asize)
{ realloc(asize, qMax(asize, a)); }

template <class T, int Prealloc>
inline void QVarLengthArray<T, Prealloc>::reserve(int asize)
{ if (asize > a) realloc(s, asize); }

template <class T, int Prealloc>
 void QVarLengthArray<T, Prealloc>::append(const T *abuf, int asize)
{
qt_noop();
if (asize <= 0)
return;

const int idx = s;
const int news = s + asize;
if (news >= a)
realloc(news, news<<1);
else
s = news;

if (QTypeInfo<T>::isComplex) {
T *i = ptr + idx;
T *j = i + asize;
while (i < j)
new (i++) T(*abuf++);
} else {
qMemCopy(&ptr[idx], abuf, asize * sizeof(T));
}
}

template <class T, int Prealloc>
 void QVarLengthArray<T, Prealloc>::realloc(int asize, int aalloc)
{
qt_noop();
T *oldPtr = ptr;
int osize = s;
s = asize;

if (aalloc != a) {
ptr = reinterpret_cast<T *>(qMalloc(aalloc * sizeof(T)));
if (ptr) {
a = aalloc;

if (QTypeInfo<T>::isStatic) {
T *i = ptr + osize;
T *j = oldPtr + osize;
while (i != ptr) {
new (--i) T(*--j);
j->~T();
}
} else {
qMemCopy(ptr, oldPtr, osize * sizeof(T));
}
} else {
ptr = oldPtr;
s = 0;
asize = 0;
}
}

if (QTypeInfo<T>::isComplex) {
if (asize < osize) {
T *i = oldPtr + osize;
T *j = oldPtr + asize;
while (i-- != j)
i->~T();
} else {
T *i = ptr + asize;
T *j = ptr + osize;
while (i != j)
new (--i) T;
}
}

if (oldPtr != reinterpret_cast<T *>(array) && oldPtr != ptr)
qFree(oldPtr);
}






# 111 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qvector.h"































































































































































































































































































































































































































































































































































































































































































































































































# 112 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qxmlstream.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"






























































































































































































































































# 1 "/home/eagle/qt-copy/include/QtCore/QIODevice"

# 47 "/home/eagle/qt-copy/include/QtCore/qxmlstream.h"




# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 1 "/home/eagle/qt-copy/include/QtCore/QString"

# 51 "/home/eagle/qt-copy/include/QtCore/qxmlstream.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qvector.h"































































































































































































































































































































































































































































































































































































































































































































































































# 1 "/home/eagle/qt-copy/include/QtCore/QVector"

# 52 "/home/eagle/qt-copy/include/QtCore/qxmlstream.h"


# 54 "/home/eagle/qt-copy/include/QtCore/qxmlstream.h"




typedef QtValidLicenseForCoreModule QtCoreModule;

























































# 116 "/home/eagle/qt-copy/include/QtCore/qxmlstream.h"
class  QXmlStreamStringRef {
QString m_string;
int m_position, m_size;
public:
inline QXmlStreamStringRef():m_position(0), m_size(0){}
inline QXmlStreamStringRef(const QStringRef &aString)
:m_string(aString.string()?*aString.string():QString()), m_position(aString.position()), m_size(aString.size()){}
inline QXmlStreamStringRef(const QString &aString):m_string(aString), m_position(0), m_size(aString.size()){}
inline ~QXmlStreamStringRef(){}
inline void clear() { m_string.clear(); m_position = m_size = 0; }
inline operator QStringRef() const { return QStringRef(&m_string, m_position, m_size); }
inline const QString *string() const { return &m_string; }
inline int position() const { return m_position; }
inline int size() const { return m_size; }
};


class QXmlStreamReaderPrivate;
class QXmlStreamAttributes;
class  QXmlStreamAttribute {
QXmlStreamStringRef m_name, m_namespaceUri, m_qualifiedName, m_value;
void *reserved;
uint m_isDefault : 1;
friend class QXmlStreamReaderPrivate;
friend class QXmlStreamAttributes;
public:
QXmlStreamAttribute();
QXmlStreamAttribute(const QString &qualifiedName, const QString &value);
QXmlStreamAttribute(const QString &namespaceUri, const QString &name, const QString &value);
QXmlStreamAttribute(const QXmlStreamAttribute &);
QXmlStreamAttribute& operator=(const QXmlStreamAttribute &);
~QXmlStreamAttribute();
inline QStringRef namespaceUri() const { return m_namespaceUri; }
inline QStringRef name() const { return m_name; }
inline QStringRef qualifiedName() const { return m_qualifiedName; }
inline QStringRef prefix() const {
return QStringRef(m_qualifiedName.string(),
m_qualifiedName.position(),
qMax(0, m_qualifiedName.size() - m_name.size() - 1));
}
inline QStringRef value() const { return m_value; }
inline bool isDefault() const { return m_isDefault; }
inline bool operator==(const QXmlStreamAttribute &other) const {
return (value() == other.value()
&& (namespaceUri().isNull() ? (qualifiedName() == other.qualifiedName())
: (namespaceUri() == other.namespaceUri() && name() == other.name())));
}
inline bool operator!=(const QXmlStreamAttribute &other) const
{ return !operator==(other); }
};

template <> class QTypeInfo<QXmlStreamAttribute> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QXmlStreamAttribute)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QXmlStreamAttribute"; } };

class  QXmlStreamAttributes : public QVector<QXmlStreamAttribute>
{
public:
QStringRef value(const QString &namespaceUri, const QString &name) const;
QStringRef value(const QString &namespaceUri, const QLatin1String &name) const;
QStringRef value(const QLatin1String &namespaceUri, const QLatin1String &name) const;
QStringRef value(const QString &qualifiedName) const;
QStringRef value(const QLatin1String &qualifiedName) const;
void append(const QString &namespaceUri, const QString &name, const QString &value);
void append(const QString &qualifiedName, const QString &value);



# 182 "/home/eagle/qt-copy/include/QtCore/qxmlstream.h"
inline void append(const QXmlStreamAttribute &attribute)
{ QVector<QXmlStreamAttribute>::append(attribute); }

# 185 "/home/eagle/qt-copy/include/QtCore/qxmlstream.h"
};

class  QXmlStreamNamespaceDeclaration {
QXmlStreamStringRef m_prefix, m_namespaceUri;
void *reserved;

friend class QXmlStreamReaderPrivate;
public:
QXmlStreamNamespaceDeclaration();
QXmlStreamNamespaceDeclaration(const QXmlStreamNamespaceDeclaration &);
QXmlStreamNamespaceDeclaration(const QString &prefix, const QString &namespaceUri);
~QXmlStreamNamespaceDeclaration();
QXmlStreamNamespaceDeclaration& operator=(const QXmlStreamNamespaceDeclaration &);
inline QStringRef prefix() const { return m_prefix; }
inline QStringRef namespaceUri() const { return m_namespaceUri; }
inline bool operator==(const QXmlStreamNamespaceDeclaration &other) const {
return (prefix() == other.prefix() && namespaceUri() == other.namespaceUri());
}
inline bool operator!=(const QXmlStreamNamespaceDeclaration &other) const
{ return !operator==(other); }
};

template <> class QTypeInfo<QXmlStreamNamespaceDeclaration> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QXmlStreamNamespaceDeclaration)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QXmlStreamNamespaceDeclaration"; } };
typedef QVector<QXmlStreamNamespaceDeclaration> QXmlStreamNamespaceDeclarations;

class  QXmlStreamNotationDeclaration {
QXmlStreamStringRef m_name, m_systemId, m_publicId;
void *reserved;

friend class QXmlStreamReaderPrivate;
public:
QXmlStreamNotationDeclaration();
~QXmlStreamNotationDeclaration();
QXmlStreamNotationDeclaration(const QXmlStreamNotationDeclaration &);
QXmlStreamNotationDeclaration& operator=(const QXmlStreamNotationDeclaration &);
inline QStringRef name() const { return m_name; }
inline QStringRef systemId() const { return m_systemId; }
inline QStringRef publicId() const { return m_publicId; }
inline bool operator==(const QXmlStreamNotationDeclaration &other) const {
return (name() == other.name() && systemId() == other.systemId()
&& publicId() == other.publicId());
}
inline bool operator!=(const QXmlStreamNotationDeclaration &other) const
{ return !operator==(other); }
};

template <> class QTypeInfo<QXmlStreamNotationDeclaration> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QXmlStreamNotationDeclaration)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QXmlStreamNotationDeclaration"; } };
typedef QVector<QXmlStreamNotationDeclaration> QXmlStreamNotationDeclarations;

class  QXmlStreamEntityDeclaration {
QXmlStreamStringRef m_name, m_notationName, m_systemId, m_publicId, m_value;
void *reserved;

friend class QXmlStreamReaderPrivate;
public:
QXmlStreamEntityDeclaration();
~QXmlStreamEntityDeclaration();
QXmlStreamEntityDeclaration(const QXmlStreamEntityDeclaration &);
QXmlStreamEntityDeclaration& operator=(const QXmlStreamEntityDeclaration &);
inline QStringRef name() const { return m_name; }
inline QStringRef notationName() const { return m_notationName; }
inline QStringRef systemId() const { return m_systemId; }
inline QStringRef publicId() const { return m_publicId; }
inline QStringRef value() const { return m_value; }
inline bool operator==(const QXmlStreamEntityDeclaration &other) const {
return (name() == other.name()
&& notationName() == other.notationName()
&& systemId() == other.systemId()
&& publicId() == other.publicId()
&& value() == other.value());
}
inline bool operator!=(const QXmlStreamEntityDeclaration &other) const
{ return !operator==(other); }
};

template <> class QTypeInfo<QXmlStreamEntityDeclaration> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QXmlStreamEntityDeclaration)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QXmlStreamEntityDeclaration"; } };
typedef QVector<QXmlStreamEntityDeclaration> QXmlStreamEntityDeclarations;


class  QXmlStreamEntityResolver
{
public:
virtual ~QXmlStreamEntityResolver();
virtual QString resolveEntity(const QString& publicId, const QString& systemId);
virtual QString resolveUndeclaredEntity(const QString &name);
};


# 273 "/home/eagle/qt-copy/include/QtCore/qxmlstream.h"
class  QXmlStreamReader {

public:
enum TokenType {
NoToken = 0,
Invalid,
StartDocument,
EndDocument,
StartElement,
EndElement,
Characters,
Comment,
DTD,
EntityReference,
ProcessingInstruction
};


QXmlStreamReader();
QXmlStreamReader(QIODevice *device);
QXmlStreamReader(const QByteArray &data);
QXmlStreamReader(const QString &data);
QXmlStreamReader(const char * data);
~QXmlStreamReader();

void setDevice(QIODevice *device);
QIODevice *device() const;
void addData(const QByteArray &data);
void addData(const QString &data);
void addData(const char *data);
void clear();


bool atEnd() const;
TokenType readNext();

TokenType tokenType() const;
QString tokenString() const;

void setNamespaceProcessing(bool);
bool namespaceProcessing() const;

inline bool isStartDocument() const { return tokenType() == StartDocument; }
inline bool isEndDocument() const { return tokenType() == EndDocument; }
inline bool isStartElement() const { return tokenType() == StartElement; }
inline bool isEndElement() const { return tokenType() == EndElement; }
inline bool isCharacters() const { return tokenType() == Characters; }
bool isWhitespace() const;
bool isCDATA() const;
inline bool isComment() const { return tokenType() == Comment; }
inline bool isDTD() const { return tokenType() == DTD; }
inline bool isEntityReference() const { return tokenType() == EntityReference; }
inline bool isProcessingInstruction() const { return tokenType() == ProcessingInstruction; }

bool isStandaloneDocument() const;
QStringRef documentVersion() const;
QStringRef documentEncoding() const;

qint64 lineNumber() const;
qint64 columnNumber() const;
qint64 characterOffset() const;

QXmlStreamAttributes attributes() const;
QString readElementText();

QStringRef name() const;
QStringRef namespaceUri() const;
QStringRef qualifiedName() const;
QStringRef prefix() const;

QStringRef processingInstructionTarget() const;
QStringRef processingInstructionData() const;

QStringRef text() const;

QXmlStreamNamespaceDeclarations namespaceDeclarations() const;
void addExtraNamespaceDeclaration(const QXmlStreamNamespaceDeclaration &extraNamespaceDeclaraction);
void addExtraNamespaceDeclarations(const QXmlStreamNamespaceDeclarations &extraNamespaceDeclaractions);
QXmlStreamNotationDeclarations notationDeclarations() const;
QXmlStreamEntityDeclarations entityDeclarations() const;
QStringRef dtdName() const;
QStringRef dtdPublicId() const;
QStringRef dtdSystemId() const;


enum Error {
NoError,
UnexpectedElementError,
CustomError,
NotWellFormedError,
PrematureEndOfDocumentError
};
void raiseError(const QString& message = QString());
QString errorString() const;
Error error() const;

inline bool hasError() const
{
return error() != NoError;
}

void setEntityResolver(QXmlStreamEntityResolver *resolver);
QXmlStreamEntityResolver *entityResolver() const;

private:
QXmlStreamReader(const QXmlStreamReader &); QXmlStreamReader &operator=(const QXmlStreamReader &);
inline QXmlStreamReaderPrivate* d_func() { return reinterpret_cast<QXmlStreamReaderPrivate *>(d_ptr); } inline const QXmlStreamReaderPrivate* d_func() const { return reinterpret_cast<const QXmlStreamReaderPrivate *>(d_ptr); } friend class QXmlStreamReaderPrivate;
QXmlStreamReaderPrivate *d_ptr;

};




# 387 "/home/eagle/qt-copy/include/QtCore/qxmlstream.h"
class QXmlStreamWriterPrivate;

class  QXmlStreamWriter
{


public:
QXmlStreamWriter();
QXmlStreamWriter(QIODevice *device);
QXmlStreamWriter(QByteArray *array);
QXmlStreamWriter(QString *string);
~QXmlStreamWriter();

void setDevice(QIODevice *device);
QIODevice *device() const;


# 404 "/home/eagle/qt-copy/include/QtCore/qxmlstream.h"
void setCodec(QTextCodec *codec);
void setCodec(const char *codecName);
QTextCodec *codec() const;


# 409 "/home/eagle/qt-copy/include/QtCore/qxmlstream.h"
void setAutoFormatting(bool);
bool autoFormatting() const;

void setAutoFormattingIndent(int spaces);
int autoFormattingIndent() const;

void writeAttribute(const QString &qualifiedName, const QString &value);
void writeAttribute(const QString &namespaceUri, const QString &name, const QString &value);
void writeAttribute(const QXmlStreamAttribute& attribute);
void writeAttributes(const QXmlStreamAttributes& attributes);

void writeCDATA(const QString &text);
void writeCharacters(const QString &text);
void writeComment(const QString &text);

void writeDTD(const QString &dtd);

void writeEmptyElement(const QString &qualifiedName);
void writeEmptyElement(const QString &namespaceUri, const QString &name);

void writeTextElement(const QString &qualifiedName, const QString &text);
void writeTextElement(const QString &namespaceUri, const QString &name, const QString &text);

void writeEndDocument();
void writeEndElement();

void writeEntityReference(const QString &name);
void writeNamespace(const QString &namespaceUri, const QString &prefix = QString());
void writeDefaultNamespace(const QString &namespaceUri);
void writeProcessingInstruction(const QString &target, const QString &data = QString());

void writeStartDocument();
void writeStartDocument(const QString &version);
void writeStartElement(const QString &qualifiedName);
void writeStartElement(const QString &namespaceUri, const QString &name);


# 446 "/home/eagle/qt-copy/include/QtCore/qxmlstream.h"
void writeCurrentToken(const QXmlStreamReader &reader);


# 449 "/home/eagle/qt-copy/include/QtCore/qxmlstream.h"
private:
QXmlStreamWriter(const QXmlStreamWriter &); QXmlStreamWriter &operator=(const QXmlStreamWriter &);
inline QXmlStreamWriterPrivate* d_func() { return reinterpret_cast<QXmlStreamWriterPrivate *>(d_ptr); } inline const QXmlStreamWriterPrivate* d_func() const { return reinterpret_cast<const QXmlStreamWriterPrivate *>(d_ptr); } friend class QXmlStreamWriterPrivate;
QXmlStreamWriterPrivate *d_ptr;
};


# 456 "/home/eagle/qt-copy/include/QtCore/qxmlstream.h"






# 113 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 25 "qtscript_masterinclude.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextcodec.h"





























































































































































































# 1 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextcodecplugin.h"


































































































# 2 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuture.h"
























































































































































































































































































# 3 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfutureinterface.h"























































































































































































































































































































# 4 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuturesynchronizer.h"
























































































































# 5 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuturewatcher.h"
































































































































































































































# 6 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qrunnable.h"










































































# 7 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentcompilertest.h"









































































# 8 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentexception.h"


































































































































# 9 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfilter.h"


































































































































































































































































































































































































































































































































































































































































































































































# 10 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfilterkernel.h"















































































































































































































































































































































# 11 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfunctionwrappers.h"















































































































































































# 12 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentiteratekernel.h"

















































































































































































































































































































# 13 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmap.h"















































































































































































































































































































































































































































































































































































































































































































































































































# 14 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmapkernel.h"










































































































































































































































































# 15 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmedian.h"




































































































































# 16 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentreducekernel.h"
























































































































































































































































# 17 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentresultstore.h"











































































































































































































































# 18 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentrun.h"











































































































































































































































































































# 19 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentrunbase.h"



































































































































# 20 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentstoredfunctioncall.h"


















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 21 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentthreadengine.h"



















































































































































































































































































































# 22 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qthreadpool.h"
































































































# 23 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qendian.h"










































































































































































































































































































































# 24 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





























































































































































































































































































# 286 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 291 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 296 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 301 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 306 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 311 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 316 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 321 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 326 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 331 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 336 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 341 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 346 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 351 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 356 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 361 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 366 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 371 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 376 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 381 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 386 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 391 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 396 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 401 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 406 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 411 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 416 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 421 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 426 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 431 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 436 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 441 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 446 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 451 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 456 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 461 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 466 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 471 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 476 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 481 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 486 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 491 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 496 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 501 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 506 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 511 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 516 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 521 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 526 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 531 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 536 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 541 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 546 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 551 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 556 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 561 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 566 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 571 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 576 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 581 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 586 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 591 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 596 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 601 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 606 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 611 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 616 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 621 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 626 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 631 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 636 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 641 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 646 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 651 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 656 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 661 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 666 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 671 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 676 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 681 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 686 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 691 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 696 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 701 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 706 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 711 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 716 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 721 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 726 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 731 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 736 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 741 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 746 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 751 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 756 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 761 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 766 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 771 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 776 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 781 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 786 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 25 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 26 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlibraryinfo.h"



























































































# 27 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 28 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qnumeric.h"









































































# 29 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstractfileengine.h"

























































































































































































































































# 30 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbuffer.h"














































































































# 31 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdatastream.h"









































































































































































































































































































































































































































# 32 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdebug.h"






































































































































































































































































# 33 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdir.h"










































































































































































































































































# 34 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdiriterator.h"



































































































# 35 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfile.h"














































































































































































































# 36 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfileinfo.h"





























































































































































































# 37 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfilesystemwatcher.h"



























































































# 38 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfsfileengine.h"



























































































































# 39 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"






























































































































































































































































# 40 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qprocess.h"












































































































































































































# 41 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qresource.h"










































































































# 42 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsettings.h"





















































































































































































































































































































# 43 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtemporaryfile.h"














































































































# 44 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextstream.h"



















































































































































































































































































































































































# 45 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qurl.h"



























































































































































































































































































# 46 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstracteventdispatcher.h"













































































































# 47 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstractitemmodel.h"

































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbasictimer.h"












































































# 49 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcoreapplication.h"












































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcoreevent.h"




































































































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qeventloop.h"






































































































# 52 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmath.h"



































































































































# 53 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmetaobject.h"










































































































































































# 54 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"












































































































































































































































































































































# 55 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmimedata.h"










































































































# 56 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 57 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qobjectcleanuphandler.h"
















































































# 58 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qobjectdefs.h"











































































































































































































































































































































































































# 59 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpointer.h"


















































































































































# 60 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsharedmemory.h"

























































































































# 61 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsignalmapper.h"






































































































# 62 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsocketnotifier.h"































































































# 63 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsystemsemaphore.h"








































































































# 64 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtimer.h"






















































































































# 65 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtranslator.h"




































































































# 66 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qvariant.h"






















































































































































































































































































































































































































































































































































































































# 67 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfactoryinterface.h"





































































# 68 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlibrary.h"


























































































































# 69 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qplugin.h"
















































































































# 70 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpluginloader.h"






































































































# 71 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/quuid.h"
































































































































































































# 72 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qatomic.h"

























































































































































































































# 73 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbasicatomic.h"




















































































































































































































# 74 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmutex.h"



































































































































































































# 75 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qreadwritelock.h"






















































































































































































































































# 76 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsemaphore.h"





















































































# 77 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qthread.h"




































































































































































# 78 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qthreadstorage.h"































































































































































# 79 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qwaitcondition.h"











































































































# 80 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qalgorithms.h"

















































































































































































































































































































































































































































































































































































# 81 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbitarray.h"
















































































































































































# 82 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"












































































































































































































































































































































































































































































































































































































# 83 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbytearraymatcher.h"


















































































# 84 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcache.h"


























































































































































































































# 85 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qchar.h"















































































































































































































































































































































































































# 86 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcontainerfwd.h"









































































# 87 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcryptographichash.h"






















































































# 88 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"



































































































































































































































































































































# 89 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qhash.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 90 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qiterator.h"








































































# 91 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qline.h"


































































































































































































































































































































































































































# 92 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlinkedlist.h"
























































































































































































































































































































































































































































































































# 93 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlist.h"











































































































































































































































































































































































































































































































































































































































































































# 94 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlocale.h"






















































































































































































































































































































































































































































































































































































































































































# 95 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmap.h"






















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 96 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpair.h"

































































































































# 97 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpoint.h"






































































































































































































































































































































































# 98 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qqueue.h"







































































# 99 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qrect.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































# 100 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qregexp.h"

























































































































































# 101 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qset.h"


































































































































































































































































































































































# 102 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qshareddata.h"



































































































































































































































# 103 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsize.h"






































































































































































































































































































































































# 104 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstack.h"




















































































# 105 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 106 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"
















































































































































































































































# 107 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstringmatcher.h"




























































































# 108 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextboundaryfinder.h"




















































































































# 109 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtimeline.h"
















































































































































# 110 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qvarlengtharray.h"













































































































































































































































# 111 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qvector.h"































































































































































































































































































































































































































































































































































































































































































































































































# 112 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qxmlstream.h"













































































































































































































































































































































































































































































# 113 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qaccessible.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qaccessible.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qaccessible.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qrect.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qaccessible.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qset.h"


































































































































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtGui/qaccessible.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qvector.h"































































































































































































































































































































































































































































































































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtGui/qaccessible.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qvariant.h"






















































































































































































































































































































































































































































































































































































































# 52 "/home/eagle/qt-copy/include/QtGui/qaccessible.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qcolor.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qrgb.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qrgb.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qrgb.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

typedef unsigned int QRgb; 

const QRgb RGB_MASK = 0x00ffffff; 

 inline int qRed(QRgb rgb) 
{ return ((rgb >> 16) & 0xff); }

 inline int qGreen(QRgb rgb) 
{ return ((rgb >> 8) & 0xff); }

 inline int qBlue(QRgb rgb) 
{ return (rgb & 0xff); }

 inline int qAlpha(QRgb rgb) 
{ return ((rgb >> 24) & 0xff); }

 inline QRgb qRgb(int r, int g, int b)
{ return (0xff << 24) | ((r & 0xff) << 16) | ((g & 0xff) << 8) | (b & 0xff); }

 inline QRgb qRgba(int r, int g, int b, int a)
{ return ((a & 0xff) << 24) | ((r & 0xff) << 16) | ((g & 0xff) << 8) | (b & 0xff); }

 inline int qGray(int r, int g, int b)
{ return (r*11+g*16+b*5)/32; }

 inline int qGray(QRgb rgb) 
{ return qGray(qRed(rgb), qGreen(rgb), qBlue(rgb)); }

 inline bool qIsGray(QRgb rgb)
{ return qRed(rgb) == qGreen(rgb) && qRed(rgb) == qBlue(rgb); }






# 47 "/home/eagle/qt-copy/include/QtGui/qcolor.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qcolor.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"
















































































































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qcolor.h"


# 51 "/home/eagle/qt-copy/include/QtGui/qcolor.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QColor;
class QColormap;
class QVariant;


# 62 "/home/eagle/qt-copy/include/QtGui/qcolor.h"
 QDebug operator<<(QDebug, const QColor &);


# 65 "/home/eagle/qt-copy/include/QtGui/qcolor.h"
 QDataStream &operator<<(QDataStream &, const QColor &);
 QDataStream &operator>>(QDataStream &, QColor &);


# 69 "/home/eagle/qt-copy/include/QtGui/qcolor.h"
class  QColor
{
public:
enum Spec { Invalid, Rgb, Hsv, Cmyk };

QColor();
QColor(Qt::GlobalColor color);
QColor(int r, int g, int b, int a = 255);
QColor(QRgb rgb);
QColor(const QString& name);
QColor(const char *name);
QColor(const QColor &color);
QColor(Spec spec);

bool isValid() const;

QString name() const;
void setNamedColor(const QString& name);

static QStringList colorNames();

inline Spec spec() const
{ return cspec; }

int alpha() const;
void setAlpha(int alpha);

qreal alphaF() const;
void setAlphaF(qreal alpha);

int red() const;
int green() const;
int blue() const;
void setRed(int red);
void setGreen(int green);
void setBlue(int blue);

qreal redF() const;
qreal greenF() const;
qreal blueF() const;
void setRedF(qreal red);
void setGreenF(qreal green);
void setBlueF(qreal blue);

void getRgb(int *r, int *g, int *b, int *a = 0) const;
void setRgb(int r, int g, int b, int a = 255);

void getRgbF(qreal *r, qreal *g, qreal *b, qreal *a = 0) const;
void setRgbF(qreal r, qreal g, qreal b, qreal a = 1.0);

QRgb rgba() const;
void setRgba(QRgb rgba);

QRgb rgb() const;
void setRgb(QRgb rgb);

int hue() const; 
int saturation() const;
int value() const;

qreal hueF() const; 
qreal saturationF() const;
qreal valueF() const;

void getHsv(int *h, int *s, int *v, int *a = 0) const;
void setHsv(int h, int s, int v, int a = 255);

void getHsvF(qreal *h, qreal *s, qreal *v, qreal *a = 0) const;
void setHsvF(qreal h, qreal s, qreal v, qreal a = 1.0);

int cyan() const;
int magenta() const;
int yellow() const;
int black() const;

qreal cyanF() const;
qreal magentaF() const;
qreal yellowF() const;
qreal blackF() const;

void getCmyk(int *c, int *m, int *y, int *k, int *a = 0);
void setCmyk(int c, int m, int y, int k, int a = 255);

void getCmykF(qreal *c, qreal *m, qreal *y, qreal *k, qreal *a = 0);
void setCmykF(qreal c, qreal m, qreal y, qreal k, qreal a = 1.0);

QColor toRgb() const;
QColor toHsv() const;
QColor toCmyk() const;

QColor convertTo(Spec colorSpec) const;

static QColor fromRgb(QRgb rgb);
static QColor fromRgba(QRgb rgba);

static QColor fromRgb(int r, int g, int b, int a = 255);
static QColor fromRgbF(qreal r, qreal g, qreal b, qreal a = 1.0);

static QColor fromHsv(int h, int s, int v, int a = 255);
static QColor fromHsvF(qreal h, qreal s, qreal v, qreal a = 1.0);

static QColor fromCmyk(int c, int m, int y, int k, int a = 255);
static QColor fromCmykF(qreal c, qreal m, qreal y, qreal k, qreal a = 1.0);

QColor light(int f = 150) const;
QColor lighter(int f = 150) const;
QColor dark(int f = 200) const;
QColor darker(int f = 200) const;

QColor &operator=(const QColor &);
QColor &operator=(Qt::GlobalColor color);

bool operator==(const QColor &c) const;
bool operator!=(const QColor &c) const;

operator QVariant() const;























# 208 "/home/eagle/qt-copy/include/QtGui/qcolor.h"
private:

# 210 "/home/eagle/qt-copy/include/QtGui/qcolor.h"

QColor(int, int, int, Spec);


# 214 "/home/eagle/qt-copy/include/QtGui/qcolor.h"
void invalidate();

Spec cspec;
union {
struct {
ushort alpha;
ushort red;
ushort green;
ushort blue;
ushort pad;
} argb;
struct {
ushort alpha;
ushort hue;
ushort saturation;
ushort value;
ushort pad;
} ahsv;
struct {
ushort alpha;
ushort cyan;
ushort magenta;
ushort yellow;
ushort black;
} acmyk;
} ct;

friend class QColormap;

# 243 "/home/eagle/qt-copy/include/QtGui/qcolor.h"
friend  QDataStream &operator<<(QDataStream &, const QColor &);
friend  QDataStream &operator>>(QDataStream &, QColor &);

# 246 "/home/eagle/qt-copy/include/QtGui/qcolor.h"
};

inline QColor::QColor()
{ invalidate(); }

inline QColor::QColor(int r, int g, int b, int a)
{ setRgb(r, g, b, a); }

inline QColor::QColor(const char *aname)
{ setNamedColor(QLatin1String(aname)); }

inline QColor::QColor(const QString& aname)
{ setNamedColor(aname); }

inline QColor::QColor(const QColor &acolor)
: cspec(acolor.cspec)
{ ct.argb = acolor.ct.argb; }

inline bool QColor::isValid() const
{ return cspec != Invalid; }

inline QColor QColor::lighter(int f) const 
{ return light(f); }

inline QColor QColor::darker(int f) const 
{ return dark(f); }






# 53 "/home/eagle/qt-copy/include/QtGui/qaccessible.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qevent.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qwindowdefs.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobjectdefs.h"











































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qwindowdefs.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qwindowdefs.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qwindowdefs.h"



typedef QtValidLicenseForGuiModule QtGuiModule;



class QPaintDevice;
class QWidget;
class QDialog;
class QColor;
class QPalette;



# 65 "/home/eagle/qt-copy/include/QtGui/qwindowdefs.h"
class QCursor;
class QPoint;
class QSize;
class QRect;
class QPolygon;
class QPainter;
class QRegion;
class QFont;
class QFontMetrics;
class QFontInfo;
class QPen;
class QBrush;
class QMatrix;
class QPixmap;
class QBitmap;
class QMovie;
class QImage;
class QPicture;
class QPrinter;
class QTimer;
class QTime;
class QClipboard;
class QString;
class QByteArray;
class QApplication;

template<typename T> class QList;
typedef QList<QWidget *> QWidgetList;








































































# 165 "/home/eagle/qt-copy/include/QtGui/qwindowdefs.h"



template<class K, class V> class QHash;
typedef QHash<WId, QWidget *> QWidgetMapper;

template<class V> class QSet;
typedef QSet<QWidget *> QWidgetSet;








# 181 "/home/eagle/qt-copy/include/QtGui/qwindowdefs.h"



# 47 "/home/eagle/qt-copy/include/QtGui/qevent.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qevent.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qregion.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qatomic.h"

























































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qregion.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qrect.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qregion.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qwindowdefs.h"























































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qregion.h"


# 51 "/home/eagle/qt-copy/include/QtGui/qregion.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

template <class T> class QVector;
class QVariant;





# 64 "/home/eagle/qt-copy/include/QtGui/qregion.h"
class QBitmap;

class  QRegion
{
public:
enum RegionType { Rectangle, Ellipse };

QRegion();
QRegion(int x, int y, int w, int h, RegionType t = Rectangle);
QRegion(const QRect &r, RegionType t = Rectangle);
QRegion(const QPolygon &pa, Qt::FillRule fillRule = Qt::OddEvenFill);



# 78 "/home/eagle/qt-copy/include/QtGui/qregion.h"
QRegion(const QRegion &region);
QRegion(const QBitmap &bitmap);
~QRegion();
QRegion &operator=(const QRegion &);




# 86 "/home/eagle/qt-copy/include/QtGui/qregion.h"
bool isEmpty() const;

bool contains(const QPoint &p) const;
bool contains(const QRect &r) const;

void translate(int dx, int dy);
inline void translate(const QPoint &p) { translate(p.x(), p.y()); }
QRegion translated(int dx, int dy) const;
inline QRegion translated(const QPoint &p) const { return translated(p.x(), p.y()); }


QRegion unite(const QRegion &r) const;
QRegion unite(const QRect &r) const;
QRegion intersect(const QRegion &r) const;
QRegion intersect(const QRect &r) const;
QRegion subtract(const QRegion &r) const;
QRegion eor(const QRegion &r) const;

inline QRegion united(const QRegion &r) const { return unite(r); }
inline QRegion united(const QRect &r) const { return unite(r); }
inline QRegion intersected(const QRegion &r) const { return intersect(r); }
inline QRegion intersected(const QRect &r) const { return intersect(r); }
inline QRegion subtracted(const QRegion &r) const { return subtract(r); }
inline QRegion xored(const QRegion &r) const { return eor(r); }

bool intersects(const QRegion &r) const;
bool intersects(const QRect &r) const;

QRect boundingRect() const;
QVector<QRect> rects() const;
void setRects(const QRect *rect, int num);
int numRects() const;

const QRegion operator|(const QRegion &r) const;
const QRegion operator+(const QRegion &r) const;
const QRegion operator+(const QRect &r) const;
const QRegion operator&(const QRegion &r) const;
const QRegion operator&(const QRect &r) const;
const QRegion operator-(const QRegion &r) const;
const QRegion operator^(const QRegion &r) const;
QRegion& operator|=(const QRegion &r);
QRegion& operator+=(const QRegion &r);
QRegion& operator+=(const QRect &r);
QRegion& operator&=(const QRegion &r);
QRegion& operator&=(const QRect &r);
QRegion& operator-=(const QRegion &r);
QRegion& operator^=(const QRegion &r);

bool operator==(const QRegion &r) const;
inline bool operator!=(const QRegion &r) const { return !(operator==(r)); }
operator QVariant() const;


















# 155 "/home/eagle/qt-copy/include/QtGui/qregion.h"
friend  QDataStream &operator<<(QDataStream &, const QRegion &);
friend  QDataStream &operator>>(QDataStream &, QRegion &);

# 158 "/home/eagle/qt-copy/include/QtGui/qregion.h"
private:
QRegion copy() const; 
void detach();










# 171 "/home/eagle/qt-copy/include/QtGui/qregion.h"
friend bool qt_region_strictContains(const QRegion &region,
const QRect &rect);
friend struct QRegionPrivate;

void exec(const QByteArray &ba, int ver = 0);
struct QRegionData {
QBasicAtomicInt ref;











# 189 "/home/eagle/qt-copy/include/QtGui/qregion.h"
};



# 193 "/home/eagle/qt-copy/include/QtGui/qregion.h"
struct QRegionData *d;
static struct QRegionData shared_empty;
static void cleanUp(QRegionData *x);
};






# 203 "/home/eagle/qt-copy/include/QtGui/qregion.h"
 QDataStream &operator<<(QDataStream &, const QRegion &);
 QDataStream &operator>>(QDataStream &, QRegion &);



# 208 "/home/eagle/qt-copy/include/QtGui/qregion.h"
 QDebug operator<<(QDebug, const QRegion &);


# 211 "/home/eagle/qt-copy/include/QtGui/qregion.h"





# 49 "/home/eagle/qt-copy/include/QtGui/qevent.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtGui/qevent.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtGui/qevent.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qkeysequence.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qkeysequence.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qkeysequence.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qkeysequence.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 58 "/home/eagle/qt-copy/include/QtGui/qkeysequence.h"




# 62 "/home/eagle/qt-copy/include/QtGui/qkeysequence.h"
class QKeySequence;
 QDataStream &operator<<(QDataStream &in, const QKeySequence &ks);
 QDataStream &operator>>(QDataStream &out, QKeySequence &ks);






# 71 "/home/eagle/qt-copy/include/QtGui/qkeysequence.h"
class QVariant;
class QKeySequencePrivate;

class  QKeySequence
{
public:
enum StandardKey {
UnknownKey,
HelpContents,
WhatsThis,
Open,
Close,
Save,
New,
Delete,
Cut,
Copy,
Paste,
Undo,
Redo,
Back,
Forward,
Refresh,
ZoomIn,
ZoomOut,
Print,
AddTab,
NextChild,
PreviousChild,
Find,
FindNext,
FindPrevious,
Replace,
SelectAll,
Bold,
Italic,
Underline,
MoveToNextChar,
MoveToPreviousChar,
MoveToNextWord,
MoveToPreviousWord,
MoveToNextLine,
MoveToPreviousLine,
MoveToNextPage,
MoveToPreviousPage,
MoveToStartOfLine,
MoveToEndOfLine,
MoveToStartOfBlock,
MoveToEndOfBlock,
MoveToStartOfDocument,
MoveToEndOfDocument,
SelectNextChar,
SelectPreviousChar,
SelectNextWord,
SelectPreviousWord,
SelectNextLine,
SelectPreviousLine,
SelectNextPage,
SelectPreviousPage,
SelectStartOfLine,
SelectEndOfLine,
SelectStartOfBlock,
SelectEndOfBlock,
SelectStartOfDocument,
SelectEndOfDocument,
DeleteStartOfWord,
DeleteEndOfWord,
DeleteEndOfLine
};

QKeySequence();
QKeySequence(const QString &key);
QKeySequence(int k1, int k2 = 0, int k3 = 0, int k4 = 0);
QKeySequence(const QKeySequence &ks);
QKeySequence(StandardKey key);
~QKeySequence();

uint count() const; 
bool isEmpty() const;

enum SequenceMatch {
NoMatch,
PartialMatch,
ExactMatch



# 158 "/home/eagle/qt-copy/include/QtGui/qkeysequence.h"
};

enum SequenceFormat {
NativeText,
PortableText
};

QString toString(SequenceFormat format = PortableText) const;
static QKeySequence fromString(const QString &str, SequenceFormat format = PortableText);

SequenceMatch matches(const QKeySequence &seq) const;
static QKeySequence mnemonic(const QString &text);
static QList<QKeySequence> keyBindings(StandardKey key);


operator QString() const;
operator QVariant() const;
operator int() const;
int operator[](uint i) const;
QKeySequence &operator=(const QKeySequence &other);
bool operator==(const QKeySequence &other) const;
inline bool operator!= (const QKeySequence &other) const
{ return !(*this == other); }
bool operator< (const QKeySequence &ks) const;
inline bool operator> (const QKeySequence &other) const
{ return other < *this; }
inline bool operator<= (const QKeySequence &other) const
{ return !(other < *this); }
inline bool operator>= (const QKeySequence &other) const
{ return !(*this < other); }

bool isDetached() const;
private:
static int decodeString(const QString &ks);
static QString encodeString(int key);
int assign(const QString &str);
void setKey(int key, int index);

QKeySequencePrivate *d;

friend  QDataStream &operator<<(QDataStream &in, const QKeySequence &ks);
friend  QDataStream &operator>>(QDataStream &in, QKeySequence &ks);
friend class Q3AccelManager;
friend class QShortcutMap;
friend class QShortcut;

public:
typedef QKeySequencePrivate * DataPtr;
inline DataPtr &data_ptr() { return d; }
};
template <> class QTypeInfo<QKeySequence> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QKeySequence)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QKeySequence"; } };
template <> inline bool qIsDetached<QKeySequence>(QKeySequence &t) { return t.isDetached(); } template <typename T> inline void qSwap(T &, T &); template <> inline void qSwap<QKeySequence>(QKeySequence &value1, QKeySequence &value2) { const QKeySequence::DataPtr t = value1.data_ptr(); value1.data_ptr() = value2.data_ptr(); value2.data_ptr() = t; }


# 212 "/home/eagle/qt-copy/include/QtGui/qkeysequence.h"
 QDebug operator<<(QDebug, const QKeySequence &);













# 226 "/home/eagle/qt-copy/include/QtGui/qkeysequence.h"





# 52 "/home/eagle/qt-copy/include/QtGui/qevent.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qcoreevent.h"




































































































































































































































































































































































# 53 "/home/eagle/qt-copy/include/QtGui/qevent.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qmime.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qmimedata.h"










































































































# 47 "/home/eagle/qt-copy/include/QtGui/qmime.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qmime.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class  QMimeSource
{
public:
virtual ~QMimeSource();
virtual const char* format(int n = 0) const = 0;
virtual bool provides(const char*) const;
virtual QByteArray encodedData(const char*) const = 0;
};





































































































# 172 "/home/eagle/qt-copy/include/QtGui/qmime.h"





# 54 "/home/eagle/qt-copy/include/QtGui/qevent.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qdrag.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qdrag.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qdrag.h"




typedef QtValidLicenseForGuiModule QtGuiModule;


# 56 "/home/eagle/qt-copy/include/QtGui/qdrag.h"
class QMimeData;
class QDragPrivate;
class QWidget;
class QPixmap;
class QPoint;
class QDragManager;

class  QDrag : public QObject
{
Q_OBJECT
inline QDragPrivate* d_func() { return reinterpret_cast<QDragPrivate *>(d_ptr); } inline const QDragPrivate* d_func() const { return reinterpret_cast<const QDragPrivate *>(d_ptr); } friend class QDragPrivate;
public:
explicit QDrag(QWidget *dragSource);
~QDrag();

void setMimeData(QMimeData *data);
QMimeData *mimeData() const;

void setPixmap(const QPixmap &);
QPixmap pixmap() const;

void setHotSpot(const QPoint &hotspot);
QPoint hotSpot() const;

QWidget *source() const;
QWidget *target() const;

Qt::DropAction start(Qt::DropActions supportedActions = Qt::CopyAction);
Qt::DropAction exec(Qt::DropActions supportedActions = Qt::MoveAction);
Qt::DropAction exec(Qt::DropActions supportedActions, Qt::DropAction defaultAction);

void setDragCursor(const QPixmap &cursor, Qt::DropAction action);

signals:
void actionChanged(Qt::DropAction action);
void targetChanged(QWidget *newTarget);

private:



# 97 "/home/eagle/qt-copy/include/QtGui/qdrag.h"
friend class QDragManager;
QDrag(const QDrag &); QDrag &operator=(const QDrag &);
};



# 103 "/home/eagle/qt-copy/include/QtGui/qdrag.h"





# 55 "/home/eagle/qt-copy/include/QtGui/qevent.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qvariant.h"






















































































































































































































































































































































































































































































































































































































# 56 "/home/eagle/qt-copy/include/QtGui/qevent.h"


# 58 "/home/eagle/qt-copy/include/QtGui/qevent.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QAction;

class  QInputEvent : public QEvent
{
public:
QInputEvent(Type type, Qt::KeyboardModifiers modifiers = Qt::NoModifier);
~QInputEvent();
inline Qt::KeyboardModifiers modifiers() const { return modState; }
protected:
Qt::KeyboardModifiers modState;
};

class  QMouseEvent : public QInputEvent
{
public:
QMouseEvent(Type type, const QPoint &pos, Qt::MouseButton button,
Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers);
QMouseEvent(Type type, const QPoint &pos, const QPoint &globalPos,
Qt::MouseButton button, Qt::MouseButtons buttons,
Qt::KeyboardModifiers modifiers);
~QMouseEvent();

inline const QPoint &pos() const { return p; }
inline const QPoint &globalPos() const { return g; }
inline int x() const { return p.x(); }
inline int y() const { return p.y(); }
inline int globalX() const { return g.x(); }
inline int globalY() const { return g.y(); }
inline Qt::MouseButton button() const { return b; }
inline Qt::MouseButtons buttons() const { return mouseState; }

static QMouseEvent *createExtendedMouseEvent(Type type, const QPointF &pos,
const QPoint &globalPos, Qt::MouseButton button,
Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers);
inline bool hasExtendedInfo() const { return reinterpret_cast<const QMouseEvent *>(d) == this; }
QPointF posF() const;










# 110 "/home/eagle/qt-copy/include/QtGui/qevent.h"
protected:
QPoint p, g;
Qt::MouseButton b;
Qt::MouseButtons mouseState;
};

class  QHoverEvent : public QEvent
{
public:
QHoverEvent(Type type, const QPoint &pos, const QPoint &oldPos);
~QHoverEvent();

inline const QPoint &pos() const { return p; }
inline const QPoint &oldPos() const { return op; }

protected:
QPoint p, op;
};


# 130 "/home/eagle/qt-copy/include/QtGui/qevent.h"
class  QWheelEvent : public QInputEvent
{
public:
QWheelEvent(const QPoint &pos, int delta,
Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers,
Qt::Orientation orient = Qt::Vertical);
QWheelEvent(const QPoint &pos, const QPoint& globalPos, int delta,
Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers,
Qt::Orientation orient = Qt::Vertical);
~QWheelEvent();

inline int delta() const { return d; }
inline const QPoint &pos() const { return p; }
inline const QPoint &globalPos() const { return g; }
inline int x() const { return p.x(); }
inline int y() const { return p.y(); }
inline int globalX() const { return g.x(); }
inline int globalY() const { return g.y(); }

inline Qt::MouseButtons buttons() const { return mouseState; }
Qt::Orientation orientation() const { return o; }









# 160 "/home/eagle/qt-copy/include/QtGui/qevent.h"
protected:
QPoint p;
QPoint g;
int d;
Qt::MouseButtons mouseState;
Qt::Orientation o;
};



# 170 "/home/eagle/qt-copy/include/QtGui/qevent.h"
class  QTabletEvent : public QInputEvent
{
public:
enum TabletDevice { NoDevice, Puck, Stylus, Airbrush, FourDMouse,
XFreeEraser , RotationStylus };
enum PointerType { UnknownPointer, Pen, Cursor, Eraser };
QTabletEvent(Type t, const QPoint &pos, const QPoint &globalPos, const QPointF &hiResGlobalPos,
int device, int pointerType, qreal pressure, int xTilt, int yTilt,
qreal tangentialPressure, qreal rotation, int z,
Qt::KeyboardModifiers keyState, qint64 uniqueID);
~QTabletEvent();

inline const QPoint &pos() const { return mPos; }
inline const QPoint &globalPos() const { return mGPos; }
inline const QPointF &hiResGlobalPos() const { return mHiResGlobalPos; }
inline int x() const { return mPos.x(); }
inline int y() const { return mPos.y(); }
inline int globalX() const { return mGPos.x(); }
inline int globalY() const { return mGPos.y(); }
inline qreal hiResGlobalX() const { return mHiResGlobalPos.x(); }
inline qreal hiResGlobalY() const { return mHiResGlobalPos.y(); }
inline TabletDevice device() const { return TabletDevice(mDev); }
inline PointerType pointerType() const { return PointerType(mPointerType); }
inline qint64 uniqueId() const { return mUnique; }
inline qreal pressure() const { return mPress; }
inline int z() const { return mZ; }
inline qreal tangentialPressure() const { return mTangential; }
inline qreal rotation() const { return mRot; }
inline int xTilt() const { return mXT; }
inline int yTilt() const { return mYT; }

protected:
QPoint mPos, mGPos;
QPointF mHiResGlobalPos;
int mDev, mPointerType, mXT, mYT, mZ;
qreal mPress, mTangential, mRot;
qint64 mUnique;




void *mExtra;
};


# 215 "/home/eagle/qt-copy/include/QtGui/qevent.h"
class  QKeyEvent : public QInputEvent
{
public:
QKeyEvent(Type type, int key, Qt::KeyboardModifiers modifiers, const QString& text = QString(),
bool autorep = false, ushort count = 1);
~QKeyEvent();

int key() const { return k; }

# 224 "/home/eagle/qt-copy/include/QtGui/qevent.h"
bool matches(QKeySequence::StandardKey key) const;

# 226 "/home/eagle/qt-copy/include/QtGui/qevent.h"
Qt::KeyboardModifiers modifiers() const;
inline QString text() const { return txt; }
inline bool isAutoRepeat() const { return autor; }
inline int count() const { return int(c); }


static QKeyEvent *createExtendedKeyEvent(Type type, int key, Qt::KeyboardModifiers modifiers,
quint32 nativeScanCode, quint32 nativeVirtualKey,
quint32 nativeModifiers,
const QString& text = QString(), bool autorep = false,
ushort count = 1);
inline bool hasExtendedInfo() const { return reinterpret_cast<const QKeyEvent*>(d) == this; }
quint32 nativeScanCode() const;
quint32 nativeVirtualKey() const;
quint32 nativeModifiers() const;

















# 258 "/home/eagle/qt-copy/include/QtGui/qevent.h"
protected:
QString txt;
int k;
ushort c;
uint autor:1;
};


class  QFocusEvent : public QEvent
{
public:
QFocusEvent(Type type, Qt::FocusReason reason=Qt::OtherFocusReason);
~QFocusEvent();

inline bool gotFocus() const { return type() == FocusIn; }
inline bool lostFocus() const { return type() == FocusOut; }







# 281 "/home/eagle/qt-copy/include/QtGui/qevent.h"
Qt::FocusReason reason();
Qt::FocusReason reason() const;

private:
Qt::FocusReason m_reason;
};


class  QPaintEvent : public QEvent
{
public:
QPaintEvent(const QRegion& paintRegion);
QPaintEvent(const QRect &paintRect);
~QPaintEvent();

inline const QRect &rect() const { return m_rect; }
inline const QRegion &region() const { return m_region; }







# 305 "/home/eagle/qt-copy/include/QtGui/qevent.h"
protected:
friend class QApplication;
friend class QCoreApplication;
QRect m_rect;
QRegion m_region;
bool m_erased;
};

class QUpdateLaterEvent : public QEvent
{
public:
QUpdateLaterEvent(const QRegion& paintRegion);
~QUpdateLaterEvent();

inline const QRegion &region() const { return m_region; }

protected:
QRegion m_region;
};

class  QMoveEvent : public QEvent
{
public:
QMoveEvent(const QPoint &pos, const QPoint &oldPos);
~QMoveEvent();

inline const QPoint &pos() const { return p; }
inline const QPoint &oldPos() const { return oldp;}
protected:
QPoint p, oldp;
friend class QApplication;
friend class QCoreApplication;
};


class  QResizeEvent : public QEvent
{
public:
QResizeEvent(const QSize &size, const QSize &oldSize);
~QResizeEvent();

inline const QSize &size() const { return s; }
inline const QSize &oldSize()const { return olds;}
protected:
QSize s, olds;
friend class QApplication;
friend class QCoreApplication;
};


class  QCloseEvent : public QEvent
{
public:
QCloseEvent();
~QCloseEvent();
};


class  QIconDragEvent : public QEvent
{
public:
QIconDragEvent();
~QIconDragEvent();
};


class  QShowEvent : public QEvent
{
public:
QShowEvent();
~QShowEvent();
};


class  QHideEvent : public QEvent
{
public:
QHideEvent();
~QHideEvent();
};

class  QContextMenuEvent : public QInputEvent
{
public:
enum Reason { Mouse, Keyboard, Other };

QContextMenuEvent(Reason reason, const QPoint &pos, const QPoint &globalPos,
Qt::KeyboardModifiers modifiers);
QContextMenuEvent(Reason reason, const QPoint &pos, const QPoint &globalPos);
QContextMenuEvent(Reason reason, const QPoint &pos);
~QContextMenuEvent();

inline int x() const { return p.x(); }
inline int y() const { return p.y(); }
inline int globalX() const { return gp.x(); }
inline int globalY() const { return gp.y(); }

inline const QPoint& pos() const { return p; }
inline const QPoint& globalPos() const { return gp; }

inline Reason reason() const { return Reason(reas); }







# 413 "/home/eagle/qt-copy/include/QtGui/qevent.h"
protected:
QPoint p;
QPoint gp;
uint reas : 8;
};


# 420 "/home/eagle/qt-copy/include/QtGui/qevent.h"
class  QInputMethodEvent : public QEvent
{
public:
enum AttributeType {
TextFormat,
Cursor,
Language,
Ruby
};
class Attribute {
public:
Attribute(AttributeType t, int s, int l, QVariant val) : type(t), start(s), length(l), value(val) {}
AttributeType type;

int start;
int length;
QVariant value;
};
QInputMethodEvent();
QInputMethodEvent(const QString &preeditText, const QList<Attribute> &attributes);
void setCommitString(const QString &commitString, int replaceFrom = 0, int replaceLength = 0);

inline const QList<Attribute> &attributes() const { return attrs; }
inline const QString &preeditString() const { return preedit; }

inline const QString &commitString() const { return commit; }
inline int replacementStart() const { return replace_from; }
inline int replacementLength() const { return replace_length; }

QInputMethodEvent(const QInputMethodEvent &other);

private:
QString preedit;
QList<Attribute> attrs;
QString commit;
int replace_from;
int replace_length;
};




# 462 "/home/eagle/qt-copy/include/QtGui/qevent.h"
class QMimeData;

class  QDropEvent : public QEvent

, public QMimeSource

{
public:
QDropEvent(const QPoint& pos, Qt::DropActions actions, const QMimeData *data,
Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, Type type = Drop);
~QDropEvent();

inline const QPoint &pos() const { return p; }
inline Qt::MouseButtons mouseButtons() const { return mouseState; }
inline Qt::KeyboardModifiers keyboardModifiers() const { return modState; }

inline Qt::DropActions possibleActions() const { return act; }
inline Qt::DropAction proposedAction() const { return default_action; }
inline void acceptProposedAction() { drop_action = default_action; accept(); }

inline Qt::DropAction dropAction() const { return drop_action; }
void setDropAction(Qt::DropAction action);

QWidget* source() const;
inline const QMimeData *mimeData() const { return mdata; }


const char* format(int n = 0) const;
QByteArray encodedData(const char*) const;
bool provides(const char*) const;













# 505 "/home/eagle/qt-copy/include/QtGui/qevent.h"
protected:
friend class QApplication;
QPoint p;
Qt::MouseButtons mouseState;
Qt::KeyboardModifiers modState;
Qt::DropActions act;
Qt::DropAction drop_action;
Qt::DropAction default_action;
const QMimeData *mdata;
mutable QList<QByteArray> fmts; 
};


class  QDragMoveEvent : public QDropEvent
{
public:
QDragMoveEvent(const QPoint &pos, Qt::DropActions actions, const QMimeData *data,
Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, Type type = DragMove);
~QDragMoveEvent();

inline QRect answerRect() const { return rect; }

inline void accept() { QDropEvent::accept(); }
inline void ignore() { QDropEvent::ignore(); }

inline void accept(const QRect & r) { accept(); rect = r; }
inline void ignore(const QRect & r) { ignore(); rect = r; }





# 537 "/home/eagle/qt-copy/include/QtGui/qevent.h"
protected:
friend class QApplication;
QRect rect;
};


class  QDragEnterEvent : public QDragMoveEvent
{
public:
QDragEnterEvent(const QPoint &pos, Qt::DropActions actions, const QMimeData *data,
Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers);
~QDragEnterEvent();
};



class  QDragResponseEvent : public QEvent
{
public:
QDragResponseEvent(bool accepted);
~QDragResponseEvent();

inline bool dragAccepted() const { return a; }
protected:
bool a;
};


class  QDragLeaveEvent : public QEvent
{
public:
QDragLeaveEvent();
~QDragLeaveEvent();
};



# 574 "/home/eagle/qt-copy/include/QtGui/qevent.h"
class  QHelpEvent : public QEvent
{
public:
QHelpEvent(Type type, const QPoint &pos, const QPoint &globalPos);
~QHelpEvent();

inline int x() const { return p.x(); }
inline int y() const { return p.y(); }
inline int globalX() const { return gp.x(); }
inline int globalY() const { return gp.y(); }

inline const QPoint& pos() const { return p; }
inline const QPoint& globalPos() const { return gp; }

private:
QPoint p;
QPoint gp;
};


# 594 "/home/eagle/qt-copy/include/QtGui/qevent.h"
class  QStatusTipEvent : public QEvent
{
public:
QStatusTipEvent(const QString &tip);
~QStatusTipEvent();

inline QString tip() const { return s; }
private:
QString s;
};



# 607 "/home/eagle/qt-copy/include/QtGui/qevent.h"
class  QWhatsThisClickedEvent : public QEvent
{
public:
QWhatsThisClickedEvent(const QString &href);
~QWhatsThisClickedEvent();

inline QString href() const { return s; }
private:
QString s;
};



# 620 "/home/eagle/qt-copy/include/QtGui/qevent.h"
class  QActionEvent : public QEvent
{
QAction *act, *bef;
public:
QActionEvent(int type, QAction *action, QAction *before = 0);
~QActionEvent();

inline QAction *action() const { return act; }
inline QAction *before() const { return bef; }
};


# 632 "/home/eagle/qt-copy/include/QtGui/qevent.h"
class  QFileOpenEvent : public QEvent
{
public:
QFileOpenEvent(const QString &file);
~QFileOpenEvent();

inline QString file() const { return f; }
private:
QString f;
};


# 644 "/home/eagle/qt-copy/include/QtGui/qevent.h"
class  QToolBarChangeEvent : public QEvent
{
public:
QToolBarChangeEvent(bool t);
~QToolBarChangeEvent();

inline bool toggle() const { return tog; }
private:
uint tog : 1;
};



# 657 "/home/eagle/qt-copy/include/QtGui/qevent.h"
class  QShortcutEvent : public QEvent
{
public:
QShortcutEvent(const QKeySequence &key, int id, bool ambiguous = false);
~QShortcutEvent();

inline const QKeySequence &key() { return sequence; }
inline const QKeySequence &key() const { return sequence; }
inline int shortcutId() { return sid; }
inline int shortcutId() const { return sid; }
inline bool isAmbiguous() { return ambig; }
inline bool isAmbiguous() const { return ambig; }
protected:
QKeySequence sequence;
bool ambig;
int sid;
};



# 677 "/home/eagle/qt-copy/include/QtGui/qevent.h"
class  QClipboardEvent : public QEvent
{
public:
QClipboardEvent(QEventPrivate *data);
~QClipboardEvent();

QEventPrivate *data() { return d; };
};


# 687 "/home/eagle/qt-copy/include/QtGui/qevent.h"
class  QWindowStateChangeEvent: public QEvent
{
public:
QWindowStateChangeEvent(Qt::WindowStates aOldState);
QWindowStateChangeEvent(Qt::WindowStates aOldState, bool isOverride);
~QWindowStateChangeEvent();

inline Qt::WindowStates oldState() const { return ostate; }
bool isOverride() const;

private:
Qt::WindowStates ostate;
};














# 714 "/home/eagle/qt-copy/include/QtGui/qevent.h"
 QDebug operator<<(QDebug, const QEvent *);



# 718 "/home/eagle/qt-copy/include/QtGui/qevent.h"
inline bool operator==(QKeyEvent *e, QKeySequence::StandardKey key){return (e ? e->matches(key) : false);}
inline bool operator==(QKeySequence::StandardKey key, QKeyEvent *e){return (e ? e->matches(key) : false);}


# 722 "/home/eagle/qt-copy/include/QtGui/qevent.h"





# 54 "/home/eagle/qt-copy/include/QtGui/qaccessible.h"


# 56 "/home/eagle/qt-copy/include/QtGui/qaccessible.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 64 "/home/eagle/qt-copy/include/QtGui/qaccessible.h"
class QAccessibleInterface;

class  QAccessible
{
public:
enum Event {
SoundPlayed = 0x0001,
Alert = 0x0002,
ForegroundChanged = 0x0003,
MenuStart = 0x0004,
MenuEnd = 0x0005,
PopupMenuStart = 0x0006,
PopupMenuEnd = 0x0007,
ContextHelpStart = 0x000C,
ContextHelpEnd = 0x000D,
DragDropStart = 0x000E,
DragDropEnd = 0x000F,
DialogStart = 0x0010,
DialogEnd = 0x0011,
ScrollingStart = 0x0012,
ScrollingEnd = 0x0013,

MenuCommand = 0x0018,

ObjectCreated = 0x8000,
ObjectDestroyed = 0x8001,
ObjectShow = 0x8002,
ObjectHide = 0x8003,
ObjectReorder = 0x8004,
Focus = 0x8005,
Selection = 0x8006,
SelectionAdd = 0x8007,
SelectionRemove = 0x8008,
SelectionWithin = 0x8009,
StateChanged = 0x800A,
LocationChanged = 0x800B,
NameChanged = 0x800C,
DescriptionChanged = 0x800D,
ValueChanged = 0x800E,
ParentChanged = 0x800F,
HelpChanged = 0x80A0,
DefaultActionChanged = 0x80B0,
AcceleratorChanged = 0x80C0
};

enum StateFlag {
Normal = 0x00000000,
Unavailable = 0x00000001,
Selected = 0x00000002,
Focused = 0x00000004,
Pressed = 0x00000008,
Checked = 0x00000010,
Mixed = 0x00000020,
ReadOnly = 0x00000040,
HotTracked = 0x00000080,
DefaultButton = 0x00000100,
Expanded = 0x00000200,
Collapsed = 0x00000400,
Busy = 0x00000800,

Marqueed = 0x00002000,
Animated = 0x00004000,
Invisible = 0x00008000,
Offscreen = 0x00010000,
Sizeable = 0x00020000,
Movable = 0x00040000,



# 133 "/home/eagle/qt-copy/include/QtGui/qaccessible.h"
SelfVoicing = 0x00080000,
Focusable = 0x00100000,
Selectable = 0x00200000,
Linked = 0x00400000,
Traversed = 0x00800000,
MultiSelectable = 0x01000000,
ExtSelectable = 0x02000000,



Protected = 0x20000000,
HasPopup = 0x40000000,
Modal = 0x80000000,

HasInvokeExtension = 0x10000000 
};
typedef QFlags<StateFlag> State;

enum Role {
NoRole = 0x00000000,
TitleBar = 0x00000001,
MenuBar = 0x00000002,
ScrollBar = 0x00000003,
Grip = 0x00000004,
Sound = 0x00000005,
Cursor = 0x00000006,
Caret = 0x00000007,
AlertMessage = 0x00000008,
Window = 0x00000009,
Client = 0x0000000A,
PopupMenu = 0x0000000B,
MenuItem = 0x0000000C,
ToolTip = 0x0000000D,
Application = 0x0000000E,
Document = 0x0000000F,
Pane = 0x00000010,
Chart = 0x00000011,
Dialog = 0x00000012,
Border = 0x00000013,
Grouping = 0x00000014,
Separator = 0x00000015,
ToolBar = 0x00000016,
StatusBar = 0x00000017,
Table = 0x00000018,
ColumnHeader = 0x00000019,
RowHeader = 0x0000001A,
Column = 0x0000001B,
Row = 0x0000001C,
Cell = 0x0000001D,
Link = 0x0000001E,
HelpBalloon = 0x0000001F,
Assistant = 0x00000020,
List = 0x00000021,
ListItem = 0x00000022,
Tree = 0x00000023,
TreeItem = 0x00000024,
PageTab = 0x00000025,
PropertyPage = 0x00000026,
Indicator = 0x00000027,
Graphic = 0x00000028,
StaticText = 0x00000029,
EditableText = 0x0000002A, 
PushButton = 0x0000002B,
CheckBox = 0x0000002C,
RadioButton = 0x0000002D,
ComboBox = 0x0000002E,

ProgressBar = 0x00000030,
Dial = 0x00000031,
HotkeyField = 0x00000032,
Slider = 0x00000033,
SpinBox = 0x00000034,
Canvas = 0x00000035,
Animation = 0x00000036,
Equation = 0x00000037,
ButtonDropDown = 0x00000038,
ButtonMenu = 0x00000039,
ButtonDropGrid = 0x0000003A,
Whitespace = 0x0000003B,
PageTabList = 0x0000003C,
Clock = 0x0000003D,
Splitter = 0x0000003E,
LayeredPane = 0x0000003F,
UserRole = 0x0000ffff
};

enum Text {
Name = 0,
Description,
Value,
Help,
Accelerator,
UserText = 0x0000ffff
};

enum RelationFlag {
Unrelated = 0x00000000,
Self = 0x00000001,
Ancestor = 0x00000002,
Child = 0x00000004,
Descendent = 0x00000008,
Sibling = 0x00000010,
HierarchyMask = 0x000000ff,

Up = 0x00000100,
Down = 0x00000200,
Left = 0x00000400,
Right = 0x00000800,
Covers = 0x00001000,
Covered = 0x00002000,
GeometryMask = 0x0000ff00,

FocusChild = 0x00010000,
Label = 0x00020000,
Labelled = 0x00040000,
Controller = 0x00080000,
Controlled = 0x00100000,
LogicalMask = 0x00ff0000
};
typedef QFlags<RelationFlag> Relation;

enum Action {
DefaultAction = 0,
Press = -1,
FirstStandardAction = Press,
SetFocus = -2,
Increase = -3,
Decrease = -4,
Accept = -5,
Cancel = -6,
Select = -7,
ClearSelection = -8,
RemoveSelection = -9,
ExtendSelection = -10,
AddToSelection = -11,
LastStandardAction = AddToSelection
};

enum Method {
ListSupportedMethods = 0,
SetCursorPosition = 1,
GetCursorPosition = 2,
ForegroundColor = 3,
BackgroundColor = 4
};

typedef QAccessibleInterface*(*InterfaceFactory)(const QString &key, QObject*);
typedef void(*UpdateHandler)(QObject*, int who, Event reason);
typedef void(*RootObjectHandler)(QObject*);

static void installFactory(InterfaceFactory);
static void removeFactory(InterfaceFactory);
static UpdateHandler installUpdateHandler(UpdateHandler);
static RootObjectHandler installRootObjectHandler(RootObjectHandler);

static QAccessibleInterface *queryAccessibleInterface(QObject *);
static void updateAccessibility(QObject *, int who, Event reason);
static bool isActive();
static void setRootObject(QObject*);

static void initialize();
static void cleanup();

private:
static UpdateHandler updateHandler;
static RootObjectHandler rootObjectHandler;
};

inline QFlags<QAccessible::State::enum_type> operator|(QAccessible::State::enum_type f1, QAccessible::State::enum_type f2) { return QFlags<QAccessible::State::enum_type>(f1) | f2; } inline QFlags<QAccessible::State::enum_type> operator|(QAccessible::State::enum_type f1, QFlags<QAccessible::State::enum_type> f2) { return f2 | f1; }
inline QFlags<QAccessible::Relation::enum_type> operator|(QAccessible::Relation::enum_type f1, QAccessible::Relation::enum_type f2) { return QFlags<QAccessible::Relation::enum_type>(f1) | f2; } inline QFlags<QAccessible::Relation::enum_type> operator|(QAccessible::Relation::enum_type f1, QFlags<QAccessible::Relation::enum_type> f2) { return f2 | f1; }

 template <> struct QMetaTypeId< QSet<QAccessible::Method> > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (!metatype_id) metatype_id = qRegisterMetaType< QSet<QAccessible::Method> >("QSet<QAccessible::Method>"); return metatype_id; } }; 


namespace QAccessible2
{
enum InterfaceType
{
TextInterface,
EditableTextInterface,
ValueInterface,
TableInterface
};
}

class QAccessible2Interface;
class QAccessibleTextInterface;
class QAccessibleEditableTextInterface;
class QAccessibleValueInterface;
class QAccessibleTableInterface;

class  QAccessibleInterface : public QAccessible
{
public:
virtual ~QAccessibleInterface() {}

virtual bool isValid() const = 0;
virtual QObject *object() const = 0;


virtual int childCount() const = 0;
virtual int indexOfChild(const QAccessibleInterface *) const = 0;


virtual Relation relationTo(int child, const QAccessibleInterface *other,
int otherChild) const = 0;
virtual int childAt(int x, int y) const = 0;


virtual int navigate(RelationFlag relation, int index, QAccessibleInterface **iface) const = 0;


virtual QString text(Text t, int child) const = 0;
virtual void setText(Text t, int child, const QString &text) = 0;
virtual QRect rect(int child) const = 0;
virtual Role role(int child) const = 0;
virtual State state(int child) const = 0;


virtual int userActionCount(int child) const = 0;
virtual QString actionText(int action, Text t, int child) const = 0;
virtual bool doAction(int action, int child, const QVariantList &params = QVariantList()) = 0;

QVariant invokeMethod(Method method, int child = 0,
const QVariantList &params = QVariantList());

inline QSet<Method> supportedMethods()
{ return qvariant_cast<QSet<Method> >(invokeMethod(ListSupportedMethods)); }

inline QColor foregroundColor()
{ return qvariant_cast<QColor>(invokeMethod(ForegroundColor)); }

inline QColor backgroundColor()
{ return qvariant_cast<QColor>(invokeMethod(BackgroundColor)); }

inline QAccessibleTextInterface *textInterface()
{ return reinterpret_cast<QAccessibleTextInterface *>(cast_helper(QAccessible2::TextInterface)); }

inline QAccessibleEditableTextInterface *editableTextInterface()
{ return reinterpret_cast<QAccessibleEditableTextInterface *>(cast_helper(QAccessible2::EditableTextInterface)); }

inline QAccessibleValueInterface *valueInterface()
{ return reinterpret_cast<QAccessibleValueInterface *>(cast_helper(QAccessible2::ValueInterface)); }

inline QAccessibleTableInterface *tableInterface()
{ return reinterpret_cast<QAccessibleTableInterface *>(cast_helper(QAccessible2::TableInterface)); }

private:
QAccessible2Interface *cast_helper(QAccessible2::InterfaceType);
};

class  QAccessibleInterfaceEx: public QAccessibleInterface
{
public:
virtual QVariant invokeMethodEx(Method method, int child, const QVariantList &params) = 0;
virtual QVariant virtual_hook(const QVariant &data);
virtual QAccessible2Interface *interface_cast(QAccessible2::InterfaceType)
{ return 0; }
};


class  QAccessibleEvent : public QEvent
{
public:
inline QAccessibleEvent(Type type, int child);
inline int child() const { return c; }
inline QString value() const { return val; }
inline void setValue(const QString &aText) { val = aText; }

private:
int c;
QString val;
};

inline QAccessibleEvent::QAccessibleEvent(Type atype, int achild)
: QEvent(atype), c(achild) {}


# 411 "/home/eagle/qt-copy/include/QtGui/qaccessible.h"
template <> inline QAccessibleInterface *qobject_cast<QAccessibleInterface *>(QObject *object) { return reinterpret_cast<QAccessibleInterface *>((object ? object->qt_metacast("com.trolltech.Qt.QAccessibleInterface") : 0)); } template <> inline QAccessibleInterface *qobject_cast<QAccessibleInterface *>(const QObject *object) { return reinterpret_cast<QAccessibleInterface *>((object ? const_cast<QObject *>(object)->qt_metacast("com.trolltech.Qt.QAccessibleInterface") : 0)); }



# 415 "/home/eagle/qt-copy/include/QtGui/qaccessible.h"





# 2 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qaccessible2.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qaccessible.h"



































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qaccessible2.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qaccessible2.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qaccessible2.h"
namespace QAccessible2
{
enum CoordinateType
{
RelativeToScreen = 0,
RelativeToParent = 1
};

enum BoundaryType {
CharBoundary,
WordBoundary,
SentenceBoundary,
ParagraphBoundary,
LineBoundary,
NoBoundary
};
}

class  QAccessible2Interface
{
public:
virtual ~QAccessible2Interface() {}
};


inline QAccessible2Interface *qAccessibleValueCastHelper() { return 0; }
inline QAccessible2Interface *qAccessibleTextCastHelper() { return 0; }
inline QAccessible2Interface *qAccessibleEditableTextCastHelper() { return 0; }
inline QAccessible2Interface *qAccessibleTableCastHelper() { return 0; }



# 105 "/home/eagle/qt-copy/include/QtGui/qaccessible2.h"
class  QAccessibleTextInterface: public QAccessible2Interface
{
public:
inline QAccessible2Interface *qAccessibleTextCastHelper() { return this; }

virtual ~QAccessibleTextInterface() {}

virtual void addSelection(int startOffset, int endOffset) = 0;
virtual QString attributes(int offset, int *startOffset, int *endOffset) = 0;
virtual int cursorPosition() = 0;
virtual QRect characterRect(int offset, QAccessible2::CoordinateType coordType) = 0;
virtual int selectionCount() = 0;
virtual int offsetAtPoint(const QPoint &point, QAccessible2::CoordinateType coordType) = 0;
virtual void selection(int selectionIndex, int *startOffset, int *endOffset) = 0;
virtual QString text(int startOffset, int endOffset) = 0;
virtual QString textBeforeOffset (int offset, QAccessible2::BoundaryType boundaryType,
int *startOffset, int *endOffset) = 0;
virtual QString textAfterOffset(int offset, QAccessible2::BoundaryType boundaryType,
int *startOffset, int *endOffset) = 0;
virtual QString textAtOffset(int offset, QAccessible2::BoundaryType boundaryType,
int *startOffset, int *endOffset) = 0;
virtual void removeSelection(int selectionIndex) = 0;
virtual void setCursorPosition(int position) = 0;
virtual void setSelection(int selectionIndex, int startOffset, int endOffset) = 0;
virtual int characterCount() = 0;
virtual void scrollToSubstring(int startIndex, int endIndex) = 0;
};

class  QAccessibleEditableTextInterface: public QAccessible2Interface
{
public:
inline QAccessible2Interface *qAccessibleEditableTextCastHelper() { return this; }

virtual ~QAccessibleEditableTextInterface() {}

virtual void copyText(int startOffset, int endOffset) = 0;
virtual void deleteText(int startOffset, int endOffset) = 0;
virtual void insertText(int offset, const QString &text) = 0;
virtual void cutText(int startOffset, int endOffset) = 0;
virtual void pasteText(int offset) = 0;
virtual void replaceText(int startOffset, int endOffset, const QString &text) = 0;
virtual void setAttributes(int startOffset, int endOffset, const QString &attributes) = 0;
};

class  QAccessibleSimpleEditableTextInterface: public QAccessibleEditableTextInterface
{
public:
QAccessibleSimpleEditableTextInterface(QAccessibleInterface *accessibleInterface);

void copyText(int startOffset, int endOffset);
void deleteText(int startOffset, int endOffset);
void insertText(int offset, const QString &text);
void cutText(int startOffset, int endOffset);
void pasteText(int offset);
void replaceText(int startOffset, int endOffset, const QString &text);
inline void setAttributes(int, int, const QString &) {}

private:
QAccessibleInterface *iface;
};

class  QAccessibleValueInterface: public QAccessible2Interface
{
public:
inline QAccessible2Interface *qAccessibleValueCastHelper() { return this; }

virtual ~QAccessibleValueInterface() {}

virtual QVariant currentValue() = 0;
virtual void setCurrentValue(const QVariant &value) = 0;
virtual QVariant maximumValue() = 0;
virtual QVariant minimumValue() = 0;
};

class  QAccessibleTableInterface: public QAccessible2Interface
{
public:
inline QAccessible2Interface *qAccessibleTableCastHelper() { return this; }

virtual QAccessibleInterface *accessibleAt(int row, int column) = 0;
virtual QAccessibleInterface *caption() = 0;
virtual int childIndex(int rowIndex, int columnIndex) = 0;
virtual QString columnDescription(int column) = 0;
virtual int columnSpan(int row, int column) = 0;
virtual QAccessibleInterface *columnHeader() = 0;
virtual int columnIndex(int childIndex) = 0;
virtual int columnCount() = 0;
virtual int rowCount() = 0;
virtual int selectedColumnCount() = 0;
virtual int selectedRowCount() = 0;
virtual QString rowDescription(int row) = 0;
virtual int rowSpan(int row, int column) = 0;
virtual QAccessibleInterface *rowHeader() = 0;
virtual int rowIndex(int childIndex) = 0;
virtual int selectedRows(int maxRows, QList<int> *rows) = 0;
virtual int selectedColumns(int maxColumns, QList<int> *columns) = 0;
virtual QAccessibleInterface *summary() = 0;
virtual bool isColumnSelected(int column) = 0;
virtual bool isRowSelected(int row) = 0;
virtual bool isSelected(int row, int column) = 0;
virtual void selectRow(int row) = 0;
virtual void selectColumn(int column) = 0;
virtual void unselectRow(int row) = 0;
virtual void unselectColumn(int column) = 0;
virtual void cellAtIndex(int index, int *row, int *column, int *rowSpan,
int *columnSpan, bool *isSelected) = 0;
};



# 215 "/home/eagle/qt-copy/include/QtGui/qaccessible2.h"





# 3 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qaccessiblebridge.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qplugin.h"
















































































































# 47 "/home/eagle/qt-copy/include/QtGui/qaccessiblebridge.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qfactoryinterface.h"





































































# 48 "/home/eagle/qt-copy/include/QtGui/qaccessiblebridge.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qaccessiblebridge.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 58 "/home/eagle/qt-copy/include/QtGui/qaccessiblebridge.h"
class QAccessibleInterface;

class QAccessibleBridge
{
public:
virtual ~QAccessibleBridge() {}
virtual void setRootObject(QAccessibleInterface *) = 0;
virtual void notifyAccessibilityUpdate(int, QAccessibleInterface*, int) = 0;
};

struct  QAccessibleBridgeFactoryInterface : public QFactoryInterface
{
virtual QAccessibleBridge *create(const QString& name) = 0;
};


# 74 "/home/eagle/qt-copy/include/QtGui/qaccessiblebridge.h"
template <> inline QAccessibleBridgeFactoryInterface *qobject_cast<QAccessibleBridgeFactoryInterface *>(QObject *object) { return reinterpret_cast<QAccessibleBridgeFactoryInterface *>((object ? object->qt_metacast("com.trolltech.Qt.QAccessibleBridgeFactoryInterface") : 0)); } template <> inline QAccessibleBridgeFactoryInterface *qobject_cast<QAccessibleBridgeFactoryInterface *>(const QObject *object) { return reinterpret_cast<QAccessibleBridgeFactoryInterface *>((object ? const_cast<QObject *>(object)->qt_metacast("com.trolltech.Qt.QAccessibleBridgeFactoryInterface") : 0)); }

class  QAccessibleBridgePlugin : public QObject, public QAccessibleBridgeFactoryInterface
{
Q_OBJECT

public:
explicit QAccessibleBridgePlugin(QObject *parent = 0);
~QAccessibleBridgePlugin();

virtual QStringList keys() const = 0;
virtual QAccessibleBridge *create(const QString &key) = 0;
};



# 90 "/home/eagle/qt-copy/include/QtGui/qaccessiblebridge.h"





# 4 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qaccessibleobject.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qaccessible.h"



































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qaccessibleobject.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qaccessibleobject.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qaccessibleobject.h"
class QAccessibleObjectPrivate;
class QObject;

class  QAccessibleObject : public QAccessibleInterface
{
public:
explicit QAccessibleObject(QObject *object);

bool isValid() const;
QObject *object() const;


QRect rect(int child) const;
void setText(Text t, int child, const QString &text);


int userActionCount(int child) const;
bool doAction(int action, int child, const QVariantList &params);
QString actionText(int action, Text t, int child) const;

protected:
virtual ~QAccessibleObject();

private:
friend class QAccessibleObjectEx;
QAccessibleObjectPrivate *d;
QAccessibleObject(const QAccessibleObject &); QAccessibleObject &operator=(const QAccessibleObject &);
};

class  QAccessibleObjectEx : public QAccessibleInterfaceEx
{
public:
explicit QAccessibleObjectEx(QObject *object);

bool isValid() const;
QObject *object() const;


QRect rect(int child) const;
void setText(Text t, int child, const QString &text);


int userActionCount(int child) const;
bool doAction(int action, int child, const QVariantList &params);
QString actionText(int action, Text t, int child) const;

protected:
virtual ~QAccessibleObjectEx();

private:
QAccessibleObjectPrivate *d;
QAccessibleObjectEx(const QAccessibleObjectEx &); QAccessibleObjectEx &operator=(const QAccessibleObjectEx &);
};

class  QAccessibleApplication : public QAccessibleObject
{
public:
QAccessibleApplication();


int childCount() const;
int indexOfChild(const QAccessibleInterface*) const;
Relation relationTo(int, const QAccessibleInterface *, int) const;


int childAt(int x, int y) const;
int navigate(RelationFlag, int, QAccessibleInterface **) const;


QString text(Text t, int child) const;
Role role(int child) const;
State state(int child) const;


int userActionCount(int child) const;
bool doAction(int action, int child, const QVariantList &params);
QString actionText(int action, Text t, int child) const;
};



# 138 "/home/eagle/qt-copy/include/QtGui/qaccessibleobject.h"





# 5 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qaccessibleplugin.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qaccessible.h"



































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qaccessibleplugin.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qfactoryinterface.h"





































































# 48 "/home/eagle/qt-copy/include/QtGui/qaccessibleplugin.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qaccessibleplugin.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 58 "/home/eagle/qt-copy/include/QtGui/qaccessibleplugin.h"
class QStringList;
class QAccessibleInterface;

struct  QAccessibleFactoryInterface : public QAccessible, public QFactoryInterface
{
virtual QAccessibleInterface* create(const QString &key, QObject *object) = 0;
};


# 67 "/home/eagle/qt-copy/include/QtGui/qaccessibleplugin.h"
template <> inline QAccessibleFactoryInterface *qobject_cast<QAccessibleFactoryInterface *>(QObject *object) { return reinterpret_cast<QAccessibleFactoryInterface *>((object ? object->qt_metacast("com.trolltech.Qt.QAccessibleFactoryInterface") : 0)); } template <> inline QAccessibleFactoryInterface *qobject_cast<QAccessibleFactoryInterface *>(const QObject *object) { return reinterpret_cast<QAccessibleFactoryInterface *>((object ? const_cast<QObject *>(object)->qt_metacast("com.trolltech.Qt.QAccessibleFactoryInterface") : 0)); }

class QAccessiblePluginPrivate;

class  QAccessiblePlugin : public QObject, public QAccessibleFactoryInterface
{
Q_OBJECT

public:
explicit QAccessiblePlugin(QObject *parent = 0);
~QAccessiblePlugin();

virtual QStringList keys() const = 0;
virtual QAccessibleInterface *create(const QString &key, QObject *object) = 0;
};



# 85 "/home/eagle/qt-copy/include/QtGui/qaccessibleplugin.h"





# 6 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qaccessiblewidget.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qaccessibleobject.h"














































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qaccessiblewidget.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qaccessiblewidget.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qaccessiblewidget.h"
class QAccessibleWidgetPrivate;

class  QAccessibleWidget : public QAccessibleObject
{
public:
explicit QAccessibleWidget(QWidget *o, Role r = Client, const QString& name = QString());

int childCount() const;
int indexOfChild(const QAccessibleInterface *child) const;
Relation relationTo(int child, const QAccessibleInterface *other, int otherChild) const;

int childAt(int x, int y) const;
QRect rect(int child) const;
int navigate(RelationFlag rel, int entry, QAccessibleInterface **target) const;

QString text(Text t, int child) const;
Role role(int child) const;
State state(int child) const;


# 77 "/home/eagle/qt-copy/include/QtGui/qaccessiblewidget.h"
int userActionCount(int child) const;
QString actionText(int action, Text t, int child) const;
bool doAction(int action, int child, const QVariantList &params);


# 82 "/home/eagle/qt-copy/include/QtGui/qaccessiblewidget.h"
protected:
~QAccessibleWidget();
QWidget *widget() const;
QObject *parentObject() const;

void addControllingSignal(const QString &signal);
void setValue(const QString &value);
void setDescription(const QString &desc);
void setHelp(const QString &help);
void setAccelerator(const QString &accel);

private:
friend class QAccessibleWidgetEx;
QAccessibleWidgetPrivate *d;
QAccessibleWidget(const QAccessibleWidget &); QAccessibleWidget &operator=(const QAccessibleWidget &);
};

class  QAccessibleWidgetEx : public QAccessibleObjectEx
{
public:
explicit QAccessibleWidgetEx(QWidget *o, Role r = Client, const QString& name = QString());

int childCount() const;
int indexOfChild(const QAccessibleInterface *child) const;
Relation relationTo(int child, const QAccessibleInterface *other, int otherChild) const;

int childAt(int x, int y) const;
QRect rect(int child) const;
int navigate(RelationFlag rel, int entry, QAccessibleInterface **target) const;

QString text(Text t, int child) const;
Role role(int child) const;
State state(int child) const;

QString actionText(int action, Text t, int child) const;
bool doAction(int action, int child, const QVariantList &params);

QVariant invokeMethodEx(Method method, int child, const QVariantList &params);

protected:
~QAccessibleWidgetEx();
QWidget *widget() const;
QObject *parentObject() const;

void addControllingSignal(const QString &signal);
void setValue(const QString &value);
void setDescription(const QString &desc);
void setHelp(const QString &help);
void setAccelerator(const QString &accel);

private:
QAccessibleWidgetPrivate *d;
QAccessibleWidgetEx(const QAccessibleWidgetEx &); QAccessibleWidgetEx &operator=(const QAccessibleWidgetEx &);
};



# 139 "/home/eagle/qt-copy/include/QtGui/qaccessiblewidget.h"





# 7 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qabstractpagesetupdialog.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qdialog.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qwidget.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qwindowdefs.h"























































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qwidget.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qwidget.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qpaintdevice.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qwindowdefs.h"























































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qpaintdevice.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qrect.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qpaintdevice.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qpaintdevice.h"




typedef QtValidLicenseForGuiModule QtGuiModule;





# 60 "/home/eagle/qt-copy/include/QtGui/qpaintdevice.h"
class QPaintEngine;

class  QPaintDevice 
{
public:
enum PaintDeviceMetric {
PdmWidth = 1,
PdmHeight,
PdmWidthMM,
PdmHeightMM,
PdmNumColors,
PdmDepth,
PdmDpiX,
PdmDpiY,
PdmPhysicalDpiX,
PdmPhysicalDpiY
};

virtual ~QPaintDevice();

virtual int devType() const;
bool paintingActive() const;
virtual QPaintEngine *paintEngine() const = 0;










# 93 "/home/eagle/qt-copy/include/QtGui/qpaintdevice.h"
int width() const { return metric(PdmWidth); }
int height() const { return metric(PdmHeight); }
int widthMM() const { return metric(PdmWidthMM); }
int heightMM() const { return metric(PdmHeightMM); }
int logicalDpiX() const { return metric(PdmDpiX); }
int logicalDpiY() const { return metric(PdmDpiY); }
int physicalDpiX() const { return metric(PdmPhysicalDpiX); }
int physicalDpiY() const { return metric(PdmPhysicalDpiY); }
int numColors() const { return metric(PdmNumColors); }
int depth() const { return metric(PdmDepth); }

protected:
QPaintDevice();
virtual int metric(PaintDeviceMetric metric) const;

ushort painters; 

private:
QPaintDevice(const QPaintDevice &); QPaintDevice &operator=(const QPaintDevice &);



























# 139 "/home/eagle/qt-copy/include/QtGui/qpaintdevice.h"
friend class QPainter;
friend class QFontEngineMac;
friend class QX11PaintEngine;
};


















# 161 "/home/eagle/qt-copy/include/QtGui/qpaintdevice.h"




inline int QPaintDevice::devType() const
{ return QInternal::UnknownDevice; }

inline bool QPaintDevice::paintingActive() const
{ return painters != 0; }






# 49 "/home/eagle/qt-copy/include/QtGui/qwidget.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qpalette.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qwindowdefs.h"























































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qpalette.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qcolor.h"





















































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qpalette.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qbrush.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qpair.h"

































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qbrush.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qpoint.h"






































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qbrush.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qvector.h"































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qbrush.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qcolor.h"





















































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtGui/qbrush.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qmatrix.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qpolygon.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qvector.h"































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qpolygon.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qpoint.h"






































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qpolygon.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qrect.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qpolygon.h"


# 51 "/home/eagle/qt-copy/include/QtGui/qpolygon.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QMatrix;
class QTransform;
class QRect;
class QVariant;

class  QPolygon : public QVector<QPoint>
{
public:
inline QPolygon() {}
inline ~QPolygon() {}
inline QPolygon(int size);
inline QPolygon(const QPolygon &a) : QVector<QPoint>(a) {}
inline QPolygon(const QVector<QPoint> &v) : QVector<QPoint>(v) {}
QPolygon(const QRect &r, bool closed=false);
QPolygon(int nPoints, const int *points);
operator QVariant() const;

void translate(int dx, int dy);
void translate(const QPoint &offset);
QRect boundingRect() const;

void point(int i, int *x, int *y) const;
QPoint point(int i) const;
void setPoint(int index, int x, int y);
void setPoint(int index, const QPoint &p);
void setPoints(int nPoints, const int *points);
void setPoints(int nPoints, int firstx, int firsty, ...);
void putPoints(int index, int nPoints, const int *points);
void putPoints(int index, int nPoints, int firstx, int firsty, ...);
void putPoints(int index, int nPoints, const QPolygon & from, int fromIndex=0);

bool containsPoint(const QPoint &pt, Qt::FillRule fillRule) const;

QPolygon united(const QPolygon &r) const;
QPolygon intersected(const QPolygon &r) const;
QPolygon subtracted(const QPolygon &r) const;
};

inline QPolygon::QPolygon(int asize) : QVector<QPoint>(asize) {}


# 98 "/home/eagle/qt-copy/include/QtGui/qpolygon.h"
 QDebug operator<<(QDebug, const QPolygon &);


# 101 "/home/eagle/qt-copy/include/QtGui/qpolygon.h"




# 105 "/home/eagle/qt-copy/include/QtGui/qpolygon.h"
 QDataStream &operator<<(QDataStream &stream, const QPolygon &polygon);
 QDataStream &operator>>(QDataStream &stream, QPolygon &polygon);


# 109 "/home/eagle/qt-copy/include/QtGui/qpolygon.h"




inline void QPolygon::setPoint(int index, const QPoint &pt)
{ (*this)[index] = pt; }

inline void QPolygon::setPoint(int index, int x, int y)
{ (*this)[index] = QPoint(x, y); }

inline QPoint QPolygon::point(int index) const
{ return at(index); }

inline void QPolygon::translate(const QPoint &offset)
{ translate(offset.x(), offset.y()); }

class QRectF;

class  QPolygonF : public QVector<QPointF>
{
public:
inline QPolygonF() {}
inline ~QPolygonF() {}
inline QPolygonF(int size);
inline QPolygonF(const QPolygonF &a) : QVector<QPointF>(a) {}
inline QPolygonF(const QVector<QPointF> &v) : QVector<QPointF>(v) {}
QPolygonF(const QRectF &r);
QPolygonF(const QPolygon &a);

inline void translate(qreal dx, qreal dy);
void translate(const QPointF &offset);

QPolygon toPolygon() const;

bool isClosed() const { return !isEmpty() && first() == last(); }

QRectF boundingRect() const;

bool containsPoint(const QPointF &pt, Qt::FillRule fillRule) const;

QPolygonF united(const QPolygonF &r) const;
QPolygonF intersected(const QPolygonF &r) const;
QPolygonF subtracted(const QPolygonF &r) const;
};

inline QPolygonF::QPolygonF(int asize) : QVector<QPointF>(asize) {}


# 157 "/home/eagle/qt-copy/include/QtGui/qpolygon.h"
 QDebug operator<<(QDebug, const QPolygonF &);


# 160 "/home/eagle/qt-copy/include/QtGui/qpolygon.h"




# 164 "/home/eagle/qt-copy/include/QtGui/qpolygon.h"
 QDataStream &operator<<(QDataStream &stream, const QPolygonF &array);
 QDataStream &operator>>(QDataStream &stream, QPolygonF &array);


# 168 "/home/eagle/qt-copy/include/QtGui/qpolygon.h"
inline void QPolygonF::translate(qreal dx, qreal dy)
{ translate(QPointF(dx, dy)); }






# 47 "/home/eagle/qt-copy/include/QtGui/qmatrix.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qregion.h"





















































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qmatrix.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qwindowdefs.h"























































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qmatrix.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qline.h"


































































































































































































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtGui/qmatrix.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qpoint.h"






































































































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtGui/qmatrix.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qrect.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































# 52 "/home/eagle/qt-copy/include/QtGui/qmatrix.h"


# 54 "/home/eagle/qt-copy/include/QtGui/qmatrix.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QPainterPath;
class QVariant;

class  QMatrix 
{
public:
QMatrix();
QMatrix(qreal m11, qreal m12, qreal m21, qreal m22,
qreal dx, qreal dy);
QMatrix(const QMatrix &matrix);

void setMatrix(qreal m11, qreal m12, qreal m21, qreal m22,
qreal dx, qreal dy);

qreal m11() const { return _m11; }
qreal m12() const { return _m12; }
qreal m21() const { return _m21; }
qreal m22() const { return _m22; }
qreal dx() const { return _dx; }
qreal dy() const { return _dy; }

void map(int x, int y, int *tx, int *ty) const;
void map(qreal x, qreal y, qreal *tx, qreal *ty) const;
QRect mapRect(const QRect &) const;
QRectF mapRect(const QRectF &) const;

QPoint map(const QPoint &p) const;
QPointF map(const QPointF&p) const;
QLine map(const QLine &l) const;
QLineF map(const QLineF &l) const;
QPolygonF map(const QPolygonF &a) const;
QPolygon map(const QPolygon &a) const;
QRegion map(const QRegion &r) const;
QPainterPath map(const QPainterPath &p) const;
QPolygon mapToPolygon(const QRect &r) const;

void reset();
inline bool isIdentity() const;

QMatrix &translate(qreal dx, qreal dy);
QMatrix &scale(qreal sx, qreal sy);
QMatrix &shear(qreal sh, qreal sv);
QMatrix &rotate(qreal a);

bool isInvertible() const { return !qFuzzyCompare(_m11*_m22 - _m12*_m21 + 1, 1); }
qreal det() const { return _m11*_m22 - _m12*_m21; }

QMatrix inverted(bool *invertible = 0) const;

bool operator==(const QMatrix &) const;
bool operator!=(const QMatrix &) const;

QMatrix &operator*=(const QMatrix &);
QMatrix operator*(const QMatrix &o) const;

QMatrix &operator=(const QMatrix &);

operator QVariant() const;







# 125 "/home/eagle/qt-copy/include/QtGui/qmatrix.h"
private:
friend class QTransform;
qreal _m11, _m12;
qreal _m21, _m22;
qreal _dx, _dy;
};
template <> class QTypeInfo<QMatrix> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QMatrix)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QMatrix"; } };


 inline QPoint operator*(const QPoint &p, const QMatrix &m)
{ return m.map(p); }
 inline QPointF operator*(const QPointF &p, const QMatrix &m)
{ return m.map(p); }
 inline QLineF operator*(const QLineF &l, const QMatrix &m)
{ return m.map(l); }
 inline QLine operator*(const QLine &l, const QMatrix &m)
{ return m.map(l); }
 inline QPolygon operator *(const QPolygon &a, const QMatrix &m)
{ return m.map(a); }
 inline QPolygonF operator *(const QPolygonF &a, const QMatrix &m)
{ return m.map(a); }
 inline QRegion operator *(const QRegion &r, const QMatrix &m)
{ return m.map(r); }
 QPainterPath operator *(const QPainterPath &p, const QMatrix &m);

inline bool QMatrix::isIdentity() const
{
return qFuzzyCompare(_m11, 1) && qFuzzyCompare(_m22, 1) && qFuzzyCompare(_m12 + 1, 1)
&& qFuzzyCompare(_m21 + 1, 1) && qFuzzyCompare(_dx + 1, 1) && qFuzzyCompare(_dy + 1, 1);
}





 QDataStream &operator<<(QDataStream &, const QMatrix &);
 QDataStream &operator>>(QDataStream &, QMatrix &);


# 164 "/home/eagle/qt-copy/include/QtGui/qmatrix.h"
 QDebug operator<<(QDebug, const QMatrix &);








# 173 "/home/eagle/qt-copy/include/QtGui/qmatrix.h"





# 51 "/home/eagle/qt-copy/include/QtGui/qbrush.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qtransform.h"













































# 1 "/home/eagle/qt-copy/include/QtGui/qmatrix.h"















































































































































































# 46 "/home/eagle/qt-copy/include/QtGui/qtransform.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qpainterpath.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qmatrix.h"















































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qpainterpath.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qpainterpath.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qrect.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qpainterpath.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qline.h"


































































































































































































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtGui/qpainterpath.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qvector.h"































































































































































































































































































































































































































































































































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtGui/qpainterpath.h"


# 53 "/home/eagle/qt-copy/include/QtGui/qpainterpath.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QFont;
class QPainterPathPrivate;
class QPainterPathData;
class QPainterPathStrokerPrivate;
class QPolygonF;
class QRegion;

class  QPainterPath
{
public:
enum ElementType {
MoveToElement,
LineToElement,
CurveToElement,
CurveToDataElement
};

class Element {
public:
qreal x;
qreal y;
ElementType type;

bool isMoveTo() const { return type == MoveToElement; }
bool isLineTo() const { return type == LineToElement; }
bool isCurveTo() const { return type == CurveToElement; }

operator QPointF () const { return QPointF(x, y); }

bool operator==(const Element &e) const { return qFuzzyCompare(x, e.x)
&& qFuzzyCompare(y, e.y) && type == e.type; }
inline bool operator!=(const Element &e) const { return !operator==(e); }
};

QPainterPath();
explicit QPainterPath(const QPointF &startPoint);
QPainterPath(const QPainterPath &other);
QPainterPath &operator=(const QPainterPath &other);
~QPainterPath();

void closeSubpath();

void moveTo(const QPointF &p);
inline void moveTo(qreal x, qreal y);

void lineTo(const QPointF &p);
inline void lineTo(qreal x, qreal y);

void arcMoveTo(const QRectF &rect, qreal angle);
inline void arcMoveTo(qreal x, qreal y, qreal w, qreal h, qreal angle);

void arcTo(const QRectF &rect, qreal startAngle, qreal arcLength);
inline void arcTo(qreal x, qreal y, qreal w, qreal h, qreal startAngle, qreal arcLength);

void cubicTo(const QPointF &ctrlPt1, const QPointF &ctrlPt2, const QPointF &endPt);
inline void cubicTo(qreal ctrlPt1x, qreal ctrlPt1y, qreal ctrlPt2x, qreal ctrlPt2y,
qreal endPtx, qreal endPty);
void quadTo(const QPointF &ctrlPt, const QPointF &endPt);
inline void quadTo(qreal ctrlPtx, qreal ctrlPty, qreal endPtx, qreal endPty);

QPointF currentPosition() const;

void addRect(const QRectF &rect);
inline void addRect(qreal x, qreal y, qreal w, qreal h);
void addEllipse(const QRectF &rect);
inline void addEllipse(qreal x, qreal y, qreal w, qreal h);
inline void addEllipse(const QPointF &center, qreal rx, qreal ry);
void addPolygon(const QPolygonF &polygon);
void addText(const QPointF &point, const QFont &f, const QString &text);
inline void addText(qreal x, qreal y, const QFont &f, const QString &text);
void addPath(const QPainterPath &path);
void addRegion(const QRegion &region);

void addRoundedRect(const QRectF &rect, qreal xRadius, qreal yRadius,
Qt::SizeMode mode = Qt::AbsoluteSize);
inline void addRoundedRect(qreal x, qreal y, qreal w, qreal h,
qreal xRadius, qreal yRadius,
Qt::SizeMode mode = Qt::AbsoluteSize);

void addRoundRect(const QRectF &rect, int xRnd, int yRnd);
inline void addRoundRect(qreal x, qreal y, qreal w, qreal h,
int xRnd, int yRnd);
inline void addRoundRect(const QRectF &rect, int roundness);
inline void addRoundRect(qreal x, qreal y, qreal w, qreal h,
int roundness);

void connectPath(const QPainterPath &path);

bool contains(const QPointF &pt) const;
bool contains(const QRectF &rect) const;
bool intersects(const QRectF &rect) const;

QRectF boundingRect() const;
QRectF controlPointRect() const;

Qt::FillRule fillRule() const;
void setFillRule(Qt::FillRule fillRule);

inline bool isEmpty() const;

QPainterPath toReversed() const;
QList<QPolygonF> toSubpathPolygons(const QMatrix &matrix = QMatrix()) const;
QList<QPolygonF> toFillPolygons(const QMatrix &matrix = QMatrix()) const;
QPolygonF toFillPolygon(const QMatrix &matrix = QMatrix()) const;
QList<QPolygonF> toSubpathPolygons(const QTransform &matrix) const;
QList<QPolygonF> toFillPolygons(const QTransform &matrix) const;
QPolygonF toFillPolygon(const QTransform &matrix) const;

inline int elementCount() const;
inline const QPainterPath::Element &elementAt(int i) const;
inline void setElementPositionAt(int i, qreal x, qreal y);

qreal length() const;
qreal percentAtLength(qreal t) const;
QPointF pointAtPercent(qreal t) const;
qreal angleAtPercent(qreal t) const;
qreal slopeAtPercent(qreal t) const;

bool intersects(const QPainterPath &p) const;
bool contains(const QPainterPath &p) const;
QPainterPath united(const QPainterPath &r) const;
QPainterPath intersected(const QPainterPath &r) const;
QPainterPath subtracted(const QPainterPath &r) const;
QPainterPath subtractedInverted(const QPainterPath &r) const;

QPainterPath simplified() const;

bool operator==(const QPainterPath &other) const;
bool operator!=(const QPainterPath &other) const;

private:
QPainterPathPrivate *d_ptr;

inline void ensureData() { if (!d_ptr) ensureData_helper(); }
void ensureData_helper();
inline void detach();
void detach_helper();
void setDirty(bool);
void computeBoundingRect() const;
void computeControlPointRect() const;

QPainterPathData *d_func() const { return reinterpret_cast<QPainterPathData *>(d_ptr); }

friend class QPainterPathData;
friend class QPainterPathStroker;
friend class QPainterPathStrokerPrivate;
friend class QMatrix;
friend class QTransform;


# 209 "/home/eagle/qt-copy/include/QtGui/qpainterpath.h"
friend  QDataStream &operator<<(QDataStream &, const QPainterPath &);
friend  QDataStream &operator>>(QDataStream &, QPainterPath &);

# 212 "/home/eagle/qt-copy/include/QtGui/qpainterpath.h"
};

class QPainterPathPrivate
{
friend class QPainterPath;
friend class QPainterPathData;
friend class QPainterPathStroker;
friend class QPainterPathStrokerPrivate;
friend class QMatrix;
friend class QTransform;

# 223 "/home/eagle/qt-copy/include/QtGui/qpainterpath.h"
friend  QDataStream &operator<<(QDataStream &, const QPainterPath &);
friend  QDataStream &operator>>(QDataStream &, QPainterPath &);

# 226 "/home/eagle/qt-copy/include/QtGui/qpainterpath.h"
private:
QAtomicInt ref;
QVector<QPainterPath::Element> elements;
};

template <> class QTypeInfo<QPainterPath::Element> { public: enum { isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QPainterPath::Element)>sizeof(void*)), isPointer = false, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QPainterPath::Element"; } };


# 234 "/home/eagle/qt-copy/include/QtGui/qpainterpath.h"
 QDataStream &operator<<(QDataStream &, const QPainterPath &);
 QDataStream &operator>>(QDataStream &, QPainterPath &);


# 238 "/home/eagle/qt-copy/include/QtGui/qpainterpath.h"
class  QPainterPathStroker
{
inline QPainterPathStrokerPrivate* d_func() { return reinterpret_cast<QPainterPathStrokerPrivate *>(d_ptr); } inline const QPainterPathStrokerPrivate* d_func() const { return reinterpret_cast<const QPainterPathStrokerPrivate *>(d_ptr); } friend class QPainterPathStrokerPrivate;
public:
QPainterPathStroker();
~QPainterPathStroker();

void setWidth(qreal width);
qreal width() const;

void setCapStyle(Qt::PenCapStyle style);
Qt::PenCapStyle capStyle() const;

void setJoinStyle(Qt::PenJoinStyle style);
Qt::PenJoinStyle joinStyle() const;

void setMiterLimit(qreal length);
qreal miterLimit() const;

void setCurveThreshold(qreal threshold);
qreal curveThreshold() const;

void setDashPattern(Qt::PenStyle);
void setDashPattern(const QVector<qreal> &dashPattern);
QVector<qreal> dashPattern() const;

void setDashOffset(qreal offset);
qreal dashOffset() const;

QPainterPath createStroke(const QPainterPath &path) const;

private:
QPainterPathStrokerPrivate *d_ptr;
};

inline void QPainterPath::moveTo(qreal x, qreal y)
{
moveTo(QPointF(x, y));
}

inline void QPainterPath::lineTo(qreal x, qreal y)
{
lineTo(QPointF(x, y));
}

inline void QPainterPath::arcTo(qreal x, qreal y, qreal w, qreal h, qreal startAngle, qreal arcLenght)
{
arcTo(QRectF(x, y, w, h), startAngle, arcLenght);
}

inline void QPainterPath::arcMoveTo(qreal x, qreal y, qreal w, qreal h, qreal angle)
{
arcMoveTo(QRectF(x, y, w, h), angle);
}

inline void QPainterPath::cubicTo(qreal ctrlPt1x, qreal ctrlPt1y, qreal ctrlPt2x, qreal ctrlPt2y,
qreal endPtx, qreal endPty)
{
cubicTo(QPointF(ctrlPt1x, ctrlPt1y), QPointF(ctrlPt2x, ctrlPt2y),
QPointF(endPtx, endPty));
}

inline void QPainterPath::quadTo(qreal ctrlPtx, qreal ctrlPty, qreal endPtx, qreal endPty)
{
quadTo(QPointF(ctrlPtx, ctrlPty), QPointF(endPtx, endPty));
}

inline void QPainterPath::addEllipse(qreal x, qreal y, qreal w, qreal h)
{
addEllipse(QRectF(x, y, w, h));
}

inline void QPainterPath::addEllipse(const QPointF &center, qreal rx, qreal ry)
{
addEllipse(QRectF(center.x() - rx, center.y() - ry, 2 * rx, 2 * ry));
}

inline void QPainterPath::addRect(qreal x, qreal y, qreal w, qreal h)
{
addRect(QRectF(x, y, w, h));
}

inline void QPainterPath::addRoundedRect(qreal x, qreal y, qreal w, qreal h,
qreal xRadius, qreal yRadius,
Qt::SizeMode mode)
{
addRoundedRect(QRectF(x, y, w, h), xRadius, yRadius, mode);
}

inline void QPainterPath::addRoundRect(qreal x, qreal y, qreal w, qreal h,
int xRnd, int yRnd)
{
addRoundRect(QRectF(x, y, w, h), xRnd, yRnd);
}

inline void QPainterPath::addRoundRect(const QRectF &rect,
int roundness)
{
int xRnd = roundness;
int yRnd = roundness;
if (rect.width() > rect.height())
xRnd = int(roundness * rect.height()/rect.width());
else
yRnd = int(roundness * rect.width()/rect.height());
addRoundRect(rect, xRnd, yRnd);
}

inline void QPainterPath::addRoundRect(qreal x, qreal y, qreal w, qreal h,
int roundness)
{
addRoundRect(QRectF(x, y, w, h), roundness);
}

inline void QPainterPath::addText(qreal x, qreal y, const QFont &f, const QString &text)
{
addText(QPointF(x, y), f, text);
}

inline bool QPainterPath::isEmpty() const
{
return !d_ptr || (d_ptr->elements.size() == 1 && d_ptr->elements.first().type == MoveToElement);
}

inline int QPainterPath::elementCount() const
{
return d_ptr ? d_ptr->elements.size() : 0;
}

inline const QPainterPath::Element &QPainterPath::elementAt(int i) const
{
qt_noop();
qt_noop();
return d_ptr->elements.at(i);
}

inline void QPainterPath::setElementPositionAt(int i, qreal x, qreal y)
{
qt_noop();
qt_noop();
detach();
QPainterPath::Element &e = d_ptr->elements[i];
e.x = x;
e.y = y;
}


inline void QPainterPath::detach()
{
if (d_ptr->ref != 1)
detach_helper();
setDirty(true);
}


# 392 "/home/eagle/qt-copy/include/QtGui/qpainterpath.h"
 QDebug operator<<(QDebug, const QPainterPath &);


# 395 "/home/eagle/qt-copy/include/QtGui/qpainterpath.h"





# 47 "/home/eagle/qt-copy/include/QtGui/qtransform.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qpolygon.h"









































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qtransform.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qregion.h"





















































































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qtransform.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qwindowdefs.h"























































































































































































# 50 "/home/eagle/qt-copy/include/QtGui/qtransform.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qline.h"


































































































































































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtGui/qtransform.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qpoint.h"






































































































































































































































































































































































# 52 "/home/eagle/qt-copy/include/QtGui/qtransform.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qrect.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































# 53 "/home/eagle/qt-copy/include/QtGui/qtransform.h"


# 55 "/home/eagle/qt-copy/include/QtGui/qtransform.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QVariant;

class  QTransform
{
Q_ENUMS(TransformationType)
public:
enum TransformationType {
TxNone = 0x00,
TxTranslate = 0x01,
TxScale = 0x02,
TxRotate = 0x04,
TxShear = 0x08,
TxProject = 0x10
};

QTransform();
QTransform(qreal h11, qreal h12, qreal h13,
qreal h21, qreal h22, qreal h23,
qreal h31, qreal h32, qreal h33 = 1.0);
QTransform(qreal h11, qreal h12, qreal h13,
qreal h21, qreal h22, qreal h23);
explicit QTransform(const QMatrix &mtx);

bool isAffine() const;
bool isIdentity() const;
bool isInvertible() const;
bool isScaling() const;
bool isRotating() const;
bool isTranslating() const;

TransformationType type() const;

inline qreal determinant() const;
qreal det() const;

qreal m11() const;
qreal m12() const;
qreal m13() const;
qreal m21() const;
qreal m22() const;
qreal m23() const;
qreal m31() const;
qreal m32() const;
qreal m33() const;
qreal dx() const;
qreal dy() const;

void setMatrix(qreal m11, qreal m12, qreal m13,
qreal m21, qreal m22, qreal m23,
qreal m31, qreal m32, qreal m33);

QTransform inverted(bool *invertible = 0) const;
QTransform adjoint() const;
QTransform transposed() const;

QTransform &translate(qreal dx, qreal dy);
QTransform &scale(qreal sx, qreal sy);
QTransform &shear(qreal sh, qreal sv);
QTransform &rotate(qreal a, Qt::Axis axis = Qt::ZAxis);
QTransform &rotateRadians(qreal a, Qt::Axis axis = Qt::ZAxis);

static bool squareToQuad(const QPolygonF &square, QTransform &result);
static bool quadToSquare(const QPolygonF &quad, QTransform &result);
static bool quadToQuad(const QPolygonF &one,
const QPolygonF &two,
QTransform &result);

bool operator==(const QTransform &) const;
bool operator!=(const QTransform &) const;

QTransform &operator*=(const QTransform &);
QTransform operator*(const QTransform &o) const;

QTransform &operator=(const QTransform &);

operator QVariant() const;

void reset();
QPoint map(const QPoint &p) const;
QPointF map(const QPointF &p) const;
QLine map(const QLine &l) const;
QLineF map(const QLineF &l) const;
QPolygonF map(const QPolygonF &a) const;
QPolygon map(const QPolygon &a) const;
QRegion map(const QRegion &r) const;
QPainterPath map(const QPainterPath &p) const;
QPolygon mapToPolygon(const QRect &r) const;
QRect mapRect(const QRect &) const;
QRectF mapRect(const QRectF &) const;
void map(int x, int y, int *tx, int *ty) const;
void map(qreal x, qreal y, qreal *tx, qreal *ty) const;

const QMatrix &toAffine() const;

QTransform &operator*=(qreal div);
QTransform &operator/=(qreal div);
QTransform &operator+=(qreal div);
QTransform &operator-=(qreal div);
private:
QMatrix affine;
qreal m_13;
qreal m_23;
qreal m_33;

mutable uint m_type : 5;
mutable uint m_dirty : 5;

class Private;
Private *d;
};
template <> class QTypeInfo<QTransform> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QTransform)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QTransform"; } };


inline bool QTransform::isAffine() const
{
return qFuzzyCompare(m_13 + 1, 1) && qFuzzyCompare(m_23 + 1, 1);
}
inline bool QTransform::isIdentity() const
{

# 181 "/home/eagle/qt-copy/include/QtGui/qtransform.h"
return qFuzzyCompare(affine._m11, 1) && qFuzzyCompare(affine._m12 + 1, 1) && qFuzzyCompare(m_13 + 1, 1)
&& qFuzzyCompare(affine._m21 + 1, 1) && qFuzzyCompare(affine._m22, 1) && qFuzzyCompare(m_23 + 1, 1)
&& qFuzzyCompare(affine._dx + 1, 1) && qFuzzyCompare(affine._dy + 1, 1) && qFuzzyCompare(m_33, 1);

# 185 "/home/eagle/qt-copy/include/QtGui/qtransform.h"
}

inline bool QTransform::isInvertible() const
{
return !qFuzzyCompare(determinant() + 1, 1);
}

inline bool QTransform::isScaling() const
{
return !qFuzzyCompare(affine._m11, 1) ||
!qFuzzyCompare(affine._m22, 1);
}
inline bool QTransform::isRotating() const
{
return !qFuzzyCompare(affine._m12 + 1, 1) ||
!qFuzzyCompare(affine._m21 + 1, 1);
}

inline bool QTransform::isTranslating() const
{
return !qFuzzyCompare(affine._dx + 1, 1) ||
!qFuzzyCompare(affine._dy + 1, 1);
}

inline qreal QTransform::determinant() const
{
return affine._m11*(m_33*affine._m22-affine._dy*m_23) -
affine._m21*(m_33*affine._m12-affine._dy*m_13)+affine._dx*(m_23*affine._m12-affine._m22*m_13);
}
inline qreal QTransform::det() const
{
return determinant();
}
inline qreal QTransform::m11() const
{
return affine._m11;
}
inline qreal QTransform::m12() const
{
return affine._m12;
}
inline qreal QTransform::m13() const
{
return m_13;
}
inline qreal QTransform::m21() const
{
return affine._m21;
}
inline qreal QTransform::m22() const
{
return affine._m22;
}
inline qreal QTransform::m23() const
{
return m_23;
}
inline qreal QTransform::m31() const
{
return affine._dx;
}
inline qreal QTransform::m32() const
{
return affine._dy;
}
inline qreal QTransform::m33() const
{
return m_33;
}
inline qreal QTransform::dx() const
{
return affine._dx;
}
inline qreal QTransform::dy() const
{
return affine._dy;
}

inline QTransform &QTransform::operator*=(qreal num)
{
affine._m11 *= num;
affine._m12 *= num;
m_13 *= num;
affine._m21 *= num;
affine._m22 *= num;
m_23 *= num;
affine._dx *= num;
affine._dy *= num;
m_33 *= num;
m_dirty |= TxScale;
return *this;
}
inline QTransform &QTransform::operator/=(qreal div)
{
div = 1/div;
return operator*=(div);
}
inline QTransform &QTransform::operator+=(qreal num)
{
affine._m11 += num;
affine._m12 += num;
m_13 += num;
affine._m21 += num;
affine._m22 += num;
m_23 += num;
affine._dx += num;
affine._dy += num;
m_33 += num;
m_dirty |= TxProject;
return *this;
}
inline QTransform &QTransform::operator-=(qreal num)
{
affine._m11 -= num;
affine._m12 -= num;
m_13 -= num;
affine._m21 -= num;
affine._m22 -= num;
m_23 -= num;
affine._dx -= num;
affine._dy -= num;
m_33 -= num;
m_dirty |= TxProject;
return *this;
}


 QDataStream &operator<<(QDataStream &, const QTransform &);
 QDataStream &operator>>(QDataStream &, QTransform &);


# 316 "/home/eagle/qt-copy/include/QtGui/qtransform.h"
 QDebug operator<<(QDebug, const QTransform &);

# 318 "/home/eagle/qt-copy/include/QtGui/qtransform.h"



 inline QPoint operator*(const QPoint &p, const QTransform &m)
{ return m.map(p); }
 inline QPointF operator*(const QPointF &p, const QTransform &m)
{ return m.map(p); }
 inline QLineF operator*(const QLineF &l, const QTransform &m)
{ return m.map(l); }
 inline QLine operator*(const QLine &l, const QTransform &m)
{ return m.map(l); }
 inline QPolygon operator *(const QPolygon &a, const QTransform &m)
{ return m.map(a); }
 inline QPolygonF operator *(const QPolygonF &a, const QTransform &m)
{ return m.map(a); }
 inline QRegion operator *(const QRegion &r, const QTransform &m)
{ return m.map(r); }
 inline QPainterPath operator *(const QPainterPath &p, const QTransform &m)
{ return m.map(p); }

 inline QTransform operator *(const QTransform &a, qreal n)
{ QTransform t(a); t *= n; return t; }
 inline QTransform operator /(const QTransform &a, qreal n)
{ QTransform t(a); t /= n; return t; }
 inline QTransform operator +(const QTransform &a, qreal n)
{ QTransform t(a); t += n; return t; }
 inline QTransform operator -(const QTransform &a, qreal n)
{ QTransform t(a); t -= n; return t; }






# 52 "/home/eagle/qt-copy/include/QtGui/qbrush.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qimage.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qtransform.h"































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qimage.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qpaintdevice.h"













































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qimage.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qrgb.h"


























































































# 49 "/home/eagle/qt-copy/include/QtGui/qimage.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"












































































































































































































































































































































































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtGui/qimage.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qrect.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtGui/qimage.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 52 "/home/eagle/qt-copy/include/QtGui/qimage.h"


# 54 "/home/eagle/qt-copy/include/QtGui/qimage.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QIODevice;
class QStringList;
class QMatrix;
class QTransform;
class QVariant;
template <class T> class QList;
template <class T> class QVector;

struct QImageData;
class QImageDataMisc; 

# 71 "/home/eagle/qt-copy/include/QtGui/qimage.h"
class  QImageTextKeyLang {
public:
QImageTextKeyLang(const char* k, const char* l) : key(k), lang(l) { }
QImageTextKeyLang() { }

QByteArray key;
QByteArray lang;

bool operator< (const QImageTextKeyLang& other) const
{ return key < other.key || (key==other.key && lang < other.lang); }
bool operator== (const QImageTextKeyLang& other) const
{ return key==other.key && lang==other.lang; }
inline bool operator!= (const QImageTextKeyLang &other) const
{ return !operator==(other); }
};



# 89 "/home/eagle/qt-copy/include/QtGui/qimage.h"
class  QImage : public QPaintDevice
{
public:
enum InvertMode { InvertRgb, InvertRgba };
enum Format {
Format_Invalid,
Format_Mono,
Format_MonoLSB,
Format_Indexed8,
Format_RGB32,
Format_ARGB32,
Format_ARGB32_Premultiplied,
Format_RGB16,
Format_ARGB8565_Premultiplied,
Format_RGB666,
Format_ARGB6666_Premultiplied,
Format_RGB555,
Format_ARGB8555_Premultiplied,
Format_RGB888,
Format_RGB444,
Format_ARGB4444_Premultiplied,











# 121 "/home/eagle/qt-copy/include/QtGui/qimage.h"
NImageFormats

# 123 "/home/eagle/qt-copy/include/QtGui/qimage.h"
};

QImage();
QImage(const QSize &size, Format format);
QImage(int width, int height, Format format);
QImage(uchar *data, int width, int height, Format format);
QImage(const uchar *data, int width, int height, Format format);
QImage(uchar *data, int width, int height, int bytesPerLine, Format format);
QImage(const uchar *data, int width, int height, int bytesPerLine, Format format);


# 134 "/home/eagle/qt-copy/include/QtGui/qimage.h"
explicit QImage(const char * const xpm[]);

# 136 "/home/eagle/qt-copy/include/QtGui/qimage.h"
explicit QImage(const QString &fileName, const char *format = 0);

# 138 "/home/eagle/qt-copy/include/QtGui/qimage.h"
explicit QImage(const char *fileName, const char *format = 0);


# 141 "/home/eagle/qt-copy/include/QtGui/qimage.h"
QImage(const QImage &);
~QImage();

QImage &operator=(const QImage &);
bool isNull() const;

int devType() const;

bool operator==(const QImage &) const;
bool operator!=(const QImage &) const;
operator QVariant() const;
void detach();
bool isDetached() const;

QImage copy(const QRect &rect = QRect()) const;
inline QImage copy(int x, int y, int w, int h) const
{ return copy(QRect(x, y, w, h)); }

Format format() const;

QImage convertToFormat(Format f, Qt::ImageConversionFlags flags = Qt::AutoColor) const ;
QImage convertToFormat(Format f, const QVector<QRgb> &colorTable, Qt::ImageConversionFlags flags = Qt::AutoColor) const ;

int width() const;
int height() const;
QSize size() const;
QRect rect() const;

int depth() const;
int numColors() const;

QRgb color(int i) const;
void setColor(int i, QRgb c);
void setNumColors(int);

bool allGray() const;
bool isGrayscale() const;

uchar *bits();
const uchar *bits() const;
int numBytes() const;

uchar *scanLine(int);
const uchar *scanLine(int) const;
int bytesPerLine() const;

bool valid(int x, int y) const;
bool valid(const QPoint &pt) const;

int pixelIndex(int x, int y) const;
int pixelIndex(const QPoint &pt) const;

QRgb pixel(int x, int y) const;
QRgb pixel(const QPoint &pt) const;

void setPixel(int x, int y, uint index_or_rgb);
void setPixel(const QPoint &pt, uint index_or_rgb);

QVector<QRgb> colorTable() const;
void setColorTable(const QVector<QRgb> colors);

void fill(uint pixel);

bool hasAlphaChannel() const;
void setAlphaChannel(const QImage &alphaChannel);
QImage alphaChannel() const;
QImage createAlphaMask(Qt::ImageConversionFlags flags = Qt::AutoColor) const;

# 209 "/home/eagle/qt-copy/include/QtGui/qimage.h"
QImage createHeuristicMask(bool clipTight = true) const;

# 211 "/home/eagle/qt-copy/include/QtGui/qimage.h"
QImage createMaskFromColor(QRgb color, Qt::MaskMode mode = Qt::MaskInColor) const;

inline QImage scaled(int w, int h, Qt::AspectRatioMode aspectMode = Qt::IgnoreAspectRatio,
Qt::TransformationMode mode = Qt::FastTransformation) const
{ return scaled(QSize(w, h), aspectMode, mode); }
QImage scaled(const QSize &s, Qt::AspectRatioMode aspectMode = Qt::IgnoreAspectRatio,
Qt::TransformationMode mode = Qt::FastTransformation) const;
QImage scaledToWidth(int w, Qt::TransformationMode mode = Qt::FastTransformation) const;
QImage scaledToHeight(int h, Qt::TransformationMode mode = Qt::FastTransformation) const;
QImage transformed(const QMatrix &matrix, Qt::TransformationMode mode = Qt::FastTransformation) const;
static QMatrix trueMatrix(const QMatrix &, int w, int h);
QImage transformed(const QTransform &matrix, Qt::TransformationMode mode = Qt::FastTransformation) const;
static QTransform trueMatrix(const QTransform &, int w, int h);
QImage mirrored(bool horizontally = false, bool vertically = true) const;
QImage rgbSwapped() const;
void invertPixels(InvertMode = InvertRgb);


bool load(QIODevice *device, const char* format);
bool load(const QString &fileName, const char* format=0);
bool loadFromData(const uchar *buf, int len, const char *format = 0);
inline bool loadFromData(const QByteArray &data, const char* aformat=0)
{ return loadFromData(reinterpret_cast<const uchar *>(data.constData()), data.size(), aformat); }

bool save(const QString &fileName, const char* format=0, int quality=-1) const;
bool save(QIODevice *device, const char* format=0, int quality=-1) const;

static QImage fromData(const uchar *data, int size, const char *format = 0);
inline static QImage fromData(const QByteArray &data, const char *format = 0)
{ return fromData(reinterpret_cast<const uchar *>(data.constData()), data.size(), format); }

int serialNumber() const;
qint64 cacheKey() const;

QPaintEngine *paintEngine() const;


int dotsPerMeterX() const;
int dotsPerMeterY() const;
void setDotsPerMeterX(int);
void setDotsPerMeterY(int);
QPoint offset() const;
void setOffset(const QPoint&);

# 255 "/home/eagle/qt-copy/include/QtGui/qimage.h"
QStringList textKeys() const;
QString text(const QString &key = QString()) const;
void setText(const QString &key, const QString &value);


QString text(const char* key, const char* lang=0) const;
QList<QImageTextKeyLang> textList() const;
QStringList textLanguages() const;
QString text(const QImageTextKeyLang&) const;
void setText(const char* key, const char* lang, const QString&);














































# 311 "/home/eagle/qt-copy/include/QtGui/qimage.h"
protected:
virtual int metric(PaintDeviceMetric metric) const;

private:
friend class QWSOnScreenSurface;
QImageData *d;

friend class QRasterPixmapData;
friend class QDetachedPixmap;
friend  qint64 qt_image_id(const QImage &image);
friend const QVector<QRgb> *qt_image_colortable(const QImage &image);

public:
typedef QImageData * DataPtr;
inline DataPtr &data_ptr() { return d; }
};

template <> inline bool qIsDetached<QImage>(QImage &t) { return t.isDetached(); } template <typename T> inline void qSwap(T &, T &); template <> inline void qSwap<QImage>(QImage &value1, QImage &value2) { const QImage::DataPtr t = value1.data_ptr(); value1.data_ptr() = value2.data_ptr(); value2.data_ptr() = t; }
template <> class QTypeInfo<QImage> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QImage)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QImage"; } };



 inline bool QImage::valid(const QPoint &pt) const { return valid(pt.x(), pt.y()); }
 inline int QImage::pixelIndex(const QPoint &pt) const { return pixelIndex(pt.x(), pt.y());}
 inline QRgb QImage::pixel(const QPoint &pt) const { return pixel(pt.x(), pt.y()); }
 inline void QImage::setPixel(const QPoint &pt, uint index_or_rgb) { setPixel(pt.x(), pt.y(), index_or_rgb); }




# 341 "/home/eagle/qt-copy/include/QtGui/qimage.h"
 QDataStream &operator<<(QDataStream &, const QImage &);
 QDataStream &operator>>(QDataStream &, QImage &);







# 350 "/home/eagle/qt-copy/include/QtGui/qimage.h"





# 53 "/home/eagle/qt-copy/include/QtGui/qbrush.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qpixmap.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qpaintdevice.h"













































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qpixmap.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qcolor.h"





















































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qpixmap.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qpixmap.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtGui/qpixmap.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qimage.h"


































































































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtGui/qpixmap.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qtransform.h"































































































































































































































































































































































# 52 "/home/eagle/qt-copy/include/QtGui/qpixmap.h"


# 54 "/home/eagle/qt-copy/include/QtGui/qpixmap.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QImageWriter;
class QColor;
class QVariant;
class QX11Info;

class QPixmapData;

class  QPixmap : public QPaintDevice
{
public:
QPixmap();
explicit QPixmap(QPixmapData *data);
QPixmap(int w, int h);
QPixmap(const QSize &);
QPixmap(const QString& fileName, const char *format = 0, Qt::ImageConversionFlags flags = Qt::AutoColor);

# 76 "/home/eagle/qt-copy/include/QtGui/qpixmap.h"
QPixmap(const char * const xpm[]);

# 78 "/home/eagle/qt-copy/include/QtGui/qpixmap.h"
QPixmap(const QPixmap &);
~QPixmap();

QPixmap &operator=(const QPixmap &);
operator QVariant() const;

bool isNull() const;
int devType() const;

int width() const;
int height() const;
QSize size() const;
QRect rect() const;
int depth() const;

static int defaultDepth();

void fill(const QColor &fillColor = Qt::white);
void fill(const QWidget *widget, const QPoint &ofs);
inline void fill(const QWidget *widget, int xofs, int yofs) { fill(widget, QPoint(xofs, yofs)); }

QBitmap mask() const;
void setMask(const QBitmap &);

QPixmap alphaChannel() const;
void setAlphaChannel(const QPixmap &);

bool hasAlpha() const;
bool hasAlphaChannel() const;


# 109 "/home/eagle/qt-copy/include/QtGui/qpixmap.h"
QBitmap createHeuristicMask(bool clipTight = true) const;

# 111 "/home/eagle/qt-copy/include/QtGui/qpixmap.h"
QBitmap createMaskFromColor(const QColor &maskColor) const; 
QBitmap createMaskFromColor(const QColor &maskColor, Qt::MaskMode mode) const;

static QPixmap grabWindow(WId, int x=0, int y=0, int w=-1, int h=-1);
static QPixmap grabWidget(QWidget *widget, const QRect &rect);
static inline QPixmap grabWidget(QWidget *widget, int x=0, int y=0, int w=-1, int h=-1)
{ return grabWidget(widget, QRect(x, y, w, h)); }


inline QPixmap scaled(int w, int h, Qt::AspectRatioMode aspectMode = Qt::IgnoreAspectRatio,
Qt::TransformationMode mode = Qt::FastTransformation) const
{ return scaled(QSize(w, h), aspectMode, mode); }
QPixmap scaled(const QSize &s, Qt::AspectRatioMode aspectMode = Qt::IgnoreAspectRatio,
Qt::TransformationMode mode = Qt::FastTransformation) const;
QPixmap scaledToWidth(int w, Qt::TransformationMode mode = Qt::FastTransformation) const;
QPixmap scaledToHeight(int h, Qt::TransformationMode mode = Qt::FastTransformation) const;
QPixmap transformed(const QMatrix &, Qt::TransformationMode mode = Qt::FastTransformation) const;
static QMatrix trueMatrix(const QMatrix &m, int w, int h);
QPixmap transformed(const QTransform &, Qt::TransformationMode mode = Qt::FastTransformation) const;
static QTransform trueMatrix(const QTransform &m, int w, int h);

QImage toImage() const;
static QPixmap fromImage(const QImage &image, Qt::ImageConversionFlags flags = Qt::AutoColor);

bool load(const QString& fileName, const char *format = 0, Qt::ImageConversionFlags flags = Qt::AutoColor);
bool loadFromData(const uchar *buf, uint len, const char* format = 0, Qt::ImageConversionFlags flags = Qt::AutoColor);
inline bool loadFromData(const QByteArray &data, const char* format = 0, Qt::ImageConversionFlags flags = Qt::AutoColor);
bool save(const QString& fileName, const char* format = 0, int quality = -1) const;
bool save(QIODevice* device, const char* format = 0, int quality = -1) const;
















# 156 "/home/eagle/qt-copy/include/QtGui/qpixmap.h"
inline QPixmap copy(int x, int y, int width, int height) const;
QPixmap copy(const QRect &rect = QRect()) const;

int serialNumber() const;
qint64 cacheKey() const;

bool isDetached() const;
void detach();

inline bool isQBitmap() const { return depth() == 1; }





















# 187 "/home/eagle/qt-copy/include/QtGui/qpixmap.h"
QPaintEngine *paintEngine() const;

inline bool operator!() const { return isNull(); }

protected:
int metric(PaintDeviceMetric) const;























# 216 "/home/eagle/qt-copy/include/QtGui/qpixmap.h"
private:
QPixmapData *data;

bool doImageIO(QImageWriter *io, int quality) const;


enum Type { PixmapType, BitmapType }; 
QPixmap(const QSize &s, Type);
void init(int, int, Type = PixmapType);

QPixmap(const QSize &s, int type);
void init(int, int, int);
void deref();



# 232 "/home/eagle/qt-copy/include/QtGui/qpixmap.h"









# 241 "/home/eagle/qt-copy/include/QtGui/qpixmap.h"
friend class QPixmapData;
friend class QX11PixmapData;
friend class QMacPixmapData;
friend class QBitmap;
friend class QPaintDevice;
friend class QPainter;
friend class QGLWidget;
friend class QX11PaintEngine;
friend class QCoreGraphicsPaintEngine;
friend class QWidgetPrivate;
friend class QRasterPaintEngine;
friend class QRasterBuffer;
friend class QDirect3DPaintEngine;
friend class QDirect3DPaintEnginePrivate;
friend class QDetachedPixmap;

# 257 "/home/eagle/qt-copy/include/QtGui/qpixmap.h"
friend  QDataStream &operator>>(QDataStream &, QPixmap &);

# 259 "/home/eagle/qt-copy/include/QtGui/qpixmap.h"
friend  qint64 qt_pixmap_id(const QPixmap &pixmap);

public:
QPixmapData* pixmapData() const;

public:
typedef QPixmapData * DataPtr;
inline DataPtr &data_ptr() { return data; }
};

template <> inline bool qIsDetached<QPixmap>(QPixmap &t) { return t.isDetached(); } template <typename T> inline void qSwap(T &, T &); template <> inline void qSwap<QPixmap>(QPixmap &value1, QPixmap &value2) { const QPixmap::DataPtr t = value1.data_ptr(); value1.data_ptr() = value2.data_ptr(); value2.data_ptr() = t; }

inline QPixmap QPixmap::copy(int ax, int ay, int awidth, int aheight) const
{
return copy(QRect(ax, ay, awidth, aheight));
}

inline bool QPixmap::loadFromData(const QByteArray &buf, const char *format,
Qt::ImageConversionFlags flags)
{
return loadFromData(reinterpret_cast<const uchar *>(buf.constData()), buf.size(), format, flags);
}






# 287 "/home/eagle/qt-copy/include/QtGui/qpixmap.h"
 QDataStream &operator<<(QDataStream &, const QPixmap &);
 QDataStream &operator>>(QDataStream &, QPixmap &);


# 291 "/home/eagle/qt-copy/include/QtGui/qpixmap.h"








# 299 "/home/eagle/qt-copy/include/QtGui/qpixmap.h"





# 54 "/home/eagle/qt-copy/include/QtGui/qbrush.h"


# 56 "/home/eagle/qt-copy/include/QtGui/qbrush.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

struct QBrushData;
class QPixmap;
class QGradient;
class QVariant;

class  QBrush
{
public:
QBrush();
QBrush(Qt::BrushStyle bs);
QBrush(const QColor &color, Qt::BrushStyle bs=Qt::SolidPattern);
QBrush(Qt::GlobalColor color, Qt::BrushStyle bs=Qt::SolidPattern);

QBrush(const QColor &color, const QPixmap &pixmap);
QBrush(Qt::GlobalColor color, const QPixmap &pixmap);
QBrush(const QPixmap &pixmap);
QBrush(const QImage &image);

QBrush(const QBrush &brush);

QBrush(const QGradient &gradient);

~QBrush();
QBrush &operator=(const QBrush &brush);
operator QVariant() const;

inline Qt::BrushStyle style() const;
void setStyle(Qt::BrushStyle);

inline const QMatrix &matrix() const;
void setMatrix(const QMatrix &mat);

inline QTransform transform() const;
void setTransform(const QTransform &);

QPixmap texture() const;
void setTexture(const QPixmap &pixmap);

QImage textureImage() const;
void setTextureImage(const QImage &image);

inline const QColor &color() const;
void setColor(const QColor &color);
inline void setColor(Qt::GlobalColor color);

const QGradient *gradient() const;

bool isOpaque() const;

bool operator==(const QBrush &b) const;
inline bool operator!=(const QBrush &b) const { return !(operator==(b)); }







# 120 "/home/eagle/qt-copy/include/QtGui/qbrush.h"
private:



# 124 "/home/eagle/qt-copy/include/QtGui/qbrush.h"
friend class QRasterPaintEngine;
friend class QRasterPaintEnginePrivate;
friend struct QSpanData;
friend class QPainter;
friend bool qHasPixmapTexture(const QBrush& brush);
void detach(Qt::BrushStyle newStyle);
void init(const QColor &color, Qt::BrushStyle bs);
QBrushData *d;
void cleanUp(QBrushData *x);

public:
inline bool isDetached() const;
typedef QBrushData * DataPtr;
inline DataPtr &data_ptr() { return d; }
};

inline void QBrush::setColor(Qt::GlobalColor acolor)
{ setColor(QColor(acolor)); }

template <> class QTypeInfo<QBrush> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QBrush)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QBrush"; } };
template <> inline bool qIsDetached<QBrush>(QBrush &t) { return t.isDetached(); } template <typename T> inline void qSwap(T &, T &); template <> inline void qSwap<QBrush>(QBrush &value1, QBrush &value2) { const QBrush::DataPtr t = value1.data_ptr(); value1.data_ptr() = value2.data_ptr(); value2.data_ptr() = t; }






# 151 "/home/eagle/qt-copy/include/QtGui/qbrush.h"
 QDataStream &operator<<(QDataStream &, const QBrush &);
 QDataStream &operator>>(QDataStream &, QBrush &);



# 156 "/home/eagle/qt-copy/include/QtGui/qbrush.h"
 QDebug operator<<(QDebug, const QBrush &);


# 159 "/home/eagle/qt-copy/include/QtGui/qbrush.h"
struct QBrushData
{
QAtomicInt ref;
Qt::BrushStyle style;
QColor color;
QTransform transform;
QRect sourceRect;
uint hasTransform : 1;
};

inline Qt::BrushStyle QBrush::style() const { return d->style; }
inline const QColor &QBrush::color() const { return d->color; }
inline const QMatrix &QBrush::matrix() const { return d->transform.toAffine(); }
inline QTransform QBrush::transform() const { return d->transform; }
inline bool QBrush::isDetached() const { return d->ref == 1; }






# 180 "/home/eagle/qt-copy/include/QtGui/qbrush.h"



class QGradientPrivate;

typedef QPair<qreal, QColor> QGradientStop;
typedef QVector<QGradientStop> QGradientStops;

class  QGradient
{

Q_ENUMS(Type Spread CoordinateMode)
public:
enum Type {
LinearGradient,
RadialGradient,
ConicalGradient,
NoGradient
};

enum Spread {
PadSpread,
ReflectSpread,
RepeatSpread
};

enum CoordinateMode {
LogicalMode,
StretchToDeviceMode,
ObjectBoundingMode
};

QGradient();

Type type() const { return m_type; }

inline void setSpread(Spread spread);
Spread spread() const { return m_spread; }

void setColorAt(qreal pos, const QColor &color);

void setStops(const QGradientStops &stops);
QGradientStops stops() const;

CoordinateMode coordinateMode() const;
void setCoordinateMode(CoordinateMode mode);

bool operator==(const QGradient &gradient) const;
inline bool operator!=(const QGradient &other) const
{ return !operator==(other); }

bool operator==(const QGradient &gradient); 

private:
friend class QLinearGradient;
friend class QRadialGradient;
friend class QConicalGradient;

Type m_type;
Spread m_spread;
QGradientStops m_stops;
union {
struct {
qreal x1, y1, x2, y2;
} linear;
struct {
qreal cx, cy, fx, fy, radius;
} radial;
struct {
qreal cx, cy, angle;
} conical;
} m_data;
void *dummy;
};

inline void QGradient::setSpread(Spread aspread)
{ m_spread = aspread; }

class  QLinearGradient : public QGradient
{
public:
QLinearGradient();
QLinearGradient(const QPointF &start, const QPointF &finalStop);
QLinearGradient(qreal xStart, qreal yStart, qreal xFinalStop, qreal yFinalStop);

QPointF start() const;
void setStart(const QPointF &start);
inline void setStart(qreal x, qreal y) { setStart(QPointF(x, y)); }

QPointF finalStop() const;
void setFinalStop(const QPointF &stop);
inline void setFinalStop(qreal x, qreal y) { setFinalStop(QPointF(x, y)); }
};


class  QRadialGradient : public QGradient
{
public:
QRadialGradient();
QRadialGradient(const QPointF &center, qreal radius, const QPointF &focalPoint);
QRadialGradient(qreal cx, qreal cy, qreal radius, qreal fx, qreal fy);

QRadialGradient(const QPointF &center, qreal radius);
QRadialGradient(qreal cx, qreal cy, qreal radius);

QPointF center() const;
void setCenter(const QPointF &center);
inline void setCenter(qreal x, qreal y) { setCenter(QPointF(x, y)); }

QPointF focalPoint() const;
void setFocalPoint(const QPointF &focalPoint);
inline void setFocalPoint(qreal x, qreal y) { setFocalPoint(QPointF(x, y)); }

qreal radius() const;
void setRadius(qreal radius);
};


class  QConicalGradient : public QGradient
{
public:
QConicalGradient();
QConicalGradient(const QPointF &center, qreal startAngle);
QConicalGradient(qreal cx, qreal cy, qreal startAngle);

QPointF center() const;
void setCenter(const QPointF &center);
inline void setCenter(qreal x, qreal y) { setCenter(QPointF(x, y)); }

qreal angle() const;
void setAngle(qreal angle);
};






# 49 "/home/eagle/qt-copy/include/QtGui/qpalette.h"


# 51 "/home/eagle/qt-copy/include/QtGui/qpalette.h"




typedef QtValidLicenseForGuiModule QtGuiModule;




# 60 "/home/eagle/qt-copy/include/QtGui/qpalette.h"
class QPalettePrivate;
class QVariant;

class  QPalette
{

Q_ENUMS(ColorGroup ColorRole)
public:
QPalette();
QPalette(const QColor &button);
QPalette(Qt::GlobalColor button);
QPalette(const QColor &button, const QColor &window);
QPalette(const QBrush &windowText, const QBrush &button, const QBrush &light,
const QBrush &dark, const QBrush &mid, const QBrush &text,
const QBrush &bright_text, const QBrush &base, const QBrush &window);
QPalette(const QColor &windowText, const QColor &window, const QColor &light,
const QColor &dark, const QColor &mid, const QColor &text, const QColor &base);



# 80 "/home/eagle/qt-copy/include/QtGui/qpalette.h"
QPalette(const QPalette &palette);
~QPalette();
QPalette &operator=(const QPalette &palette);
operator QVariant() const;


enum ColorGroup { Active, Disabled, Inactive, NColorGroups, Current, All, Normal = Active };
enum ColorRole { WindowText, Button, Light, Midlight, Dark, Mid,
Text, BrightText, ButtonText, Base, Window, Shadow,
Highlight, HighlightedText,
Link, LinkVisited, 
AlternateBase,
NoRole, 
ToolTipBase, ToolTipText,
NColorRoles = ToolTipText + 1,
Foreground = WindowText, Background = Window 
};

inline ColorGroup currentColorGroup() const { return static_cast<ColorGroup>(current_group); }
inline void setCurrentColorGroup(ColorGroup cg) { current_group = cg; }

inline const QColor &color(ColorGroup cg, ColorRole cr) const
{ return brush(cg, cr).color(); }
const QBrush &brush(ColorGroup cg, ColorRole cr) const;
inline void setColor(ColorGroup cg, ColorRole cr, const QColor &color);
inline void setColor(ColorRole cr, const QColor &color);
inline void setBrush(ColorRole cr, const QBrush &brush);
bool isBrushSet(ColorGroup cg, ColorRole cr) const;
void setBrush(ColorGroup cg, ColorRole cr, const QBrush &brush);
void setColorGroup(ColorGroup cr, const QBrush &windowText, const QBrush &button,
const QBrush &light, const QBrush &dark, const QBrush &mid,
const QBrush &text, const QBrush &bright_text, const QBrush &base,
const QBrush &window);
bool isEqual(ColorGroup cr1, ColorGroup cr2) const;

inline const QColor &color(ColorRole cr) const { return color(Current, cr); }
inline const QBrush &brush(ColorRole cr) const { return brush(Current, cr); }
inline const QBrush &foreground() const { return brush(WindowText); }
inline const QBrush &windowText() const { return brush(WindowText); }
inline const QBrush &button() const { return brush(Button); }
inline const QBrush &light() const { return brush(Light); }
inline const QBrush &dark() const { return brush(Dark); }
inline const QBrush &mid() const { return brush(Mid); }
inline const QBrush &text() const { return brush(Text); }
inline const QBrush &base() const { return brush(Base); }
inline const QBrush &alternateBase() const { return brush(AlternateBase); }
inline const QBrush &toolTipBase() const { return brush(ToolTipBase); }
inline const QBrush &toolTipText() const { return brush(ToolTipText); }
inline const QBrush &background() const { return brush(Window); }
inline const QBrush &window() const { return brush(Window); }
inline const QBrush &midlight() const { return brush(Midlight); }
inline const QBrush &brightText() const { return brush(BrightText); }
inline const QBrush &buttonText() const { return brush(ButtonText); }
inline const QBrush &shadow() const { return brush(Shadow); }
inline const QBrush &highlight() const { return brush(Highlight); }
inline const QBrush &highlightedText() const { return brush(HighlightedText); }
inline const QBrush &link() const { return brush(Link); }
inline const QBrush &linkVisited() const { return brush(LinkVisited); }














# 152 "/home/eagle/qt-copy/include/QtGui/qpalette.h"
bool operator==(const QPalette &p) const;
inline bool operator!=(const QPalette &p) const { return !(operator==(p)); }
bool isCopyOf(const QPalette &p) const;

int serialNumber() const;
qint64 cacheKey() const;

QPalette resolve(const QPalette &) const;
inline uint resolve() const { return resolve_mask; }
inline void resolve(uint mask) { resolve_mask = mask; }

private:
void setColorGroup(ColorGroup cr, const QBrush &windowText, const QBrush &button,
const QBrush &light, const QBrush &dark, const QBrush &mid,
const QBrush &text, const QBrush &bright_text,
const QBrush &base, const QBrush &alternate_base,
const QBrush &window, const QBrush &midlight,
const QBrush &button_text, const QBrush &shadow,
const QBrush &highlight, const QBrush &highlighted_text,
const QBrush &link, const QBrush &link_visited);
void setColorGroup(ColorGroup cr, const QBrush &windowText, const QBrush &button,
const QBrush &light, const QBrush &dark, const QBrush &mid,
const QBrush &text, const QBrush &bright_text,
const QBrush &base, const QBrush &alternate_base,
const QBrush &window, const QBrush &midlight,
const QBrush &button_text, const QBrush &shadow,
const QBrush &highlight, const QBrush &highlighted_text,
const QBrush &link, const QBrush &link_visited,
const QBrush &toolTipBase, const QBrush &toolTipText);





# 186 "/home/eagle/qt-copy/include/QtGui/qpalette.h"
void init();
void detach();

QPalettePrivate *d;
uint current_group : 4;
uint resolve_mask : 28;
friend  QDataStream &operator<<(QDataStream &s, const QPalette &p);
};

inline void QPalette::setColor(ColorGroup acg, ColorRole acr,
const QColor &acolor)
{ setBrush(acg, acr, QBrush(acolor)); }
inline void QPalette::setColor(ColorRole acr, const QColor &acolor)
{ setColor(All, acr, acolor); }
inline void QPalette::setBrush(ColorRole acr, const QBrush &abrush)
{ setBrush(All, acr, abrush); }


















































# 252 "/home/eagle/qt-copy/include/QtGui/qpalette.h"




# 256 "/home/eagle/qt-copy/include/QtGui/qpalette.h"
 QDataStream &operator<<(QDataStream &ds, const QPalette &p);
 QDataStream &operator>>(QDataStream &ds, QPalette &p);


# 260 "/home/eagle/qt-copy/include/QtGui/qpalette.h"





# 50 "/home/eagle/qt-copy/include/QtGui/qwidget.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qfont.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qwindowdefs.h"























































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qfont.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qfont.h"






# 54 "/home/eagle/qt-copy/include/QtGui/qfont.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QFontPrivate; 
class QStringList;
class QVariant;
class Q3TextFormatCollection;

class  QFont
{

Q_ENUMS(StyleStrategy)
public:
enum StyleHint {
Helvetica, SansSerif = Helvetica,
Times, Serif = Times,
Courier, TypeWriter = Courier,
OldEnglish, Decorative = OldEnglish,
System,
AnyStyle
};

enum StyleStrategy {
PreferDefault = 0x0001,
PreferBitmap = 0x0002,
PreferDevice = 0x0004,
PreferOutline = 0x0008,
ForceOutline = 0x0010,
PreferMatch = 0x0020,
PreferQuality = 0x0040,
PreferAntialias = 0x0080,
NoAntialias = 0x0100,
OpenGLCompatible = 0x0200,
NoFontMerging = 0x8000
};

enum Weight {
Light = 25,
Normal = 50,
DemiBold = 63,
Bold = 75,
Black = 87
};

enum Style {
StyleNormal,
StyleItalic,
StyleOblique
};

enum Stretch {
UltraCondensed = 50,
ExtraCondensed = 62,
Condensed = 75,
SemiCondensed = 87,
Unstretched = 100,
SemiExpanded = 112,
Expanded = 125,
ExtraExpanded = 150,
UltraExpanded = 200
};

enum Capitalization {
MixedCase,
AllUppercase,
AllLowercase,
SmallCaps,
Capitalize
};

enum SpacingType {
PercentageSpacing,
AbsoluteSpacing
};

enum ResolveProperties {
FamilyResolved = 0x0001,
SizeResolved = 0x0002,
StyleHintResolved = 0x0004,
StyleStrategyResolved = 0x0008,
WeightResolved = 0x0010,
StyleResolved = 0x0020,
UnderlineResolved = 0x0040,
OverlineResolved = 0x0080,
StrikeOutResolved = 0x0100,
FixedPitchResolved = 0x0200,
StretchResolved = 0x0400,
KerningResolved = 0x0800,
CapitalizationResolved = 0x1000,
LetterSpacingResolved = 0x2000,
WordSpacingResolved = 0x4000,
AllPropertiesResolved = 0x7fff
};

QFont();
QFont(const QString &family, int pointSize = -1, int weight = -1, bool italic = false);
QFont(const QFont &, QPaintDevice *pd);
QFont(const QFont &);
~QFont();

QString family() const;
void setFamily(const QString &);

int pointSize() const;
void setPointSize(int);
qreal pointSizeF() const;
void setPointSizeF(qreal);

int pixelSize() const;
void setPixelSize(int);

int weight() const;
void setWeight(int);

inline bool bold() const;
inline void setBold(bool);

void setStyle(Style style);
Style style() const;

inline bool italic() const;
inline void setItalic(bool b);

bool underline() const;
void setUnderline(bool);

bool overline() const;
void setOverline(bool);

bool strikeOut() const;
void setStrikeOut(bool);

bool fixedPitch() const;
void setFixedPitch(bool);

bool kerning() const;
void setKerning(bool);

StyleHint styleHint() const;
StyleStrategy styleStrategy() const;
void setStyleHint(StyleHint, StyleStrategy = PreferDefault);
void setStyleStrategy(StyleStrategy s);

int stretch() const;
void setStretch(int);

qreal letterSpacing() const;
SpacingType letterSpacingType() const;
void setLetterSpacing(SpacingType type, qreal spacing);

qreal wordSpacing() const;
void setWordSpacing(qreal spacing);

void setCapitalization(Capitalization);
Capitalization capitalization() const;


bool rawMode() const;
void setRawMode(bool);


bool exactMatch() const;

QFont &operator=(const QFont &);
bool operator==(const QFont &) const;
bool operator!=(const QFont &) const;
bool operator<(const QFont &) const;
operator QVariant() const;
bool isCopyOf(const QFont &) const;





# 231 "/home/eagle/qt-copy/include/QtGui/qfont.h"
Qt::HANDLE handle() const;








# 240 "/home/eagle/qt-copy/include/QtGui/qfont.h"

void setRawName(const QString &);
QString rawName() const;

QString key() const;

QString toString() const;
bool fromString(const QString &);

static QString substitute(const QString &);
static QStringList substitutes(const QString &);
static QStringList substitutions();
static void insertSubstitution(const QString&, const QString &);
static void insertSubstitutions(const QString&, const QStringList &);
static void removeSubstitution(const QString &);
static void initialize();
static void cleanup();

# 258 "/home/eagle/qt-copy/include/QtGui/qfont.h"
static void cacheStatistics();


# 261 "/home/eagle/qt-copy/include/QtGui/qfont.h"
QString defaultFamily() const;
QString lastResortFamily() const;
QString lastResortFont() const;

QFont resolve(const QFont &) const;
inline uint resolve() const { return resolve_mask; }
inline void resolve(uint mask) { resolve_mask = mask; }









# 277 "/home/eagle/qt-copy/include/QtGui/qfont.h"
private:
QFont(QFontPrivate *);

void detach();








# 289 "/home/eagle/qt-copy/include/QtGui/qfont.h"
friend class QFontPrivate;
friend class QFontMetrics;
friend class QFontMetricsF;
friend class QFontInfo;
friend class QPainter;
friend class QPSPrintEngineFont;
friend class QApplication;
friend class QWidget;
friend class QWidgetPrivate;
friend class Q3TextFormatCollection;
friend class QTextLayout;
friend class QTextEngine;
friend class QStackTextEngine;
friend class QTextLine;
friend struct QScriptLine;
friend class QGLContext;
friend class QWin32PaintEngine;
friend class QAlphaPaintEngine;
friend class QPainterPath;
friend class QTextItemInt;
friend class QPicturePaintEngine;


# 312 "/home/eagle/qt-copy/include/QtGui/qfont.h"
friend  QDataStream &operator<<(QDataStream &, const QFont &);
friend  QDataStream &operator>>(QDataStream &, QFont &);


# 316 "/home/eagle/qt-copy/include/QtGui/qfont.h"
QFontPrivate *d;
uint resolve_mask;
};


inline bool QFont::bold() const
{ return weight() > Normal; }


inline void QFont::setBold(bool enable)
{ setWeight(enable ? Bold : Normal); }

inline bool QFont::italic() const
{
return (style() != StyleNormal);
}

inline void QFont::setItalic(bool b) {
setStyle(b ? StyleItalic : StyleNormal);
}







# 343 "/home/eagle/qt-copy/include/QtGui/qfont.h"
 QDataStream &operator<<(QDataStream &, const QFont &);
 QDataStream &operator>>(QDataStream &, QFont &);



# 348 "/home/eagle/qt-copy/include/QtGui/qfont.h"
 QDebug operator<<(QDebug, const QFont &);


# 351 "/home/eagle/qt-copy/include/QtGui/qfont.h"





# 51 "/home/eagle/qt-copy/include/QtGui/qwidget.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qfontmetrics.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qfont.h"

































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qfontmetrics.h"


# 1 "/home/eagle/qt-copy/include/QtCore/qrect.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qfontmetrics.h"



# 52 "/home/eagle/qt-copy/include/QtGui/qfontmetrics.h"




typedef QtValidLicenseForGuiModule QtGuiModule;





# 62 "/home/eagle/qt-copy/include/QtGui/qfontmetrics.h"
class QTextCodec;
class QRect;


class  QFontMetrics
{
public:
QFontMetrics(const QFont &);
QFontMetrics(const QFont &, QPaintDevice *pd);
QFontMetrics(const QFontMetrics &);
~QFontMetrics();

QFontMetrics &operator=(const QFontMetrics &);

int ascent() const;
int descent() const;
int height() const;
int leading() const;
int lineSpacing() const;
int minLeftBearing() const;
int minRightBearing() const;
int maxWidth() const;

int xHeight() const;
int averageCharWidth() const;

bool inFont(QChar) const;

int leftBearing(QChar) const;
int rightBearing(QChar) const;
int width(const QString &, int len = -1) const;

int width(QChar) const;
int charWidth(const QString &str, int pos) const;

QRect boundingRect(QChar) const;

QRect boundingRect(const QString &text) const;
QRect boundingRect(const QRect &r, int flags, const QString &text, int tabstops=0, int *tabarray=0) const;
inline QRect boundingRect(int x, int y, int w, int h, int flags, const QString &text,
int tabstops=0, int *tabarray=0) const
{ return boundingRect(QRect(x, y, w, h), flags, text, tabstops, tabarray); }
QSize size(int flags, const QString& str, int tabstops=0, int *tabarray=0) const;

QRect tightBoundingRect(const QString &text) const;

QString elidedText(const QString &text, Qt::TextElideMode mode, int width, int flags = 0) const;

int underlinePos() const;
int overlinePos() const;
int strikeOutPos() const;
int lineWidth() const;

bool operator==(const QFontMetrics &other); 
bool operator==(const QFontMetrics &other) const;
inline bool operator !=(const QFontMetrics &other) { return !operator==(other); } 
inline bool operator !=(const QFontMetrics &other) const { return !operator==(other); }










# 129 "/home/eagle/qt-copy/include/QtGui/qfontmetrics.h"
private:



# 133 "/home/eagle/qt-copy/include/QtGui/qfontmetrics.h"
friend class QFontMetricsF;
friend class QStackTextEngine;

QFontPrivate *d;
};


class  QFontMetricsF
{
public:
QFontMetricsF(const QFont &);
QFontMetricsF(const QFont &, QPaintDevice *pd);
QFontMetricsF(const QFontMetrics &);
QFontMetricsF(const QFontMetricsF &);
~QFontMetricsF();

QFontMetricsF &operator=(const QFontMetricsF &);
QFontMetricsF &operator=(const QFontMetrics &);

qreal ascent() const;
qreal descent() const;
qreal height() const;
qreal leading() const;
qreal lineSpacing() const;
qreal minLeftBearing() const;
qreal minRightBearing() const;
qreal maxWidth() const;

qreal xHeight() const;
qreal averageCharWidth() const;

bool inFont(QChar) const;

qreal leftBearing(QChar) const;
qreal rightBearing(QChar) const;
qreal width(const QString &string) const;

qreal width(QChar) const;

QRectF boundingRect(const QString &string) const;
QRectF boundingRect(QChar) const;
QRectF boundingRect(const QRectF &r, int flags, const QString& string, int tabstops=0, int *tabarray=0) const;
QSizeF size(int flags, const QString& str, int tabstops=0, int *tabarray=0) const;

QRectF tightBoundingRect(const QString &text) const;

QString elidedText(const QString &text, Qt::TextElideMode mode, qreal width, int flags = 0) const;

qreal underlinePos() const;
qreal overlinePos() const;
qreal strikeOutPos() const;
qreal lineWidth() const;

bool operator==(const QFontMetricsF &other); 
bool operator==(const QFontMetricsF &other) const;
inline bool operator !=(const QFontMetricsF &other) { return !operator==(other); } 
inline bool operator !=(const QFontMetricsF &other) const { return !operator==(other); }

private:
QFontPrivate *d;
};






# 52 "/home/eagle/qt-copy/include/QtGui/qwidget.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qfontinfo.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qfont.h"

































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qfontinfo.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qfontinfo.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class  QFontInfo
{
public:
QFontInfo(const QFont &);
QFontInfo(const QFontInfo &);
~QFontInfo();

QFontInfo &operator=(const QFontInfo &);

QString family() const;
int pixelSize() const;
int pointSize() const;
qreal pointSizeF() const;
bool italic() const;
QFont::Style style() const;
int weight() const;
inline bool bold() const { return weight() > QFont::Normal; }
bool underline() const;
bool overline() const;
bool strikeOut() const;
bool fixedPitch() const;
QFont::StyleHint styleHint() const;
bool rawMode() const;

bool exactMatch() const;

private:
QFontPrivate *d;
};






# 53 "/home/eagle/qt-copy/include/QtGui/qwidget.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qsizepolicy.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qsizepolicy.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qsizepolicy.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QVariant;

class  QSizePolicy
{

Q_ENUMS(Policy)

private:
enum SizePolicyMasks {
HSize = 4,
HMask = 0x0f,
VMask = HMask << HSize,
CTShift = 9,
CTSize = 5,
CTMask = ((0x1 << CTSize) - 1) << CTShift,
UnusedShift = CTShift + CTSize,
UnusedSize = 2
};

public:
enum PolicyFlag {
GrowFlag = 1,
ExpandFlag = 2,
ShrinkFlag = 4,
IgnoreFlag = 8
};

enum Policy {
Fixed = 0,
Minimum = GrowFlag,
Maximum = ShrinkFlag,
Preferred = GrowFlag | ShrinkFlag,
MinimumExpanding = GrowFlag | ExpandFlag,
Expanding = GrowFlag | ShrinkFlag | ExpandFlag,
Ignored = ShrinkFlag | GrowFlag | IgnoreFlag
};

enum ControlType {
DefaultType = 0x00000001,
ButtonBox = 0x00000002,
CheckBox = 0x00000004,
ComboBox = 0x00000008,
Frame = 0x00000010,
GroupBox = 0x00000020,
Label = 0x00000040,
Line = 0x00000080,
LineEdit = 0x00000100,
PushButton = 0x00000200,
RadioButton = 0x00000400,
Slider = 0x00000800,
SpinBox = 0x00001000,
TabWidget = 0x00002000,
ToolButton = 0x00004000
};
typedef QFlags<ControlType> ControlTypes;

QSizePolicy() : data(0) { }


QSizePolicy(Policy horizontal, Policy vertical)
: data(horizontal | (vertical << HSize)) { }
QSizePolicy(Policy horizontal, Policy vertical, ControlType type)
: data(horizontal | (vertical << HSize)) { setControlType(type); }

Policy horizontalPolicy() const { return static_cast<Policy>(data & HMask); }
Policy verticalPolicy() const { return static_cast<Policy>((data & VMask) >> HSize); }
ControlType controlType() const;

void setHorizontalPolicy(Policy d) { data = (data & ~HMask) | d; }
void setVerticalPolicy(Policy d) { data = (data & ~(HMask << HSize)) | (d << HSize); }
void setControlType(ControlType type);

Qt::Orientations expandingDirections() const {
Qt::Orientations result;
if (verticalPolicy() & ExpandFlag)
result |= Qt::Vertical;
if (horizontalPolicy() & ExpandFlag)
result |= Qt::Horizontal;
return result;
}

void setHeightForWidth(bool b) { data = b ? (data | (1 << 2*HSize)) : (data & ~(1 << 2*HSize)); }
bool hasHeightForWidth() const { return data & (1 << 2*HSize); }

bool operator==(const QSizePolicy& s) const { return data == s.data; }
bool operator!=(const QSizePolicy& s) const { return data != s.data; }
operator QVariant() const; 

int horizontalStretch() const { return data >> 24; }
int verticalStretch() const { return (data >> 16) & 0xff; }
void setHorizontalStretch(uchar stretchFactor) { data = (data&0x00ffffff) | (uint(stretchFactor)<<24); }
void setVerticalStretch(uchar stretchFactor) { data = (data&0xff00ffff) | (uint(stretchFactor)<<16); }

void transpose();















































# 196 "/home/eagle/qt-copy/include/QtGui/qsizepolicy.h"
private:

# 198 "/home/eagle/qt-copy/include/QtGui/qsizepolicy.h"
friend  QDataStream &operator<<(QDataStream &, const QSizePolicy &);
friend  QDataStream &operator>>(QDataStream &, QSizePolicy &);

# 201 "/home/eagle/qt-copy/include/QtGui/qsizepolicy.h"
QSizePolicy(int i) : data(i) { }

quint32 data;
};

inline QFlags<QSizePolicy::ControlTypes::enum_type> operator|(QSizePolicy::ControlTypes::enum_type f1, QSizePolicy::ControlTypes::enum_type f2) { return QFlags<QSizePolicy::ControlTypes::enum_type>(f1) | f2; } inline QFlags<QSizePolicy::ControlTypes::enum_type> operator|(QSizePolicy::ControlTypes::enum_type f1, QFlags<QSizePolicy::ControlTypes::enum_type> f2) { return f2 | f1; }


 QDataStream &operator<<(QDataStream &, const QSizePolicy &);
 QDataStream &operator>>(QDataStream &, QSizePolicy &);

inline void QSizePolicy::transpose() {
Policy hData = horizontalPolicy();
Policy vData = verticalPolicy();
uchar hStretch = horizontalStretch();
uchar vStretch = verticalStretch();
setHorizontalPolicy(vData);
setVerticalPolicy(hData);
setHorizontalStretch(vStretch);
setVerticalStretch(hStretch);
}






# 54 "/home/eagle/qt-copy/include/QtGui/qwidget.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qregion.h"





















































































































































































































# 55 "/home/eagle/qt-copy/include/QtGui/qwidget.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qbrush.h"

























































































































































































































































































































# 56 "/home/eagle/qt-copy/include/QtGui/qwidget.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qcursor.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qpoint.h"






































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qcursor.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qwindowdefs.h"























































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qcursor.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qcursor.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QVariant;




















# 77 "/home/eagle/qt-copy/include/QtGui/qcursor.h"
struct QCursorData;
class QBitmap;
class QPixmap;





# 85 "/home/eagle/qt-copy/include/QtGui/qcursor.h"
class  QCursor
{
public:
QCursor();
QCursor(Qt::CursorShape shape);
QCursor(const QBitmap &bitmap, const QBitmap &mask, int hotX=-1, int hotY=-1);
QCursor(const QPixmap &pixmap, int hotX=-1, int hotY=-1);
QCursor(const QCursor &cursor);
~QCursor();
QCursor &operator=(const QCursor &cursor);
operator QVariant() const;

Qt::CursorShape shape() const;
void setShape(Qt::CursorShape newShape);

const QBitmap *bitmap() const;
const QBitmap *mask() const;
QPixmap pixmap() const;
QPoint hotSpot() const;

static QPoint pos();
static void setPos(int x, int y);
inline static void setPos(const QPoint &p) { setPos(p.x(), p.y()); }






















# 130 "/home/eagle/qt-copy/include/QtGui/qcursor.h"
private:
QCursorData *d;



# 135 "/home/eagle/qt-copy/include/QtGui/qcursor.h"
};













# 149 "/home/eagle/qt-copy/include/QtGui/qcursor.h"




# 153 "/home/eagle/qt-copy/include/QtGui/qcursor.h"
 QDataStream &operator<<(QDataStream &outS, const QCursor &cursor);
 QDataStream &operator>>(QDataStream &inS, QCursor &cursor);



# 158 "/home/eagle/qt-copy/include/QtGui/qcursor.h"





# 57 "/home/eagle/qt-copy/include/QtGui/qwidget.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qkeysequence.h"




































































































































































































































# 58 "/home/eagle/qt-copy/include/QtGui/qwidget.h"






# 64 "/home/eagle/qt-copy/include/QtGui/qwidget.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QLayout;
class QWSRegionManager;
class QStyle;
class QAction;
class QVariant;

class QActionEvent;
class QMouseEvent;
class QWheelEvent;
class QHoverEvent;
class QKeyEvent;
class QFocusEvent;
class QPaintEvent;
class QMoveEvent;
class QResizeEvent;
class QCloseEvent;
class QContextMenuEvent;
class QInputMethodEvent;
class QTabletEvent;
class QDragEnterEvent;
class QDragMoveEvent;
class QDragLeaveEvent;
class QDropEvent;
class QShowEvent;
class QHideEvent;
class QInputContext;
class QIcon;
class QWindowSurface;
class QLocale;




# 103 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
class QWidgetData
{
public:
WId winid;
uint widget_attributes;
Qt::WindowFlags window_flags;
uint window_state : 4;
uint focus_policy : 4;
uint sizehint_forced :1;
uint is_closing :1;
uint in_show : 1;
uint in_set_window_state : 1;
mutable uint fstrut_dirty : 1;
uint context_menu_policy : 3;
uint window_modality : 2;
uint in_destructor : 1;
uint unused : 13;
QRect crect;
mutable QPalette pal;
QFont fnt;














# 137 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
QRect wrect;
};

class QWidgetPrivate;

class  QWidget : public QObject, public QPaintDevice
{
Q_OBJECT
inline QWidgetPrivate* d_func() { return reinterpret_cast<QWidgetPrivate *>(d_ptr); } inline const QWidgetPrivate* d_func() const { return reinterpret_cast<const QWidgetPrivate *>(d_ptr); } friend class QWidgetPrivate;

Q_PROPERTY(bool modal READ isModal)
Q_PROPERTY(Qt::WindowModality windowModality READ windowModality WRITE setWindowModality)
Q_PROPERTY(bool enabled READ isEnabled WRITE setEnabled)
Q_PROPERTY(QRect geometry READ geometry WRITE setGeometry)
Q_PROPERTY(QRect frameGeometry READ frameGeometry)
Q_PROPERTY(QRect normalGeometry READ normalGeometry)
Q_PROPERTY(int x READ x)
Q_PROPERTY(int y READ y)
Q_PROPERTY(QPoint pos READ pos WRITE move DESIGNABLE false STORED false)
Q_PROPERTY(QSize frameSize READ frameSize)
Q_PROPERTY(QSize size READ size WRITE resize DESIGNABLE false STORED false)
Q_PROPERTY(int width READ width)
Q_PROPERTY(int height READ height)
Q_PROPERTY(QRect rect READ rect)
Q_PROPERTY(QRect childrenRect READ childrenRect)
Q_PROPERTY(QRegion childrenRegion READ childrenRegion)
Q_PROPERTY(QSizePolicy sizePolicy READ sizePolicy WRITE setSizePolicy)
Q_PROPERTY(QSize minimumSize READ minimumSize WRITE setMinimumSize)
Q_PROPERTY(QSize maximumSize READ maximumSize WRITE setMaximumSize)
Q_PROPERTY(int minimumWidth READ minimumWidth WRITE setMinimumWidth STORED false DESIGNABLE false)
Q_PROPERTY(int minimumHeight READ minimumHeight WRITE setMinimumHeight STORED false DESIGNABLE false)
Q_PROPERTY(int maximumWidth READ maximumWidth WRITE setMaximumWidth STORED false DESIGNABLE false)
Q_PROPERTY(int maximumHeight READ maximumHeight WRITE setMaximumHeight STORED false DESIGNABLE false)
Q_PROPERTY(QSize sizeIncrement READ sizeIncrement WRITE setSizeIncrement)
Q_PROPERTY(QSize baseSize READ baseSize WRITE setBaseSize)
Q_PROPERTY(QPalette palette READ palette WRITE setPalette)
Q_PROPERTY(QFont font READ font WRITE setFont)

# 175 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
Q_PROPERTY(QCursor cursor READ cursor WRITE setCursor RESET unsetCursor)

# 177 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
Q_PROPERTY(bool mouseTracking READ hasMouseTracking WRITE setMouseTracking)
Q_PROPERTY(bool isActiveWindow READ isActiveWindow)
Q_PROPERTY(Qt::FocusPolicy focusPolicy READ focusPolicy WRITE setFocusPolicy)
Q_PROPERTY(bool focus READ hasFocus)
Q_PROPERTY(Qt::ContextMenuPolicy contextMenuPolicy READ contextMenuPolicy WRITE setContextMenuPolicy)
Q_PROPERTY(bool updatesEnabled READ updatesEnabled WRITE setUpdatesEnabled DESIGNABLE false)
Q_PROPERTY(bool visible READ isVisible WRITE setVisible DESIGNABLE false)
Q_PROPERTY(bool minimized READ isMinimized)
Q_PROPERTY(bool maximized READ isMaximized)
Q_PROPERTY(bool fullScreen READ isFullScreen)
Q_PROPERTY(QSize sizeHint READ sizeHint)
Q_PROPERTY(QSize minimumSizeHint READ minimumSizeHint)
Q_PROPERTY(bool acceptDrops READ acceptDrops WRITE setAcceptDrops)
Q_PROPERTY(QString windowTitle READ windowTitle WRITE setWindowTitle DESIGNABLE isWindow)
Q_PROPERTY(QIcon windowIcon READ windowIcon WRITE setWindowIcon DESIGNABLE isWindow)
Q_PROPERTY(QString windowIconText READ windowIconText WRITE setWindowIconText DESIGNABLE isWindow)
Q_PROPERTY(double windowOpacity READ windowOpacity WRITE setWindowOpacity DESIGNABLE isWindow)
Q_PROPERTY(bool windowModified READ isWindowModified WRITE setWindowModified DESIGNABLE isWindow)

# 196 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
Q_PROPERTY(QString toolTip READ toolTip WRITE setToolTip)


# 199 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
Q_PROPERTY(QString statusTip READ statusTip WRITE setStatusTip)


# 202 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
Q_PROPERTY(QString whatsThis READ whatsThis WRITE setWhatsThis)


# 205 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
Q_PROPERTY(QString accessibleName READ accessibleName WRITE setAccessibleName)
Q_PROPERTY(QString accessibleDescription READ accessibleDescription WRITE setAccessibleDescription)

# 208 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
Q_PROPERTY(Qt::LayoutDirection layoutDirection READ layoutDirection WRITE setLayoutDirection RESET unsetLayoutDirection)

Q_PROPERTY(bool autoFillBackground READ autoFillBackground WRITE setAutoFillBackground)

# 212 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
Q_PROPERTY(QString styleSheet READ styleSheet WRITE setStyleSheet)

# 214 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
Q_PROPERTY(QLocale locale READ locale WRITE setLocale RESET unsetLocale)
Q_PROPERTY(QString windowFilePath READ windowFilePath WRITE setWindowFilePath DESIGNABLE isWindow)

public:
enum RenderFlag {
DrawWindowBackground = 0x1,
DrawChildren = 0x2,
IgnoreMask = 0x4
};
typedef QFlags<RenderFlag> RenderFlags;

explicit QWidget(QWidget* parent = 0, Qt::WindowFlags f = 0);



# 229 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
~QWidget();

int devType() const;

WId winId() const;
void createWinId(); 
inline WId internalWinId() const { return data->winid; }
WId effectiveWinId() const;


QStyle *style() const;
void setStyle(QStyle *);


bool isTopLevel() const;
bool isWindow() const;

bool isModal() const;
Qt::WindowModality windowModality() const;
void setWindowModality(Qt::WindowModality windowModality);

bool isEnabled() const;
bool isEnabledTo(QWidget*) const;
bool isEnabledToTLW() const;

public slots:
void setEnabled(bool);
void setDisabled(bool);
void setWindowModified(bool);



public:
QRect frameGeometry() const;
const QRect &geometry() const;
QRect normalGeometry() const;

int x() const;
int y() const;
QPoint pos() const;
QSize frameSize() const;
QSize size() const;
inline int width() const;
inline int height() const;
inline QRect rect() const;
QRect childrenRect() const;
QRegion childrenRegion() const;

QSize minimumSize() const;
QSize maximumSize() const;
int minimumWidth() const;
int minimumHeight() const;
int maximumWidth() const;
int maximumHeight() const;
void setMinimumSize(const QSize &);
void setMinimumSize(int minw, int minh);
void setMaximumSize(const QSize &);
void setMaximumSize(int maxw, int maxh);
void setMinimumWidth(int minw);
void setMinimumHeight(int minh);
void setMaximumWidth(int maxw);
void setMaximumHeight(int maxh);

QSize sizeIncrement() const;
void setSizeIncrement(const QSize &);
void setSizeIncrement(int w, int h);
QSize baseSize() const;
void setBaseSize(const QSize &);
void setBaseSize(int basew, int baseh);

void setFixedSize(const QSize &);
void setFixedSize(int w, int h);
void setFixedWidth(int w);
void setFixedHeight(int h);



QPoint mapToGlobal(const QPoint &) const;
QPoint mapFromGlobal(const QPoint &) const;
QPoint mapToParent(const QPoint &) const;
QPoint mapFromParent(const QPoint &) const;
QPoint mapTo(QWidget *, const QPoint &) const;
QPoint mapFrom(QWidget *, const QPoint &) const;

QWidget *window() const;
QWidget *nativeParentWidget() const;
inline QWidget *topLevelWidget() const { return window(); }


const QPalette &palette() const;
void setPalette(const QPalette &);

void setBackgroundRole(QPalette::ColorRole);
QPalette::ColorRole backgroundRole() const;

void setForegroundRole(QPalette::ColorRole);
QPalette::ColorRole foregroundRole() const;

const QFont &font() const;
void setFont(const QFont &);
QFontMetrics fontMetrics() const;
QFontInfo fontInfo() const;


# 333 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
QCursor cursor() const;
void setCursor(const QCursor &);
void unsetCursor();


# 338 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
void setMouseTracking(bool enable);
bool hasMouseTracking() const;
bool underMouse() const;

void setMask(const QBitmap &);
void setMask(const QRegion &);
QRegion mask() const;
void clearMask();

void render(QPaintDevice *target, const QPoint &targetOffset = QPoint(),
const QRegion &sourceRegion = QRegion(),
RenderFlags renderFlags = RenderFlags(DrawWindowBackground | DrawChildren));

void render(QPainter *painter, const QPoint &targetOffset = QPoint(),
const QRegion &sourceRegion = QRegion(),
RenderFlags renderFlags = RenderFlags(DrawWindowBackground | DrawChildren));

public slots:
void setWindowTitle(const QString &);

# 358 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
void setStyleSheet(const QString& styleSheet);

# 360 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
public:

# 362 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
QString styleSheet() const;

# 364 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
QString windowTitle() const;
void setWindowIcon(const QIcon &icon);
QIcon windowIcon() const;
void setWindowIconText(const QString &);
QString windowIconText() const;
void setWindowRole(const QString &);
QString windowRole() const;
void setWindowFilePath(const QString &filePath);
QString windowFilePath() const;

void setWindowOpacity(qreal level);
qreal windowOpacity() const;

bool isWindowModified() const;

# 379 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
void setToolTip(const QString &);
QString toolTip() const;


# 383 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
void setStatusTip(const QString &);
QString statusTip() const;


# 387 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
void setWhatsThis(const QString &);
QString whatsThis() const;


# 391 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
QString accessibleName() const;
void setAccessibleName(const QString &name);
QString accessibleDescription() const;
void setAccessibleDescription(const QString &description);


# 397 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
void setLayoutDirection(Qt::LayoutDirection direction);
Qt::LayoutDirection layoutDirection() const;
void unsetLayoutDirection();

void setLocale(const QLocale &locale);
QLocale locale() const;
void unsetLocale();

inline bool isRightToLeft() const { return layoutDirection() == Qt::RightToLeft; }
inline bool isLeftToRight() const { return layoutDirection() == Qt::LeftToRight; }

public slots:
inline void setFocus() { setFocus(Qt::OtherFocusReason); }

public:
bool isActiveWindow() const;
void activateWindow();
void clearFocus();

void setFocus(Qt::FocusReason reason);
Qt::FocusPolicy focusPolicy() const;
void setFocusPolicy(Qt::FocusPolicy policy);
bool hasFocus() const;
static void setTabOrder(QWidget *, QWidget *);
void setFocusProxy(QWidget *);
QWidget *focusProxy() const;
Qt::ContextMenuPolicy contextMenuPolicy() const;
void setContextMenuPolicy(Qt::ContextMenuPolicy policy);


void grabMouse();

# 429 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
void grabMouse(const QCursor &);

# 431 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
void releaseMouse();
void grabKeyboard();
void releaseKeyboard();

# 435 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
int grabShortcut(const QKeySequence &key, Qt::ShortcutContext context = Qt::WindowShortcut);
void releaseShortcut(int id);
void setShortcutEnabled(int id, bool enable = true);
void setShortcutAutoRepeat(int id, bool enable = true);

# 440 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
static QWidget *mouseGrabber();
static QWidget *keyboardGrabber();


inline bool updatesEnabled() const;
void setUpdatesEnabled(bool enable);





# 451 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
public slots:
void update();
void repaint();

public:
inline void update(int x, int y, int w, int h);
void update(const QRect&);
void update(const QRegion&);

void repaint(int x, int y, int w, int h);
void repaint(const QRect &);
void repaint(const QRegion &);

public slots:


virtual void setVisible(bool visible);
inline void setHidden(bool hidden) { setVisible(!hidden); }

# 470 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
inline void show() { setVisible(true); }



# 474 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
inline void hide() { setVisible(false); }
inline  void setShown(bool shown) { setVisible(shown); }

void showMinimized();
void showMaximized();
void showFullScreen();
void showNormal();

bool close();
void raise();
void lower();

public:
void stackUnder(QWidget*);
void move(int x, int y);
void move(const QPoint &);
void resize(int w, int h);
void resize(const QSize &);
inline void setGeometry(int x, int y, int w, int h);
void setGeometry(const QRect &);
QByteArray saveGeometry() const;
bool restoreGeometry(const QByteArray &geometry);
void adjustSize();
bool isVisible() const;
bool isVisibleTo(QWidget*) const;

inline bool isHidden() const;

bool isMinimized() const;
bool isMaximized() const;
bool isFullScreen() const;

Qt::WindowStates windowState() const;
void setWindowState(Qt::WindowStates state);
void overrideWindowState(Qt::WindowStates state);

virtual QSize sizeHint() const;
virtual QSize minimumSizeHint() const;

QSizePolicy sizePolicy() const;
void setSizePolicy(QSizePolicy);
inline void setSizePolicy(QSizePolicy::Policy horizontal, QSizePolicy::Policy vertical);
virtual int heightForWidth(int) const;

QRegion visibleRegion() const;

void setContentsMargins(int left, int top, int right, int bottom);
void getContentsMargins(int *left, int *top, int *right, int *bottom) const;
QRect contentsRect() const;

public:
QLayout *layout() const;
void setLayout(QLayout *);
void updateGeometry();

void setParent(QWidget *parent);
void setParent(QWidget *parent, Qt::WindowFlags f);

void scroll(int dx, int dy);
void scroll(int dx, int dy, const QRect&);



QWidget *focusWidget() const;
QWidget *nextInFocusChain() const;


bool acceptDrops() const;
void setAcceptDrops(bool on);


# 545 "/home/eagle/qt-copy/include/QtGui/qwidget.h"

void addAction(QAction *action);
void addActions(QList<QAction*> actions);
void insertAction(QAction *before, QAction *action);
void insertActions(QAction *before, QList<QAction*> actions);
void removeAction(QAction *action);
QList<QAction*> actions() const;


# 554 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
QWidget *parentWidget() const;

void setWindowFlags(Qt::WindowFlags type);
inline Qt::WindowFlags windowFlags() const;
void overrideWindowFlags(Qt::WindowFlags type);

inline Qt::WindowType windowType() const;

static QWidget *find(WId);



# 566 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
inline QWidget *childAt(int x, int y) const;
QWidget *childAt(const QPoint &p) const;















# 583 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
Qt::HANDLE handle() const;


# 586 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
void setAttribute(Qt::WidgetAttribute, bool on = true);
inline bool testAttribute(Qt::WidgetAttribute) const;

QPaintEngine *paintEngine() const;

void ensurePolished() const;

QInputContext *inputContext();
void setInputContext(QInputContext *);

bool isAncestorOf(const QWidget *child) const;






# 603 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
bool autoFillBackground() const;
void setAutoFillBackground(bool enabled);

void setWindowSurface(QWindowSurface *surface);
QWindowSurface *windowSurface() const;

signals:
void customContextMenuRequested(const QPoint &pos);

protected:

bool event(QEvent *);
virtual void mousePressEvent(QMouseEvent *);
virtual void mouseReleaseEvent(QMouseEvent *);
virtual void mouseDoubleClickEvent(QMouseEvent *);
virtual void mouseMoveEvent(QMouseEvent *);

# 620 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
virtual void wheelEvent(QWheelEvent *);

# 622 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
virtual void keyPressEvent(QKeyEvent *);
virtual void keyReleaseEvent(QKeyEvent *);
virtual void focusInEvent(QFocusEvent *);
virtual void focusOutEvent(QFocusEvent *);
virtual void enterEvent(QEvent *);
virtual void leaveEvent(QEvent *);
virtual void paintEvent(QPaintEvent *);
virtual void moveEvent(QMoveEvent *);
virtual void resizeEvent(QResizeEvent *);
virtual void closeEvent(QCloseEvent *);
virtual void contextMenuEvent(QContextMenuEvent *);

# 634 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
virtual void tabletEvent(QTabletEvent *);


# 637 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
virtual void actionEvent(QActionEvent *);



# 641 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
virtual void dragEnterEvent(QDragEnterEvent *);
virtual void dragMoveEvent(QDragMoveEvent *);
virtual void dragLeaveEvent(QDragLeaveEvent *);
virtual void dropEvent(QDropEvent *);


# 647 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
virtual void showEvent(QShowEvent *);
virtual void hideEvent(QHideEvent *);














# 663 "/home/eagle/qt-copy/include/QtGui/qwidget.h"

virtual void changeEvent(QEvent *);

int metric(PaintDeviceMetric) const;

virtual void inputMethodEvent(QInputMethodEvent *);
public:
virtual QVariant inputMethodQuery(Qt::InputMethodQuery) const;
protected:
void resetInputContext();
protected slots:
void updateMicroFocus();
protected:

void create(WId = 0, bool initializeWindow = true,
bool destroyOldWindow = true);
void destroy(bool destroyWindow = true,
bool destroySubWindows = true);

virtual bool focusNextPrevChild(bool next);
inline bool focusNextChild() { return focusNextPrevChild(true); }
inline bool focusPreviousChild() { return focusNextPrevChild(false); }

protected:
QWidget(QWidgetPrivate &d, QWidget* parent, Qt::WindowFlags f);
private:

bool testAttribute_helper(Qt::WidgetAttribute) const;

friend void qt_syncBackingStore(QWidget *);
friend void qt_syncBackingStore(QRegion, QWidget *);
friend void qt_syncBackingStore(QRegion, QWidget *, bool);
friend QRegion qt_dirtyRegion(QWidget *, bool);
friend QWindowSurface *qt_default_window_surface(QWidget*);

friend class QBackingStoreDevice;
friend class QWidgetBackingStore;
friend class QApplication;
friend class QApplicationPrivate;
friend class QBaseApplication;
friend class QPainter;
friend class QPainterPrivate;
friend class QPixmap; 
friend class QFontMetrics;
friend class QFontInfo;
friend class QETWidget;
friend class QLayout;
friend class QWidgetItem;
friend class QWidgetItemV2;
friend class QGLContext;
friend class QGLWidget;
friend class QX11PaintEngine;
friend class QWin32PaintEngine;
friend class QShortcutPrivate;
friend class QWindowSurface;
friend class QD3DWindowSurface;
friend class QGraphicsProxyWidget;
friend class QGraphicsProxyWidgetPrivate;
friend class QStyleSheetStyle;
























# 746 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
friend  QWidgetData *qt_qwidget_data(QWidget *widget);
friend  QWidgetPrivate *qt_widget_private(QWidget *widget);

private:
QWidget(const QWidget &); QWidget &operator=(const QWidget &);


QWidgetData *data;
































































































# 850 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
protected:
virtual void styleChange(QStyle&); 
virtual void enabledChange(bool); 
virtual void paletteChange(const QPalette &); 
virtual void fontChange(const QFont &); 
virtual void windowActivationChange(bool); 
virtual void languageChange(); 
};

inline QFlags<QWidget::RenderFlags::enum_type> operator|(QWidget::RenderFlags::enum_type f1, QWidget::RenderFlags::enum_type f2) { return QFlags<QWidget::RenderFlags::enum_type>(f1) | f2; } inline QFlags<QWidget::RenderFlags::enum_type> operator|(QWidget::RenderFlags::enum_type f1, QFlags<QWidget::RenderFlags::enum_type> f2) { return f2 | f1; }








# 868 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
template <> inline QWidget *qobject_cast<QWidget*>(QObject *o)
{
if (!o || !o->isWidgetType()) return 0;
return static_cast<QWidget*>(o);
}
template <> inline const QWidget *qobject_cast<const QWidget*>(const QObject *o)
{
if (!o || !o->isWidgetType()) return 0;
return static_cast<const QWidget*>(o);
}


# 880 "/home/eagle/qt-copy/include/QtGui/qwidget.h"
inline QWidget *QWidget::childAt(int ax, int ay) const
{ return childAt(QPoint(ax, ay)); }

inline Qt::WindowType QWidget::windowType() const
{ return static_cast<Qt::WindowType>(int(data->window_flags & Qt::WindowType_Mask)); }
inline Qt::WindowFlags QWidget::windowFlags() const
{ return data->window_flags; }

inline bool QWidget::isTopLevel() const
{ return (windowType() & Qt::Window); }

inline bool QWidget::isWindow() const
{ return (windowType() & Qt::Window); }

inline bool QWidget::isEnabled() const
{ return !testAttribute(Qt::WA_Disabled); }

inline bool QWidget::isModal() const
{ return data->window_modality != Qt::NonModal; }

inline bool QWidget::isEnabledToTLW() const
{ return isEnabled(); }

inline int QWidget::minimumWidth() const
{ return minimumSize().width(); }

inline int QWidget::minimumHeight() const
{ return minimumSize().height(); }

inline int QWidget::maximumWidth() const
{ return maximumSize().width(); }

inline int QWidget::maximumHeight() const
{ return maximumSize().height(); }

inline void QWidget::setMinimumSize(const QSize &s)
{ setMinimumSize(s.width(),s.height()); }

inline void QWidget::setMaximumSize(const QSize &s)
{ setMaximumSize(s.width(),s.height()); }

inline void QWidget::setSizeIncrement(const QSize &s)
{ setSizeIncrement(s.width(),s.height()); }

inline void QWidget::setBaseSize(const QSize &s)
{ setBaseSize(s.width(),s.height()); }

inline const QFont &QWidget::font() const
{ return data->fnt; }

inline QFontMetrics QWidget::fontMetrics() const
{ return QFontMetrics(data->fnt); }

inline QFontInfo QWidget::fontInfo() const
{ return QFontInfo(data->fnt); }

inline void QWidget::setMouseTracking(bool enable)
{ setAttribute(Qt::WA_MouseTracking, enable); }

inline bool QWidget::hasMouseTracking() const
{ return testAttribute(Qt::WA_MouseTracking); }

inline bool QWidget::underMouse() const
{ return testAttribute(Qt::WA_UnderMouse); }

inline bool QWidget::updatesEnabled() const
{ return !testAttribute(Qt::WA_UpdatesDisabled); }

inline void QWidget::update(int ax, int ay, int aw, int ah)
{ update(QRect(ax, ay, aw, ah)); }

inline bool QWidget::isVisible() const
{ return testAttribute(Qt::WA_WState_Visible); }

inline bool QWidget::isHidden() const
{ return testAttribute(Qt::WA_WState_Hidden); }

inline void QWidget::move(int ax, int ay)
{ move(QPoint(ax, ay)); }

inline void QWidget::resize(int w, int h)
{ resize(QSize(w, h)); }

inline void QWidget::setGeometry(int ax, int ay, int aw, int ah)
{ setGeometry(QRect(ax, ay, aw, ah)); }

inline QRect QWidget::rect() const
{ return QRect(0,0,data->crect.width(),data->crect.height()); }

inline const QRect &QWidget::geometry() const
{ return data->crect; }

inline QSize QWidget::size() const
{ return data->crect.size(); }

inline int QWidget::width() const
{ return data->crect.width(); }

inline int QWidget::height() const
{ return data->crect.height(); }

inline QWidget *QWidget::parentWidget() const
{ return static_cast<QWidget *>(QObject::parent()); }

inline void QWidget::setSizePolicy(QSizePolicy::Policy hor, QSizePolicy::Policy ver)
{ setSizePolicy(QSizePolicy(hor, ver)); }

inline bool QWidget::testAttribute(Qt::WidgetAttribute attribute) const
{
if (attribute < int(8*sizeof(uint)))
return data->widget_attributes & (1<<attribute);
return testAttribute_helper(attribute);
}










































# 1035 "/home/eagle/qt-copy/include/QtGui/qwidget.h"





# 47 "/home/eagle/qt-copy/include/QtGui/qdialog.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qdialog.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QPushButton;
class QDialogPrivate;

class  QDialog : public QWidget
{
Q_OBJECT
friend class QPushButton;

Q_PROPERTY(bool sizeGripEnabled READ isSizeGripEnabled WRITE setSizeGripEnabled)
Q_PROPERTY(bool modal READ isModal WRITE setModal)

public:
explicit QDialog(QWidget *parent = 0, Qt::WindowFlags f = 0);




# 72 "/home/eagle/qt-copy/include/QtGui/qdialog.h"
~QDialog();

enum DialogCode { Rejected, Accepted };

int result() const;

void setVisible(bool visible);

void setOrientation(Qt::Orientation orientation);
Qt::Orientation orientation() const;

void setExtension(QWidget* extension);
QWidget* extension() const;

QSize sizeHint() const;
QSize minimumSizeHint() const;

void setSizeGripEnabled(bool);
bool isSizeGripEnabled() const;

void setModal(bool modal);
void setResult(int r);

signals:
void finished(int result);
void accepted();
void rejected();

public slots:
int exec();
virtual void done(int);
virtual void accept();
virtual void reject();

void showExtension(bool);

protected:
QDialog(QDialogPrivate &, QWidget *parent, Qt::WindowFlags f = 0);




# 114 "/home/eagle/qt-copy/include/QtGui/qdialog.h"
void keyPressEvent(QKeyEvent *);
void closeEvent(QCloseEvent *);
void showEvent(QShowEvent *);
void resizeEvent(QResizeEvent *);
void contextMenuEvent(QContextMenuEvent *);
bool eventFilter(QObject *, QEvent *);
void adjustPosition(QWidget*);

private:
inline QDialogPrivate* d_func() { return reinterpret_cast<QDialogPrivate *>(d_ptr); } inline const QDialogPrivate* d_func() const { return reinterpret_cast<const QDialogPrivate *>(d_ptr); } friend class QDialogPrivate;
QDialog(const QDialog &); QDialog &operator=(const QDialog &);




# 129 "/home/eagle/qt-copy/include/QtGui/qdialog.h"
};






# 47 "/home/eagle/qt-copy/include/QtGui/qabstractpagesetupdialog.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qabstractpagesetupdialog.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qabstractpagesetupdialog.h"
class QAbstractPageSetupDialogPrivate;
class QPrinter;


class  QAbstractPageSetupDialog : public QDialog
{
inline QAbstractPageSetupDialogPrivate* d_func() { return reinterpret_cast<QAbstractPageSetupDialogPrivate *>(d_ptr); } inline const QAbstractPageSetupDialogPrivate* d_func() const { return reinterpret_cast<const QAbstractPageSetupDialogPrivate *>(d_ptr); } friend class QAbstractPageSetupDialogPrivate;
Q_OBJECT

public:
explicit QAbstractPageSetupDialog(QPrinter *printer, QWidget *parent = 0);
QAbstractPageSetupDialog(QAbstractPageSetupDialogPrivate &ptr,
QPrinter *printer, QWidget *parent = 0);

virtual int exec() = 0;

QPrinter *printer();
};



# 78 "/home/eagle/qt-copy/include/QtGui/qabstractpagesetupdialog.h"





# 8 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qabstractprintdialog.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qdialog.h"







































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qabstractprintdialog.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qabstractprintdialog.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qabstractprintdialog.h"
class QAbstractPrintDialogPrivate;
class QPrinter;


class  QAbstractPrintDialog : public QDialog
{
inline QAbstractPrintDialogPrivate* d_func() { return reinterpret_cast<QAbstractPrintDialogPrivate *>(d_ptr); } inline const QAbstractPrintDialogPrivate* d_func() const { return reinterpret_cast<const QAbstractPrintDialogPrivate *>(d_ptr); } friend class QAbstractPrintDialogPrivate;
Q_OBJECT

public:
enum PrintRange {
AllPages,
Selection,
PageRange
};

enum PrintDialogOption {
None = 0x0000,
PrintToFile = 0x0001,
PrintSelection = 0x0002,
PrintPageRange = 0x0004,
PrintShowPageSize = 0x0008,
PrintCollateCopies = 0x0010,
DontUseSheet = 0x0020
};

typedef QFlags<PrintDialogOption> PrintDialogOptions;



# 87 "/home/eagle/qt-copy/include/QtGui/qabstractprintdialog.h"
explicit QAbstractPrintDialog(QPrinter *printer, QWidget *parent = 0);

virtual int exec() = 0;

void addEnabledOption(PrintDialogOption option);
void setEnabledOptions(PrintDialogOptions options);
PrintDialogOptions enabledOptions() const;
bool isOptionEnabled(PrintDialogOption option) const;

void setOptionTabs(const QList<QWidget*> &tabs);

void setPrintRange(PrintRange range);
PrintRange printRange() const;

void setMinMax(int min, int max);
int minPage() const;
int maxPage() const;

void setFromTo(int fromPage, int toPage);
int fromPage() const;
int toPage() const;

QPrinter *printer() const;

protected:
QAbstractPrintDialog(QAbstractPrintDialogPrivate &ptr, QPrinter *printer, QWidget *parent = 0);

private:
QAbstractPrintDialog(const QAbstractPrintDialog &); QAbstractPrintDialog &operator=(const QAbstractPrintDialog &);


# 118 "/home/eagle/qt-copy/include/QtGui/qabstractprintdialog.h"
};

inline QFlags<QAbstractPrintDialog::PrintDialogOptions::enum_type> operator|(QAbstractPrintDialog::PrintDialogOptions::enum_type f1, QAbstractPrintDialog::PrintDialogOptions::enum_type f2) { return QFlags<QAbstractPrintDialog::PrintDialogOptions::enum_type>(f1) | f2; } inline QFlags<QAbstractPrintDialog::PrintDialogOptions::enum_type> operator|(QAbstractPrintDialog::PrintDialogOptions::enum_type f1, QFlags<QAbstractPrintDialog::PrintDialogOptions::enum_type> f2) { return f2 | f1; }



# 124 "/home/eagle/qt-copy/include/QtGui/qabstractprintdialog.h"





# 9 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qcolordialog.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qdialog.h"







































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qcolordialog.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qcolordialog.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qcolordialog.h"
class QColorDialogPrivate;

class  QColorDialog : public QDialog
{
Q_OBJECT
inline QColorDialogPrivate* d_func() { return reinterpret_cast<QColorDialogPrivate *>(d_ptr); } inline const QColorDialogPrivate* d_func() const { return reinterpret_cast<const QColorDialogPrivate *>(d_ptr); } friend class QColorDialogPrivate;

public:
static QColor getColor(const QColor& init = Qt::white, QWidget* parent=0);
static QRgb getRgba(QRgb = 0xffffffff, bool* ok = 0, QWidget* parent=0);

static int customCount();
static QRgb customColor(int);
static void setCustomColor(int, QRgb);
static void setStandardColor(int, QRgb);








# 80 "/home/eagle/qt-copy/include/QtGui/qcolordialog.h"
protected:
void changeEvent(QEvent *e);
private:
~QColorDialog();
explicit QColorDialog(QWidget* parent=0, bool modal=false);

void setColor(const QColor&);
QColor color() const;

bool selectColor(const QColor&);

void setSelectedAlpha(int);
int selectedAlpha() const;

void showCustom(bool=true);

private:
QColorDialog(const QColorDialog &); QColorDialog &operator=(const QColorDialog &);








friend class QColorShower;
};



# 111 "/home/eagle/qt-copy/include/QtGui/qcolordialog.h"





# 10 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qdialog.h"







































































































































# 11 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qerrormessage.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qdialog.h"







































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qerrormessage.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qerrormessage.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qerrormessage.h"
class QErrorMessagePrivate;

class  QErrorMessage: public QDialog
{
Q_OBJECT
inline QErrorMessagePrivate* d_func() { return reinterpret_cast<QErrorMessagePrivate *>(d_ptr); } inline const QErrorMessagePrivate* d_func() const { return reinterpret_cast<const QErrorMessagePrivate *>(d_ptr); } friend class QErrorMessagePrivate;
public:
explicit QErrorMessage(QWidget* parent = 0);
~QErrorMessage();

static QErrorMessage * qtHandler();

public slots:
void showMessage(const QString &message);




# 75 "/home/eagle/qt-copy/include/QtGui/qerrormessage.h"
protected:
void done(int);
void changeEvent(QEvent *e);

private:
QErrorMessage(const QErrorMessage &); QErrorMessage &operator=(const QErrorMessage &);
};



# 85 "/home/eagle/qt-copy/include/QtGui/qerrormessage.h"





# 12 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qfiledialog.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qdir.h"










































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qfiledialog.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qfiledialog.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qdialog.h"







































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qfiledialog.h"


# 51 "/home/eagle/qt-copy/include/QtGui/qfiledialog.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 59 "/home/eagle/qt-copy/include/QtGui/qfiledialog.h"
class QModelIndex;
class QItemSelection;
struct QFileDialogArgs;
class QFileIconProvider;
class QFileDialogPrivate;
class QAbstractItemDelegate;
class QAbstractProxyModel;
class QUrl;

class  QFileDialog : public QDialog
{
Q_OBJECT
Q_PROPERTY(ViewMode viewMode READ viewMode WRITE setViewMode)
Q_PROPERTY(FileMode fileMode READ fileMode WRITE setFileMode)
Q_PROPERTY(AcceptMode acceptMode READ acceptMode WRITE setAcceptMode)
Q_PROPERTY(bool readOnly READ isReadOnly WRITE setReadOnly)
Q_PROPERTY(bool resolveSymlinks READ resolveSymlinks WRITE setResolveSymlinks)
Q_PROPERTY(bool confirmOverwrite READ confirmOverwrite WRITE setConfirmOverwrite)
Q_PROPERTY(QString defaultSuffix READ defaultSuffix WRITE setDefaultSuffix)
Q_PROPERTY(bool nameFilterDetailsVisible READ isNameFilterDetailsVisible WRITE setNameFilterDetailsVisible)
Q_ENUMS(ViewMode FileMode AcceptMode)

public:
enum ViewMode { Detail, List };
enum FileMode { AnyFile, ExistingFile, Directory, ExistingFiles, DirectoryOnly };
enum AcceptMode { AcceptOpen, AcceptSave };
enum DialogLabel { LookIn, FileName, FileType, Accept, Reject };

enum Option {
ShowDirsOnly = 0x01,
DontResolveSymlinks = 0x02,
DontConfirmOverwrite = 0x04,
DontUseSheet = 0x08,
DontUseNativeDialog = 0x10
};
typedef QFlags<Option> Options;

QFileDialog(QWidget *parent, Qt::WindowFlags f);
explicit QFileDialog(QWidget *parent = 0,
const QString &caption = QString(),
const QString &directory = QString(),
const QString &filter = QString());
~QFileDialog();

void setDirectory(const QString &directory);
inline void setDirectory(const QDir &directory);
QDir directory() const;

void selectFile(const QString &filename);
QStringList selectedFiles() const;


# 111 "/home/eagle/qt-copy/include/QtGui/qfiledialog.h"
 void setFilter(const QString &filter);
 void setFilters(const QStringList &filters);
 QStringList filters() const;
 void selectFilter(const QString &filter);
 QString selectedFilter() const;

# 117 "/home/eagle/qt-copy/include/QtGui/qfiledialog.h"
void setNameFilterDetailsVisible(bool enabled);
bool isNameFilterDetailsVisible() const;

void setNameFilter(const QString &filter);
void setNameFilters(const QStringList &filters);
QStringList nameFilters() const;
void selectNameFilter(const QString &filter);
QString selectedNameFilter() const;

QDir::Filters filter() const;
void setFilter(QDir::Filters filters);

void setViewMode(ViewMode mode);
ViewMode viewMode() const;

void setFileMode(FileMode mode);
FileMode fileMode() const;

void setAcceptMode(AcceptMode mode);
AcceptMode acceptMode() const;

void setReadOnly(bool enabled);
bool isReadOnly() const;

void setResolveSymlinks(bool enabled);
bool resolveSymlinks() const;

void setSidebarUrls(const QList<QUrl> &urls);
QList<QUrl> sidebarUrls() const;

QByteArray saveState() const;
bool restoreState(const QByteArray &state);

void setConfirmOverwrite(bool enabled);
bool confirmOverwrite() const;

void setDefaultSuffix(const QString &suffix);
QString defaultSuffix() const;

void setHistory(const QStringList &paths);
QStringList history() const;

void setItemDelegate(QAbstractItemDelegate *delegate);
QAbstractItemDelegate *itemDelegate() const;

void setIconProvider(QFileIconProvider *provider);
QFileIconProvider *iconProvider() const;

void setLabelText(DialogLabel label, const QString &text);
QString labelText(DialogLabel label) const;


# 169 "/home/eagle/qt-copy/include/QtGui/qfiledialog.h"
void setProxyModel(QAbstractProxyModel *model);
QAbstractProxyModel *proxyModel() const;


# 173 "/home/eagle/qt-copy/include/QtGui/qfiledialog.h"
signals:
void filesSelected(const QStringList &files);
void currentChanged(const QString &path);
void directoryEntered(const QString &directory);
void filterSelected(const QString &filter);

public:









# 189 "/home/eagle/qt-copy/include/QtGui/qfiledialog.h"
static QString getOpenFileName(QWidget *parent = 0,
const QString &caption = QString(),
const QString &dir = QString(),
const QString &filter = QString(),
QString *selectedFilter = 0,
Options options = 0);

static QString getSaveFileName(QWidget *parent = 0,
const QString &caption = QString(),
const QString &dir = QString(),
const QString &filter = QString(),
QString *selectedFilter = 0,
Options options = 0);

static QString getExistingDirectory(QWidget *parent = 0,
const QString &caption = QString(),
const QString &dir = QString(),
Options options = ShowDirsOnly);

static QStringList getOpenFileNames(QWidget *parent = 0,
const QString &caption = QString(),
const QString &dir = QString(),
const QString &filter = QString(),
QString *selectedFilter = 0,
Options options = 0);













































# 259 "/home/eagle/qt-copy/include/QtGui/qfiledialog.h"
protected:
QFileDialog(const QFileDialogArgs &args);
void done(int result);
void accept();
void changeEvent(QEvent *e);

private:
inline QFileDialogPrivate* d_func() { return reinterpret_cast<QFileDialogPrivate *>(d_ptr); } inline const QFileDialogPrivate* d_func() const { return reinterpret_cast<const QFileDialogPrivate *>(d_ptr); } friend class QFileDialogPrivate;
QFileDialog(const QFileDialog &); QFileDialog &operator=(const QFileDialog &);

























};

inline void QFileDialog::setDirectory(const QDir &adirectory)
{ setDirectory(adirectory.absolutePath()); }

inline QFlags<QFileDialog::Options::enum_type> operator|(QFileDialog::Options::enum_type f1, QFileDialog::Options::enum_type f2) { return QFlags<QFileDialog::Options::enum_type>(f1) | f2; } inline QFlags<QFileDialog::Options::enum_type> operator|(QFileDialog::Options::enum_type f1, QFlags<QFileDialog::Options::enum_type> f2) { return f2 | f1; }



# 302 "/home/eagle/qt-copy/include/QtGui/qfiledialog.h"





# 13 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qfilesystemmodel.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qabstractitemmodel.h"

































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qfilesystemmodel.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qpair.h"

































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qfilesystemmodel.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qdir.h"










































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qfilesystemmodel.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qicon.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qicon.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qsize.h"






































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qicon.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qpixmap.h"











































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qicon.h"


# 51 "/home/eagle/qt-copy/include/QtGui/qicon.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QIconPrivate;
class QIconEngine;
class QIconEngineV2;

class  QIcon
{
public:
enum Mode { Normal, Disabled, Active, Selected };
enum State { On, Off };

QIcon();
QIcon(const QPixmap &pixmap);
QIcon(const QIcon &other);
explicit QIcon(const QString &fileName); 
explicit QIcon(QIconEngine *engine);
explicit QIcon(QIconEngineV2 *engine);
~QIcon();
QIcon &operator=(const QIcon &other);
operator QVariant() const;

QPixmap pixmap(const QSize &size, Mode mode = Normal, State state = Off) const;
inline QPixmap pixmap(int w, int h, Mode mode = Normal, State state = Off) const
{ return pixmap(QSize(w, h), mode, state); }
inline QPixmap pixmap(int extent, Mode mode = Normal, State state = Off) const
{ return pixmap(QSize(extent, extent), mode, state); }

QSize actualSize(const QSize &size, Mode mode = Normal, State state = Off) const;

void paint(QPainter *painter, const QRect &rect, Qt::Alignment alignment = Qt::AlignCenter, Mode mode = Normal, State state = Off) const;
inline void paint(QPainter *painter, int x, int y, int w, int h, Qt::Alignment alignment = Qt::AlignCenter, Mode mode = Normal, State state = Off) const
{ paint(painter, QRect(x, y, w, h), alignment, mode, state); }

bool isNull() const;
bool isDetached() const;
void detach();

int serialNumber() const;
qint64 cacheKey() const;

void addPixmap(const QPixmap &pixmap, Mode mode = Normal, State state = Off);
void addFile(const QString &fileName, const QSize &size = QSize(), Mode mode = Normal, State state = Off);















# 113 "/home/eagle/qt-copy/include/QtGui/qicon.h"


private:
QIconPrivate *d;

# 118 "/home/eagle/qt-copy/include/QtGui/qicon.h"
friend  QDataStream &operator<<(QDataStream &, const QIcon &);
friend  QDataStream &operator>>(QDataStream &, QIcon &);


# 122 "/home/eagle/qt-copy/include/QtGui/qicon.h"
public:
typedef QIconPrivate * DataPtr;
inline DataPtr &data_ptr() { return d; }
};

template <> inline bool qIsDetached<QIcon>(QIcon &t) { return t.isDetached(); } template <typename T> inline void qSwap(T &, T &); template <> inline void qSwap<QIcon>(QIcon &value1, QIcon &value2) { const QIcon::DataPtr t = value1.data_ptr(); value1.data_ptr() = value2.data_ptr(); value2.data_ptr() = t; }
template <> class QTypeInfo<QIcon> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QIcon)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QIcon"; } };


# 131 "/home/eagle/qt-copy/include/QtGui/qicon.h"
 QDataStream &operator<<(QDataStream &, const QIcon &);
 QDataStream &operator>>(QDataStream &, QIcon &);






# 139 "/home/eagle/qt-copy/include/QtGui/qicon.h"





# 50 "/home/eagle/qt-copy/include/QtGui/qfilesystemmodel.h"


# 52 "/home/eagle/qt-copy/include/QtGui/qfilesystemmodel.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 60 "/home/eagle/qt-copy/include/QtGui/qfilesystemmodel.h"
class ExtendedInformation;
class QFileSystemModelPrivate;
class QFileIconProvider;

class  QFileSystemModel : public QAbstractItemModel
{
Q_OBJECT
Q_PROPERTY(bool resolveSymlinks READ resolveSymlinks WRITE setResolveSymlinks)
Q_PROPERTY(bool readOnly READ isReadOnly WRITE setReadOnly)
Q_PROPERTY(bool nameFilterDisables READ nameFilterDisables WRITE setNameFilterDisables)

signals:
void rootPathChanged(const QString &newPath);
void fileRenamed(const QString &path, const QString &oldName, const QString &newName);

public:
enum Roles {
FileIconRole = Qt::DecorationRole,
FilePathRole = Qt::UserRole + 1,
FileNameRole = Qt::UserRole + 2,
FilePermissions = Qt::UserRole + 3
};

explicit QFileSystemModel(QObject *parent = 0);
~QFileSystemModel();

QModelIndex index(int row, int column, const QModelIndex &parent = QModelIndex()) const;
QModelIndex index(const QString &path, int column = 0) const;
QModelIndex parent(const QModelIndex &child) const;
bool hasChildren(const QModelIndex &parent = QModelIndex()) const;
bool canFetchMore(const QModelIndex &parent) const;
void fetchMore(const QModelIndex &parent);

int rowCount(const QModelIndex &parent = QModelIndex()) const;
int columnCount(const QModelIndex &parent = QModelIndex()) const;

QVariant myComputer(int role = Qt::DisplayRole) const;
QVariant data(const QModelIndex &index, int role = Qt::DisplayRole) const;
bool setData(const QModelIndex &index, const QVariant &value, int role = Qt::EditRole);

QVariant headerData(int section, Qt::Orientation orientation, int role = Qt::DisplayRole) const;

Qt::ItemFlags flags(const QModelIndex &index) const;

void sort(int column, Qt::SortOrder order = Qt::AscendingOrder);

QStringList mimeTypes() const;
QMimeData *mimeData(const QModelIndexList &indexes) const;
bool dropMimeData(const QMimeData *data, Qt::DropAction action,
int row, int column, const QModelIndex &parent);
Qt::DropActions supportedDropActions() const;


QModelIndex setRootPath(const QString &path);
QString rootPath() const;
QDir rootDirectory() const;

void setIconProvider(QFileIconProvider *provider);
QFileIconProvider *iconProvider() const;

void setFilter(QDir::Filters filters);
QDir::Filters filter() const;

void setResolveSymlinks(bool enable);
bool resolveSymlinks() const;

void setReadOnly(bool enable);
bool isReadOnly() const;

void setNameFilterDisables(bool enable);
bool nameFilterDisables() const;

void setNameFilters(const QStringList &filters);
QStringList nameFilters() const;

QString filePath(const QModelIndex &index) const;
bool isDir(const QModelIndex &index) const;
qint64 size(const QModelIndex &index) const;
QString type(const QModelIndex &index) const;
QDateTime lastModified(const QModelIndex &index) const;

QModelIndex mkdir(const QModelIndex &parent, const QString &name);
inline bool rmdir(const QModelIndex &index) const;
inline QString fileName(const QModelIndex &index) const;
inline QIcon fileIcon(const QModelIndex &index) const;
QFile::Permissions permissions(const QModelIndex &index) const;
inline QFileInfo fileInfo(const QModelIndex &index) const;
inline bool remove(const QModelIndex &index) const;

protected:
QFileSystemModel(QFileSystemModelPrivate &, QObject *parent = 0);
void timerEvent(QTimerEvent *event);

private:
inline QFileSystemModelPrivate* d_func() { return reinterpret_cast<QFileSystemModelPrivate *>(d_ptr); } inline const QFileSystemModelPrivate* d_func() const { return reinterpret_cast<const QFileSystemModelPrivate *>(d_ptr); } friend class QFileSystemModelPrivate;
QFileSystemModel(const QFileSystemModel &); QFileSystemModel &operator=(const QFileSystemModel &);





};

inline bool QFileSystemModel::rmdir(const QModelIndex &aindex) const
{ QDir dir; return dir.rmdir(filePath(aindex)); }
inline QString QFileSystemModel::fileName(const QModelIndex &aindex) const
{ return aindex.data(Qt::DisplayRole).toString(); }
inline QIcon QFileSystemModel::fileIcon(const QModelIndex &aindex) const
{ return qvariant_cast<QIcon>(aindex.data(Qt::DecorationRole)); }
inline QFileInfo QFileSystemModel::fileInfo(const QModelIndex &aindex) const
{ return QFileInfo(filePath(aindex)); }
inline bool QFileSystemModel::remove(const QModelIndex &aindex) const
{ if (isDir(aindex)) return rmdir(aindex); else return QFile::remove(filePath(aindex)); }



# 176 "/home/eagle/qt-copy/include/QtGui/qfilesystemmodel.h"






# 14 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qfontdialog.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qwindowdefs.h"























































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qfontdialog.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qdialog.h"







































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qfontdialog.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qfont.h"

































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qfontdialog.h"


# 51 "/home/eagle/qt-copy/include/QtGui/qfontdialog.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 59 "/home/eagle/qt-copy/include/QtGui/qfontdialog.h"
class QFontDialogPrivate;

class  QFontDialog: public QDialog
{
Q_OBJECT
inline QFontDialogPrivate* d_func() { return reinterpret_cast<QFontDialogPrivate *>(d_ptr); } inline const QFontDialogPrivate* d_func() const { return reinterpret_cast<const QFontDialogPrivate *>(d_ptr); } friend class QFontDialogPrivate;

public:

static QFont getFont(bool *ok, const QFont &def, QWidget* parent, const QString &caption);
static QFont getFont(bool *ok, const QFont &def, QWidget* parent=0);
static QFont getFont(bool *ok, QWidget* parent=0);








# 79 "/home/eagle/qt-copy/include/QtGui/qfontdialog.h"
protected:
void changeEvent(QEvent *e);
private:
static QFont getFont(bool *ok, const QFont *def, QWidget* parent=0);

explicit QFontDialog(QWidget* parent=0, bool modal=false, Qt::WindowFlags f=0);
~QFontDialog();

QFont font() const;
void setFont(const QFont &font);

bool eventFilter(QObject *, QEvent *);

void updateFamilies();
void updateStyles();
void updateSizes();

private:







QFontDialog(const QFontDialog &); QFontDialog &operator=(const QFontDialog &);
};



# 109 "/home/eagle/qt-copy/include/QtGui/qfontdialog.h"





# 15 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qinputdialog.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qdialog.h"







































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qinputdialog.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qinputdialog.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qlineedit.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qframe.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qwidget.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qframe.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qframe.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QFramePrivate;

class  QFrame : public QWidget
{
Q_OBJECT

Q_ENUMS(Shape Shadow)
Q_PROPERTY(Shape frameShape READ frameShape WRITE setFrameShape)
Q_PROPERTY(Shadow frameShadow READ frameShadow WRITE setFrameShadow)
Q_PROPERTY(int lineWidth READ lineWidth WRITE setLineWidth)
Q_PROPERTY(int midLineWidth READ midLineWidth WRITE setMidLineWidth)
Q_PROPERTY(int frameWidth READ frameWidth)
Q_PROPERTY(QRect frameRect READ frameRect WRITE setFrameRect DESIGNABLE false)

public:
explicit QFrame(QWidget* parent = 0, Qt::WindowFlags f = 0);
~QFrame();

int frameStyle() const;
void setFrameStyle(int);

int frameWidth() const;

QSize sizeHint() const;

enum Shape {
NoFrame = 0, 
Box = 0x0001, 
Panel = 0x0002, 
WinPanel = 0x0003, 
HLine = 0x0004, 
VLine = 0x0005, 
StyledPanel = 0x0006 









# 97 "/home/eagle/qt-copy/include/QtGui/qframe.h"
};
enum Shadow {
Plain = 0x0010, 
Raised = 0x0020, 
Sunken = 0x0030 
};

enum StyleMask {
Shadow_Mask = 0x00f0, 
Shape_Mask = 0x000f 




# 111 "/home/eagle/qt-copy/include/QtGui/qframe.h"
};

Shape frameShape() const;
void setFrameShape(Shape);
Shadow frameShadow() const;
void setFrameShadow(Shadow);

int lineWidth() const;
void setLineWidth(int);

int midLineWidth() const;
void setMidLineWidth(int);

QRect frameRect() const;
void setFrameRect(const QRect &);

protected:
bool event(QEvent *e);
void paintEvent(QPaintEvent *);
void changeEvent(QEvent *);
void drawFrame(QPainter *);






# 138 "/home/eagle/qt-copy/include/QtGui/qframe.h"
protected:
QFrame(QFramePrivate &dd, QWidget* parent = 0, Qt::WindowFlags f = 0);

private:
QFrame(const QFrame &); QFrame &operator=(const QFrame &);
inline QFramePrivate* d_func() { return reinterpret_cast<QFramePrivate *>(d_ptr); } inline const QFramePrivate* d_func() const { return reinterpret_cast<const QFramePrivate *>(d_ptr); } friend class QFramePrivate;
};






# 47 "/home/eagle/qt-copy/include/QtGui/qlineedit.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qlineedit.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qlineedit.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 58 "/home/eagle/qt-copy/include/QtGui/qlineedit.h"
class QValidator;
class QMenu;
class QLineEditPrivate;
class QCompleter;
class QStyleOptionFrame;
class QAbstractSpinBox;
class QDateTimeEdit;

class  QLineEdit : public QWidget
{
Q_OBJECT

Q_ENUMS(EchoMode)
Q_PROPERTY(QString inputMask READ inputMask WRITE setInputMask)
Q_PROPERTY(QString text READ text WRITE setText NOTIFY textChanged USER true)
Q_PROPERTY(int maxLength READ maxLength WRITE setMaxLength)
Q_PROPERTY(bool frame READ hasFrame WRITE setFrame)
Q_PROPERTY(EchoMode echoMode READ echoMode WRITE setEchoMode)
Q_PROPERTY(QString displayText READ displayText)
Q_PROPERTY(int cursorPosition READ cursorPosition WRITE setCursorPosition)
Q_PROPERTY(Qt::Alignment alignment READ alignment WRITE setAlignment)
Q_PROPERTY(bool modified READ isModified WRITE setModified DESIGNABLE false)
Q_PROPERTY(bool hasSelectedText READ hasSelectedText)
Q_PROPERTY(QString selectedText READ selectedText)
Q_PROPERTY(bool dragEnabled READ dragEnabled WRITE setDragEnabled)
Q_PROPERTY(bool readOnly READ isReadOnly WRITE setReadOnly)
Q_PROPERTY(bool undoAvailable READ isUndoAvailable)
Q_PROPERTY(bool redoAvailable READ isRedoAvailable)
Q_PROPERTY(bool acceptableInput READ hasAcceptableInput)

public:
explicit QLineEdit(QWidget* parent=0);
explicit QLineEdit(const QString &, QWidget* parent=0);





# 96 "/home/eagle/qt-copy/include/QtGui/qlineedit.h"
~QLineEdit();

QString text() const;

QString displayText() const;

int maxLength() const;
void setMaxLength(int);

void setFrame(bool);
bool hasFrame() const;

enum EchoMode { Normal, NoEcho, Password, PasswordEchoOnEdit };
EchoMode echoMode() const;
void setEchoMode(EchoMode);

bool isReadOnly() const;
void setReadOnly(bool);


# 116 "/home/eagle/qt-copy/include/QtGui/qlineedit.h"
void setValidator(const QValidator *);
const QValidator * validator() const;



# 121 "/home/eagle/qt-copy/include/QtGui/qlineedit.h"
void setCompleter(QCompleter *completer);
QCompleter *completer() const;


# 125 "/home/eagle/qt-copy/include/QtGui/qlineedit.h"
QSize sizeHint() const;
QSize minimumSizeHint() const;

int cursorPosition() const;
void setCursorPosition(int);
int cursorPositionAt(const QPoint &pos);

void setAlignment(Qt::Alignment flag);
Qt::Alignment alignment() const;

void cursorForward(bool mark, int steps = 1);
void cursorBackward(bool mark, int steps = 1);
void cursorWordForward(bool mark);
void cursorWordBackward(bool mark);
void backspace();
void del();
void home(bool mark);
void end(bool mark);

bool isModified() const;
void setModified(bool);

void setSelection(int, int);
bool hasSelectedText() const;
QString selectedText() const;
int selectionStart() const;

bool isUndoAvailable() const;
bool isRedoAvailable() const;

void setDragEnabled(bool b);
bool dragEnabled() const;

QString inputMask() const;
void setInputMask(const QString &inputMask);
bool hasAcceptableInput() const;

public slots:
void setText(const QString &);
void clear();
void selectAll();
void undo();
void redo();

# 169 "/home/eagle/qt-copy/include/QtGui/qlineedit.h"
void cut();
void copy() const;
void paste();


# 174 "/home/eagle/qt-copy/include/QtGui/qlineedit.h"
public:
void deselect();
void insert(const QString &);

# 178 "/home/eagle/qt-copy/include/QtGui/qlineedit.h"
QMenu *createStandardContextMenu();


# 181 "/home/eagle/qt-copy/include/QtGui/qlineedit.h"
signals:
void textChanged(const QString &);
void textEdited(const QString &);
void cursorPositionChanged(int, int);
void returnPressed();
void editingFinished();
void selectionChanged();

protected:
void mousePressEvent(QMouseEvent *);
void mouseMoveEvent(QMouseEvent *);
void mouseReleaseEvent(QMouseEvent *);
void mouseDoubleClickEvent(QMouseEvent *);
void keyPressEvent(QKeyEvent *);
void focusInEvent(QFocusEvent *);
void focusOutEvent(QFocusEvent *);
void paintEvent(QPaintEvent *);

# 199 "/home/eagle/qt-copy/include/QtGui/qlineedit.h"
void dragEnterEvent(QDragEnterEvent *);
void dragMoveEvent(QDragMoveEvent *e);
void dragLeaveEvent(QDragLeaveEvent *e);
void dropEvent(QDropEvent *);

# 204 "/home/eagle/qt-copy/include/QtGui/qlineedit.h"
void changeEvent(QEvent *);

# 206 "/home/eagle/qt-copy/include/QtGui/qlineedit.h"
void contextMenuEvent(QContextMenuEvent *);





# 212 "/home/eagle/qt-copy/include/QtGui/qlineedit.h"
void inputMethodEvent(QInputMethodEvent *);
void initStyleOption(QStyleOptionFrame *option) const;
public:
QVariant inputMethodQuery(Qt::InputMethodQuery) const;
bool event(QEvent *);
protected:
QRect cursorRect() const;

public:








































# 261 "/home/eagle/qt-copy/include/QtGui/qlineedit.h"
private:
friend class QAbstractSpinBox;



# 266 "/home/eagle/qt-copy/include/QtGui/qlineedit.h"
QLineEdit(const QLineEdit &); QLineEdit &operator=(const QLineEdit &);
inline QLineEditPrivate* d_func() { return reinterpret_cast<QLineEditPrivate *>(d_ptr); } inline const QLineEditPrivate* d_func() const { return reinterpret_cast<const QLineEditPrivate *>(d_ptr); } friend class QLineEditPrivate;




# 272 "/home/eagle/qt-copy/include/QtGui/qlineedit.h"


# 274 "/home/eagle/qt-copy/include/QtGui/qlineedit.h"
};



# 278 "/home/eagle/qt-copy/include/QtGui/qlineedit.h"





# 49 "/home/eagle/qt-copy/include/QtGui/qinputdialog.h"


# 51 "/home/eagle/qt-copy/include/QtGui/qinputdialog.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 59 "/home/eagle/qt-copy/include/QtGui/qinputdialog.h"
class QInputDialogPrivate;

class  QInputDialog : public QDialog
{
Q_OBJECT
inline QInputDialogPrivate* d_func() { return reinterpret_cast<QInputDialogPrivate *>(d_ptr); } inline const QInputDialogPrivate* d_func() const { return reinterpret_cast<const QInputDialogPrivate *>(d_ptr); } friend class QInputDialogPrivate;

private:

enum Type { LineEdit, SpinBox, DoubleSpinBox, ComboBox, EditableComboBox };


QInputDialog(const QString &label, QWidget* parent, Type type, Qt::WindowFlags f);

QInputDialog(
const QString &title, const QString &label, QWidget *parent, QWidget *input,
Qt::WindowFlags f);
~QInputDialog();

public:
static QString getText(QWidget *parent, const QString &title, const QString &label,
QLineEdit::EchoMode echo = QLineEdit::Normal,
const QString &text = QString(), bool *ok = 0, Qt::WindowFlags f = 0);
static int getInteger(QWidget *parent, const QString &title, const QString &label, int value = 0,
int minValue = -2147483647, int maxValue = 2147483647,
int step = 1, bool *ok = 0, Qt::WindowFlags f = 0);
static double getDouble(QWidget *parent, const QString &title, const QString &label, double value = 0,
double minValue = -2147483647, double maxValue = 2147483647,
int decimals = 1, bool *ok = 0, Qt::WindowFlags f = 0);
static QString getItem(QWidget *parent, const QString &title, const QString &label, const QStringList &list,
int current = 0, bool editable = true, bool *ok = 0,Qt::WindowFlags f = 0);























# 113 "/home/eagle/qt-copy/include/QtGui/qinputdialog.h"
private:
QInputDialog(const QInputDialog &); QInputDialog &operator=(const QInputDialog &);
};



# 119 "/home/eagle/qt-copy/include/QtGui/qinputdialog.h"





# 16 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qmessagebox.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qdialog.h"







































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qmessagebox.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qmessagebox.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qmessagebox.h"
class QLabel;
class QMessageBoxPrivate;
class QAbstractButton;

class  QMessageBox : public QDialog
{
Q_OBJECT
Q_ENUMS(Icon)

Q_PROPERTY(QString text READ text WRITE setText)

Q_PROPERTY(Icon icon READ icon WRITE setIcon)
Q_PROPERTY(QPixmap iconPixmap READ iconPixmap WRITE setIconPixmap)
Q_PROPERTY(Qt::TextFormat textFormat READ textFormat WRITE setTextFormat)
Q_PROPERTY(StandardButtons standardButtons READ standardButtons WRITE setStandardButtons)

# 73 "/home/eagle/qt-copy/include/QtGui/qmessagebox.h"
Q_PROPERTY(QString detailedText READ detailedText WRITE setDetailedText)

# 75 "/home/eagle/qt-copy/include/QtGui/qmessagebox.h"
Q_PROPERTY(QString informativeText READ informativeText WRITE setInformativeText)

public:
enum Icon {
NoIcon = 0,
Information = 1,
Warning = 2,
Critical = 3,
Question = 4
};

enum ButtonRole {

InvalidRole = -1,
AcceptRole,
RejectRole,
DestructiveRole,
ActionRole,
HelpRole,
YesRole,
NoRole,
ResetRole,
ApplyRole,

NRoles
};

enum StandardButton {

NoButton = 0x00000000,
Ok = 0x00000400,
Save = 0x00000800,
SaveAll = 0x00001000,
Open = 0x00002000,
Yes = 0x00004000,
YesToAll = 0x00008000,
No = 0x00010000,
NoToAll = 0x00020000,
Abort = 0x00040000,
Retry = 0x00080000,
Ignore = 0x00100000,
Close = 0x00200000,
Cancel = 0x00400000,
Discard = 0x00800000,
Help = 0x01000000,
Apply = 0x02000000,
Reset = 0x04000000,
RestoreDefaults = 0x08000000,

FirstButton = Ok, 
LastButton = RestoreDefaults, 

YesAll = YesToAll, 
NoAll = NoToAll, 

Default = 0x00000100, 
Escape = 0x00000200, 
FlagMask = 0x00000300, 
ButtonMask = ~FlagMask 
};
typedef StandardButton Button; 

typedef QFlags<StandardButton> StandardButtons;

explicit QMessageBox(QWidget *parent = 0);
QMessageBox(Icon icon, const QString &title, const QString &text,
StandardButtons buttons = NoButton, QWidget *parent = 0,
Qt::WindowFlags f = Qt::Dialog | Qt::MSWindowsFixedSizeDialogHint);
~QMessageBox();

void addButton(QAbstractButton *button, ButtonRole role);
QPushButton *addButton(const QString &text, ButtonRole role);
QPushButton *addButton(StandardButton button);
void removeButton(QAbstractButton *button);




# 153 "/home/eagle/qt-copy/include/QtGui/qmessagebox.h"







void setStandardButtons(StandardButtons buttons);
StandardButtons standardButtons() const;
StandardButton standardButton(QAbstractButton *button) const;
QAbstractButton *button(StandardButton which) const;

QPushButton *defaultButton() const;
void setDefaultButton(QPushButton *button);
void setDefaultButton(StandardButton button);

QAbstractButton *escapeButton() const;
void setEscapeButton(QAbstractButton *button);
void setEscapeButton(StandardButton button);

QAbstractButton *clickedButton() const;

QString text() const;
void setText(const QString &text);




Icon icon() const;
void setIcon(Icon);

QPixmap iconPixmap() const;
void setIconPixmap(const QPixmap &pixmap);

Qt::TextFormat textFormat() const;
void setTextFormat(Qt::TextFormat format);

static StandardButton information(QWidget *parent, const QString &title,
const QString &text, StandardButtons buttons = Ok,
StandardButton defaultButton = NoButton);
static StandardButton question(QWidget *parent, const QString &title,
const QString &text, StandardButtons buttons = Ok,
StandardButton defaultButton = NoButton);
static StandardButton warning(QWidget *parent, const QString &title,
const QString &text, StandardButtons buttons = Ok,
StandardButton defaultButton = NoButton);
static StandardButton critical(QWidget *parent, const QString &title,
const QString &text, StandardButtons buttons = Ok,
StandardButton defaultButton = NoButton);
static void about(QWidget *parent, const QString &title, const QString &text);
static void aboutQt(QWidget *parent, const QString &title = QString());

QSize sizeHint() const;



QMessageBox(const QString &title, const QString &text, Icon icon,
int button0, int button1, int button2,
QWidget *parent = 0,
Qt::WindowFlags f = Qt::Dialog | Qt::MSWindowsFixedSizeDialogHint);

static int information(QWidget *parent, const QString &title,
const QString& text,
int button0, int button1 = 0, int button2 = 0);
static int information(QWidget *parent, const QString &title,
const QString& text,
const QString& button0Text,
const QString& button1Text = QString(),
const QString& button2Text = QString(),
int defaultButtonNumber = 0,
int escapeButtonNumber = -1);
inline static StandardButton information(QWidget *parent, const QString &title,
const QString& text,
StandardButton button0, StandardButton button1 = NoButton)
{ return information(parent, title, text, StandardButtons(button0), button1); }

static int question(QWidget *parent, const QString &title,
const QString& text,
int button0, int button1 = 0, int button2 = 0);
static int question(QWidget *parent, const QString &title,
const QString& text,
const QString& button0Text,
const QString& button1Text = QString(),
const QString& button2Text = QString(),
int defaultButtonNumber = 0,
int escapeButtonNumber = -1);
inline static int question(QWidget *parent, const QString &title,
const QString& text,
StandardButton button0, StandardButton button1)
{ return question(parent, title, text, StandardButtons(button0), button1); }

static int warning(QWidget *parent, const QString &title,
const QString& text,
int button0, int button1, int button2 = 0);
static int warning(QWidget *parent, const QString &title,
const QString& text,
const QString& button0Text,
const QString& button1Text = QString(),
const QString& button2Text = QString(),
int defaultButtonNumber = 0,
int escapeButtonNumber = -1);
inline static int warning(QWidget *parent, const QString &title,
const QString& text,
StandardButton button0, StandardButton button1)
{ return warning(parent, title, text, StandardButtons(button0), button1); }

static int critical(QWidget *parent, const QString &title,
const QString& text,
int button0, int button1, int button2 = 0);
static int critical(QWidget *parent, const QString &title,
const QString& text,
const QString& button0Text,
const QString& button1Text = QString(),
const QString& button2Text = QString(),
int defaultButtonNumber = 0,
int escapeButtonNumber = -1);
inline static int critical(QWidget *parent, const QString &title,
const QString& text,
StandardButton button0, StandardButton button1)
{ return critical(parent, title, text, StandardButtons(button0), button1); }

QString buttonText(int button) const;
void setButtonText(int button, const QString &text);

QString informativeText() const;
void setInformativeText(const QString &text);


# 281 "/home/eagle/qt-copy/include/QtGui/qmessagebox.h"
QString detailedText() const;
void setDetailedText(const QString &text);


# 285 "/home/eagle/qt-copy/include/QtGui/qmessagebox.h"
void setWindowTitle(const QString &title);
void setWindowModality(Qt::WindowModality windowModality);



























# 314 "/home/eagle/qt-copy/include/QtGui/qmessagebox.h"
static QPixmap standardIcon(Icon icon);






# 321 "/home/eagle/qt-copy/include/QtGui/qmessagebox.h"
protected:
bool event(QEvent *e);
void resizeEvent(QResizeEvent *event);
void showEvent(QShowEvent *event);
void closeEvent(QCloseEvent *event);
void keyPressEvent(QKeyEvent *event);
void changeEvent(QEvent *event);

private:


QMessageBox(const QMessageBox &); QMessageBox &operator=(const QMessageBox &);
inline QMessageBoxPrivate* d_func() { return reinterpret_cast<QMessageBoxPrivate *>(d_ptr); } inline const QMessageBoxPrivate* d_func() const { return reinterpret_cast<const QMessageBoxPrivate *>(d_ptr); } friend class QMessageBoxPrivate;
};

inline QFlags<QMessageBox::StandardButtons::enum_type> operator|(QMessageBox::StandardButtons::enum_type f1, QMessageBox::StandardButtons::enum_type f2) { return QFlags<QMessageBox::StandardButtons::enum_type>(f1) | f2; } inline QFlags<QMessageBox::StandardButtons::enum_type> operator|(QMessageBox::StandardButtons::enum_type f1, QFlags<QMessageBox::StandardButtons::enum_type> f2) { return f2 | f1; }





# 355 "/home/eagle/qt-copy/include/QtGui/qmessagebox.h"





# 17 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qpagesetupdialog.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qabstractpagesetupdialog.h"


















































































# 47 "/home/eagle/qt-copy/include/QtGui/qpagesetupdialog.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qpagesetupdialog.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qpagesetupdialog.h"
class QPageSetupDialogPrivate;

class  QPageSetupDialog : public QAbstractPageSetupDialog
{
Q_OBJECT
inline QPageSetupDialogPrivate* d_func() { return reinterpret_cast<QPageSetupDialogPrivate *>(d_ptr); } inline const QPageSetupDialogPrivate* d_func() const { return reinterpret_cast<const QPageSetupDialogPrivate *>(d_ptr); } friend class QPageSetupDialogPrivate;

public:
enum PageSetupDialogOption {
None = 0x0000,
DontUseSheet = 0x0001
};

typedef QFlags<PageSetupDialogOption> PageSetupDialogOptions;

explicit QPageSetupDialog(QPrinter *printer, QWidget *parent = 0);

void addEnabledOption(PageSetupDialogOption option);
void setEnabledOptions(PageSetupDialogOptions options);
PageSetupDialogOptions enabledOptions() const;
bool isOptionEnabled(PageSetupDialogOption option) const;

virtual int exec();



# 83 "/home/eagle/qt-copy/include/QtGui/qpagesetupdialog.h"
};



# 87 "/home/eagle/qt-copy/include/QtGui/qpagesetupdialog.h"





# 18 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qprintdialog.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qabstractprintdialog.h"
































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qprintdialog.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qprintdialog.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qprintdialog.h"
class QPrintDialogPrivate;
class QPushButton;
class QPrinter;























# 83 "/home/eagle/qt-copy/include/QtGui/qprintdialog.h"
class  QPrintDialog : public QAbstractPrintDialog
{
Q_OBJECT
inline QPrintDialogPrivate* d_func() { return reinterpret_cast<QPrintDialogPrivate *>(d_ptr); } inline const QPrintDialogPrivate* d_func() const { return reinterpret_cast<const QPrintDialogPrivate *>(d_ptr); } friend class QPrintDialogPrivate;
public:
explicit QPrintDialog(QPrinter *printer, QWidget *parent = 0);
~QPrintDialog();

int exec();















# 107 "/home/eagle/qt-copy/include/QtGui/qprintdialog.h"
private:

# 109 "/home/eagle/qt-copy/include/QtGui/qprintdialog.h"




















# 129 "/home/eagle/qt-copy/include/QtGui/qprintdialog.h"
friend class QUnixPrintWidget;
};



# 134 "/home/eagle/qt-copy/include/QtGui/qprintdialog.h"





# 19 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qprintpreviewdialog.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qdialog.h"







































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qprintpreviewdialog.h"




# 51 "/home/eagle/qt-copy/include/QtGui/qprintpreviewdialog.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QGraphicsView;
class QPrintPreviewDialogPrivate;

class  QPrintPreviewDialog : public QDialog
{
Q_OBJECT
inline QPrintPreviewDialogPrivate* d_func() { return reinterpret_cast<QPrintPreviewDialogPrivate *>(d_ptr); } inline const QPrintPreviewDialogPrivate* d_func() const { return reinterpret_cast<const QPrintPreviewDialogPrivate *>(d_ptr); } friend class QPrintPreviewDialogPrivate;
public:
explicit QPrintPreviewDialog(QWidget *parent = 0, Qt::WindowFlags flags = 0);
explicit QPrintPreviewDialog(QPrinter *printer, QWidget *parent = 0, Qt::WindowFlags flags = 0);
~QPrintPreviewDialog();

signals:
void paintRequested(QPrinter *printer);

public slots:
void setVisible(bool visible);

private:











QPrintPreviewDialogPrivate *d_ptr;
};









# 20 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qprogressdialog.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qdialog.h"







































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qprogressdialog.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qprogressdialog.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qprogressdialog.h"
class QPushButton;
class QLabel;
class QProgressBar;
class QTimer;
class QProgressDialogPrivate;

class  QProgressDialog : public QDialog
{
Q_OBJECT
inline QProgressDialogPrivate* d_func() { return reinterpret_cast<QProgressDialogPrivate *>(d_ptr); } inline const QProgressDialogPrivate* d_func() const { return reinterpret_cast<const QProgressDialogPrivate *>(d_ptr); } friend class QProgressDialogPrivate;
Q_PROPERTY(bool wasCanceled READ wasCanceled)
Q_PROPERTY(int minimum READ minimum WRITE setMinimum)
Q_PROPERTY(int maximum READ maximum WRITE setMaximum)
Q_PROPERTY(int value READ value WRITE setValue)
Q_PROPERTY(bool autoReset READ autoReset WRITE setAutoReset)
Q_PROPERTY(bool autoClose READ autoClose WRITE setAutoClose)
Q_PROPERTY(int minimumDuration READ minimumDuration WRITE setMinimumDuration)
Q_PROPERTY(QString labelText READ labelText WRITE setLabelText)

public:
explicit QProgressDialog(QWidget *parent = 0, Qt::WindowFlags f = 0);
QProgressDialog(const QString &labelText, const QString &cancelButtonText,
int minimum, int maximum,
QWidget *parent = 0, Qt::WindowFlags f = 0);
~QProgressDialog();

void setLabel(QLabel *label);
void setCancelButton(QPushButton *button);
void setBar(QProgressBar *bar);

bool wasCanceled() const;

int minimum() const;
int maximum() const;

int value() const;

QSize sizeHint() const;

QString labelText() const;
int minimumDuration() const;

void setAutoReset(bool b);
bool autoReset() const;
void setAutoClose(bool b);
bool autoClose() const;

public slots:
void cancel();
void reset();
void setMaximum(int maximum);
void setMinimum(int minimum);
void setRange(int minimum, int maximum);
void setValue(int progress);
void setLabelText(const QString &);
void setCancelButtonText(const QString &);
void setMinimumDuration(int ms);

signals:
void canceled();

protected:
void resizeEvent(QResizeEvent *);
void closeEvent(QCloseEvent *);
void changeEvent(QEvent *);
void showEvent(QShowEvent *e);

protected slots:
void forceShow();

private:
QProgressDialog(const QProgressDialog &); QProgressDialog &operator=(const QProgressDialog &);
};



# 133 "/home/eagle/qt-copy/include/QtGui/qprogressdialog.h"





# 21 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qwizard.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qdialog.h"







































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qwizard.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qwizard.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qwizard.h"
class QAbstractButton;
class QWizardPage;
class QWizardPrivate;

class  QWizard : public QDialog
{
Q_OBJECT
Q_ENUMS(WizardStyle WizardOption)

Q_PROPERTY(WizardStyle wizardStyle READ wizardStyle WRITE setWizardStyle)
Q_PROPERTY(WizardOptions options READ options WRITE setOptions)
Q_PROPERTY(Qt::TextFormat titleFormat READ titleFormat WRITE setTitleFormat)
Q_PROPERTY(Qt::TextFormat subTitleFormat READ subTitleFormat WRITE setSubTitleFormat)
Q_PROPERTY(int startId READ startId WRITE setStartId)
Q_PROPERTY(int currentId READ currentId NOTIFY currentIdChanged)

public:
enum WizardButton {
BackButton,
NextButton,
CommitButton,
FinishButton,
CancelButton,
HelpButton,
CustomButton1,
CustomButton2,
CustomButton3,
Stretch,

NoButton = -1,
NStandardButtons = 6,
NButtons = 9
};

enum WizardPixmap {
WatermarkPixmap,
LogoPixmap,
BannerPixmap,
BackgroundPixmap,
NPixmaps
};

enum WizardStyle {
ClassicStyle,
ModernStyle,
MacStyle,
AeroStyle,
NStyles
};

enum WizardOption {
IndependentPages = 0x00000001,
IgnoreSubTitles = 0x00000002,
ExtendedWatermarkPixmap = 0x00000004,
NoDefaultButton = 0x00000008,
NoBackButtonOnStartPage = 0x00000010,
NoBackButtonOnLastPage = 0x00000020,
DisabledBackButtonOnLastPage = 0x00000040,
HaveNextButtonOnLastPage = 0x00000080,
HaveFinishButtonOnEarlyPages = 0x00000100,
NoCancelButton = 0x00000200,
CancelButtonOnLeft = 0x00000400,
HaveHelpButton = 0x00000800,
HelpButtonOnRight = 0x00001000,
HaveCustomButton1 = 0x00002000,
HaveCustomButton2 = 0x00004000,
HaveCustomButton3 = 0x00008000
};

typedef QFlags<WizardOption> WizardOptions;

QWizard(QWidget *parent = 0, Qt::WindowFlags flags = 0);
~QWizard();

int addPage(QWizardPage *page);
void setPage(int id, QWizardPage *page);
QWizardPage *page(int id) const;
bool hasVisitedPage(int id) const;
QList<int> visitedPages() const; 
void setStartId(int id);
int startId() const;
QWizardPage *currentPage() const;
int currentId() const;

virtual bool validateCurrentPage();
virtual int nextId() const;

void setField(const QString &name, const QVariant &value);
QVariant field(const QString &name) const;

void setWizardStyle(WizardStyle style);
WizardStyle wizardStyle() const;

void setOption(WizardOption option, bool on = true);
bool testOption(WizardOption option) const;
void setOptions(WizardOptions options);
WizardOptions options() const;

void setButtonText(WizardButton which, const QString &text);
QString buttonText(WizardButton which) const;
void setButtonLayout(const QList<WizardButton> &layout);
void setButton(WizardButton which, QAbstractButton *button);
QAbstractButton *button(WizardButton which) const;

void setTitleFormat(Qt::TextFormat format);
Qt::TextFormat titleFormat() const;
void setSubTitleFormat(Qt::TextFormat format);
Qt::TextFormat subTitleFormat() const;
void setPixmap(WizardPixmap which, const QPixmap &pixmap);
QPixmap pixmap(WizardPixmap which) const;

void setDefaultProperty(const char *className, const char *property,
const char *changedSignal);

void setVisible(bool visible);
QSize sizeHint() const;

signals:
void currentIdChanged(int id);
void helpRequested();
void customButtonClicked(int which);

public slots:
void back();
void next();
void restart();

protected:
bool event(QEvent *event);
void resizeEvent(QResizeEvent *event);
void paintEvent(QPaintEvent *event);



# 191 "/home/eagle/qt-copy/include/QtGui/qwizard.h"
void done(int result);
virtual void initializePage(int id);
virtual void cleanupPage(int id);

private:
QWizard(const QWizard &); QWizard &operator=(const QWizard &);
inline QWizardPrivate* d_func() { return reinterpret_cast<QWizardPrivate *>(d_ptr); } inline const QWizardPrivate* d_func() const { return reinterpret_cast<const QWizardPrivate *>(d_ptr); } friend class QWizardPrivate;



friend class QWizardPage;
};

inline QFlags<QWizard::WizardOptions::enum_type> operator|(QWizard::WizardOptions::enum_type f1, QWizard::WizardOptions::enum_type f2) { return QFlags<QWizard::WizardOptions::enum_type>(f1) | f2; } inline QFlags<QWizard::WizardOptions::enum_type> operator|(QWizard::WizardOptions::enum_type f1, QFlags<QWizard::WizardOptions::enum_type> f2) { return f2 | f1; }

class QWizardPagePrivate;

class  QWizardPage : public QWidget
{
Q_OBJECT
Q_PROPERTY(QString title READ title WRITE setTitle)
Q_PROPERTY(QString subTitle READ subTitle WRITE setSubTitle)

public:
QWizardPage(QWidget *parent = 0);

void setTitle(const QString &title);
QString title() const;
void setSubTitle(const QString &subTitle);
QString subTitle() const;
void setPixmap(QWizard::WizardPixmap which, const QPixmap &pixmap);
QPixmap pixmap(QWizard::WizardPixmap which) const;
void setFinalPage(bool finalPage);
bool isFinalPage() const;
void setCommitPage(bool commitPage);
bool isCommitPage() const;
void setButtonText(QWizard::WizardButton which, const QString &text);
QString buttonText(QWizard::WizardButton which) const;

virtual void initializePage();
virtual void cleanupPage();
virtual bool validatePage();
virtual bool isComplete() const;
virtual int nextId() const;

signals:
void completeChanged();

protected:
void setField(const QString &name, const QVariant &value);
QVariant field(const QString &name) const;
void registerField(const QString &name, QWidget *widget, const char *property = 0,
const char *changedSignal = 0);
QWizard *wizard() const;

private:
QWizardPage(const QWizardPage &); QWizardPage &operator=(const QWizardPage &);
inline QWizardPagePrivate* d_func() { return reinterpret_cast<QWizardPagePrivate *>(d_ptr); } inline const QWizardPagePrivate* d_func() const { return reinterpret_cast<const QWizardPagePrivate *>(d_ptr); } friend class QWizardPagePrivate;



friend class QWizard;
friend class QWizardPrivate;
};








# 22 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicsgridlayout.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qvariant.h"






















































































































































































































































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qrect.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qpainterpath.h"















































































































































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qpixmap.h"











































































































































































































































































































# 52 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"


# 54 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"
class tst_QGraphicsItem;





typedef QtValidLicenseForGuiModule QtGuiModule;



# 64 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"
class QBrush;
class QCursor;
class QFocusEvent;
class QGraphicsItemGroup;
class QGraphicsSceneContextMenuEvent;
class QGraphicsSceneDragDropEvent;
class QGraphicsSceneEvent;
class QGraphicsSceneHoverEvent;
class QGraphicsSceneMouseEvent;
class QGraphicsSceneWheelEvent;
class QGraphicsScene;
class QGraphicsWidget;
class QInputMethodEvent;
class QKeyEvent;
class QMatrix;
class QMenu;
class QPainter;
class QPen;
class QPointF;
class QRectF;
class QStyleOptionGraphicsItem;

class QGraphicsItemPrivate;
class  QGraphicsItem
{
public:
enum GraphicsItemFlag {
ItemIsMovable = 0x1,
ItemIsSelectable = 0x2,
ItemIsFocusable = 0x4,
ItemClipsToShape = 0x8,
ItemClipsChildrenToShape = 0x10,
ItemIgnoresTransformations = 0x20
};
typedef QFlags<GraphicsItemFlag> GraphicsItemFlags;

enum GraphicsItemChange {
ItemPositionChange,
ItemMatrixChange,
ItemVisibleChange,
ItemEnabledChange,
ItemSelectedChange,
ItemParentChange,
ItemChildAddedChange,
ItemChildRemovedChange,
ItemTransformChange,
ItemPositionHasChanged,
ItemTransformHasChanged,
ItemSceneChange,
ItemVisibleHasChanged,
ItemEnabledHasChanged,
ItemSelectedHasChanged,
ItemParentHasChanged,
ItemSceneHasChanged,
ItemCursorChange,
ItemCursorHasChanged,
ItemToolTipChange,
ItemToolTipHasChanged,
ItemFlagsChange,
ItemFlagsHaveChanged,
ItemZValueChange,
ItemZValueHasChanged
};

enum CacheMode {
NoCache,
ItemCoordinateCache,
DeviceCoordinateCache
};

QGraphicsItem(QGraphicsItem *parent = 0

# 136 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"

, QGraphicsScene *scene = 0

# 139 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"
);
virtual ~QGraphicsItem();

QGraphicsScene *scene() const;

QGraphicsItem *parentItem() const;
QGraphicsItem *topLevelItem() const;
QGraphicsWidget *parentWidget() const;
QGraphicsWidget *topLevelWidget() const;
QGraphicsWidget *window() const;
void setParentItem(QGraphicsItem *parent);
QList<QGraphicsItem *> children() const; 
QList<QGraphicsItem *> childItems() const;
bool isWidget() const;
bool isWindow() const;

QGraphicsItemGroup *group() const;
void setGroup(QGraphicsItemGroup *group);

GraphicsItemFlags flags() const;
void setFlag(GraphicsItemFlag flag, bool enabled = true);
void setFlags(GraphicsItemFlags flags);

CacheMode cacheMode() const;
void setCacheMode(CacheMode mode, const QSize &cacheSize = QSize());


# 166 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"
QString toolTip() const;
void setToolTip(const QString &toolTip);



# 171 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"
QCursor cursor() const;
void setCursor(const QCursor &cursor);
bool hasCursor() const;
void unsetCursor();


# 177 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"
bool isVisible() const;
bool isVisibleTo(const QGraphicsItem *parent) const;
void setVisible(bool visible);
inline void hide() { setVisible(false); }
inline void show() { setVisible(true); }

bool isEnabled() const;
void setEnabled(bool enabled);

bool isSelected() const;
void setSelected(bool selected);

bool acceptDrops() const;
void setAcceptDrops(bool on);

Qt::MouseButtons acceptedMouseButtons() const;
void setAcceptedMouseButtons(Qt::MouseButtons buttons);

bool acceptsHoverEvents() const; 
void setAcceptsHoverEvents(bool enabled); 
bool acceptHoverEvents() const;
void setAcceptHoverEvents(bool enabled);

bool handlesChildEvents() const;
void setHandlesChildEvents(bool enabled);

bool hasFocus() const;
void setFocus(Qt::FocusReason focusReason = Qt::OtherFocusReason);
void clearFocus();

void grabMouse();
void ungrabMouse();
void grabKeyboard();
void ungrabKeyboard();


QPointF pos() const;
inline qreal x() const { return pos().x(); }
inline qreal y() const { return pos().y(); }
QPointF scenePos() const;
void setPos(const QPointF &pos);
inline void setPos(qreal x, qreal y);
inline void moveBy(qreal dx, qreal dy) { setPos(pos().x() + dx, pos().y() + dy); }

void ensureVisible(const QRectF &rect = QRectF(), int xmargin = 50, int ymargin = 50);
inline void ensureVisible(qreal x, qreal y, qreal w, qreal h, int xmargin = 50, int ymargin = 50);


QMatrix matrix() const;
QMatrix sceneMatrix() const;
void setMatrix(const QMatrix &matrix, bool combine = false);
void resetMatrix();
QTransform transform() const;
QTransform sceneTransform() const;
QTransform deviceTransform(const QTransform &viewportTransform) const;
void setTransform(const QTransform &matrix, bool combine = false);
void resetTransform();

void rotate(qreal angle);
void scale(qreal sx, qreal sy);
void shear(qreal sh, qreal sv);
void translate(qreal dx, qreal dy);
virtual void advance(int phase);


qreal zValue() const;
void setZValue(qreal z);


virtual QRectF boundingRect() const = 0;
QRectF childrenBoundingRect() const;
QRectF sceneBoundingRect() const;
virtual QPainterPath shape() const;
virtual bool contains(const QPointF &point) const;
virtual bool collidesWithItem(const QGraphicsItem *other, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape) const;
virtual bool collidesWithPath(const QPainterPath &path, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape) const;
QList<QGraphicsItem *> collidingItems(Qt::ItemSelectionMode mode = Qt::IntersectsItemShape) const;
bool isObscured() const;
bool isObscured(const QRectF &rect) const; 
inline bool isObscured(qreal x, qreal y, qreal w, qreal h) const;
virtual bool isObscuredBy(const QGraphicsItem *item) const;
virtual QPainterPath opaqueArea() const;

QRegion boundingRegion(const QTransform &itemToDeviceTransform) const;
qreal boundingRegionGranularity() const;
void setBoundingRegionGranularity(qreal granularity);


virtual void paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget = 0) = 0;
void update(const QRectF &rect = QRectF());
inline void update(qreal x, qreal y, qreal width, qreal height);
void scroll(qreal dx, qreal dy, const QRectF &rect = QRectF());


QPointF mapToItem(const QGraphicsItem *item, const QPointF &point) const;
QPointF mapToParent(const QPointF &point) const;
QPointF mapToScene(const QPointF &point) const;
QPolygonF mapToItem(const QGraphicsItem *item, const QRectF &rect) const;
QPolygonF mapToParent(const QRectF &rect) const;
QPolygonF mapToScene(const QRectF &rect) const;
QPolygonF mapToItem(const QGraphicsItem *item, const QPolygonF &polygon) const;
QPolygonF mapToParent(const QPolygonF &polygon) const;
QPolygonF mapToScene(const QPolygonF &polygon) const;
QPainterPath mapToItem(const QGraphicsItem *item, const QPainterPath &path) const;
QPainterPath mapToParent(const QPainterPath &path) const;
QPainterPath mapToScene(const QPainterPath &path) const;
QPointF mapFromItem(const QGraphicsItem *item, const QPointF &point) const;
QPointF mapFromParent(const QPointF &point) const;
QPointF mapFromScene(const QPointF &point) const;
QPolygonF mapFromItem(const QGraphicsItem *item, const QRectF &rect) const;
QPolygonF mapFromParent(const QRectF &rect) const;
QPolygonF mapFromScene(const QRectF &rect) const;
QPolygonF mapFromItem(const QGraphicsItem *item, const QPolygonF &polygon) const;
QPolygonF mapFromParent(const QPolygonF &polygon) const;
QPolygonF mapFromScene(const QPolygonF &polygon) const;
QPainterPath mapFromItem(const QGraphicsItem *item, const QPainterPath &path) const;
QPainterPath mapFromParent(const QPainterPath &path) const;
QPainterPath mapFromScene(const QPainterPath &path) const;

inline QPointF mapToItem(const QGraphicsItem *item, qreal x, qreal y) const;
inline QPointF mapToParent(qreal x, qreal y) const;
inline QPointF mapToScene(qreal x, qreal y) const;
inline QPolygonF mapToItem(const QGraphicsItem *item, qreal x, qreal y, qreal w, qreal h) const;
inline QPolygonF mapToParent(qreal x, qreal y, qreal w, qreal h) const;
inline QPolygonF mapToScene(qreal x, qreal y, qreal w, qreal h) const;
inline QPointF mapFromItem(const QGraphicsItem *item, qreal x, qreal y) const;
inline QPointF mapFromParent(qreal x, qreal y) const;
inline QPointF mapFromScene(qreal x, qreal y) const;
inline QPolygonF mapFromItem(const QGraphicsItem *item, qreal x, qreal y, qreal w, qreal h) const;
inline QPolygonF mapFromParent(qreal x, qreal y, qreal w, qreal h) const;
inline QPolygonF mapFromScene(qreal x, qreal y, qreal w, qreal h) const;

bool isAncestorOf(const QGraphicsItem *child) const;
QGraphicsItem *commonAncestorItem(const QGraphicsItem *other) const;
bool isUnderMouse() const;


QVariant data(int key) const;
void setData(int key, const QVariant &value);

enum {
Type = 1,
UserType = 65536
};
virtual int type() const;

void installSceneEventFilter(QGraphicsItem *filterItem);
void removeSceneEventFilter(QGraphicsItem *filterItem);

protected:
virtual bool sceneEventFilter(QGraphicsItem *watched, QEvent *event);
virtual bool sceneEvent(QEvent *event);
virtual void contextMenuEvent(QGraphicsSceneContextMenuEvent *event);
virtual void dragEnterEvent(QGraphicsSceneDragDropEvent *event);
virtual void dragLeaveEvent(QGraphicsSceneDragDropEvent *event);
virtual void dragMoveEvent(QGraphicsSceneDragDropEvent *event);
virtual void dropEvent(QGraphicsSceneDragDropEvent *event);
virtual void focusInEvent(QFocusEvent *event);
virtual void focusOutEvent(QFocusEvent *event);
virtual void hoverEnterEvent(QGraphicsSceneHoverEvent *event);
virtual void hoverMoveEvent(QGraphicsSceneHoverEvent *event);
virtual void hoverLeaveEvent(QGraphicsSceneHoverEvent *event);
virtual void keyPressEvent(QKeyEvent *event);
virtual void keyReleaseEvent(QKeyEvent *event);
virtual void mousePressEvent(QGraphicsSceneMouseEvent *event);
virtual void mouseMoveEvent(QGraphicsSceneMouseEvent *event);
virtual void mouseReleaseEvent(QGraphicsSceneMouseEvent *event);
virtual void mouseDoubleClickEvent(QGraphicsSceneMouseEvent *event);
virtual void wheelEvent(QGraphicsSceneWheelEvent *event);
virtual void inputMethodEvent(QInputMethodEvent *event);
virtual QVariant inputMethodQuery(Qt::InputMethodQuery query) const;

virtual QVariant itemChange(GraphicsItemChange change, const QVariant &value);

enum Extension {
UserExtension = 0x80000000
};
virtual bool supportsExtension(Extension extension) const;
virtual void setExtension(Extension extension, const QVariant &variant);
virtual QVariant extension(const QVariant &variant) const;

protected:
QGraphicsItem(QGraphicsItemPrivate &dd,
QGraphicsItem *parent, QGraphicsScene *scene);
QGraphicsItemPrivate *d_ptr;

void addToIndex();
void removeFromIndex();
void prepareGeometryChange();

private:
QGraphicsItem(const QGraphicsItem &); QGraphicsItem &operator=(const QGraphicsItem &);
inline QGraphicsItemPrivate* d_func() { return reinterpret_cast<QGraphicsItemPrivate *>(d_ptr); } inline const QGraphicsItemPrivate* d_func() const { return reinterpret_cast<const QGraphicsItemPrivate *>(d_ptr); } friend class QGraphicsItemPrivate;
friend class QGraphicsItemGroup;
friend class QGraphicsScene;
friend class QGraphicsScenePrivate;
friend class QGraphicsSceneFindItemBspTreeVisitor;
friend class QGraphicsView;
friend class QGraphicsViewPrivate;
friend class QGraphicsWidget;
friend class ::tst_QGraphicsItem;
friend bool qt_closestLeaf(const QGraphicsItem *, const QGraphicsItem *);
friend bool qt_closestItemFirst(const QGraphicsItem *, const QGraphicsItem *);
};

inline QFlags<QGraphicsItem::GraphicsItemFlags::enum_type> operator|(QGraphicsItem::GraphicsItemFlags::enum_type f1, QGraphicsItem::GraphicsItemFlags::enum_type f2) { return QFlags<QGraphicsItem::GraphicsItemFlags::enum_type>(f1) | f2; } inline QFlags<QGraphicsItem::GraphicsItemFlags::enum_type> operator|(QGraphicsItem::GraphicsItemFlags::enum_type f1, QFlags<QGraphicsItem::GraphicsItemFlags::enum_type> f2) { return f2 | f1; }
inline void QGraphicsItem::setPos(qreal ax, qreal ay)
{ setPos(QPointF(ax, ay)); }
inline void QGraphicsItem::ensureVisible(qreal ax, qreal ay, qreal w, qreal h, int xmargin, int ymargin)
{ ensureVisible(QRectF(ax, ay, w, h), xmargin, ymargin); }
inline void QGraphicsItem::update(qreal ax, qreal ay, qreal width, qreal height)
{ update(QRectF(ax, ay, width, height)); }
inline bool QGraphicsItem::isObscured(qreal ax, qreal ay, qreal w, qreal h) const
{ return isObscured(QRectF(ax, ay, w, h)); }
inline QPointF QGraphicsItem::mapToItem(const QGraphicsItem *item, qreal ax, qreal ay) const
{ return mapToItem(item, QPointF(ax, ay)); }
inline QPointF QGraphicsItem::mapToParent(qreal ax, qreal ay) const
{ return mapToParent(QPointF(ax, ay)); }
inline QPointF QGraphicsItem::mapToScene(qreal ax, qreal ay) const
{ return mapToScene(QPointF(ax, ay)); }
inline QPointF QGraphicsItem::mapFromItem(const QGraphicsItem *item, qreal ax, qreal ay) const
{ return mapFromItem(item, QPointF(ax, ay)); }
inline QPointF QGraphicsItem::mapFromParent(qreal ax, qreal ay) const
{ return mapFromParent(QPointF(ax, ay)); }
inline QPointF QGraphicsItem::mapFromScene(qreal ax, qreal ay) const
{ return mapFromScene(QPointF(ax, ay)); }
inline QPolygonF QGraphicsItem::mapToItem(const QGraphicsItem *item, qreal ax, qreal ay, qreal w, qreal h) const
{ return mapToItem(item, QRectF(ax, ay, w, h)); }
inline QPolygonF QGraphicsItem::mapToParent(qreal ax, qreal ay, qreal w, qreal h) const
{ return mapToParent(QRectF(ax, ay, w, h)); }
inline QPolygonF QGraphicsItem::mapToScene(qreal ax, qreal ay, qreal w, qreal h) const
{ return mapToScene(QRectF(ax, ay, w, h)); }
inline QPolygonF QGraphicsItem::mapFromItem(const QGraphicsItem *item, qreal ax, qreal ay, qreal w, qreal h) const
{ return mapFromItem(item, QRectF(ax, ay, w, h)); }
inline QPolygonF QGraphicsItem::mapFromParent(qreal ax, qreal ay, qreal w, qreal h) const
{ return mapFromParent(QRectF(ax, ay, w, h)); }
inline QPolygonF QGraphicsItem::mapFromScene(qreal ax, qreal ay, qreal w, qreal h) const
{ return mapFromScene(QRectF(ax, ay, w, h)); }

class QAbstractGraphicsShapeItemPrivate;
class  QAbstractGraphicsShapeItem : public QGraphicsItem
{
public:
QAbstractGraphicsShapeItem(QGraphicsItem *parent = 0

# 422 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"

, QGraphicsScene *scene = 0

# 425 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"
);
~QAbstractGraphicsShapeItem();

QPen pen() const;
void setPen(const QPen &pen);

QBrush brush() const;
void setBrush(const QBrush &brush);

bool isObscuredBy(const QGraphicsItem *item) const;
QPainterPath opaqueArea() const;

protected:
QAbstractGraphicsShapeItem(QAbstractGraphicsShapeItemPrivate &dd,
QGraphicsItem *parent, QGraphicsScene *scene);

private:
QAbstractGraphicsShapeItem(const QAbstractGraphicsShapeItem &); QAbstractGraphicsShapeItem &operator=(const QAbstractGraphicsShapeItem &);
inline QAbstractGraphicsShapeItemPrivate* d_func() { return reinterpret_cast<QAbstractGraphicsShapeItemPrivate *>(d_ptr); } inline const QAbstractGraphicsShapeItemPrivate* d_func() const { return reinterpret_cast<const QAbstractGraphicsShapeItemPrivate *>(d_ptr); } friend class QAbstractGraphicsShapeItemPrivate;
};

class QGraphicsPathItemPrivate;
class  QGraphicsPathItem : public QAbstractGraphicsShapeItem
{
public:
QGraphicsPathItem(QGraphicsItem *parent = 0

# 452 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"

, QGraphicsScene *scene = 0

# 455 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"
);
QGraphicsPathItem(const QPainterPath &path, QGraphicsItem *parent = 0

# 458 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"

, QGraphicsScene *scene = 0

# 461 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"
);
~QGraphicsPathItem();

QPainterPath path() const;
void setPath(const QPainterPath &path);

QRectF boundingRect() const;
QPainterPath shape() const;
bool contains(const QPointF &point) const;

void paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget = 0);

bool isObscuredBy(const QGraphicsItem *item) const;
QPainterPath opaqueArea() const;

enum { Type = 2 };
int type() const;

protected:
bool supportsExtension(Extension extension) const;
void setExtension(Extension extension, const QVariant &variant);
QVariant extension(const QVariant &variant) const;

private:
QGraphicsPathItem(const QGraphicsPathItem &); QGraphicsPathItem &operator=(const QGraphicsPathItem &);
inline QGraphicsPathItemPrivate* d_func() { return reinterpret_cast<QGraphicsPathItemPrivate *>(d_ptr); } inline const QGraphicsPathItemPrivate* d_func() const { return reinterpret_cast<const QGraphicsPathItemPrivate *>(d_ptr); } friend class QGraphicsPathItemPrivate;
};

class QGraphicsRectItemPrivate;
class  QGraphicsRectItem : public QAbstractGraphicsShapeItem
{
public:
QGraphicsRectItem(QGraphicsItem *parent = 0

# 495 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"

, QGraphicsScene *scene = 0

# 498 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"
);
QGraphicsRectItem(const QRectF &rect, QGraphicsItem *parent = 0

# 501 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"

, QGraphicsScene *scene = 0

# 504 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"
);
QGraphicsRectItem(qreal x, qreal y, qreal w, qreal h, QGraphicsItem *parent = 0

# 507 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"

, QGraphicsScene *scene = 0

# 510 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"
);
~QGraphicsRectItem();

QRectF rect() const;
void setRect(const QRectF &rect);
inline void setRect(qreal x, qreal y, qreal w, qreal h);

QRectF boundingRect() const;
QPainterPath shape() const;
bool contains(const QPointF &point) const;

void paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget = 0);

bool isObscuredBy(const QGraphicsItem *item) const;
QPainterPath opaqueArea() const;

enum { Type = 3 };
int type() const;

protected:
bool supportsExtension(Extension extension) const;
void setExtension(Extension extension, const QVariant &variant);
QVariant extension(const QVariant &variant) const;

private:
QGraphicsRectItem(const QGraphicsRectItem &); QGraphicsRectItem &operator=(const QGraphicsRectItem &);
inline QGraphicsRectItemPrivate* d_func() { return reinterpret_cast<QGraphicsRectItemPrivate *>(d_ptr); } inline const QGraphicsRectItemPrivate* d_func() const { return reinterpret_cast<const QGraphicsRectItemPrivate *>(d_ptr); } friend class QGraphicsRectItemPrivate;
};

inline void QGraphicsRectItem::setRect(qreal ax, qreal ay, qreal w, qreal h)
{ setRect(QRectF(ax, ay, w, h)); }

class QGraphicsEllipseItemPrivate;
class  QGraphicsEllipseItem : public QAbstractGraphicsShapeItem
{
public:
QGraphicsEllipseItem(QGraphicsItem *parent = 0

# 548 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"

, QGraphicsScene *scene = 0

# 551 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"
);
QGraphicsEllipseItem(const QRectF &rect, QGraphicsItem *parent = 0

# 554 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"

, QGraphicsScene *scene = 0

# 557 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"
);
QGraphicsEllipseItem(qreal x, qreal y, qreal w, qreal h, QGraphicsItem *parent = 0

# 560 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"

, QGraphicsScene *scene = 0

# 563 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"
);
~QGraphicsEllipseItem();

QRectF rect() const;
void setRect(const QRectF &rect);
inline void setRect(qreal x, qreal y, qreal w, qreal h);

int startAngle() const;
void setStartAngle(int angle);

int spanAngle() const;
void setSpanAngle(int angle);

QRectF boundingRect() const;
QPainterPath shape() const;
bool contains(const QPointF &point) const;

void paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget = 0);

bool isObscuredBy(const QGraphicsItem *item) const;
QPainterPath opaqueArea() const;

enum { Type = 4 };
int type() const;

protected:
bool supportsExtension(Extension extension) const;
void setExtension(Extension extension, const QVariant &variant);
QVariant extension(const QVariant &variant) const;

private:
QGraphicsEllipseItem(const QGraphicsEllipseItem &); QGraphicsEllipseItem &operator=(const QGraphicsEllipseItem &);
inline QGraphicsEllipseItemPrivate* d_func() { return reinterpret_cast<QGraphicsEllipseItemPrivate *>(d_ptr); } inline const QGraphicsEllipseItemPrivate* d_func() const { return reinterpret_cast<const QGraphicsEllipseItemPrivate *>(d_ptr); } friend class QGraphicsEllipseItemPrivate;
};

inline void QGraphicsEllipseItem::setRect(qreal ax, qreal ay, qreal w, qreal h)
{ setRect(QRectF(ax, ay, w, h)); }

class QGraphicsPolygonItemPrivate;
class  QGraphicsPolygonItem : public QAbstractGraphicsShapeItem
{
public:
QGraphicsPolygonItem(QGraphicsItem *parent = 0

# 607 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"

, QGraphicsScene *scene = 0

# 610 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"
);
QGraphicsPolygonItem(const QPolygonF &polygon,
QGraphicsItem *parent = 0

# 614 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"

, QGraphicsScene *scene = 0

# 617 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"
);
~QGraphicsPolygonItem();

QPolygonF polygon() const;
void setPolygon(const QPolygonF &polygon);

Qt::FillRule fillRule() const;
void setFillRule(Qt::FillRule rule);

QRectF boundingRect() const;
QPainterPath shape() const;
bool contains(const QPointF &point) const;

void paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget = 0);

bool isObscuredBy(const QGraphicsItem *item) const;
QPainterPath opaqueArea() const;

enum { Type = 5 };
int type() const;

protected:
bool supportsExtension(Extension extension) const;
void setExtension(Extension extension, const QVariant &variant);
QVariant extension(const QVariant &variant) const;

private:
QGraphicsPolygonItem(const QGraphicsPolygonItem &); QGraphicsPolygonItem &operator=(const QGraphicsPolygonItem &);
inline QGraphicsPolygonItemPrivate* d_func() { return reinterpret_cast<QGraphicsPolygonItemPrivate *>(d_ptr); } inline const QGraphicsPolygonItemPrivate* d_func() const { return reinterpret_cast<const QGraphicsPolygonItemPrivate *>(d_ptr); } friend class QGraphicsPolygonItemPrivate;
};

class QGraphicsLineItemPrivate;
class  QGraphicsLineItem : public QGraphicsItem
{
public:
QGraphicsLineItem(QGraphicsItem *parent = 0

# 654 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"

, QGraphicsScene *scene = 0

# 657 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"
);
QGraphicsLineItem(const QLineF &line, QGraphicsItem *parent = 0

# 660 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"

, QGraphicsScene *scene = 0

# 663 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"
);
QGraphicsLineItem(qreal x1, qreal y1, qreal x2, qreal y2, QGraphicsItem *parent = 0

# 666 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"

, QGraphicsScene *scene = 0

# 669 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"
);
~QGraphicsLineItem();

QPen pen() const;
void setPen(const QPen &pen);

QLineF line() const;
void setLine(const QLineF &line);
inline void setLine(qreal x1, qreal y1, qreal x2, qreal y2)
{ setLine(QLineF(x1, y1, x2, y2)); }

QRectF boundingRect() const;
QPainterPath shape() const;
bool contains(const QPointF &point) const;

void paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget = 0);

bool isObscuredBy(const QGraphicsItem *item) const;
QPainterPath opaqueArea() const;

enum { Type = 6 };
int type() const;

protected:
bool supportsExtension(Extension extension) const;
void setExtension(Extension extension, const QVariant &variant);
QVariant extension(const QVariant &variant) const;

private:
QGraphicsLineItem(const QGraphicsLineItem &); QGraphicsLineItem &operator=(const QGraphicsLineItem &);
inline QGraphicsLineItemPrivate* d_func() { return reinterpret_cast<QGraphicsLineItemPrivate *>(d_ptr); } inline const QGraphicsLineItemPrivate* d_func() const { return reinterpret_cast<const QGraphicsLineItemPrivate *>(d_ptr); } friend class QGraphicsLineItemPrivate;
};

class QGraphicsPixmapItemPrivate;
class  QGraphicsPixmapItem : public QGraphicsItem
{
public:
enum ShapeMode {
MaskShape,
BoundingRectShape,
HeuristicMaskShape
};

QGraphicsPixmapItem(QGraphicsItem *parent = 0

# 714 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"

, QGraphicsScene *scene = 0

# 717 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"
);
QGraphicsPixmapItem(const QPixmap &pixmap, QGraphicsItem *parent = 0

# 720 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"

, QGraphicsScene *scene = 0

# 723 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"
);
~QGraphicsPixmapItem();

QPixmap pixmap() const;
void setPixmap(const QPixmap &pixmap);

Qt::TransformationMode transformationMode() const;
void setTransformationMode(Qt::TransformationMode mode);

QPointF offset() const;
void setOffset(const QPointF &offset);
inline void setOffset(qreal x, qreal y);

QRectF boundingRect() const;
QPainterPath shape() const;
bool contains(const QPointF &point) const;

void paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget);

bool isObscuredBy(const QGraphicsItem *item) const;
QPainterPath opaqueArea() const;

enum { Type = 7 };
int type() const;

ShapeMode shapeMode() const;
void setShapeMode(ShapeMode mode);

protected:
bool supportsExtension(Extension extension) const;
void setExtension(Extension extension, const QVariant &variant);
QVariant extension(const QVariant &variant) const;

private:
QGraphicsPixmapItem(const QGraphicsPixmapItem &); QGraphicsPixmapItem &operator=(const QGraphicsPixmapItem &);
inline QGraphicsPixmapItemPrivate* d_func() { return reinterpret_cast<QGraphicsPixmapItemPrivate *>(d_ptr); } inline const QGraphicsPixmapItemPrivate* d_func() const { return reinterpret_cast<const QGraphicsPixmapItemPrivate *>(d_ptr); } friend class QGraphicsPixmapItemPrivate;
};

inline void QGraphicsPixmapItem::setOffset(qreal ax, qreal ay)
{ setOffset(QPointF(ax, ay)); }

class QGraphicsTextItemPrivate;
class QTextDocument;
class QTextCursor;
class  QGraphicsTextItem : public QObject, public QGraphicsItem
{
Q_OBJECT



public:
QGraphicsTextItem(QGraphicsItem *parent = 0

# 776 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"

, QGraphicsScene *scene = 0

# 779 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"
);
QGraphicsTextItem(const QString &text, QGraphicsItem *parent = 0

# 782 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"

, QGraphicsScene *scene = 0

# 785 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"
);
~QGraphicsTextItem();

QString toHtml() const;
void setHtml(const QString &html);

QString toPlainText() const;
void setPlainText(const QString &text);

QFont font() const;
void setFont(const QFont &font);

void setDefaultTextColor(const QColor &c);
QColor defaultTextColor() const;

QRectF boundingRect() const;
QPainterPath shape() const;
bool contains(const QPointF &point) const;

void paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget);

bool isObscuredBy(const QGraphicsItem *item) const;
QPainterPath opaqueArea() const;

enum { Type = 8 };
int type() const;

void setTextWidth(qreal width);
qreal textWidth() const;

void adjustSize();

void setDocument(QTextDocument *document);
QTextDocument *document() const;

void setTextInteractionFlags(Qt::TextInteractionFlags flags);
Qt::TextInteractionFlags textInteractionFlags() const;

void setOpenExternalLinks(bool open);
bool openExternalLinks() const;

void setTextCursor(const QTextCursor &cursor);
QTextCursor textCursor() const;

signals:
void linkActivated(const QString &);
void linkHovered(const QString &);

protected:
bool sceneEvent(QEvent *event);
void mousePressEvent(QGraphicsSceneMouseEvent *event);
void mouseMoveEvent(QGraphicsSceneMouseEvent *event);
void mouseReleaseEvent(QGraphicsSceneMouseEvent *event);
void mouseDoubleClickEvent(QGraphicsSceneMouseEvent *event);
void contextMenuEvent(QGraphicsSceneContextMenuEvent *event);
void keyPressEvent(QKeyEvent *event);
void keyReleaseEvent(QKeyEvent *event);
void focusInEvent(QFocusEvent *event);
void focusOutEvent(QFocusEvent *event);
void dragEnterEvent(QGraphicsSceneDragDropEvent *event);
void dragLeaveEvent(QGraphicsSceneDragDropEvent *event);
void dragMoveEvent(QGraphicsSceneDragDropEvent *event);
void dropEvent(QGraphicsSceneDragDropEvent *event);
void inputMethodEvent(QInputMethodEvent *event);
void hoverEnterEvent(QGraphicsSceneHoverEvent *event);
void hoverMoveEvent(QGraphicsSceneHoverEvent *event);
void hoverLeaveEvent(QGraphicsSceneHoverEvent *event);

QVariant inputMethodQuery(Qt::InputMethodQuery query) const;

bool supportsExtension(Extension extension) const;
void setExtension(Extension extension, const QVariant &variant);
QVariant extension(const QVariant &variant) const;

private:
QGraphicsTextItem(const QGraphicsTextItem &); QGraphicsTextItem &operator=(const QGraphicsTextItem &);



QGraphicsTextItemPrivate *dd;
friend class QGraphicsTextItemPrivate;
};

class QGraphicsSimpleTextItemPrivate;
class  QGraphicsSimpleTextItem : public QAbstractGraphicsShapeItem
{
public:
QGraphicsSimpleTextItem(QGraphicsItem *parent = 0

# 874 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"

, QGraphicsScene *scene = 0

# 877 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"
);
QGraphicsSimpleTextItem(const QString &text, QGraphicsItem *parent = 0

# 880 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"

, QGraphicsScene *scene = 0

# 883 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"
);
~QGraphicsSimpleTextItem();

void setText(const QString &text);
QString text() const;

void setFont(const QFont &font);
QFont font() const;

QRectF boundingRect() const;
QPainterPath shape() const;
bool contains(const QPointF &point) const;

void paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget);

bool isObscuredBy(const QGraphicsItem *item) const;
QPainterPath opaqueArea() const;

enum { Type = 9 };
int type() const;

protected:
bool supportsExtension(Extension extension) const;
void setExtension(Extension extension, const QVariant &variant);
QVariant extension(const QVariant &variant) const;

private:
QGraphicsSimpleTextItem(const QGraphicsSimpleTextItem &); QGraphicsSimpleTextItem &operator=(const QGraphicsSimpleTextItem &);
inline QGraphicsSimpleTextItemPrivate* d_func() { return reinterpret_cast<QGraphicsSimpleTextItemPrivate *>(d_ptr); } inline const QGraphicsSimpleTextItemPrivate* d_func() const { return reinterpret_cast<const QGraphicsSimpleTextItemPrivate *>(d_ptr); } friend class QGraphicsSimpleTextItemPrivate;
};

class QGraphicsItemGroupPrivate;
class  QGraphicsItemGroup : public QGraphicsItem
{
public:
QGraphicsItemGroup(QGraphicsItem *parent = 0

# 920 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"

, QGraphicsScene *scene = 0

# 923 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"
);
~QGraphicsItemGroup();

void addToGroup(QGraphicsItem *item);
void removeFromGroup(QGraphicsItem *item);

QRectF boundingRect() const;
void paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget = 0);

bool isObscuredBy(const QGraphicsItem *item) const;
QPainterPath opaqueArea() const;

enum { Type = 10 };
int type() const;

private:
QGraphicsItemGroup(const QGraphicsItemGroup &); QGraphicsItemGroup &operator=(const QGraphicsItemGroup &);
inline QGraphicsItemGroupPrivate* d_func() { return reinterpret_cast<QGraphicsItemGroupPrivate *>(d_ptr); } inline const QGraphicsItemGroupPrivate* d_func() const { return reinterpret_cast<const QGraphicsItemGroupPrivate *>(d_ptr); } friend class QGraphicsItemGroupPrivate;
};

template <class T> inline T qgraphicsitem_cast(QGraphicsItem *item)
{
return int(static_cast<T>(0)->Type) == int(QGraphicsItem::Type)
|| (item && int(static_cast<T>(0)->Type) == item->type()) ? static_cast<T>(item) : 0;
}

template <class T> inline T qgraphicsitem_cast(const QGraphicsItem *item)
{
return int(static_cast<T>(0)->Type) == int(QGraphicsItem::Type)
|| (item && int(static_cast<T>(0)->Type) == item->type()) ? static_cast<T>(item) : 0;
}


# 956 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"
 QDebug operator<<(QDebug debug, QGraphicsItem *item);
 QDebug operator<<(QDebug debug, QGraphicsItem::GraphicsItemChange change);


# 960 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"


 template <> struct QMetaTypeId< QGraphicsItem * > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (!metatype_id) metatype_id = qRegisterMetaType< QGraphicsItem * >("QGraphicsItem *"); return metatype_id; } }; 
 template <> struct QMetaTypeId< QGraphicsScene * > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (!metatype_id) metatype_id = qRegisterMetaType< QGraphicsScene * >("QGraphicsScene *"); return metatype_id; } }; 






# 47 "/home/eagle/qt-copy/include/QtGui/qgraphicsgridlayout.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicslayout.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicslayoutitem.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qsizepolicy.h"



































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qgraphicslayoutitem.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qevent.h"






















































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qgraphicslayoutitem.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qgraphicslayoutitem.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 58 "/home/eagle/qt-copy/include/QtGui/qgraphicslayoutitem.h"
class QGraphicsLayoutItemPrivate;
class  QGraphicsLayoutItem
{
public:
QGraphicsLayoutItem(QGraphicsLayoutItem *parent = 0, bool isLayout = false);
virtual ~QGraphicsLayoutItem();

void setSizePolicy(const QSizePolicy &policy);
void setSizePolicy(QSizePolicy::Policy hPolicy, QSizePolicy::Policy vPolicy, QSizePolicy::ControlType controlType = QSizePolicy::DefaultType);
QSizePolicy sizePolicy() const;

void setMinimumSize(const QSizeF &size);
inline void setMinimumSize(qreal w, qreal h);
QSizeF minimumSize() const;
void setMinimumWidth(qreal width);
inline qreal minimumWidth() const;
void setMinimumHeight(qreal height);
inline qreal minimumHeight() const;

void setPreferredSize(const QSizeF &size);
inline void setPreferredSize(qreal w, qreal h);
QSizeF preferredSize() const;
void setPreferredWidth(qreal width);
inline qreal preferredWidth() const;
void setPreferredHeight(qreal height);
inline qreal preferredHeight() const;

void setMaximumSize(const QSizeF &size);
inline void setMaximumSize(qreal w, qreal h);
QSizeF maximumSize() const;
void setMaximumWidth(qreal width);
inline qreal maximumWidth() const;
void setMaximumHeight(qreal height);
inline qreal maximumHeight() const;

virtual void setGeometry(const QRectF &rect);
QRectF geometry() const;
virtual void getContentsMargins(qreal *left, qreal *top, qreal *right, qreal *bottom) const;
QRectF contentsRect() const;

QSizeF effectiveSizeHint(Qt::SizeHint which, const QSizeF &constraint = QSizeF()) const;

virtual void updateGeometry(); 

QGraphicsLayoutItem *parentLayoutItem() const;
void setParentLayoutItem(QGraphicsLayoutItem *parent);

bool isLayout() const;

protected:
QGraphicsLayoutItem(QGraphicsLayoutItemPrivate &dd);

virtual QSizeF sizeHint(Qt::SizeHint which, const QSizeF &constraint = QSizeF()) const = 0;
QGraphicsLayoutItemPrivate *d_ptr;

private:
QSizeF *effectiveSizeHints(const QSizeF &constraint) const;
inline QGraphicsLayoutItemPrivate* d_func() { return reinterpret_cast<QGraphicsLayoutItemPrivate *>(d_ptr); } inline const QGraphicsLayoutItemPrivate* d_func() const { return reinterpret_cast<const QGraphicsLayoutItemPrivate *>(d_ptr); } friend class QGraphicsLayoutItemPrivate;
};

inline void QGraphicsLayoutItem::setMinimumSize(qreal aw, qreal ah)
{ setMinimumSize(QSizeF(aw, ah)); }
inline void QGraphicsLayoutItem::setPreferredSize(qreal aw, qreal ah)
{ setPreferredSize(QSizeF(aw, ah)); }
inline void QGraphicsLayoutItem::setMaximumSize(qreal aw, qreal ah)
{ setMaximumSize(QSizeF(aw, ah)); }

inline qreal QGraphicsLayoutItem::minimumWidth() const
{ return effectiveSizeHint(Qt::MinimumSize).width(); }
inline qreal QGraphicsLayoutItem::minimumHeight() const
{ return effectiveSizeHint(Qt::MinimumSize).height(); }

inline qreal QGraphicsLayoutItem::preferredWidth() const
{ return effectiveSizeHint(Qt::PreferredSize).width(); }
inline qreal QGraphicsLayoutItem::preferredHeight() const
{ return effectiveSizeHint(Qt::PreferredSize).height(); }

inline qreal QGraphicsLayoutItem::maximumWidth() const
{ return effectiveSizeHint(Qt::MaximumSize).width(); }
inline qreal QGraphicsLayoutItem::maximumHeight() const
{ return effectiveSizeHint(Qt::MaximumSize).height(); }



# 142 "/home/eagle/qt-copy/include/QtGui/qgraphicslayoutitem.h"





# 47 "/home/eagle/qt-copy/include/QtGui/qgraphicslayout.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qgraphicslayout.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qgraphicslayout.h"
class QGraphicsLayoutPrivate;
class QGraphicsLayoutItem;
class QGraphicsWidget;

class  QGraphicsLayout : public QGraphicsLayoutItem
{
public:
QGraphicsLayout(QGraphicsLayoutItem *parent = 0);
~QGraphicsLayout();

void setContentsMargins(qreal left, qreal top, qreal right, qreal bottom);
void getContentsMargins(qreal *left, qreal *top, qreal *right, qreal *bottom) const;

void activate();
bool isActivated() const;
virtual void invalidate();

virtual void widgetEvent(QEvent *e);

virtual int count() const = 0;
virtual QGraphicsLayoutItem *itemAt(int i) const = 0;
virtual void removeAt(int index) = 0;

protected:
QGraphicsLayout(QGraphicsLayoutPrivate &, QGraphicsLayoutItem *);

private:
QGraphicsLayout(const QGraphicsLayout &); QGraphicsLayout &operator=(const QGraphicsLayout &);
inline QGraphicsLayoutPrivate* d_func() { return reinterpret_cast<QGraphicsLayoutPrivate *>(d_ptr); } inline const QGraphicsLayoutPrivate* d_func() const { return reinterpret_cast<const QGraphicsLayoutPrivate *>(d_ptr); } friend class QGraphicsLayoutPrivate;
friend class QGraphicsWidget;
};



# 91 "/home/eagle/qt-copy/include/QtGui/qgraphicslayout.h"






# 48 "/home/eagle/qt-copy/include/QtGui/qgraphicsgridlayout.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qgraphicsgridlayout.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 58 "/home/eagle/qt-copy/include/QtGui/qgraphicsgridlayout.h"
class QGraphicsGridLayoutPrivate;

class  QGraphicsGridLayout : public QGraphicsLayout
{
public:
QGraphicsGridLayout(QGraphicsLayoutItem *parent = 0);
virtual ~QGraphicsGridLayout();

void addItem(QGraphicsLayoutItem *item, int row, int column, int rowSpan, int columnSpan,
Qt::Alignment alignment = 0);
inline void addItem(QGraphicsLayoutItem *item, int row, int column, Qt::Alignment alignment = 0);

void setHorizontalSpacing(qreal spacing);
qreal horizontalSpacing() const;
void setVerticalSpacing(qreal spacing);
qreal verticalSpacing() const;
void setSpacing(qreal spacing);

void setRowSpacing(int row, qreal spacing);
qreal rowSpacing(int row) const;
void setColumnSpacing(int column, qreal spacing);
qreal columnSpacing(int column) const;

void setRowStretchFactor(int row, int stretch);
int rowStretchFactor(int row) const;
void setColumnStretchFactor(int column, int stretch);
int columnStretchFactor(int column) const;

void setRowMinimumHeight(int row, qreal height);
qreal rowMinimumHeight(int row) const;
void setRowPreferredHeight(int row, qreal height);
qreal rowPreferredHeight(int row) const;
void setRowMaximumHeight(int row, qreal height);
qreal rowMaximumHeight(int row) const;
void setRowFixedHeight(int row, qreal height);

void setColumnMinimumWidth(int column, qreal width);
qreal columnMinimumWidth(int column) const;
void setColumnPreferredWidth(int column, qreal width);
qreal columnPreferredWidth(int column) const;
void setColumnMaximumWidth(int column, qreal width);
qreal columnMaximumWidth(int column) const;
void setColumnFixedWidth(int column, qreal width);

void setRowAlignment(int row, Qt::Alignment alignment);
Qt::Alignment rowAlignment(int row) const;
void setColumnAlignment(int column, Qt::Alignment alignment);
Qt::Alignment columnAlignment(int column) const;

void setAlignment(QGraphicsLayoutItem *item, Qt::Alignment alignment);
Qt::Alignment alignment(QGraphicsLayoutItem *item) const;

int rowCount() const;
int columnCount() const;

QGraphicsLayoutItem *itemAt(int row, int column) const;


int count() const;
QGraphicsLayoutItem *itemAt(int index) const;
void removeAt(int index);

void invalidate();


void setGeometry(const QRectF &rect);
QSizeF sizeHint(Qt::SizeHint which, const QSizeF &constraint = QSizeF()) const;





private:
QGraphicsGridLayout(const QGraphicsGridLayout &); QGraphicsGridLayout &operator=(const QGraphicsGridLayout &);
inline QGraphicsGridLayoutPrivate* d_func() { return reinterpret_cast<QGraphicsGridLayoutPrivate *>(d_ptr); } inline const QGraphicsGridLayoutPrivate* d_func() const { return reinterpret_cast<const QGraphicsGridLayoutPrivate *>(d_ptr); } friend class QGraphicsGridLayoutPrivate;
};

inline void QGraphicsGridLayout::addItem(QGraphicsLayoutItem *aitem, int arow, int acolumn, Qt::Alignment aalignment)
{ addItem(aitem, arow, acolumn, 1, 1, aalignment); }



# 140 "/home/eagle/qt-copy/include/QtGui/qgraphicsgridlayout.h"






# 23 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 24 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicsitemanimation.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qgraphicsitemanimation.h"




# 51 "/home/eagle/qt-copy/include/QtGui/qgraphicsitemanimation.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QGraphicsItem;
class QMatrix;
class QPointF;
class QTimeLine;
template <class T1, class T2> struct QPair;

class QGraphicsItemAnimationPrivate;
class  QGraphicsItemAnimation : public QObject
{
Q_OBJECT
public:
QGraphicsItemAnimation(QObject *parent = 0);
virtual ~QGraphicsItemAnimation();

QGraphicsItem *item() const;
void setItem(QGraphicsItem *item);

QTimeLine *timeLine() const;
void setTimeLine(QTimeLine *timeLine);

QPointF posAt(qreal step) const;
QList<QPair<qreal, QPointF> > posList() const;
void setPosAt(qreal step, const QPointF &pos);

QMatrix matrixAt(qreal step) const;

qreal rotationAt(qreal step) const;
QList<QPair<qreal, qreal> > rotationList() const;
void setRotationAt(qreal step, qreal angle);

qreal xTranslationAt(qreal step) const;
qreal yTranslationAt(qreal step) const;
QList<QPair<qreal, QPointF> > translationList() const;
void setTranslationAt(qreal step, qreal dx, qreal dy);

qreal verticalScaleAt(qreal step) const;
qreal horizontalScaleAt(qreal step) const;
QList<QPair<qreal, QPointF> > scaleList() const;
void setScaleAt(qreal step, qreal sx, qreal sy);

qreal verticalShearAt(qreal step) const;
qreal horizontalShearAt(qreal step) const;
QList<QPair<qreal, QPointF> > shearList() const;
void setShearAt(qreal step, qreal sh, qreal sv);

void clear();

public slots:
void setStep(qreal x);
void reset();

protected:
virtual void beforeAnimationStep(qreal step);
virtual void afterAnimationStep(qreal step);

private:
QGraphicsItemAnimation(const QGraphicsItemAnimation &); QGraphicsItemAnimation &operator=(const QGraphicsItemAnimation &);
QGraphicsItemAnimationPrivate *d;
};







# 25 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicslayout.h"
































































































# 26 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicslayoutitem.h"


















































































































































# 27 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicslinearlayout.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qgraphicslinearlayout.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicslayout.h"
































































































# 48 "/home/eagle/qt-copy/include/QtGui/qgraphicslinearlayout.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qgraphicslinearlayout.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 58 "/home/eagle/qt-copy/include/QtGui/qgraphicslinearlayout.h"
class QGraphicsLinearLayoutPrivate;

class  QGraphicsLinearLayout : public QGraphicsLayout
{
Q_PROPERTY(Qt::Orientation orientation READ orientation WRITE setOrientation)
Q_PROPERTY(qreal spacing READ spacing WRITE setSpacing)
public:
QGraphicsLinearLayout(QGraphicsLayoutItem *parent = 0);
QGraphicsLinearLayout(Qt::Orientation orientation, QGraphicsLayoutItem *parent = 0);
virtual ~QGraphicsLinearLayout();

void setOrientation(Qt::Orientation orientation);
Qt::Orientation orientation() const;

inline void addItem(QGraphicsLayoutItem *item) { insertItem(-1, item); }
inline void addStretch(int stretch = 1) { insertStretch(-1, stretch); }

void insertItem(int index, QGraphicsLayoutItem *item);
void insertStretch(int index, int stretch = 1);

void removeItem(QGraphicsLayoutItem *item);
void removeAt(int index);

void setSpacing(qreal spacing);
qreal spacing() const;
void setItemSpacing(int index, qreal spacing);
qreal itemSpacing(int index) const;

void setStretchFactor(QGraphicsLayoutItem *item, int stretch);
int stretchFactor(QGraphicsLayoutItem *item) const;

void setAlignment(QGraphicsLayoutItem *item, Qt::Alignment alignment);
Qt::Alignment alignment(QGraphicsLayoutItem *item) const;

void setGeometry(const QRectF &rect);

int count() const;
QGraphicsLayoutItem *itemAt(int index) const;

void invalidate();
QSizeF sizeHint(Qt::SizeHint which, const QSizeF &constraint = QSizeF()) const;









# 108 "/home/eagle/qt-copy/include/QtGui/qgraphicslinearlayout.h"
protected:




# 113 "/home/eagle/qt-copy/include/QtGui/qgraphicslinearlayout.h"
private:
QGraphicsLinearLayout(const QGraphicsLinearLayout &); QGraphicsLinearLayout &operator=(const QGraphicsLinearLayout &);
inline QGraphicsLinearLayoutPrivate* d_func() { return reinterpret_cast<QGraphicsLinearLayoutPrivate *>(d_ptr); } inline const QGraphicsLinearLayoutPrivate* d_func() const { return reinterpret_cast<const QGraphicsLinearLayoutPrivate *>(d_ptr); } friend class QGraphicsLinearLayoutPrivate;
};



# 120 "/home/eagle/qt-copy/include/QtGui/qgraphicslinearlayout.h"






# 28 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicsproxywidget.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicswidget.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qfont.h"

































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qgraphicswidget.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicslayoutitem.h"


















































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qgraphicswidget.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qgraphicswidget.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qpalette.h"






































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtGui/qgraphicswidget.h"


# 52 "/home/eagle/qt-copy/include/QtGui/qgraphicswidget.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QFont;
class QFontMetrics;
class QGraphicsLayout;
class QGraphicsSceneMoveEvent;
class QGraphicsWidgetPrivate;
class QGraphicsSceneResizeEvent;
class QStyle;
class QStyleOption;



# 69 "/home/eagle/qt-copy/include/QtGui/qgraphicswidget.h"
class QGraphicsWidgetPrivate;

class  QGraphicsWidget : public QObject, public QGraphicsItem, public QGraphicsLayoutItem
{
Q_OBJECT
Q_PROPERTY(QPalette palette READ palette WRITE setPalette)
Q_PROPERTY(QFont font READ font WRITE setFont)
Q_PROPERTY(Qt::LayoutDirection layoutDirection READ layoutDirection WRITE setLayoutDirection RESET unsetLayoutDirection)
Q_PROPERTY(QSizeF size READ size WRITE resize)
Q_PROPERTY(Qt::FocusPolicy focusPolicy READ focusPolicy WRITE setFocusPolicy)
Q_PROPERTY(bool enabled READ isEnabled WRITE setEnabled)
Q_PROPERTY(bool visible READ isVisible WRITE setVisible)
Q_PROPERTY(Qt::WindowFlags windowFlags READ windowFlags WRITE setWindowFlags)
Q_PROPERTY(QString windowTitle READ windowTitle WRITE setWindowTitle)

public:
QGraphicsWidget(QGraphicsItem *parent = 0, Qt::WindowFlags wFlags = 0);
~QGraphicsWidget();

QGraphicsLayout *layout() const;
void setLayout(QGraphicsLayout *layout);
void adjustSize();

Qt::LayoutDirection layoutDirection() const;
void setLayoutDirection(Qt::LayoutDirection direction);
void unsetLayoutDirection();

QStyle *style() const;
void setStyle(QStyle *style);

QFont font() const;
void setFont(const QFont &font);

QPalette palette() const;
void setPalette(const QPalette &palette);

void resize(const QSizeF &size);
inline void resize(qreal w, qreal h) { resize(QSizeF(w, h)); }
QSizeF size() const;

void setGeometry(const QRectF &rect);
inline void setGeometry(qreal x, qreal y, qreal w, qreal h);
inline QRectF rect() const { return QRectF(QPointF(), size()); }

void setContentsMargins(qreal left, qreal top, qreal right, qreal bottom);
void getContentsMargins(qreal *left, qreal *top, qreal *right, qreal *bottom) const;

void setWindowFrameMargins(qreal left, qreal top, qreal right, qreal bottom);
void getWindowFrameMargins(qreal *left, qreal *top, qreal *right, qreal *bottom) const;
void unsetWindowFrameMargins();
QRectF windowFrameGeometry() const;
QRectF windowFrameRect() const;


Qt::WindowFlags windowFlags() const;
Qt::WindowType windowType() const;
void setWindowFlags(Qt::WindowFlags wFlags);
bool isActiveWindow() const;
void setWindowTitle(const QString &title);
QString windowTitle() const;


Qt::FocusPolicy focusPolicy() const;
void setFocusPolicy(Qt::FocusPolicy policy);
static void setTabOrder(QGraphicsWidget *first, QGraphicsWidget *second);
QGraphicsWidget *focusWidget() const;

void setAttribute(Qt::WidgetAttribute attribute, bool on = true);
bool testAttribute(Qt::WidgetAttribute attribute) const;

enum {
Type = 11
};
int type() const;

void paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget = 0);
virtual void paintWindowFrame(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget = 0);
QRectF boundingRect() const;
QPainterPath shape() const;





# 153 "/home/eagle/qt-copy/include/QtGui/qgraphicswidget.h"


# 155 "/home/eagle/qt-copy/include/QtGui/qgraphicswidget.h"
const QObjectList &children() const { return QObject::children(); }




# 160 "/home/eagle/qt-copy/include/QtGui/qgraphicswidget.h"
public slots:
bool close();

protected:
virtual void initStyleOption(QStyleOption *option) const;

QSizeF sizeHint(Qt::SizeHint which, const QSizeF &constraint = QSizeF()) const;
void updateGeometry();


QVariant itemChange(GraphicsItemChange change, const QVariant &value);
virtual QVariant propertyChange(const QString &propertyName, const QVariant &value);


bool sceneEvent(QEvent *event);
virtual bool windowFrameEvent(QEvent *e);
virtual Qt::WindowFrameSection windowFrameSectionAt(const QPointF& pos) const;


bool event(QEvent *event);

virtual void changeEvent(QEvent *event);
virtual void closeEvent(QCloseEvent *event);


void focusInEvent(QFocusEvent *event);
virtual bool focusNextPrevChild(bool next);
void focusOutEvent(QFocusEvent *event);
virtual void hideEvent(QHideEvent *event);


virtual void moveEvent(QGraphicsSceneMoveEvent *event);
virtual void polishEvent();


virtual void resizeEvent(QGraphicsSceneResizeEvent *event);
virtual void showEvent(QShowEvent *event);



virtual void hoverMoveEvent(QGraphicsSceneHoverEvent *event);
virtual void hoverLeaveEvent(QGraphicsSceneHoverEvent *event);
virtual void grabMouseEvent(QEvent *event);
virtual void ungrabMouseEvent(QEvent *event);
virtual void grabKeyboardEvent(QEvent *event);
virtual void ungrabKeyboardEvent(QEvent *event);
QGraphicsWidget(QGraphicsWidgetPrivate &, QGraphicsItem *parent, QGraphicsScene *, Qt::WindowFlags wFlags = 0);

private:
QGraphicsWidget(const QGraphicsWidget &); QGraphicsWidget &operator=(const QGraphicsWidget &);
inline QGraphicsWidgetPrivate* d_func() { return reinterpret_cast<QGraphicsWidgetPrivate *>(QGraphicsItem::d_ptr); } inline const QGraphicsWidgetPrivate* d_func() const { return reinterpret_cast<const QGraphicsWidgetPrivate *>(QGraphicsItem::d_ptr); } friend class QGraphicsWidgetPrivate;
friend class QGraphicsScene;
friend class QGraphicsScenePrivate;
friend class QGraphicsView;
friend class QGraphicsLayout;
friend class QWidget;
friend class QApplication;
};

inline void QGraphicsWidget::setGeometry(qreal ax, qreal ay, qreal aw, qreal ah)
{ setGeometry(QRectF(ax, ay, aw, ah)); }



# 224 "/home/eagle/qt-copy/include/QtGui/qgraphicswidget.h"






# 47 "/home/eagle/qt-copy/include/QtGui/qgraphicsproxywidget.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qgraphicsproxywidget.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qgraphicsproxywidget.h"
class QGraphicsProxyWidgetPrivate;

class  QGraphicsProxyWidget : public QGraphicsWidget
{
Q_OBJECT
public:
QGraphicsProxyWidget(QGraphicsItem *parent = 0, Qt::WindowFlags wFlags = 0);
~QGraphicsProxyWidget();

void setWidget(QWidget *widget);
QWidget *widget() const;

QRectF subWidgetRect(const QWidget *widget) const;

void setGeometry(const QRectF &rect);

void paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget);

enum {
Type = 12
};
int type() const;

protected:
QVariant itemChange(GraphicsItemChange change, const QVariant &value);

bool event(QEvent *event);
bool eventFilter(QObject *object, QEvent *event);

void showEvent(QShowEvent *event);
void hideEvent(QHideEvent *event);

void contextMenuEvent(QGraphicsSceneContextMenuEvent *event);

void hoverEnterEvent(QGraphicsSceneHoverEvent *event);
void hoverLeaveEvent(QGraphicsSceneHoverEvent *event);
void hoverMoveEvent(QGraphicsSceneHoverEvent *event);
void grabMouseEvent(QEvent *event);
void ungrabMouseEvent(QEvent *event);

void mouseMoveEvent(QGraphicsSceneMouseEvent *event);
void mousePressEvent(QGraphicsSceneMouseEvent *event);
void mouseReleaseEvent(QGraphicsSceneMouseEvent *event);
void mouseDoubleClickEvent(QGraphicsSceneMouseEvent *event);

# 102 "/home/eagle/qt-copy/include/QtGui/qgraphicsproxywidget.h"
void wheelEvent(QGraphicsSceneWheelEvent *event);


# 105 "/home/eagle/qt-copy/include/QtGui/qgraphicsproxywidget.h"
void keyPressEvent(QKeyEvent *event);
void keyReleaseEvent(QKeyEvent *event);

void focusInEvent(QFocusEvent *event);
void focusOutEvent(QFocusEvent *event);
bool focusNextPrevChild(bool next);

QSizeF sizeHint(Qt::SizeHint which, const QSizeF &constraint = QSizeF()) const;
void resizeEvent(QGraphicsSceneResizeEvent *event);

private:
QGraphicsProxyWidget(const QGraphicsProxyWidget &); QGraphicsProxyWidget &operator=(const QGraphicsProxyWidget &);
inline QGraphicsProxyWidgetPrivate* d_func() { return reinterpret_cast<QGraphicsProxyWidgetPrivate *>(QGraphicsItem::d_ptr); } inline const QGraphicsProxyWidgetPrivate* d_func() const { return reinterpret_cast<const QGraphicsProxyWidgetPrivate *>(QGraphicsItem::d_ptr); } friend class QGraphicsProxyWidgetPrivate;


friend class QWidget;
friend class QWidgetPrivate;
};



# 126 "/home/eagle/qt-copy/include/QtGui/qgraphicsproxywidget.h"






# 29 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicsscene.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qgraphicsscene.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qpoint.h"






































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qgraphicsscene.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qrect.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qgraphicsscene.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qbrush.h"

























































































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtGui/qgraphicsscene.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qfont.h"

































































































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtGui/qgraphicsscene.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qtransform.h"































































































































































































































































































































































# 52 "/home/eagle/qt-copy/include/QtGui/qgraphicsscene.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qmatrix.h"















































































































































































# 53 "/home/eagle/qt-copy/include/QtGui/qgraphicsscene.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qpen.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qcolor.h"





















































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qpen.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qpen.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QVariant;
class QPenPrivate;
class QBrush;
class QPen;


# 61 "/home/eagle/qt-copy/include/QtGui/qpen.h"
 QDataStream &operator<<(QDataStream &, const QPen &);
 QDataStream &operator>>(QDataStream &, QPen &);


# 65 "/home/eagle/qt-copy/include/QtGui/qpen.h"
class  QPen
{
public:
QPen();
QPen(Qt::PenStyle);
QPen(const QColor &color);
QPen(const QBrush &brush, qreal width, Qt::PenStyle s = Qt::SolidLine,
Qt::PenCapStyle c = Qt::SquareCap, Qt::PenJoinStyle j = Qt::BevelJoin);
QPen(const QPen &pen);

~QPen();

QPen &operator=(const QPen &pen);

Qt::PenStyle style() const;
void setStyle(Qt::PenStyle);

QVector<qreal> dashPattern() const;
void setDashPattern(const QVector<qreal> &pattern);

qreal dashOffset() const;
void setDashOffset(qreal doffset);

qreal miterLimit() const;
void setMiterLimit(qreal limit);

qreal widthF() const;
void setWidthF(qreal width);

int width() const;
void setWidth(int width);

QColor color() const;
void setColor(const QColor &color);

QBrush brush() const;
void setBrush(const QBrush &brush);

bool isSolid() const;

Qt::PenCapStyle capStyle() const;
void setCapStyle(Qt::PenCapStyle pcs);

Qt::PenJoinStyle joinStyle() const;
void setJoinStyle(Qt::PenJoinStyle pcs);

bool isCosmetic() const;
void setCosmetic(bool cosmetic);

bool operator==(const QPen &p) const;
inline bool operator!=(const QPen &p) const { return !(operator==(p)); }
operator QVariant() const;

bool isDetached();
private:
friend class QPainter;
friend  QDataStream &operator>>(QDataStream &, QPen &);
friend  QDataStream &operator<<(QDataStream &, const QPen &);

void detach();
class QPenPrivate *d;

public:
typedef QPenPrivate * DataPtr;
inline DataPtr &data_ptr() { return d; }
};
template <> class QTypeInfo<QPen> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QPen)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QPen"; } };
template <> inline bool qIsDetached<QPen>(QPen &t) { return t.isDetached(); } template <typename T> inline void qSwap(T &, T &); template <> inline void qSwap<QPen>(QPen &value1, QPen &value2) { const QPen::DataPtr t = value1.data_ptr(); value1.data_ptr() = value2.data_ptr(); value2.data_ptr() = t; }


# 135 "/home/eagle/qt-copy/include/QtGui/qpen.h"
 QDebug operator<<(QDebug, const QPen &);


# 138 "/home/eagle/qt-copy/include/QtGui/qpen.h"





# 54 "/home/eagle/qt-copy/include/QtGui/qgraphicsscene.h"


# 56 "/home/eagle/qt-copy/include/QtGui/qgraphicsscene.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 64 "/home/eagle/qt-copy/include/QtGui/qgraphicsscene.h"
template<typename T> class QList;
class QFocusEvent;
class QFont;
class QFontMetrics;
class QGraphicsEllipseItem;
class QGraphicsItem;
class QGraphicsItemGroup;
class QGraphicsLineItem;
class QGraphicsPathItem;
class QGraphicsPixmapItem;
class QGraphicsPolygonItem;
class QGraphicsProxyWidget;
class QGraphicsRectItem;
class QGraphicsSceneContextMenuEvent;
class QGraphicsSceneDragDropEvent;
class QGraphicsSceneEvent;
class QGraphicsSceneHelpEvent;
class QGraphicsSceneHoverEvent;
class QGraphicsSceneMouseEvent;
class QGraphicsSceneWheelEvent;
class QGraphicsSimpleTextItem;
class QGraphicsTextItem;
class QGraphicsView;
class QGraphicsWidget;
class QHelpEvent;
class QInputMethodEvent;
class QKeyEvent;
class QLineF;
class QPainterPath;
class QPixmap;
class QPointF;
class QPolygonF;
class QRectF;
class QSizeF;
class QStyle;
class QStyleOptionGraphicsItem;

class QGraphicsScenePrivate;
class  QGraphicsScene : public QObject
{
Q_OBJECT
Q_PROPERTY(QBrush backgroundBrush READ backgroundBrush WRITE setBackgroundBrush)
Q_PROPERTY(QBrush foregroundBrush READ foregroundBrush WRITE setForegroundBrush)
Q_PROPERTY(ItemIndexMethod itemIndexMethod READ itemIndexMethod WRITE setItemIndexMethod)
Q_PROPERTY(QRectF sceneRect READ sceneRect WRITE setSceneRect)
Q_PROPERTY(int bspTreeDepth READ bspTreeDepth WRITE setBspTreeDepth)
Q_PROPERTY(QPalette palette READ palette WRITE setPalette)
Q_PROPERTY(QFont font READ font WRITE setFont)

public:
enum ItemIndexMethod {
BspTreeIndex,
NoIndex = -1
};

enum SceneLayer {
ItemLayer = 0x1,
BackgroundLayer = 0x2,
ForegroundLayer = 0x4,
AllLayers = 0xffff
};
typedef QFlags<SceneLayer> SceneLayers;

QGraphicsScene(QObject *parent = 0);
QGraphicsScene(const QRectF &sceneRect, QObject *parent = 0);
QGraphicsScene(qreal x, qreal y, qreal width, qreal height, QObject *parent = 0);
virtual ~QGraphicsScene();

QRectF sceneRect() const;
inline qreal width() const { return sceneRect().width(); }
inline qreal height() const { return sceneRect().height(); }
void setSceneRect(const QRectF &rect);
inline void setSceneRect(qreal x, qreal y, qreal w, qreal h)
{ setSceneRect(QRectF(x, y, w, h)); }

void render(QPainter *painter,
const QRectF &target = QRectF(), const QRectF &source = QRectF(),
Qt::AspectRatioMode aspectRatioMode = Qt::KeepAspectRatio);

ItemIndexMethod itemIndexMethod() const;
void setItemIndexMethod(ItemIndexMethod method);

int bspTreeDepth() const;
void setBspTreeDepth(int depth);

QRectF itemsBoundingRect() const;

QList<QGraphicsItem *> items() const;
QList<QGraphicsItem *> items(const QPointF &pos) const;
QList<QGraphicsItem *> items(const QRectF &rect, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape) const;
QList<QGraphicsItem *> items(const QPolygonF &polygon, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape) const;
QList<QGraphicsItem *> items(const QPainterPath &path, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape) const;
QList<QGraphicsItem *> collidingItems(const QGraphicsItem *item, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape) const;
QGraphicsItem *itemAt(const QPointF &pos) const;

inline QList<QGraphicsItem *> items(qreal x, qreal y, qreal w, qreal h, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape) const
{ return items(QRectF(x, y, w, h), mode); }
inline QGraphicsItem *itemAt(qreal x, qreal y) const
{ return itemAt(QPointF(x, y)); }

QList<QGraphicsItem *> selectedItems() const;
QPainterPath selectionArea() const;
void setSelectionArea(const QPainterPath &path);
void setSelectionArea(const QPainterPath &path, Qt::ItemSelectionMode);

QGraphicsItemGroup *createItemGroup(const QList<QGraphicsItem *> &items);
void destroyItemGroup(QGraphicsItemGroup *group);

void addItem(QGraphicsItem *item);
QGraphicsEllipseItem *addEllipse(const QRectF &rect, const QPen &pen = QPen(), const QBrush &brush = QBrush());
QGraphicsLineItem *addLine(const QLineF &line, const QPen &pen = QPen());
QGraphicsPathItem *addPath(const QPainterPath &path, const QPen &pen = QPen(), const QBrush &brush = QBrush());
QGraphicsPixmapItem *addPixmap(const QPixmap &pixmap);
QGraphicsPolygonItem *addPolygon(const QPolygonF &polygon, const QPen &pen = QPen(), const QBrush &brush = QBrush());
QGraphicsRectItem *addRect(const QRectF &rect, const QPen &pen = QPen(), const QBrush &brush = QBrush());
QGraphicsTextItem *addText(const QString &text, const QFont &font = QFont());
QGraphicsSimpleTextItem *addSimpleText(const QString &text, const QFont &font = QFont());
QGraphicsProxyWidget *addWidget(QWidget *widget, Qt::WindowFlags wFlags = 0);
inline QGraphicsEllipseItem *addEllipse(qreal x, qreal y, qreal w, qreal h, const QPen &pen = QPen(), const QBrush &brush = QBrush())
{ return addEllipse(QRectF(x, y, w, h), pen, brush); }
inline QGraphicsLineItem *addLine(qreal x1, qreal y1, qreal x2, qreal y2, const QPen &pen = QPen())
{ return addLine(QLineF(x1, y1, x2, y2), pen); }
inline QGraphicsRectItem *addRect(qreal x, qreal y, qreal w, qreal h, const QPen &pen = QPen(), const QBrush &brush = QBrush())
{ return addRect(QRectF(x, y, w, h), pen, brush); }
void removeItem(QGraphicsItem *item);

QGraphicsItem *focusItem() const;
void setFocusItem(QGraphicsItem *item, Qt::FocusReason focusReason = Qt::OtherFocusReason);
bool hasFocus() const;
void setFocus(Qt::FocusReason focusReason = Qt::OtherFocusReason);
void clearFocus();

QGraphicsItem *mouseGrabberItem() const;

QBrush backgroundBrush() const;
void setBackgroundBrush(const QBrush &brush);

QBrush foregroundBrush() const;
void setForegroundBrush(const QBrush &brush);

virtual QVariant inputMethodQuery(Qt::InputMethodQuery query) const;

QList <QGraphicsView *> views() const;

inline void update(qreal x, qreal y, qreal w, qreal h)
{ update(QRectF(x, y, w, h)); }
inline void invalidate(qreal x, qreal y, qreal w, qreal h, SceneLayers layers = AllLayers)
{ invalidate(QRectF(x, y, w, h), layers); }

QStyle *style() const;
void setStyle(QStyle *style);

QFont font() const;
void setFont(const QFont &font);

QPalette palette() const;
void setPalette(const QPalette &palette);

QGraphicsWidget *activeWindow() const;
void setActiveWindow(QGraphicsWidget *widget);

public slots:
void update(const QRectF &rect = QRectF());
void invalidate(const QRectF &rect = QRectF(), SceneLayers layers = AllLayers);
void advance();
void clearSelection();
void clear();

protected:
bool event(QEvent *event);
bool eventFilter(QObject *watched, QEvent *event);
virtual void contextMenuEvent(QGraphicsSceneContextMenuEvent *event);
virtual void dragEnterEvent(QGraphicsSceneDragDropEvent *event);
virtual void dragMoveEvent(QGraphicsSceneDragDropEvent *event);
virtual void dragLeaveEvent(QGraphicsSceneDragDropEvent *event);
virtual void dropEvent(QGraphicsSceneDragDropEvent *event);
virtual void focusInEvent(QFocusEvent *event);
virtual void focusOutEvent(QFocusEvent *event);
virtual void helpEvent(QGraphicsSceneHelpEvent *event);
virtual void keyPressEvent(QKeyEvent *event);
virtual void keyReleaseEvent(QKeyEvent *event);
virtual void mousePressEvent(QGraphicsSceneMouseEvent *event);
virtual void mouseMoveEvent(QGraphicsSceneMouseEvent *event);
virtual void mouseReleaseEvent(QGraphicsSceneMouseEvent *event);
virtual void mouseDoubleClickEvent(QGraphicsSceneMouseEvent *event);
virtual void wheelEvent(QGraphicsSceneWheelEvent *event);
virtual void inputMethodEvent(QInputMethodEvent *event);

virtual void drawBackground(QPainter *painter, const QRectF &rect);
virtual void drawForeground(QPainter *painter, const QRectF &rect);
virtual void drawItems(QPainter *painter, int numItems,
QGraphicsItem *items[],
const QStyleOptionGraphicsItem options[],
QWidget *widget = 0);

protected slots:
bool focusNextPrevChild(bool next);

signals:
void changed(const QList<QRectF> &region);
void sceneRectChanged(const QRectF &rect);
void selectionChanged();

private:
void itemUpdated(QGraphicsItem *item, const QRectF &rect);

inline QGraphicsScenePrivate* d_func() { return reinterpret_cast<QGraphicsScenePrivate *>(d_ptr); } inline const QGraphicsScenePrivate* d_func() const { return reinterpret_cast<const QGraphicsScenePrivate *>(d_ptr); } friend class QGraphicsScenePrivate;
QGraphicsScene(const QGraphicsScene &); QGraphicsScene &operator=(const QGraphicsScene &);





friend class QGraphicsItem;
friend class QGraphicsItemPrivate;
friend class QGraphicsView;
friend class QGraphicsViewPrivate;
friend class QGraphicsWidget;
};

inline QFlags<QGraphicsScene::SceneLayers::enum_type> operator|(QGraphicsScene::SceneLayers::enum_type f1, QGraphicsScene::SceneLayers::enum_type f2) { return QFlags<QGraphicsScene::SceneLayers::enum_type>(f1) | f2; } inline QFlags<QGraphicsScene::SceneLayers::enum_type> operator|(QGraphicsScene::SceneLayers::enum_type f1, QFlags<QGraphicsScene::SceneLayers::enum_type> f2) { return f2 | f1; }








# 30 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicssceneevent.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qcoreevent.h"




































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qgraphicssceneevent.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qpoint.h"






































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qgraphicssceneevent.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qgraphicssceneevent.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 58 "/home/eagle/qt-copy/include/QtGui/qgraphicssceneevent.h"
class QMimeData;
class QPointF;
class QSizeF;
class QWidget;

class QGraphicsSceneEventPrivate;
class  QGraphicsSceneEvent : public QEvent
{
public:
QGraphicsSceneEvent(Type type);
~QGraphicsSceneEvent();

QWidget *widget() const;
void setWidget(QWidget *widget);

protected:
QGraphicsSceneEvent(QGraphicsSceneEventPrivate &dd, Type type = None);
QGraphicsSceneEventPrivate *d_ptr;
inline QGraphicsSceneEventPrivate* d_func() { return reinterpret_cast<QGraphicsSceneEventPrivate *>(d_ptr); } inline const QGraphicsSceneEventPrivate* d_func() const { return reinterpret_cast<const QGraphicsSceneEventPrivate *>(d_ptr); } friend class QGraphicsSceneEventPrivate;
};

class QGraphicsSceneMouseEventPrivate;
class  QGraphicsSceneMouseEvent : public QGraphicsSceneEvent
{
public:
QGraphicsSceneMouseEvent(Type type = None);
~QGraphicsSceneMouseEvent();

QPointF pos() const;
void setPos(const QPointF &pos);

QPointF scenePos() const;
void setScenePos(const QPointF &pos);

QPoint screenPos() const;
void setScreenPos(const QPoint &pos);

QPointF buttonDownPos(Qt::MouseButton button) const;
void setButtonDownPos(Qt::MouseButton button, const QPointF &pos);

QPointF buttonDownScenePos(Qt::MouseButton button) const;
void setButtonDownScenePos(Qt::MouseButton button, const QPointF &pos);

QPoint buttonDownScreenPos(Qt::MouseButton button) const;
void setButtonDownScreenPos(Qt::MouseButton button, const QPoint &pos);

QPointF lastPos() const;
void setLastPos(const QPointF &pos);

QPointF lastScenePos() const;
void setLastScenePos(const QPointF &pos);

QPoint lastScreenPos() const;
void setLastScreenPos(const QPoint &pos);

Qt::MouseButtons buttons() const;
void setButtons(Qt::MouseButtons buttons);

Qt::MouseButton button() const;
void setButton(Qt::MouseButton button);

Qt::KeyboardModifiers modifiers() const;
void setModifiers(Qt::KeyboardModifiers modifiers);

private:
inline QGraphicsSceneMouseEventPrivate* d_func() { return reinterpret_cast<QGraphicsSceneMouseEventPrivate *>(d_ptr); } inline const QGraphicsSceneMouseEventPrivate* d_func() const { return reinterpret_cast<const QGraphicsSceneMouseEventPrivate *>(d_ptr); } friend class QGraphicsSceneMouseEventPrivate;
};

class QGraphicsSceneWheelEventPrivate;
class  QGraphicsSceneWheelEvent : public QGraphicsSceneEvent
{
public:
QGraphicsSceneWheelEvent(Type type = None);
~QGraphicsSceneWheelEvent();

QPointF pos() const;
void setPos(const QPointF &pos);

QPointF scenePos() const;
void setScenePos(const QPointF &pos);

QPoint screenPos() const;
void setScreenPos(const QPoint &pos);

Qt::MouseButtons buttons() const;
void setButtons(Qt::MouseButtons buttons);

Qt::KeyboardModifiers modifiers() const;
void setModifiers(Qt::KeyboardModifiers modifiers);

int delta() const;
void setDelta(int delta);

Qt::Orientation orientation() const;
void setOrientation(Qt::Orientation orientation);

private:
inline QGraphicsSceneWheelEventPrivate* d_func() { return reinterpret_cast<QGraphicsSceneWheelEventPrivate *>(d_ptr); } inline const QGraphicsSceneWheelEventPrivate* d_func() const { return reinterpret_cast<const QGraphicsSceneWheelEventPrivate *>(d_ptr); } friend class QGraphicsSceneWheelEventPrivate;
};

class QGraphicsSceneContextMenuEventPrivate;
class  QGraphicsSceneContextMenuEvent : public QGraphicsSceneEvent
{
public:
enum Reason { Mouse, Keyboard, Other };

QGraphicsSceneContextMenuEvent(Type type = None);
~QGraphicsSceneContextMenuEvent();

QPointF pos() const;
void setPos(const QPointF &pos);

QPointF scenePos() const;
void setScenePos(const QPointF &pos);

QPoint screenPos() const;
void setScreenPos(const QPoint &pos);

Qt::KeyboardModifiers modifiers() const;
void setModifiers(Qt::KeyboardModifiers modifiers);

Reason reason() const;
void setReason(Reason reason);

private:
inline QGraphicsSceneContextMenuEventPrivate* d_func() { return reinterpret_cast<QGraphicsSceneContextMenuEventPrivate *>(d_ptr); } inline const QGraphicsSceneContextMenuEventPrivate* d_func() const { return reinterpret_cast<const QGraphicsSceneContextMenuEventPrivate *>(d_ptr); } friend class QGraphicsSceneContextMenuEventPrivate;
};

class QGraphicsSceneHoverEventPrivate;
class  QGraphicsSceneHoverEvent : public QGraphicsSceneEvent
{
public:
QGraphicsSceneHoverEvent(Type type = None);
~QGraphicsSceneHoverEvent();

QPointF pos() const;
void setPos(const QPointF &pos);

QPointF scenePos() const;
void setScenePos(const QPointF &pos);

QPoint screenPos() const;
void setScreenPos(const QPoint &pos);

QPointF lastPos() const;
void setLastPos(const QPointF &pos);

QPointF lastScenePos() const;
void setLastScenePos(const QPointF &pos);

QPoint lastScreenPos() const;
void setLastScreenPos(const QPoint &pos);

Qt::KeyboardModifiers modifiers() const;
void setModifiers(Qt::KeyboardModifiers modifiers);

private:
inline QGraphicsSceneHoverEventPrivate* d_func() { return reinterpret_cast<QGraphicsSceneHoverEventPrivate *>(d_ptr); } inline const QGraphicsSceneHoverEventPrivate* d_func() const { return reinterpret_cast<const QGraphicsSceneHoverEventPrivate *>(d_ptr); } friend class QGraphicsSceneHoverEventPrivate;
};

class QGraphicsSceneHelpEventPrivate;
class  QGraphicsSceneHelpEvent : public QGraphicsSceneEvent
{
public:
QGraphicsSceneHelpEvent(Type type = None);
~QGraphicsSceneHelpEvent();

QPointF scenePos() const;
void setScenePos(const QPointF &pos);

QPoint screenPos() const;
void setScreenPos(const QPoint &pos);

private:
inline QGraphicsSceneHelpEventPrivate* d_func() { return reinterpret_cast<QGraphicsSceneHelpEventPrivate *>(d_ptr); } inline const QGraphicsSceneHelpEventPrivate* d_func() const { return reinterpret_cast<const QGraphicsSceneHelpEventPrivate *>(d_ptr); } friend class QGraphicsSceneHelpEventPrivate;
};

class QGraphicsSceneDragDropEventPrivate;
class  QGraphicsSceneDragDropEvent : public QGraphicsSceneEvent
{
public:
QGraphicsSceneDragDropEvent(Type type = None);
~QGraphicsSceneDragDropEvent();

QPointF pos() const;
void setPos(const QPointF &pos);

QPointF scenePos() const;
void setScenePos(const QPointF &pos);

QPoint screenPos() const;
void setScreenPos(const QPoint &pos);

Qt::MouseButtons buttons() const;
void setButtons(Qt::MouseButtons buttons);

Qt::KeyboardModifiers modifiers() const;
void setModifiers(Qt::KeyboardModifiers modifiers);

Qt::DropActions possibleActions() const;
void setPossibleActions(Qt::DropActions actions);

Qt::DropAction proposedAction() const;
void setProposedAction(Qt::DropAction action);
void acceptProposedAction();

Qt::DropAction dropAction() const;
void setDropAction(Qt::DropAction action);

QWidget *source() const;
void setSource(QWidget *source);

const QMimeData *mimeData() const;
void setMimeData(const QMimeData *data);

private:
inline QGraphicsSceneDragDropEventPrivate* d_func() { return reinterpret_cast<QGraphicsSceneDragDropEventPrivate *>(d_ptr); } inline const QGraphicsSceneDragDropEventPrivate* d_func() const { return reinterpret_cast<const QGraphicsSceneDragDropEventPrivate *>(d_ptr); } friend class QGraphicsSceneDragDropEventPrivate;
};

class QGraphicsSceneResizeEventPrivate;
class  QGraphicsSceneResizeEvent : public QGraphicsSceneEvent
{
inline QGraphicsSceneResizeEventPrivate* d_func() { return reinterpret_cast<QGraphicsSceneResizeEventPrivate *>(d_ptr); } inline const QGraphicsSceneResizeEventPrivate* d_func() const { return reinterpret_cast<const QGraphicsSceneResizeEventPrivate *>(d_ptr); } friend class QGraphicsSceneResizeEventPrivate;
public:
QGraphicsSceneResizeEvent();
~QGraphicsSceneResizeEvent();

QSizeF oldSize() const;
void setOldSize(const QSizeF &size);

QSizeF newSize() const;
void setNewSize(const QSizeF &size);
};

class QGraphicsSceneMoveEventPrivate;
class  QGraphicsSceneMoveEvent : public QGraphicsSceneEvent
{
inline QGraphicsSceneMoveEventPrivate* d_func() { return reinterpret_cast<QGraphicsSceneMoveEventPrivate *>(d_ptr); } inline const QGraphicsSceneMoveEventPrivate* d_func() const { return reinterpret_cast<const QGraphicsSceneMoveEventPrivate *>(d_ptr); } friend class QGraphicsSceneMoveEventPrivate;
public:
QGraphicsSceneMoveEvent();
~QGraphicsSceneMoveEvent();

QPointF oldPos() const;
void setOldPos(const QPointF &pos);

QPointF newPos() const;
void setNewPos(const QPointF &pos);
};







# 31 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicsview.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"












































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qgraphicsview.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qpainter.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qpainter.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qrect.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qpainter.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qpoint.h"






































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qpainter.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qpixmap.h"











































































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtGui/qpainter.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qimage.h"


































































































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtGui/qpainter.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextoption.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qtextoption.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qchar.h"















































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qtextoption.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"












































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qtextoption.h"



# 52 "/home/eagle/qt-copy/include/QtGui/qtextoption.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

template <typename T> class QList;
struct QTextOptionPrivate;

class  QTextOption
{
public:
enum TabType {
LeftTab,
RightTab,
CenterTab,
DelimiterTab
};

struct  Tab {
inline Tab() : position(80), type(QTextOption::LeftTab) { }

inline bool operator==(const Tab &other) const {
return type == other.type
&& qFuzzyCompare(position, other.position)
&& delimiter == other.delimiter;
}

inline bool operator!=(const Tab &other) const {
return !operator==(other);
}

qreal position;
TabType type;
QChar delimiter;
};

QTextOption();
QTextOption(Qt::Alignment alignment);
~QTextOption();

QTextOption(const QTextOption &o);
QTextOption &operator=(const QTextOption &o);

inline void setAlignment(Qt::Alignment alignment);
inline Qt::Alignment alignment() const { return Qt::Alignment(align); }

inline void setTextDirection(Qt::LayoutDirection aDirection) { this->direction = aDirection; }
inline Qt::LayoutDirection textDirection() const { return Qt::LayoutDirection(direction); }

enum WrapMode {
NoWrap,
WordWrap,
ManualWrap,
WrapAnywhere,
WrapAtWordBoundaryOrAnywhere
};
inline void setWrapMode(WrapMode wrap) { wordWrap = wrap; }
inline WrapMode wrapMode() const { return static_cast<WrapMode>(wordWrap); }

enum Flag {
IncludeTrailingSpaces = 0x80000000
};
typedef QFlags<Flag> Flags;
inline void setFlags(Flags flags);
inline Flags flags() const { return Flags(f); }

inline void setTabStop(qreal tabStop);
inline qreal tabStop() const { return tab; }

void setTabArray(QList<qreal> tabStops);
QList<qreal> tabArray() const;

void setTabs(QList<Tab> tabStops);
QList<Tab> tabs() const;

void setUseDesignMetrics(bool b) { design = b; }
bool useDesignMetrics() const { return design; }

private:
uint align : 8;
uint wordWrap : 4;
uint design : 1;
uint direction : 1;
uint unused : 19;
uint f;
qreal tab;
QTextOptionPrivate *d;
};

inline QFlags<QTextOption::Flags::enum_type> operator|(QTextOption::Flags::enum_type f1, QTextOption::Flags::enum_type f2) { return QFlags<QTextOption::Flags::enum_type>(f1) | f2; } inline QFlags<QTextOption::Flags::enum_type> operator|(QTextOption::Flags::enum_type f1, QFlags<QTextOption::Flags::enum_type> f2) { return f2 | f1; }

inline void QTextOption::setAlignment(Qt::Alignment aalignment)
{ align = aalignment; }

inline void QTextOption::setFlags(Flags aflags)
{ f = aflags; }

inline void QTextOption::setTabStop(qreal atabStop)
{ tab = atabStop; }



 template <> struct QMetaTypeId< QTextOption::Tab  > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (!metatype_id) metatype_id = qRegisterMetaType< QTextOption::Tab  >("QTextOption::Tab "); return metatype_id; } }; 




# 52 "/home/eagle/qt-copy/include/QtGui/qpainter.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qdrawutil.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qdrawutil.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qdrawutil.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qdrawutil.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QPainter;

# 58 "/home/eagle/qt-copy/include/QtGui/qdrawutil.h"
class QColorGroup;

# 60 "/home/eagle/qt-copy/include/QtGui/qdrawutil.h"
class QPalette;
class QPoint;
class QColor;
class QBrush;
class QRect;
class QPixmap;





 void qDrawShadeLine(QPainter *p, int x1, int y1, int x2, int y2,
const QPalette &pal, bool sunken = true,
int lineWidth = 1, int midLineWidth = 0);

 void qDrawShadeLine(QPainter *p, const QPoint &p1, const QPoint &p2,
const QPalette &pal, bool sunken = true,
int lineWidth = 1, int midLineWidth = 0);

 void qDrawShadeRect(QPainter *p, int x, int y, int w, int h,
const QPalette &pal, bool sunken = false,
int lineWidth = 1, int midLineWidth = 0,
const QBrush *fill = 0);

 void qDrawShadeRect(QPainter *p, const QRect &r,
const QPalette &pal, bool sunken = false,
int lineWidth = 1, int midLineWidth = 0,
const QBrush *fill = 0);

 void qDrawShadePanel(QPainter *p, int x, int y, int w, int h,
const QPalette &pal, bool sunken = false,
int lineWidth = 1, const QBrush *fill = 0);

 void qDrawShadePanel(QPainter *p, const QRect &r,
const QPalette &pal, bool sunken = false,
int lineWidth = 1, const QBrush *fill = 0);

 void qDrawWinButton(QPainter *p, int x, int y, int w, int h,
const QPalette &pal, bool sunken = false,
const QBrush *fill = 0);

 void qDrawWinButton(QPainter *p, const QRect &r,
const QPalette &pal, bool sunken = false,
const QBrush *fill = 0);

 void qDrawWinPanel(QPainter *p, int x, int y, int w, int h,
const QPalette &pal, bool sunken = false,
const QBrush *fill = 0);

 void qDrawWinPanel(QPainter *p, const QRect &r,
const QPalette &pal, bool sunken = false,
const QBrush *fill = 0);

 void qDrawPlainRect(QPainter *p, int x, int y, int w, int h, const QColor &,
int lineWidth = 1, const QBrush *fill = 0);

 void qDrawPlainRect(QPainter *p, const QRect &r, const QColor &,
int lineWidth = 1, const QBrush *fill = 0);




















# 138 "/home/eagle/qt-copy/include/QtGui/qdrawutil.h"





# 53 "/home/eagle/qt-copy/include/QtGui/qpainter.h"



# 1 "/home/eagle/qt-copy/include/QtGui/qpolygon.h"









































































































































































# 56 "/home/eagle/qt-copy/include/QtGui/qpainter.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qpen.h"














































































































































# 57 "/home/eagle/qt-copy/include/QtGui/qpainter.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qbrush.h"

























































































































































































































































































































# 58 "/home/eagle/qt-copy/include/QtGui/qpainter.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qmatrix.h"















































































































































































# 59 "/home/eagle/qt-copy/include/QtGui/qpainter.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qtransform.h"































































































































































































































































































































































# 60 "/home/eagle/qt-copy/include/QtGui/qpainter.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qfontinfo.h"

























































































# 61 "/home/eagle/qt-copy/include/QtGui/qpainter.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qfontmetrics.h"







































































































































































































# 62 "/home/eagle/qt-copy/include/QtGui/qpainter.h"



# 65 "/home/eagle/qt-copy/include/QtGui/qpainter.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QBrush;
class QFontInfo;
class QFontMetrics;
class QPaintDevice;
class QPainterPath;
class QPainterPrivate;
class QPen;
class QPolygon;
class QTextItem;
class QMatrix;
class QTransform;

class  QPainter
{
inline QPainterPrivate* d_func() { return reinterpret_cast<QPainterPrivate *>(d_ptr); } inline const QPainterPrivate* d_func() const { return reinterpret_cast<const QPainterPrivate *>(d_ptr); } friend class QPainterPrivate;



public:
enum RenderHint {
Antialiasing = 0x01,
TextAntialiasing = 0x02,
SmoothPixmapTransform = 0x04,
HighQualityAntialiasing = 0x08,
NonCosmeticDefaultPen = 0x10
};

typedef QFlags<RenderHint> RenderHints;

QPainter();
explicit QPainter(QPaintDevice *);
~QPainter();

QPaintDevice *device() const;

bool begin(QPaintDevice *);
bool end();
bool isActive() const;

void initFrom(const QWidget *widget);

enum CompositionMode {
CompositionMode_SourceOver,
CompositionMode_DestinationOver,
CompositionMode_Clear,
CompositionMode_Source,
CompositionMode_Destination,
CompositionMode_SourceIn,
CompositionMode_DestinationIn,
CompositionMode_SourceOut,
CompositionMode_DestinationOut,
CompositionMode_SourceAtop,
CompositionMode_DestinationAtop,
CompositionMode_Xor,


CompositionMode_Plus,
CompositionMode_Multiply,
CompositionMode_Screen,
CompositionMode_Overlay,
CompositionMode_Darken,
CompositionMode_Lighten,
CompositionMode_ColorDodge,
CompositionMode_ColorBurn,
CompositionMode_HardLight,
CompositionMode_SoftLight,
CompositionMode_Difference,
CompositionMode_Exclusion
};
void setCompositionMode(CompositionMode mode);
CompositionMode compositionMode() const;

const QFont &font() const;
void setFont(const QFont &f);

QFontMetrics fontMetrics() const;
QFontInfo fontInfo() const;

void setPen(const QColor &color);
void setPen(const QPen &pen);
void setPen(Qt::PenStyle style);
const QPen &pen() const;

void setBrush(const QBrush &brush);
void setBrush(Qt::BrushStyle style);
const QBrush &brush() const;


void setBackgroundMode(Qt::BGMode mode);
Qt::BGMode backgroundMode() const;

QPoint brushOrigin() const;
inline void setBrushOrigin(int x, int y);
inline void setBrushOrigin(const QPoint &);
void setBrushOrigin(const QPointF &);

void setBackground(const QBrush &bg);
const QBrush &background() const;

qreal opacity() const;
void setOpacity(qreal opacity);


QRegion clipRegion() const;
QPainterPath clipPath() const;

void setClipRect(const QRectF &, Qt::ClipOperation op = Qt::ReplaceClip);
void setClipRect(const QRect &, Qt::ClipOperation op = Qt::ReplaceClip);
inline void setClipRect(int x, int y, int w, int h, Qt::ClipOperation op = Qt::ReplaceClip);

void setClipRegion(const QRegion &, Qt::ClipOperation op = Qt::ReplaceClip);

void setClipPath(const QPainterPath &path, Qt::ClipOperation op = Qt::ReplaceClip);

void setClipping(bool enable);
bool hasClipping() const;

void save();
void restore();


void setMatrix(const QMatrix &matrix, bool combine = false);
const QMatrix &matrix() const;
const QMatrix &deviceMatrix() const;
void resetMatrix();

void setTransform(const QTransform &transform, bool combine = false);
const QTransform &transform() const;
const QTransform &deviceTransform() const;
void resetTransform();

void setWorldMatrix(const QMatrix &matrix, bool combine = false);
const QMatrix &worldMatrix() const;

void setWorldTransform(const QTransform &matrix, bool combine = false);
const QTransform &worldTransform() const;

QMatrix combinedMatrix() const;
QTransform combinedTransform() const;

void setMatrixEnabled(bool enabled);
bool matrixEnabled() const;

void setWorldMatrixEnabled(bool enabled);
bool worldMatrixEnabled() const;

void scale(qreal sx, qreal sy);
void shear(qreal sh, qreal sv);
void rotate(qreal a);

void translate(const QPointF &offset);
inline void translate(const QPoint &offset);
inline void translate(qreal dx, qreal dy);

QRect window() const;
void setWindow(const QRect &window);
inline void setWindow(int x, int y, int w, int h);

QRect viewport() const;
void setViewport(const QRect &viewport);
inline void setViewport(int x, int y, int w, int h);

void setViewTransformEnabled(bool enable);
bool viewTransformEnabled() const;


void strokePath(const QPainterPath &path, const QPen &pen);
void fillPath(const QPainterPath &path, const QBrush &brush);
void drawPath(const QPainterPath &path);

inline void drawPoint(const QPointF &pt);
inline void drawPoint(const QPoint &p);
inline void drawPoint(int x, int y);

void drawPoints(const QPointF *points, int pointCount);
inline void drawPoints(const QPolygonF &points);
void drawPoints(const QPoint *points, int pointCount);
inline void drawPoints(const QPolygon &points);

inline void drawLine(const QLineF &line);
inline void drawLine(const QLine &line);
inline void drawLine(int x1, int y1, int x2, int y2);
inline void drawLine(const QPoint &p1, const QPoint &p2);
inline void drawLine(const QPointF &p1, const QPointF &p2);

void drawLines(const QLineF *lines, int lineCount);
inline void drawLines(const QVector<QLineF> &lines);
void drawLines(const QPointF *pointPairs, int lineCount);
inline void drawLines(const QVector<QPointF> &pointPairs);
void drawLines(const QLine *lines, int lineCount);
inline void drawLines(const QVector<QLine> &lines);
void drawLines(const QPoint *pointPairs, int lineCount);
inline void drawLines(const QVector<QPoint> &pointPairs);

inline void drawRect(const QRectF &rect);
inline void drawRect(int x1, int y1, int w, int h);
inline void drawRect(const QRect &rect);

void drawRects(const QRectF *rects, int rectCount);
inline void drawRects(const QVector<QRectF> &rectangles);
void drawRects(const QRect *rects, int rectCount);
inline void drawRects(const QVector<QRect> &rectangles);

void drawEllipse(const QRectF &r);
void drawEllipse(const QRect &r);
inline void drawEllipse(int x, int y, int w, int h);

inline void drawEllipse(const QPointF &center, qreal rx, qreal ry);
inline void drawEllipse(const QPoint &center, int rx, int ry);

void drawPolyline(const QPointF *points, int pointCount);
inline void drawPolyline(const QPolygonF &polyline);
void drawPolyline(const QPoint *points, int pointCount);
inline void drawPolyline(const QPolygon &polygon);

void drawPolygon(const QPointF *points, int pointCount, Qt::FillRule fillRule = Qt::OddEvenFill);
inline void drawPolygon(const QPolygonF &polygon, Qt::FillRule fillRule = Qt::OddEvenFill);
void drawPolygon(const QPoint *points, int pointCount, Qt::FillRule fillRule = Qt::OddEvenFill);
inline void drawPolygon(const QPolygon &polygon, Qt::FillRule fillRule = Qt::OddEvenFill);

void drawConvexPolygon(const QPointF *points, int pointCount);
inline void drawConvexPolygon(const QPolygonF &polygon);
void drawConvexPolygon(const QPoint *points, int pointCount);
inline void drawConvexPolygon(const QPolygon &polygon);

void drawArc(const QRectF &rect, int a, int alen);
inline void drawArc(const QRect &, int a, int alen);
inline void drawArc(int x, int y, int w, int h, int a, int alen);

void drawPie(const QRectF &rect, int a, int alen);
inline void drawPie(int x, int y, int w, int h, int a, int alen);
inline void drawPie(const QRect &, int a, int alen);

void drawChord(const QRectF &rect, int a, int alen);
inline void drawChord(int x, int y, int w, int h, int a, int alen);
inline void drawChord(const QRect &, int a, int alen);

void drawRoundedRect(const QRectF &rect, qreal xRadius, qreal yRadius,
Qt::SizeMode mode = Qt::AbsoluteSize);
inline void drawRoundedRect(int x, int y, int w, int h, qreal xRadius, qreal yRadius,
Qt::SizeMode mode = Qt::AbsoluteSize);
inline void drawRoundedRect(const QRect &rect, qreal xRadius, qreal yRadius,
Qt::SizeMode mode = Qt::AbsoluteSize);

void drawRoundRect(const QRectF &r, int xround = 25, int yround = 25);
inline void drawRoundRect(int x, int y, int w, int h, int = 25, int = 25);
inline void drawRoundRect(const QRect &r, int xround = 25, int yround = 25);

void drawTiledPixmap(const QRectF &rect, const QPixmap &pm, const QPointF &offset = QPointF());
inline void drawTiledPixmap(int x, int y, int w, int h, const QPixmap &, int sx=0, int sy=0);
inline void drawTiledPixmap(const QRect &, const QPixmap &, const QPoint & = QPoint());

# 323 "/home/eagle/qt-copy/include/QtGui/qpainter.h"
void drawPicture(const QPointF &p, const QPicture &picture);
inline void drawPicture(int x, int y, const QPicture &picture);
inline void drawPicture(const QPoint &p, const QPicture &picture);


# 328 "/home/eagle/qt-copy/include/QtGui/qpainter.h"
void drawPixmap(const QRectF &targetRect, const QPixmap &pixmap, const QRectF &sourceRect);
inline void drawPixmap(const QRect &targetRect, const QPixmap &pixmap, const QRect &sourceRect);
inline void drawPixmap(int x, int y, int w, int h, const QPixmap &pm,
int sx, int sy, int sw, int sh);
inline void drawPixmap(int x, int y, const QPixmap &pm,
int sx, int sy, int sw, int sh);
inline void drawPixmap(const QPointF &p, const QPixmap &pm, const QRectF &sr);
inline void drawPixmap(const QPoint &p, const QPixmap &pm, const QRect &sr);
inline void drawPixmap(const QPointF &p, const QPixmap &pm);
inline void drawPixmap(const QPoint &p, const QPixmap &pm);
inline void drawPixmap(int x, int y, const QPixmap &pm);
inline void drawPixmap(const QRect &r, const QPixmap &pm);
inline void drawPixmap(int x, int y, int w, int h, const QPixmap &pm);

void drawImage(const QRectF &targetRect, const QImage &image, const QRectF &sourceRect,
Qt::ImageConversionFlags flags = Qt::AutoColor);
inline void drawImage(const QRect &targetRect, const QImage &image, const QRect &sourceRect,
Qt::ImageConversionFlags flags = Qt::AutoColor);
inline void drawImage(const QPointF &p, const QImage &image, const QRectF &sr,
Qt::ImageConversionFlags flags = Qt::AutoColor);
inline void drawImage(const QPoint &p, const QImage &image, const QRect &sr,
Qt::ImageConversionFlags flags = Qt::AutoColor);
inline void drawImage(const QRectF &r, const QImage &image);
inline void drawImage(const QRect &r, const QImage &image);
inline void drawImage(const QPointF &p, const QImage &image);
inline void drawImage(const QPoint &p, const QImage &image);
inline void drawImage(int x, int y, const QImage &image, int sx = 0, int sy = 0,
int sw = -1, int sh = -1, Qt::ImageConversionFlags flags = Qt::AutoColor);

void setLayoutDirection(Qt::LayoutDirection direction);
Qt::LayoutDirection layoutDirection() const;

void drawText(const QPointF &p, const QString &s);
inline void drawText(const QPoint &p, const QString &s);
inline void drawText(int x, int y, const QString &s);

void drawText(const QPointF &p, const QString &str, int tf, int justificationPadding);

void drawText(const QRectF &r, int flags, const QString &text, QRectF *br=0);
void drawText(const QRect &r, int flags, const QString &text, QRect *br=0);
inline void drawText(int x, int y, int w, int h, int flags, const QString &text, QRect *br=0);

void drawText(const QRectF &r, const QString &text, const QTextOption &o = QTextOption());

QRectF boundingRect(const QRectF &rect, int flags, const QString &text);
QRect boundingRect(const QRect &rect, int flags, const QString &text);
inline QRect boundingRect(int x, int y, int w, int h, int flags, const QString &text);

QRectF boundingRect(const QRectF &rect, const QString &text, const QTextOption &o = QTextOption());

void drawTextItem(const QPointF &p, const QTextItem &ti);
inline void drawTextItem(int x, int y, const QTextItem &ti);
inline void drawTextItem(const QPoint &p, const QTextItem &ti);

void fillRect(const QRectF &, const QBrush &);
inline void fillRect(int x, int y, int w, int h, const QBrush &);
void fillRect(const QRect &, const QBrush &);

void eraseRect(const QRectF &);
inline void eraseRect(int x, int y, int w, int h);
inline void eraseRect(const QRect &);

void setRenderHint(RenderHint hint, bool on = true);
void setRenderHints(RenderHints hints, bool on = true);
RenderHints renderHints() const;
inline bool testRenderHint(RenderHint hint) const { return renderHints() & hint; }

QPaintEngine *paintEngine() const;

static void setRedirected(const QPaintDevice *device, QPaintDevice *replacement,
const QPoint& offset = QPoint());
static QPaintDevice *redirected(const QPaintDevice *device, QPoint *offset = 0);
static void restoreRedirected(const QPaintDevice *device);










































































# 475 "/home/eagle/qt-copy/include/QtGui/qpainter.h"
private:
QPainter(const QPainter &); QPainter &operator=(const QPainter &);
friend class Q3Painter;

QPainterPrivate *d_ptr;

friend class QFontEngine;
friend class QFontEngineBox;
friend class QFontEngineFT;
friend class QFontEngineMac;
friend class QFontEngineWin;
friend class QFontEngineXLFD;
friend class QWSManager;
friend class QPaintEngine;
friend class QX11PaintEngine;
friend class QX11PaintEnginePrivate;
friend class QWin32PaintEngine;
friend class QWin32PaintEnginePrivate;
friend class QRasterPaintEngine;
friend class QAlphaPaintEngine;
friend class QPreviewPaintEngine;
};

inline QFlags<QPainter::RenderHints::enum_type> operator|(QPainter::RenderHints::enum_type f1, QPainter::RenderHints::enum_type f2) { return QFlags<QPainter::RenderHints::enum_type>(f1) | f2; } inline QFlags<QPainter::RenderHints::enum_type> operator|(QPainter::RenderHints::enum_type f1, QFlags<QPainter::RenderHints::enum_type> f2) { return f2 | f1; }




inline void QPainter::drawLine(const QLineF &l)
{
drawLines(&l, 1);
}

inline void QPainter::drawLine(const QLine &line)
{
drawLines(&line, 1);
}

inline void QPainter::drawLine(int x1, int y1, int x2, int y2)
{
QLine l(x1, y1, x2, y2);
drawLines(&l, 1);
}

inline void QPainter::drawLine(const QPoint &p1, const QPoint &p2)
{
QLine l(p1, p2);
drawLines(&l, 1);
}

inline void QPainter::drawLine(const QPointF &p1, const QPointF &p2)
{
drawLine(QLineF(p1, p2));
}

inline void QPainter::drawLines(const QVector<QLineF> &lines)
{
drawLines(lines.constData(), lines.size());
}

inline void QPainter::drawLines(const QVector<QLine> &lines)
{
drawLines(lines.constData(), lines.size());
}

inline void QPainter::drawLines(const QVector<QPointF> &pointPairs)
{
drawLines(pointPairs.constData(), pointPairs.size() / 2);
}

inline void QPainter::drawLines(const QVector<QPoint> &pointPairs)
{
drawLines(pointPairs.constData(), pointPairs.size() / 2);
}

inline void QPainter::drawPolyline(const QPolygonF &polyline)
{
drawPolyline(polyline.constData(), polyline.size());
}

inline void QPainter::drawPolyline(const QPolygon &polyline)
{
drawPolyline(polyline.constData(), polyline.size());
}

inline void QPainter::drawPolygon(const QPolygonF &polygon, Qt::FillRule fillRule)
{
drawPolygon(polygon.constData(), polygon.size(), fillRule);
}

inline void QPainter::drawPolygon(const QPolygon &polygon, Qt::FillRule fillRule)
{
drawPolygon(polygon.constData(), polygon.size(), fillRule);
}

inline void QPainter::drawConvexPolygon(const QPolygonF &poly)
{
drawConvexPolygon(poly.constData(), poly.size());
}

inline void QPainter::drawConvexPolygon(const QPolygon &poly)
{
drawConvexPolygon(poly.constData(), poly.size());
}

inline void QPainter::drawRect(const QRectF &rect)
{
drawRects(&rect, 1);
}

inline void QPainter::drawRect(int x, int y, int w, int h)
{
QRect r(x, y, w, h);
drawRects(&r, 1);
}

inline void QPainter::drawRect(const QRect &r)
{
drawRects(&r, 1);
}

inline void QPainter::drawRects(const QVector<QRectF> &rects)
{
drawRects(rects.constData(), rects.size());
}

inline void QPainter::drawRects(const QVector<QRect> &rects)
{
drawRects(rects.constData(), rects.size());
}

inline void QPainter::drawPoint(const QPointF &p)
{
drawPoints(&p, 1);
}

inline void QPainter::drawPoint(int x, int y)
{
QPoint p(x, y);
drawPoints(&p, 1);
}

inline void QPainter::drawPoint(const QPoint &p)
{
drawPoints(&p, 1);
}

inline void QPainter::drawPoints(const QPolygonF &points)
{
drawPoints(points.constData(), points.size());
}

inline void QPainter::drawPoints(const QPolygon &points)
{
drawPoints(points.constData(), points.size());
}

inline void QPainter::drawRoundRect(int x, int y, int w, int h, int xRnd, int yRnd)
{
drawRoundRect(QRectF(x, y, w, h), xRnd, yRnd);
}

inline void QPainter::drawRoundRect(const QRect &rect, int xRnd, int yRnd)
{
drawRoundRect(QRectF(rect), xRnd, yRnd);
}

inline void QPainter::drawRoundedRect(int x, int y, int w, int h, qreal xRadius, qreal yRadius,
Qt::SizeMode mode)
{
drawRoundedRect(QRectF(x, y, w, h), xRadius, yRadius, mode);
}

inline void QPainter::drawRoundedRect(const QRect &rect, qreal xRadius, qreal yRadius,
Qt::SizeMode mode)
{
drawRoundedRect(QRectF(rect), xRadius, yRadius, mode);
}

inline void QPainter::drawEllipse(int x, int y, int w, int h)
{
drawEllipse(QRect(x, y, w, h));
}

inline void QPainter::drawEllipse(const QPointF &center, qreal rx, qreal ry)
{
drawEllipse(QRectF(center.x() - rx, center.y() - ry, 2 * rx, 2 * ry));
}

inline void QPainter::drawEllipse(const QPoint &center, int rx, int ry)
{
drawEllipse(QRect(center.x() - rx, center.y() - ry, 2 * rx, 2 * ry));
}

inline void QPainter::drawArc(const QRect &r, int a, int alen)
{
drawArc(QRectF(r), a, alen);
}

inline void QPainter::drawArc(int x, int y, int w, int h, int a, int alen)
{
drawArc(QRectF(x, y, w, h), a, alen);
}

inline void QPainter::drawPie(const QRect &rect, int a, int alen)
{
drawPie(QRectF(rect), a, alen);
}

inline void QPainter::drawPie(int x, int y, int w, int h, int a, int alen)
{
drawPie(QRectF(x, y, w, h), a, alen);
}

inline void QPainter::drawChord(const QRect &rect, int a, int alen)
{
drawChord(QRectF(rect), a, alen);
}

inline void QPainter::drawChord(int x, int y, int w, int h, int a, int alen)
{
drawChord(QRectF(x, y, w, h), a, alen);
}

inline void QPainter::setClipRect(int x, int y, int w, int h, Qt::ClipOperation op)
{
setClipRect(QRect(x, y, w, h), op);
}

inline void QPainter::eraseRect(const QRect &rect)
{
eraseRect(QRectF(rect));
}

inline void QPainter::eraseRect(int x, int y, int w, int h)
{
eraseRect(QRectF(x, y, w, h));
}

inline void QPainter::fillRect(int x, int y, int w, int h, const QBrush &b)
{
fillRect(QRect(x, y, w, h), b);
}

inline void QPainter::setBrushOrigin(int x, int y)
{
setBrushOrigin(QPoint(x, y));
}

inline void QPainter::setBrushOrigin(const QPoint &p)
{
setBrushOrigin(QPointF(p));
}

inline void QPainter::drawTiledPixmap(const QRect &rect, const QPixmap &pm, const QPoint &offset)
{
drawTiledPixmap(QRectF(rect), pm, QPointF(offset));
}

inline void QPainter::drawTiledPixmap(int x, int y, int w, int h, const QPixmap &pm, int sx, int sy)
{
drawTiledPixmap(QRectF(x, y, w, h), pm, QPointF(sx, sy));
}

inline void QPainter::drawPixmap(const QRect &targetRect, const QPixmap &pixmap, const QRect &sourceRect)
{
drawPixmap(QRectF(targetRect), pixmap, QRectF(sourceRect));
}

inline void QPainter::drawPixmap(const QPointF &p, const QPixmap &pm)
{
drawPixmap(QRectF(p.x(), p.y(), -1, -1), pm, QRectF());
}

inline void QPainter::drawPixmap(const QPoint &p, const QPixmap &pm)
{
drawPixmap(QRectF(p.x(), p.y(), -1, -1), pm, QRectF());
}

inline void QPainter::drawPixmap(const QRect &r, const QPixmap &pm)
{
drawPixmap(QRectF(r), pm, QRectF());
}

inline void QPainter::drawPixmap(int x, int y, const QPixmap &pm)
{
drawPixmap(QRectF(x, y, -1, -1), pm, QRectF());
}

inline void QPainter::drawPixmap(int x, int y, int w, int h, const QPixmap &pm)
{
drawPixmap(QRectF(x, y, w, h), pm, QRectF());
}

inline void QPainter::drawPixmap(int x, int y, int w, int h, const QPixmap &pm,
int sx, int sy, int sw, int sh)
{
drawPixmap(QRectF(x, y, w, h), pm, QRectF(sx, sy, sw, sh));
}

inline void QPainter::drawPixmap(int x, int y, const QPixmap &pm,
int sx, int sy, int sw, int sh)
{
drawPixmap(QRectF(x, y, -1, -1), pm, QRectF(sx, sy, sw, sh));
}

inline void QPainter::drawPixmap(const QPointF &p, const QPixmap &pm, const QRectF &sr)
{
drawPixmap(QRectF(p.x(), p.y(), -1, -1), pm, sr);
}

inline void QPainter::drawPixmap(const QPoint &p, const QPixmap &pm, const QRect &sr)
{
drawPixmap(QRectF(p.x(), p.y(), -1, -1), pm, sr);
}

inline void QPainter::drawTextItem(int x, int y, const QTextItem &ti)
{
drawTextItem(QPointF(x, y), ti);
}

inline void QPainter::drawImage(const QRect &targetRect, const QImage &image, const QRect &sourceRect,
Qt::ImageConversionFlags flags)
{
drawImage(QRectF(targetRect), image, QRectF(sourceRect), flags);
}

inline void QPainter::drawImage(const QPointF &p, const QImage &image, const QRectF &sr,
Qt::ImageConversionFlags flags)
{
drawImage(QRectF(p.x(), p.y(), -1, -1), image, sr, flags);
}

inline void QPainter::drawImage(const QPoint &p, const QImage &image, const QRect &sr,
Qt::ImageConversionFlags flags)
{
drawImage(QRect(p.x(), p.y(), -1, -1), image, sr, flags);
}


inline void QPainter::drawImage(const QRectF &r, const QImage &image)
{
drawImage(r, image, QRect(0, 0, image.width(), image.height()));
}

inline void QPainter::drawImage(const QRect &r, const QImage &image)
{
drawImage(r, image, QRectF(0, 0, image.width(), image.height()));
}

inline void QPainter::drawImage(const QPointF &p, const QImage &image)
{
drawImage(QRectF(p.x(), p.y(), -1, -1), image, QRectF(0, 0, image.width(), image.height()));
}

inline void QPainter::drawImage(const QPoint &p, const QImage &image)
{
drawImage(QRectF(p.x(), p.y(), -1, -1), image, QRectF(0, 0, image.width(), image.height()));
}

inline void QPainter::drawImage(int x, int y, const QImage &image, int sx, int sy, int sw, int sh,
Qt::ImageConversionFlags flags)
{
drawImage(QRectF(x, y, -1, -1), image, QRectF(sx, sy, sw, sh), flags);
}

inline void QPainter::drawTextItem(const QPoint &p, const QTextItem &ti)
{
drawTextItem(QPointF(p), ti);
}

inline void QPainter::drawText(const QPoint &p, const QString &s)
{
drawText(QPointF(p), s);
}

inline void QPainter::drawText(int x, int y, int w, int h, int flags, const QString &str, QRect *br)
{
drawText(QRect(x, y, w, h), flags, str, br);
}

inline void QPainter::drawText(int x, int y, const QString &s)
{
drawText(QPointF(x, y), s);
}

inline QRect QPainter::boundingRect(int x, int y, int w, int h, int flags, const QString &text)
{
return boundingRect(QRect(x, y, w, h), flags, text);
}

inline void QPainter::translate(qreal dx, qreal dy)
{
translate(QPointF(dx, dy));
}

inline void QPainter::translate(const QPoint &offset)
{
translate(offset.x(), offset.y());
}

inline void QPainter::setViewport(int x, int y, int w, int h)
{
setViewport(QRect(x, y, w, h));
}

inline void QPainter::setWindow(int x, int y, int w, int h)
{
setWindow(QRect(x, y, w, h));
}


# 887 "/home/eagle/qt-copy/include/QtGui/qpainter.h"
inline void QPainter::drawPicture(int x, int y, const QPicture &p)
{
drawPicture(QPoint(x, y), p);
}

inline void QPainter::drawPicture(const QPoint &pt, const QPicture &p)
{
drawPicture(QPointF(pt), p);
}


# 898 "/home/eagle/qt-copy/include/QtGui/qpainter.h"





# 48 "/home/eagle/qt-copy/include/QtGui/qgraphicsview.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qscrollarea.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qabstractscrollarea.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qframe.h"






















































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qabstractscrollarea.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qabstractscrollarea.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qabstractscrollarea.h"
class QScrollBar;
class QAbstractScrollAreaPrivate;

class  QAbstractScrollArea : public QFrame
{
Q_OBJECT
Q_PROPERTY(Qt::ScrollBarPolicy verticalScrollBarPolicy READ verticalScrollBarPolicy WRITE setVerticalScrollBarPolicy)
Q_PROPERTY(Qt::ScrollBarPolicy horizontalScrollBarPolicy READ horizontalScrollBarPolicy WRITE setHorizontalScrollBarPolicy)

public:
explicit QAbstractScrollArea(QWidget* parent=0);
~QAbstractScrollArea();

Qt::ScrollBarPolicy verticalScrollBarPolicy() const;
void setVerticalScrollBarPolicy(Qt::ScrollBarPolicy);
QScrollBar *verticalScrollBar() const;
void setVerticalScrollBar(QScrollBar *scrollbar);

Qt::ScrollBarPolicy horizontalScrollBarPolicy() const;
void setHorizontalScrollBarPolicy(Qt::ScrollBarPolicy);
QScrollBar *horizontalScrollBar() const;
void setHorizontalScrollBar(QScrollBar *scrollbar);

QWidget *cornerWidget() const;
void setCornerWidget(QWidget *widget);

void addScrollBarWidget(QWidget *widget, Qt::Alignment alignment);
QWidgetList scrollBarWidgets(Qt::Alignment alignment);

QWidget *viewport() const;
void setViewport(QWidget *widget);
QSize maximumViewportSize() const;

QSize minimumSizeHint() const;

QSize sizeHint() const;

protected slots:
void setupViewport(QWidget *viewport);

protected:
QAbstractScrollArea(QAbstractScrollAreaPrivate &dd, QWidget *parent = 0);
void setViewportMargins(int left, int top, int right, int bottom);

bool event(QEvent *);
virtual bool viewportEvent(QEvent *);

void resizeEvent(QResizeEvent *);
void paintEvent(QPaintEvent *);
void mousePressEvent(QMouseEvent *);
void mouseReleaseEvent(QMouseEvent *);
void mouseDoubleClickEvent(QMouseEvent *);
void mouseMoveEvent(QMouseEvent *);

# 111 "/home/eagle/qt-copy/include/QtGui/qabstractscrollarea.h"
void wheelEvent(QWheelEvent *);

# 113 "/home/eagle/qt-copy/include/QtGui/qabstractscrollarea.h"
void contextMenuEvent(QContextMenuEvent *);

# 115 "/home/eagle/qt-copy/include/QtGui/qabstractscrollarea.h"
void dragEnterEvent(QDragEnterEvent *);
void dragMoveEvent(QDragMoveEvent *);
void dragLeaveEvent(QDragLeaveEvent *);
void dropEvent(QDropEvent *);


# 121 "/home/eagle/qt-copy/include/QtGui/qabstractscrollarea.h"
void keyPressEvent(QKeyEvent *);

virtual void scrollContentsBy(int dx, int dy);

private:
inline QAbstractScrollAreaPrivate* d_func() { return reinterpret_cast<QAbstractScrollAreaPrivate *>(d_ptr); } inline const QAbstractScrollAreaPrivate* d_func() const { return reinterpret_cast<const QAbstractScrollAreaPrivate *>(d_ptr); } friend class QAbstractScrollAreaPrivate;
QAbstractScrollArea(const QAbstractScrollArea &); QAbstractScrollArea &operator=(const QAbstractScrollArea &);




friend class QStyleSheetStyle;
};



# 137 "/home/eagle/qt-copy/include/QtGui/qabstractscrollarea.h"





# 47 "/home/eagle/qt-copy/include/QtGui/qscrollarea.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qscrollarea.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qscrollarea.h"
class QScrollAreaPrivate;

class  QScrollArea : public QAbstractScrollArea
{
Q_OBJECT
Q_PROPERTY(bool widgetResizable READ widgetResizable WRITE setWidgetResizable)
Q_PROPERTY(Qt::Alignment alignment READ alignment WRITE setAlignment)

public:
explicit QScrollArea(QWidget* parent=0);
~QScrollArea();

QWidget *widget() const;
void setWidget(QWidget *widget);
QWidget *takeWidget();

bool widgetResizable() const;
void setWidgetResizable(bool resizable);

QSize sizeHint() const;
bool focusNextPrevChild(bool next);

Qt::Alignment alignment() const;
void setAlignment(Qt::Alignment);

void ensureVisible(int x, int y, int xmargin = 50, int ymargin = 50);
void ensureWidgetVisible(QWidget *childWidget, int xmargin = 50, int ymargin = 50);

protected:
QScrollArea(QScrollAreaPrivate &dd, QWidget *parent = 0);
bool event(QEvent *);
bool eventFilter(QObject *, QEvent *);
void resizeEvent(QResizeEvent *);
void scrollContentsBy(int dx, int dy);

private:
inline QScrollAreaPrivate* d_func() { return reinterpret_cast<QScrollAreaPrivate *>(d_ptr); } inline const QScrollAreaPrivate* d_func() const { return reinterpret_cast<const QScrollAreaPrivate *>(d_ptr); } friend class QScrollAreaPrivate;
QScrollArea(const QScrollArea &); QScrollArea &operator=(const QScrollArea &);
};



# 99 "/home/eagle/qt-copy/include/QtGui/qscrollarea.h"





# 49 "/home/eagle/qt-copy/include/QtGui/qgraphicsview.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicsscene.h"




































































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtGui/qgraphicsview.h"


# 52 "/home/eagle/qt-copy/include/QtGui/qgraphicsview.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 60 "/home/eagle/qt-copy/include/QtGui/qgraphicsview.h"
class QGraphicsItem;
class QPainterPath;
class QPolygonF;
class QStyleOptionGraphicsItem;

class QGraphicsViewPrivate;
class  QGraphicsView : public QAbstractScrollArea
{
Q_OBJECT

Q_ENUMS(ViewportAnchor DragMode ViewportUpdateMode)
Q_PROPERTY(QBrush backgroundBrush READ backgroundBrush WRITE setBackgroundBrush)
Q_PROPERTY(QBrush foregroundBrush READ foregroundBrush WRITE setForegroundBrush)
Q_PROPERTY(bool interactive READ isInteractive WRITE setInteractive)
Q_PROPERTY(QRectF sceneRect READ sceneRect WRITE setSceneRect)
Q_PROPERTY(Qt::Alignment alignment READ alignment WRITE setAlignment)
Q_PROPERTY(QPainter::RenderHints renderHints READ renderHints WRITE setRenderHints)
Q_PROPERTY(DragMode dragMode READ dragMode WRITE setDragMode)
Q_PROPERTY(CacheMode cacheMode READ cacheMode WRITE setCacheMode)
Q_PROPERTY(ViewportAnchor transformationAnchor READ transformationAnchor WRITE setTransformationAnchor)
Q_PROPERTY(ViewportAnchor resizeAnchor READ resizeAnchor WRITE setResizeAnchor)
Q_PROPERTY(ViewportUpdateMode viewportUpdateMode READ viewportUpdateMode WRITE setViewportUpdateMode)

# 83 "/home/eagle/qt-copy/include/QtGui/qgraphicsview.h"
Q_PROPERTY(Qt::ItemSelectionMode rubberBandSelectionMode READ rubberBandSelectionMode WRITE setRubberBandSelectionMode)

# 85 "/home/eagle/qt-copy/include/QtGui/qgraphicsview.h"
Q_PROPERTY(OptimizationFlags optimizationFlags READ optimizationFlags WRITE setOptimizationFlags)

public:
enum ViewportAnchor {
NoAnchor,
AnchorViewCenter,
AnchorUnderMouse
};

enum CacheModeFlag {
CacheNone = 0x0,
CacheBackground = 0x1
};
typedef QFlags<CacheModeFlag> CacheMode;

enum DragMode {
NoDrag,
ScrollHandDrag,
RubberBandDrag
};

enum ViewportUpdateMode {
FullViewportUpdate,
MinimalViewportUpdate,
SmartViewportUpdate,
NoViewportUpdate,
BoundingRectViewportUpdate
};

enum OptimizationFlag {
DontClipPainter = 0x1,
DontSavePainterState = 0x2,
DontAdjustForAntialiasing = 0x4
};
typedef QFlags<OptimizationFlag> OptimizationFlags;

QGraphicsView(QWidget *parent = 0);
QGraphicsView(QGraphicsScene *scene, QWidget *parent = 0);
~QGraphicsView();

QSize sizeHint() const;

QPainter::RenderHints renderHints() const;
void setRenderHint(QPainter::RenderHint hint, bool enabled = true);
void setRenderHints(QPainter::RenderHints hints);

Qt::Alignment alignment() const;
void setAlignment(Qt::Alignment alignment);

ViewportAnchor transformationAnchor() const;
void setTransformationAnchor(ViewportAnchor anchor);

ViewportAnchor resizeAnchor() const;
void setResizeAnchor(ViewportAnchor anchor);

ViewportUpdateMode viewportUpdateMode() const;
void setViewportUpdateMode(ViewportUpdateMode mode);

OptimizationFlags optimizationFlags() const;
void setOptimizationFlag(OptimizationFlag flag, bool enabled = true);
void setOptimizationFlags(OptimizationFlags flags);

DragMode dragMode() const;
void setDragMode(DragMode mode);


# 151 "/home/eagle/qt-copy/include/QtGui/qgraphicsview.h"
Qt::ItemSelectionMode rubberBandSelectionMode() const;
void setRubberBandSelectionMode(Qt::ItemSelectionMode mode);


# 155 "/home/eagle/qt-copy/include/QtGui/qgraphicsview.h"
CacheMode cacheMode() const;
void setCacheMode(CacheMode mode);
void resetCachedContent();

bool isInteractive() const;
void setInteractive(bool allowed);

QGraphicsScene *scene() const;
void setScene(QGraphicsScene *scene);

QRectF sceneRect() const;
void setSceneRect(const QRectF &rect);
inline void setSceneRect(qreal x, qreal y, qreal w, qreal h);

QMatrix matrix() const;
void setMatrix(const QMatrix &matrix, bool combine = false);
void resetMatrix();
QTransform transform() const;
QTransform viewportTransform() const;
void setTransform(const QTransform &matrix, bool combine = false);
void resetTransform();
void rotate(qreal angle);
void scale(qreal sx, qreal sy);
void shear(qreal sh, qreal sv);
void translate(qreal dx, qreal dy);

void centerOn(const QPointF &pos);
inline void centerOn(qreal x, qreal y);
void centerOn(const QGraphicsItem *item);
void ensureVisible(const QRectF &rect, int xmargin = 50, int ymargin = 50);
inline void ensureVisible(qreal x, qreal y, qreal w, qreal h, int xmargin = 50, int ymargin = 50);
void ensureVisible(const QGraphicsItem *item, int xmargin = 50, int ymargin = 50);
void fitInView(const QRectF &rect, Qt::AspectRatioMode aspectRadioMode = Qt::IgnoreAspectRatio);
inline void fitInView(qreal x, qreal y, qreal w, qreal h,
Qt::AspectRatioMode aspectRadioMode = Qt::IgnoreAspectRatio);
void fitInView(const QGraphicsItem *item,
Qt::AspectRatioMode aspectRadioMode = Qt::IgnoreAspectRatio);

void render(QPainter *painter, const QRectF &target = QRectF(), const QRect &source = QRect(),
Qt::AspectRatioMode aspectRatioMode = Qt::KeepAspectRatio);

QList<QGraphicsItem *> items() const;
QList<QGraphicsItem *> items(const QPoint &pos) const;
inline QList<QGraphicsItem *> items(int x, int y) const;
QList<QGraphicsItem *> items(const QRect &rect, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape) const;
inline QList<QGraphicsItem *> items(int x, int y, int w, int h, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape) const;
QList<QGraphicsItem *> items(const QPolygon &polygon, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape) const;
QList<QGraphicsItem *> items(const QPainterPath &path, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape) const;
QGraphicsItem *itemAt(const QPoint &pos) const;
inline QGraphicsItem *itemAt(int x, int y) const;

QPointF mapToScene(const QPoint &point) const;
QPolygonF mapToScene(const QRect &rect) const;
QPolygonF mapToScene(const QPolygon &polygon) const;
QPainterPath mapToScene(const QPainterPath &path) const;
QPoint mapFromScene(const QPointF &point) const;
QPolygon mapFromScene(const QRectF &rect) const;
QPolygon mapFromScene(const QPolygonF &polygon) const;
QPainterPath mapFromScene(const QPainterPath &path) const;
inline QPointF mapToScene(int x, int y) const;
inline QPolygonF mapToScene(int x, int y, int w, int h) const;
inline QPoint mapFromScene(qreal x, qreal y) const;
inline QPolygon mapFromScene(qreal x, qreal y, qreal w, qreal h) const;

QVariant inputMethodQuery(Qt::InputMethodQuery query) const;

QBrush backgroundBrush() const;
void setBackgroundBrush(const QBrush &brush);

QBrush foregroundBrush() const;
void setForegroundBrush(const QBrush &brush);

public slots:
void updateScene(const QList<QRectF> &rects);
void invalidateScene(const QRectF &rect = QRectF(), QGraphicsScene::SceneLayers layers = QGraphicsScene::AllLayers);
void updateSceneRect(const QRectF &rect);

protected slots:
void setupViewport(QWidget *widget);

protected:
bool event(QEvent *event);
bool viewportEvent(QEvent *event);

void contextMenuEvent(QContextMenuEvent *event);
void dragEnterEvent(QDragEnterEvent *event);
void dragLeaveEvent(QDragLeaveEvent *event);
void dragMoveEvent(QDragMoveEvent *event);
void dropEvent(QDropEvent *event);
void focusInEvent(QFocusEvent *event);
bool focusNextPrevChild(bool next);
void focusOutEvent(QFocusEvent *event);
void keyPressEvent(QKeyEvent *event);
void keyReleaseEvent(QKeyEvent *event);
void mouseDoubleClickEvent(QMouseEvent *event);
void mousePressEvent(QMouseEvent *event);
void mouseMoveEvent(QMouseEvent *event);
void mouseReleaseEvent(QMouseEvent *event);

# 254 "/home/eagle/qt-copy/include/QtGui/qgraphicsview.h"
void wheelEvent(QWheelEvent *event);

# 256 "/home/eagle/qt-copy/include/QtGui/qgraphicsview.h"
void paintEvent(QPaintEvent *event);
void resizeEvent(QResizeEvent *event);
void scrollContentsBy(int dx, int dy);
void showEvent(QShowEvent *event);
void inputMethodEvent(QInputMethodEvent *event);

virtual void drawBackground(QPainter *painter, const QRectF &rect);
virtual void drawForeground(QPainter *painter, const QRectF &rect);
virtual void drawItems(QPainter *painter, int numItems,
QGraphicsItem *items[],
const QStyleOptionGraphicsItem options[]);

private:
inline QGraphicsViewPrivate* d_func() { return reinterpret_cast<QGraphicsViewPrivate *>(d_ptr); } inline const QGraphicsViewPrivate* d_func() const { return reinterpret_cast<const QGraphicsViewPrivate *>(d_ptr); } friend class QGraphicsViewPrivate;
QGraphicsView(const QGraphicsView &); QGraphicsView &operator=(const QGraphicsView &);

# 272 "/home/eagle/qt-copy/include/QtGui/qgraphicsview.h"



# 275 "/home/eagle/qt-copy/include/QtGui/qgraphicsview.h"
friend class QGraphicsSceneWidget;
friend class QGraphicsScene;
};

inline QFlags<QGraphicsView::CacheMode::enum_type> operator|(QGraphicsView::CacheMode::enum_type f1, QGraphicsView::CacheMode::enum_type f2) { return QFlags<QGraphicsView::CacheMode::enum_type>(f1) | f2; } inline QFlags<QGraphicsView::CacheMode::enum_type> operator|(QGraphicsView::CacheMode::enum_type f1, QFlags<QGraphicsView::CacheMode::enum_type> f2) { return f2 | f1; }
inline QFlags<QGraphicsView::OptimizationFlags::enum_type> operator|(QGraphicsView::OptimizationFlags::enum_type f1, QGraphicsView::OptimizationFlags::enum_type f2) { return QFlags<QGraphicsView::OptimizationFlags::enum_type>(f1) | f2; } inline QFlags<QGraphicsView::OptimizationFlags::enum_type> operator|(QGraphicsView::OptimizationFlags::enum_type f1, QFlags<QGraphicsView::OptimizationFlags::enum_type> f2) { return f2 | f1; }

inline void QGraphicsView::setSceneRect(qreal ax, qreal ay, qreal aw, qreal ah)
{ setSceneRect(QRectF(ax, ay, aw, ah)); }
inline void QGraphicsView::centerOn(qreal ax, qreal ay)
{ centerOn(QPointF(ax, ay)); }
inline void QGraphicsView::ensureVisible(qreal ax, qreal ay, qreal aw, qreal ah, int xmargin, int ymargin)
{ ensureVisible(QRectF(ax, ay, aw, ah), xmargin, ymargin); }
inline void QGraphicsView::fitInView(qreal ax, qreal ay, qreal w, qreal h, Qt::AspectRatioMode mode)
{ fitInView(QRectF(ax, ay, w, h), mode); }
inline QList<QGraphicsItem *> QGraphicsView::items(int ax, int ay) const
{ return items(QPoint(ax, ay)); }
inline QList<QGraphicsItem *> QGraphicsView::items(int ax, int ay, int w, int h, Qt::ItemSelectionMode mode) const
{ return items(QRect(ax, ay, w, h), mode); }
inline QGraphicsItem *QGraphicsView::itemAt(int ax, int ay) const
{ return itemAt(QPoint(ax, ay)); }
inline QPointF QGraphicsView::mapToScene(int ax, int ay) const
{ return mapToScene(QPoint(ax, ay)); }
inline QPolygonF QGraphicsView::mapToScene(int ax, int ay, int w, int h) const
{ return mapToScene(QRect(ax, ay, w, h)); }
inline QPoint QGraphicsView::mapFromScene(qreal ax, qreal ay) const
{ return mapFromScene(QPointF(ax, ay)); }
inline QPolygon QGraphicsView::mapFromScene(qreal ax, qreal ay, qreal w, qreal h) const
{ return mapFromScene(QRectF(ax, ay, w, h)); }



# 307 "/home/eagle/qt-copy/include/QtGui/qgraphicsview.h"





# 32 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicswidget.h"





































































































































































































































# 33 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qbitmap.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qpixmap.h"











































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qbitmap.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qbitmap.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QVariant;

class  QBitmap : public QPixmap
{
public:
QBitmap();
QBitmap(const QPixmap &);
QBitmap(int w, int h);
explicit QBitmap(const QSize &);
explicit QBitmap(const QString &fileName, const char *format=0);
~QBitmap();

QBitmap &operator=(const QPixmap &);
operator QVariant() const;

inline void clear() { fill(Qt::color0); }

static QBitmap fromImage(const QImage &image, Qt::ImageConversionFlags flags = Qt::AutoColor);
static QBitmap fromData(const QSize &size, const uchar *bits,
QImage::Format monoFormat = QImage::Format_MonoLSB);

QBitmap transformed(const QMatrix &) const;
QBitmap transformed(const QTransform &matrix) const;









# 87 "/home/eagle/qt-copy/include/QtGui/qbitmap.h"
};
template <> inline bool qIsDetached<QBitmap>(QBitmap &t) { return t.isDetached(); } template <typename T> inline void qSwap(T &, T &); template <> inline void qSwap<QBitmap>(QBitmap &value1, QBitmap &value2) { const QBitmap::DataPtr t = value1.data_ptr(); value1.data_ptr() = value2.data_ptr(); value2.data_ptr() = t; }















# 104 "/home/eagle/qt-copy/include/QtGui/qbitmap.h"





# 34 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qicon.h"















































































































































# 35 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qiconengine.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qiconengine.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qicon.h"















































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qiconengine.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qiconengine.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class  QIconEngine
{
public:
virtual ~QIconEngine();
virtual void paint(QPainter *painter, const QRect &rect, QIcon::Mode mode, QIcon::State state) = 0;
virtual QSize actualSize(const QSize &size, QIcon::Mode mode, QIcon::State state);
virtual QPixmap pixmap(const QSize &size, QIcon::Mode mode, QIcon::State state);

virtual void addPixmap(const QPixmap &pixmap, QIcon::Mode mode, QIcon::State state);
virtual void addFile(const QString &fileName, const QSize &size, QIcon::Mode mode, QIcon::State state);





# 71 "/home/eagle/qt-copy/include/QtGui/qiconengine.h"
};


class  QIconEngineV2 : public QIconEngine
{
public:
virtual QString key() const;
virtual QIconEngineV2 *clone() const;
virtual bool read(QDataStream &in);
virtual bool write(QDataStream &out) const;
virtual void virtual_hook(int id, void *data);
};






# 36 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qiconengineplugin.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qplugin.h"
















































































































# 47 "/home/eagle/qt-copy/include/QtGui/qiconengineplugin.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qfactoryinterface.h"





































































# 48 "/home/eagle/qt-copy/include/QtGui/qiconengineplugin.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qiconengineplugin.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QIconEngine;
class QIconEngineV2;

struct  QIconEngineFactoryInterface : public QFactoryInterface
{
virtual QIconEngine *create(const QString &filename) = 0;
};


# 66 "/home/eagle/qt-copy/include/QtGui/qiconengineplugin.h"
template <> inline QIconEngineFactoryInterface *qobject_cast<QIconEngineFactoryInterface *>(QObject *object) { return reinterpret_cast<QIconEngineFactoryInterface *>((object ? object->qt_metacast("com.trolltech.Qt.QIconEngineFactoryInterface") : 0)); } template <> inline QIconEngineFactoryInterface *qobject_cast<QIconEngineFactoryInterface *>(const QObject *object) { return reinterpret_cast<QIconEngineFactoryInterface *>((object ? const_cast<QObject *>(object)->qt_metacast("com.trolltech.Qt.QIconEngineFactoryInterface") : 0)); }

class  QIconEnginePlugin : public QObject, public QIconEngineFactoryInterface
{
Q_OBJECT

public:
QIconEnginePlugin(QObject *parent = 0);
~QIconEnginePlugin();

virtual QStringList keys() const = 0;
virtual QIconEngine *create(const QString &filename) = 0;
};


struct  QIconEngineFactoryInterfaceV2 : public QFactoryInterface
{
virtual QIconEngineV2 *create(const QString &filename = QString()) = 0;
};


# 88 "/home/eagle/qt-copy/include/QtGui/qiconengineplugin.h"
template <> inline QIconEngineFactoryInterfaceV2 *qobject_cast<QIconEngineFactoryInterfaceV2 *>(QObject *object) { return reinterpret_cast<QIconEngineFactoryInterfaceV2 *>((object ? object->qt_metacast("com.trolltech.Qt.QIconEngineFactoryInterfaceV2") : 0)); } template <> inline QIconEngineFactoryInterfaceV2 *qobject_cast<QIconEngineFactoryInterfaceV2 *>(const QObject *object) { return reinterpret_cast<QIconEngineFactoryInterfaceV2 *>((object ? const_cast<QObject *>(object)->qt_metacast("com.trolltech.Qt.QIconEngineFactoryInterfaceV2") : 0)); }

class  QIconEnginePluginV2 : public QObject, public QIconEngineFactoryInterfaceV2
{
Q_OBJECT

public:
QIconEnginePluginV2(QObject *parent = 0);
~QIconEnginePluginV2();

virtual QStringList keys() const = 0;
virtual QIconEngineV2 *create(const QString &filename = QString()) = 0;
};






# 37 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qimage.h"


































































































































































































































































































































































# 38 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qimageiohandler.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qplugin.h"
















































































































# 47 "/home/eagle/qt-copy/include/QtGui/qimageiohandler.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qfactoryinterface.h"





































































# 48 "/home/eagle/qt-copy/include/QtGui/qimageiohandler.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qimageiohandler.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QImage;
class QRect;
class QSize;
class QVariant;

class QImageIOHandlerPrivate;
class  QImageIOHandler
{
inline QImageIOHandlerPrivate* d_func() { return reinterpret_cast<QImageIOHandlerPrivate *>(d_ptr); } inline const QImageIOHandlerPrivate* d_func() const { return reinterpret_cast<const QImageIOHandlerPrivate *>(d_ptr); } friend class QImageIOHandlerPrivate;
public:
QImageIOHandler();
virtual ~QImageIOHandler();

void setDevice(QIODevice *device);
QIODevice *device() const;

void setFormat(const QByteArray &format);
void setFormat(const QByteArray &format) const;
QByteArray format() const;

virtual QByteArray name() const;

virtual bool canRead() const = 0;
virtual bool read(QImage *image) = 0;
virtual bool write(const QImage &image);

enum ImageOption {
Size,
ClipRect,
Description,
ScaledClipRect,
ScaledSize,
CompressionRatio,
Gamma,
Quality,
Name,
SubType,
IncrementalReading,
Endianness,
Animation,
BackgroundColor
};
virtual QVariant option(ImageOption option) const;
virtual void setOption(ImageOption option, const QVariant &value);
virtual bool supportsOption(ImageOption option) const;


virtual bool jumpToNextImage();
virtual bool jumpToImage(int imageNumber);
virtual int loopCount() const;
virtual int imageCount() const;
virtual int nextImageDelay() const;
virtual int currentImageNumber() const;
virtual QRect currentImageRect() const;

protected:
QImageIOHandler(QImageIOHandlerPrivate &dd);
QImageIOHandlerPrivate *d_ptr;
private:
QImageIOHandler(const QImageIOHandler &); QImageIOHandler &operator=(const QImageIOHandler &);
};

struct  QImageIOHandlerFactoryInterface : public QFactoryInterface
{
virtual QImageIOHandler *create(QIODevice *device, const QByteArray &format = QByteArray()) const = 0;
};


# 124 "/home/eagle/qt-copy/include/QtGui/qimageiohandler.h"
template <> inline QImageIOHandlerFactoryInterface *qobject_cast<QImageIOHandlerFactoryInterface *>(QObject *object) { return reinterpret_cast<QImageIOHandlerFactoryInterface *>((object ? object->qt_metacast("com.trolltech.Qt.QImageIOHandlerFactoryInterface") : 0)); } template <> inline QImageIOHandlerFactoryInterface *qobject_cast<QImageIOHandlerFactoryInterface *>(const QObject *object) { return reinterpret_cast<QImageIOHandlerFactoryInterface *>((object ? const_cast<QObject *>(object)->qt_metacast("com.trolltech.Qt.QImageIOHandlerFactoryInterface") : 0)); }

class  QImageIOPlugin : public QObject, public QImageIOHandlerFactoryInterface
{
Q_OBJECT

public:
explicit QImageIOPlugin(QObject *parent = 0);
virtual ~QImageIOPlugin();

enum Capability {
CanRead = 0x1,
CanWrite = 0x2,
CanReadIncremental = 0x4
};
typedef QFlags<Capability> Capabilities;

virtual Capabilities capabilities(QIODevice *device, const QByteArray &format) const = 0;
virtual QStringList keys() const = 0;
virtual QImageIOHandler *create(QIODevice *device, const QByteArray &format = QByteArray()) const = 0;
};

inline QFlags<QImageIOPlugin::Capabilities::enum_type> operator|(QImageIOPlugin::Capabilities::enum_type f1, QImageIOPlugin::Capabilities::enum_type f2) { return QFlags<QImageIOPlugin::Capabilities::enum_type>(f1) | f2; } inline QFlags<QImageIOPlugin::Capabilities::enum_type> operator|(QImageIOPlugin::Capabilities::enum_type f1, QFlags<QImageIOPlugin::Capabilities::enum_type> f2) { return f2 | f1; }






# 39 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qimagereader.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"












































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qimagereader.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qimageiohandler.h"
























































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qimagereader.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qimagereader.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QColor;
class QIODevice;
class QImage;
class QRect;
class QSize;
class QStringList;

class QImageReaderPrivate;
class  QImageReader
{
public:
enum ImageReaderError {
UnknownError,
FileNotFoundError,
DeviceError,
UnsupportedFormatError,
InvalidDataError
};

QImageReader();
explicit QImageReader(QIODevice *device, const QByteArray &format = QByteArray());
explicit QImageReader(const QString &fileName, const QByteArray &format = QByteArray());
~QImageReader();

void setFormat(const QByteArray &format);
QByteArray format() const;

void setDevice(QIODevice *device);
QIODevice *device() const;

void setFileName(const QString &fileName);
QString fileName() const;

QSize size() const;

QStringList textKeys() const;
QString text(const QString &key) const;

void setClipRect(const QRect &rect);
QRect clipRect() const;

void setScaledSize(const QSize &size);
QSize scaledSize() const;

void setQuality(int quality);
int quality() const;

void setScaledClipRect(const QRect &rect);
QRect scaledClipRect() const;

void setBackgroundColor(const QColor &color);
QColor backgroundColor() const;

bool supportsAnimation() const;

bool canRead() const;
QImage read();
bool read(QImage *image);

bool jumpToNextImage();
bool jumpToImage(int imageNumber);
int loopCount() const;
int imageCount() const;
int nextImageDelay() const;
int currentImageNumber() const;
QRect currentImageRect() const;

ImageReaderError error() const;
QString errorString() const;

bool supportsOption(QImageIOHandler::ImageOption option) const;

static QByteArray imageFormat(const QString &fileName);
static QByteArray imageFormat(QIODevice *device);
static QList<QByteArray> supportedImageFormats();

private:
QImageReader(const QImageReader &); QImageReader &operator=(const QImageReader &);
QImageReaderPrivate *d;
};






# 40 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qimagewriter.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"












































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qimagewriter.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qlist.h"











































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qimagewriter.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qimageiohandler.h"
























































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qimagewriter.h"


# 51 "/home/eagle/qt-copy/include/QtGui/qimagewriter.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QIODevice;
class QImage;

class QImageWriterPrivate;
class  QImageWriter
{
public:
enum ImageWriterError {
UnknownError,
DeviceError,
UnsupportedFormatError
};

QImageWriter();
explicit QImageWriter(QIODevice *device, const QByteArray &format);
explicit QImageWriter(const QString &fileName, const QByteArray &format = QByteArray());
~QImageWriter();

void setFormat(const QByteArray &format);
QByteArray format() const;

void setDevice(QIODevice *device);
QIODevice *device() const;

void setFileName(const QString &fileName);
QString fileName() const;

void setQuality(int quality);
int quality() const;

void setCompression(int compression);
int compression() const;

void setGamma(float gamma);
float gamma() const;


void setDescription(const QString &description);
QString description() const;

void setText(const QString &key, const QString &text);

bool canWrite() const;
bool write(const QImage &image);

ImageWriterError error() const;
QString errorString() const;

bool supportsOption(QImageIOHandler::ImageOption option) const;

static QList<QByteArray> supportedImageFormats();

private:
QImageWriter(const QImageWriter &); QImageWriter &operator=(const QImageWriter &);
QImageWriterPrivate *d;
};






# 41 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qmovie.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qmovie.h"




# 1 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"












































































































































































































































































































































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtGui/qmovie.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qlist.h"











































































































































































































































































































































































































































































































































































































































































































# 52 "/home/eagle/qt-copy/include/QtGui/qmovie.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 53 "/home/eagle/qt-copy/include/QtGui/qmovie.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qimagereader.h"













































































































































# 54 "/home/eagle/qt-copy/include/QtGui/qmovie.h"







# 61 "/home/eagle/qt-copy/include/QtGui/qmovie.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QByteArray;
class QColor;
class QIODevice;
class QImage;
class QPixmap;
class QRect;
class QSize;

class QMoviePrivate;
class  QMovie : public QObject
{
Q_OBJECT
inline QMoviePrivate* d_func() { return reinterpret_cast<QMoviePrivate *>(d_ptr); } inline const QMoviePrivate* d_func() const { return reinterpret_cast<const QMoviePrivate *>(d_ptr); } friend class QMoviePrivate;
Q_ENUMS(MovieState CacheMode)
Q_PROPERTY(int speed READ speed WRITE setSpeed)
Q_PROPERTY(CacheMode cacheMode READ cacheMode WRITE setCacheMode)
public:
enum MovieState {
NotRunning,
Paused,
Running
};
enum CacheMode {
CacheNone,
CacheAll
};

QMovie(QObject *parent = 0);
explicit QMovie(QIODevice *device, const QByteArray &format = QByteArray(), QObject *parent = 0);
explicit QMovie(const QString &fileName, const QByteArray &format = QByteArray(), QObject *parent = 0);
~QMovie();

static QList<QByteArray> supportedFormats();

void setDevice(QIODevice *device);
QIODevice *device() const;

void setFileName(const QString &fileName);
QString fileName() const;

void setFormat(const QByteArray &format);
QByteArray format() const;

void setBackgroundColor(const QColor &color);
QColor backgroundColor() const;

MovieState state() const;

QRect frameRect() const;
QImage currentImage() const;
QPixmap currentPixmap() const;

bool isValid() const;

bool jumpToFrame(int frameNumber);
int loopCount() const;
int frameCount() const;
int nextFrameDelay() const;
int currentFrameNumber() const;

int speed() const;

QSize scaledSize();
void setScaledSize(const QSize &size);

CacheMode cacheMode() const;
void setCacheMode(CacheMode mode);

CacheMode cacheMode(); 

signals:
void started();
void resized(const QSize &size);
void updated(const QRect &rect);
void stateChanged(QMovie::MovieState state);
void error(QImageReader::ImageReaderError error);
void finished();
void frameChanged(int frameNumber);

public slots:
void start();
bool jumpToNextFrame();
void setPaused(bool paused);
void stop();
void setSpeed(int percentSpeed);

private:
QMovie(const QMovie &); QMovie &operator=(const QMovie &);
















# 171 "/home/eagle/qt-copy/include/QtGui/qmovie.h"
};








# 42 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qpicture.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qpaintdevice.h"













































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qpicture.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"
















































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qpicture.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qpicture.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 58 "/home/eagle/qt-copy/include/QtGui/qpicture.h"
class QPicturePrivate;
class  QPicture : public QPaintDevice
{
inline QPicturePrivate* d_func() { return reinterpret_cast<QPicturePrivate *>(d_ptr); } inline const QPicturePrivate* d_func() const { return reinterpret_cast<const QPicturePrivate *>(d_ptr); } friend class QPicturePrivate;
public:
explicit QPicture(int formatVersion = -1);
QPicture(const QPicture &);
~QPicture();

bool isNull() const;

int devType() const;
uint size() const;
const char* data() const;
virtual void setData(const char* data, uint size);

bool play(QPainter *p);

bool load(QIODevice *dev, const char *format = 0);
bool load(const QString &fileName, const char *format = 0);
bool save(QIODevice *dev, const char *format = 0);
bool save(const QString &fileName, const char *format = 0);

QRect boundingRect() const;
void setBoundingRect(const QRect &r);

QPicture& operator=(const QPicture &p);
void detach();
bool isDetached() const;

friend  QDataStream &operator<<(QDataStream &in, const QPicture &p);
friend  QDataStream &operator>>(QDataStream &in, QPicture &p);

static const char* pictureFormat(const QString &fileName);
static QList<QByteArray> inputFormats();
static QList<QByteArray> outputFormats();
static QStringList inputFormatList();
static QStringList outputFormatList();

QPaintEngine *paintEngine() const;

protected:
QPicture(QPicturePrivate &data);

int metric(PaintDeviceMetric m) const;




# 107 "/home/eagle/qt-copy/include/QtGui/qpicture.h"
private:
bool exec(QPainter *p, QDataStream &ds, int i);
void detach_helper();

QPicturePrivate *d_ptr;
friend class QPicturePaintEngine;
friend class Q3Picture;
friend class QAlphaPaintEngine;
friend class QPreviewPaintEngine;

public:
typedef QPicturePrivate* DataPtr;
inline DataPtr &data_ptr() { return d_ptr; }
};

template <> inline bool qIsDetached<QPicture>(QPicture &t) { return t.isDetached(); } template <typename T> inline void qSwap(T &, T &); template <> inline void qSwap<QPicture>(QPicture &value1, QPicture &value2) { const QPicture::DataPtr t = value1.data_ptr(); value1.data_ptr() = value2.data_ptr(); value2.data_ptr() = t; }



# 126 "/home/eagle/qt-copy/include/QtGui/qpicture.h"
class QIODevice;
class QPictureIO;
typedef void (*picture_io_handler)(QPictureIO *); 

struct QPictureIOData;

class  QPictureIO
{
public:
QPictureIO();
QPictureIO(QIODevice *ioDevice, const char *format);
QPictureIO(const QString &fileName, const char *format);
~QPictureIO();

const QPicture &picture() const;
int status() const;
const char *format() const;
QIODevice *ioDevice() const;
QString fileName() const;
int quality() const;
QString description() const;
const char *parameters() const;
float gamma() const;

void setPicture(const QPicture &);
void setStatus(int);
void setFormat(const char *);
void setIODevice(QIODevice *);
void setFileName(const QString &);
void setQuality(int);
void setDescription(const QString &);
void setParameters(const char *);
void setGamma(float);

bool read();
bool write();

static QByteArray pictureFormat(const QString &fileName);
static QByteArray pictureFormat(QIODevice *);
static QList<QByteArray> inputFormats();
static QList<QByteArray> outputFormats();

static void defineIOHandler(const char *format,
const char *header,
const char *flags,
picture_io_handler read_picture,
picture_io_handler write_picture);

private:
QPictureIO(const QPictureIO &); QPictureIO &operator=(const QPictureIO &);

void init();

QPictureIOData *d;
};




# 185 "/home/eagle/qt-copy/include/QtGui/qpicture.h"




 QDataStream &operator<<(QDataStream &, const QPicture &);
 QDataStream &operator>>(QDataStream &, QPicture &);



# 194 "/home/eagle/qt-copy/include/QtGui/qpicture.h"





# 43 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qpictureformatplugin.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qplugin.h"
















































































































# 47 "/home/eagle/qt-copy/include/QtGui/qpictureformatplugin.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qfactoryinterface.h"





































































# 48 "/home/eagle/qt-copy/include/QtGui/qpictureformatplugin.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qpictureformatplugin.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 58 "/home/eagle/qt-copy/include/QtGui/qpictureformatplugin.h"
class QPicture;
class QImage;
class QString;
class QStringList;

struct  QPictureFormatInterface : public QFactoryInterface
{
virtual bool loadPicture(const QString &format, const QString &filename, QPicture *) = 0;
virtual bool savePicture(const QString &format, const QString &filename, const QPicture &) = 0;

virtual bool installIOHandler(const QString &) = 0;
};


# 72 "/home/eagle/qt-copy/include/QtGui/qpictureformatplugin.h"
template <> inline QPictureFormatInterface *qobject_cast<QPictureFormatInterface *>(QObject *object) { return reinterpret_cast<QPictureFormatInterface *>((object ? object->qt_metacast("com.trolltech.Qt.QPictureFormatInterface") : 0)); } template <> inline QPictureFormatInterface *qobject_cast<QPictureFormatInterface *>(const QObject *object) { return reinterpret_cast<QPictureFormatInterface *>((object ? const_cast<QObject *>(object)->qt_metacast("com.trolltech.Qt.QPictureFormatInterface") : 0)); }


class  QPictureFormatPlugin : public QObject, public QPictureFormatInterface
{
Q_OBJECT

public:
explicit QPictureFormatPlugin(QObject *parent = 0);
~QPictureFormatPlugin();

virtual QStringList keys() const = 0;
virtual bool loadPicture(const QString &format, const QString &filename, QPicture *pic);
virtual bool savePicture(const QString &format, const QString &filename, const QPicture &pic);
virtual bool installIOHandler(const QString &format) = 0;

};



# 92 "/home/eagle/qt-copy/include/QtGui/qpictureformatplugin.h"





# 44 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qpixmap.h"











































































































































































































































































































# 45 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qpixmapcache.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qpixmap.h"











































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qpixmapcache.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qpixmapcache.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class  QPixmapCache
{
public:
static int cacheLimit();
static void setCacheLimit(int);
static QPixmap *find(const QString &key);
static bool find(const QString &key, QPixmap&);
static bool insert(const QString &key, const QPixmap&);
static void remove(const QString &key);
static void clear();
};






# 46 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qinputcontext.h"




























































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 61 "/home/eagle/qt-copy/include/QtGui/qinputcontext.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 62 "/home/eagle/qt-copy/include/QtGui/qinputcontext.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qevent.h"






















































































































































































































































































































































































































































































































































































































































































































































# 63 "/home/eagle/qt-copy/include/QtGui/qinputcontext.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 64 "/home/eagle/qt-copy/include/QtGui/qinputcontext.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qlist.h"











































































































































































































































































































































































































































































































































































































































































































# 65 "/home/eagle/qt-copy/include/QtGui/qinputcontext.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qaction.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qkeysequence.h"




































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qaction.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qaction.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qwidget.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qaction.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qvariant.h"






















































































































































































































































































































































































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtGui/qaction.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qicon.h"















































































































































# 51 "/home/eagle/qt-copy/include/QtGui/qaction.h"


# 53 "/home/eagle/qt-copy/include/QtGui/qaction.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 61 "/home/eagle/qt-copy/include/QtGui/qaction.h"
class QMenu;
class QActionGroup;
class QActionPrivate;

class  QAction : public QObject
{
Q_OBJECT
inline QActionPrivate* d_func() { return reinterpret_cast<QActionPrivate *>(d_ptr); } inline const QActionPrivate* d_func() const { return reinterpret_cast<const QActionPrivate *>(d_ptr); } friend class QActionPrivate;

Q_ENUMS(MenuRole)
Q_PROPERTY(bool checkable READ isCheckable WRITE setCheckable)
Q_PROPERTY(bool checked READ isChecked WRITE setChecked DESIGNABLE isCheckable NOTIFY toggled)
Q_PROPERTY(bool enabled READ isEnabled WRITE setEnabled)
Q_PROPERTY(QIcon icon READ icon WRITE setIcon)
Q_PROPERTY(QString text READ text WRITE setText)
Q_PROPERTY(QString iconText READ iconText WRITE setIconText)
Q_PROPERTY(QString toolTip READ toolTip WRITE setToolTip)
Q_PROPERTY(QString statusTip READ statusTip WRITE setStatusTip)
Q_PROPERTY(QString whatsThis READ whatsThis WRITE setWhatsThis)
Q_PROPERTY(QFont font READ font WRITE setFont)

# 82 "/home/eagle/qt-copy/include/QtGui/qaction.h"
Q_PROPERTY(QKeySequence shortcut READ shortcut WRITE setShortcut)
Q_PROPERTY(Qt::ShortcutContext shortcutContext READ shortcutContext WRITE setShortcutContext)
Q_PROPERTY(bool autoRepeat READ autoRepeat WRITE setAutoRepeat)

# 86 "/home/eagle/qt-copy/include/QtGui/qaction.h"
Q_PROPERTY(bool visible READ isVisible WRITE setVisible)
Q_PROPERTY(MenuRole menuRole READ menuRole WRITE setMenuRole)
Q_PROPERTY(bool iconVisibleInMenu READ isIconVisibleInMenu WRITE setIconVisibleInMenu)

public:
enum MenuRole { NoRole, TextHeuristicRole, ApplicationSpecificRole, AboutQtRole,
AboutRole, PreferencesRole, QuitRole };
explicit QAction(QObject* parent);
QAction(const QString &text, QObject* parent);
QAction(const QIcon &icon, const QString &text, QObject* parent);









# 105 "/home/eagle/qt-copy/include/QtGui/qaction.h"
~QAction();

void setActionGroup(QActionGroup *group);
QActionGroup *actionGroup() const;
void setIcon(const QIcon &icon);
QIcon icon() const;

void setText(const QString &text);
QString text() const;

void setIconText(const QString &text);
QString iconText() const;

void setToolTip(const QString &tip);
QString toolTip() const;

void setStatusTip(const QString &statusTip);
QString statusTip() const;

void setWhatsThis(const QString &what);
QString whatsThis() const;


# 128 "/home/eagle/qt-copy/include/QtGui/qaction.h"
QMenu *menu() const;
void setMenu(QMenu *menu);


# 132 "/home/eagle/qt-copy/include/QtGui/qaction.h"
void setSeparator(bool b);
bool isSeparator() const;


# 136 "/home/eagle/qt-copy/include/QtGui/qaction.h"
void setShortcut(const QKeySequence &shortcut);
QKeySequence shortcut() const;

void setShortcuts(const QList<QKeySequence> &shortcuts);
void setShortcuts(QKeySequence::StandardKey);
QList<QKeySequence> shortcuts() const;

void setShortcutContext(Qt::ShortcutContext context);
Qt::ShortcutContext shortcutContext() const;

void setAutoRepeat(bool);
bool autoRepeat() const;


# 150 "/home/eagle/qt-copy/include/QtGui/qaction.h"
void setFont(const QFont &font);
QFont font() const;

void setCheckable(bool);
bool isCheckable() const;

QVariant data() const;
void setData(const QVariant &var);

bool isChecked() const;

bool isEnabled() const;

bool isVisible() const;

enum ActionEvent { Trigger, Hover };
void activate(ActionEvent event);
bool showStatusText(QWidget *widget=0);

void setMenuRole(MenuRole menuRole);
MenuRole menuRole() const;

void setIconVisibleInMenu(bool visible);
bool isIconVisibleInMenu() const;















# 189 "/home/eagle/qt-copy/include/QtGui/qaction.h"
QWidget *parentWidget() const;

QList<QWidget *> associatedWidgets() const;

protected:
bool event(QEvent *);
QAction(QActionPrivate &dd, QObject *parent);

public slots:



# 201 "/home/eagle/qt-copy/include/QtGui/qaction.h"
void trigger() { activate(Trigger); }
void hover() { activate(Hover); }
void setChecked(bool);
void toggle();
void setEnabled(bool);
inline void setDisabled(bool b) { setEnabled(!b); }
void setVisible(bool);

signals:
void changed();
void triggered(bool checked = false);
void hovered();
void toggled(bool);




# 218 "/home/eagle/qt-copy/include/QtGui/qaction.h"
private:
QAction(const QAction &); QAction &operator=(const QAction &);




# 224 "/home/eagle/qt-copy/include/QtGui/qaction.h"
friend class QWidget;
friend class QActionGroup;
friend class QMenu;
friend class QMenuPrivate;
friend class QMenuBar;
friend class QShortcutMap;
friend class QToolButton;
};


# 1 "/home/eagle/qt-copy/include/QtGui/qactiongroup.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qaction.h"



















































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qactiongroup.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qactiongroup.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qactiongroup.h"
class QActionGroupPrivate;

class  QActionGroup : public QObject
{
Q_OBJECT
inline QActionGroupPrivate* d_func() { return reinterpret_cast<QActionGroupPrivate *>(d_ptr); } inline const QActionGroupPrivate* d_func() const { return reinterpret_cast<const QActionGroupPrivate *>(d_ptr); } friend class QActionGroupPrivate;

Q_PROPERTY(bool exclusive READ isExclusive WRITE setExclusive)
Q_PROPERTY(bool enabled READ isEnabled WRITE setEnabled)
Q_PROPERTY(bool visible READ isVisible WRITE setVisible)

public:
explicit QActionGroup(QObject* parent);
~QActionGroup();

QAction *addAction(QAction* a);
QAction *addAction(const QString &text);
QAction *addAction(const QIcon &icon, const QString &text);
void removeAction(QAction *a);
QList<QAction*> actions() const;

QAction *checkedAction() const;
bool isExclusive() const;
bool isEnabled() const;
bool isVisible() const;








# 90 "/home/eagle/qt-copy/include/QtGui/qactiongroup.h"
public slots:
void setEnabled(bool);
inline void setDisabled(bool b) { setEnabled(!b); }
void setVisible(bool);
void setExclusive(bool);

signals:
void triggered(QAction *);
 void selected(QAction *);
void hovered(QAction *);

private:
QActionGroup(const QActionGroup &); QActionGroup &operator=(const QActionGroup &);



};



# 110 "/home/eagle/qt-copy/include/QtGui/qactiongroup.h"





# 234 "/home/eagle/qt-copy/include/QtGui/qaction.h"

# 235 "/home/eagle/qt-copy/include/QtGui/qaction.h"




# 239 "/home/eagle/qt-copy/include/QtGui/qaction.h"





# 66 "/home/eagle/qt-copy/include/QtGui/qinputcontext.h"




# 70 "/home/eagle/qt-copy/include/QtGui/qinputcontext.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QWidget;
class QFont;
class QPopupMenu;
class QInputContextPrivate;


class  QInputContext : public QObject
{
Q_OBJECT
inline QInputContextPrivate* d_func() { return reinterpret_cast<QInputContextPrivate *>(d_ptr); } inline const QInputContextPrivate* d_func() const { return reinterpret_cast<const QInputContextPrivate *>(d_ptr); } friend class QInputContextPrivate;
public:
explicit QInputContext(QObject* parent = 0);
virtual ~QInputContext();

virtual QString identifierName() = 0;
virtual QString language() = 0;

virtual void reset() = 0;
virtual void update();

virtual void mouseHandler( int x, QMouseEvent *event);
virtual QFont font() const;
virtual bool isComposing() const = 0;

QWidget *focusWidget() const;
virtual void setFocusWidget( QWidget *w );

virtual void widgetDestroyed(QWidget *w);

virtual QList<QAction *> actions();




# 110 "/home/eagle/qt-copy/include/QtGui/qinputcontext.h"
virtual bool filterEvent( const QEvent *event );

void sendEvent(const QInputMethodEvent &event);

enum StandardFormat {
PreeditFormat,
SelectionFormat
};
QTextFormat standardFormat(StandardFormat s) const;
private:
friend class QWidget;
friend class QInputContextFactory;
friend class QApplication;

private: 
QInputContext( const QInputContext & );
QInputContext &operator=( const QInputContext & );

};








# 47 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qinputcontextfactory.h"




























































# 1 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"
















































































































































































































































# 61 "/home/eagle/qt-copy/include/QtGui/qinputcontextfactory.h"


# 63 "/home/eagle/qt-copy/include/QtGui/qinputcontextfactory.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 71 "/home/eagle/qt-copy/include/QtGui/qinputcontextfactory.h"
class QInputContext;
class QWidget;

class  QInputContextFactory
{
public:
static QStringList keys();
static QInputContext *create( const QString &key, QObject *parent ); 
static QStringList languages( const QString &key );
static QString displayName( const QString &key );
static QString description( const QString &key );
};



# 86 "/home/eagle/qt-copy/include/QtGui/qinputcontextfactory.h"





# 48 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qinputcontextplugin.h"




























































# 1 "/home/eagle/qt-copy/include/QtCore/qplugin.h"
















































































































# 61 "/home/eagle/qt-copy/include/QtGui/qinputcontextplugin.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qfactoryinterface.h"





































































# 62 "/home/eagle/qt-copy/include/QtGui/qinputcontextplugin.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"
















































































































































































































































# 63 "/home/eagle/qt-copy/include/QtGui/qinputcontextplugin.h"


# 65 "/home/eagle/qt-copy/include/QtGui/qinputcontextplugin.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 73 "/home/eagle/qt-copy/include/QtGui/qinputcontextplugin.h"
class QInputContext;
class QInputContextPluginPrivate;

struct  QInputContextFactoryInterface : public QFactoryInterface
{
virtual QInputContext *create( const QString &key ) = 0;
virtual QStringList languages( const QString &key ) = 0;
virtual QString displayName( const QString &key ) = 0;
virtual QString description( const QString &key ) = 0;
};


# 85 "/home/eagle/qt-copy/include/QtGui/qinputcontextplugin.h"
template <> inline QInputContextFactoryInterface *qobject_cast<QInputContextFactoryInterface *>(QObject *object) { return reinterpret_cast<QInputContextFactoryInterface *>((object ? object->qt_metacast("com.trolltech.Qt.QInputContextFactoryInterface") : 0)); } template <> inline QInputContextFactoryInterface *qobject_cast<QInputContextFactoryInterface *>(const QObject *object) { return reinterpret_cast<QInputContextFactoryInterface *>((object ? const_cast<QObject *>(object)->qt_metacast("com.trolltech.Qt.QInputContextFactoryInterface") : 0)); }

class  QInputContextPlugin : public QObject, public QInputContextFactoryInterface
{
Q_OBJECT

public:
explicit QInputContextPlugin(QObject *parent = 0);
~QInputContextPlugin();

virtual QStringList keys() const = 0;
virtual QInputContext *create( const QString &key ) = 0;
virtual QStringList languages( const QString &key ) = 0;
virtual QString displayName( const QString &key ) = 0;
virtual QString description( const QString &key ) = 0;
};



# 104 "/home/eagle/qt-copy/include/QtGui/qinputcontextplugin.h"





# 49 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qabstractitemdelegate.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qabstractitemdelegate.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qstyleoption.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qvariant.h"






















































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qstyleoption.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qabstractspinbox.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qwidget.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qabstractspinbox.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qvalidator.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qvalidator.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qvalidator.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qregexp.h"

























































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qvalidator.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qlocale.h"






















































































































































































































































































































































































































































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtGui/qvalidator.h"


# 52 "/home/eagle/qt-copy/include/QtGui/qvalidator.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 60 "/home/eagle/qt-copy/include/QtGui/qvalidator.h"
class QValidatorPrivate;

class  QValidator : public QObject
{
Q_OBJECT
public:
explicit QValidator(QObject * parent);
~QValidator();

enum State {
Invalid,
Intermediate,
Acceptable




# 77 "/home/eagle/qt-copy/include/QtGui/qvalidator.h"
};

void setLocale(const QLocale &locale);
QLocale locale() const;

virtual State validate(QString &, int &) const = 0;
virtual void fixup(QString &) const;





# 89 "/home/eagle/qt-copy/include/QtGui/qvalidator.h"
protected:
QValidator(QObjectPrivate &d, QObject *parent);
QValidator(QValidatorPrivate &d, QObject *parent);

private:
QValidator(const QValidator &); QValidator &operator=(const QValidator &);
inline QValidatorPrivate* d_func() { return reinterpret_cast<QValidatorPrivate *>(d_ptr); } inline const QValidatorPrivate* d_func() const { return reinterpret_cast<const QValidatorPrivate *>(d_ptr); } friend class QValidatorPrivate;
};

class  QIntValidator : public QValidator
{
Q_OBJECT
Q_PROPERTY(int bottom READ bottom WRITE setBottom)
Q_PROPERTY(int top READ top WRITE setTop)

public:
explicit QIntValidator(QObject * parent);
QIntValidator(int bottom, int top, QObject * parent);
~QIntValidator();

QValidator::State validate(QString &, int &) const;

void setBottom(int);
void setTop(int);
virtual void setRange(int bottom, int top);

int bottom() const { return b; }
int top() const { return t; }







# 124 "/home/eagle/qt-copy/include/QtGui/qvalidator.h"
private:
QIntValidator(const QIntValidator &); QIntValidator &operator=(const QIntValidator &);

int b;
int t;
};



# 133 "/home/eagle/qt-copy/include/QtGui/qvalidator.h"
class QDoubleValidatorPrivate;

class  QDoubleValidator : public QValidator
{
Q_OBJECT
Q_PROPERTY(double bottom READ bottom WRITE setBottom)
Q_PROPERTY(double top READ top WRITE setTop)
Q_PROPERTY(int decimals READ decimals WRITE setDecimals)
Q_PROPERTY(Notation notation READ notation WRITE setNotation)

public:
explicit QDoubleValidator(QObject * parent);
QDoubleValidator(double bottom, double top, int decimals, QObject * parent);
~QDoubleValidator();

enum Notation {
StandardNotation,
ScientificNotation
};

QValidator::State validate(QString &, int &) const;

virtual void setRange(double bottom, double top, int decimals = 0);
void setBottom(double);
void setTop(double);
void setDecimals(int);
void setNotation(Notation);

double bottom() const { return b; }
double top() const { return t; }
int decimals() const { return dec; }
Notation notation() const;







# 172 "/home/eagle/qt-copy/include/QtGui/qvalidator.h"
private:
inline QDoubleValidatorPrivate* d_func() { return reinterpret_cast<QDoubleValidatorPrivate *>(d_ptr); } inline const QDoubleValidatorPrivate* d_func() const { return reinterpret_cast<const QDoubleValidatorPrivate *>(d_ptr); } friend class QDoubleValidatorPrivate;
QDoubleValidator(const QDoubleValidator &); QDoubleValidator &operator=(const QDoubleValidator &);

double b;
double t;
int dec;
};


class  QRegExpValidator : public QValidator
{
Q_OBJECT
Q_PROPERTY(QRegExp regExp READ regExp WRITE setRegExp)

public:
explicit QRegExpValidator(QObject *parent);
QRegExpValidator(const QRegExp& rx, QObject *parent);
~QRegExpValidator();

virtual QValidator::State validate(QString& input, int& pos) const;

void setRegExp(const QRegExp& rx);
const QRegExp& regExp() const { return r; } 







# 203 "/home/eagle/qt-copy/include/QtGui/qvalidator.h"
private:
QRegExpValidator(const QRegExpValidator &); QRegExpValidator &operator=(const QRegExpValidator &);

QRegExp r;
};





# 213 "/home/eagle/qt-copy/include/QtGui/qvalidator.h"





# 48 "/home/eagle/qt-copy/include/QtGui/qabstractspinbox.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qabstractspinbox.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 58 "/home/eagle/qt-copy/include/QtGui/qabstractspinbox.h"
class QLineEdit;

class QAbstractSpinBoxPrivate;
class QStyleOptionSpinBox;

class  QAbstractSpinBox : public QWidget
{
Q_OBJECT

Q_ENUMS(ButtonSymbols)
Q_ENUMS(CorrectionMode)
Q_PROPERTY(bool wrapping READ wrapping WRITE setWrapping)
Q_PROPERTY(bool frame READ hasFrame WRITE setFrame)
Q_PROPERTY(Qt::Alignment alignment READ alignment WRITE setAlignment)
Q_PROPERTY(bool readOnly READ isReadOnly WRITE setReadOnly)
Q_PROPERTY(ButtonSymbols buttonSymbols READ buttonSymbols WRITE setButtonSymbols)
Q_PROPERTY(QString specialValueText READ specialValueText WRITE setSpecialValueText)
Q_PROPERTY(QString text READ text)
Q_PROPERTY(bool accelerated READ isAccelerated WRITE setAccelerated)
Q_PROPERTY(CorrectionMode correctionMode READ correctionMode WRITE setCorrectionMode)
Q_PROPERTY(bool acceptableInput READ hasAcceptableInput)
Q_PROPERTY(bool keyboardTracking READ keyboardTracking WRITE setKeyboardTracking)
public:
explicit QAbstractSpinBox(QWidget *parent = 0);
~QAbstractSpinBox();

enum StepEnabledFlag { StepNone = 0x00, StepUpEnabled = 0x01,
StepDownEnabled = 0x02 };
typedef QFlags<StepEnabledFlag> StepEnabled;

enum ButtonSymbols { UpDownArrows, PlusMinus, NoButtons };

ButtonSymbols buttonSymbols() const;
void setButtonSymbols(ButtonSymbols bs);

enum CorrectionMode { CorrectToPreviousValue, CorrectToNearestValue };

void setCorrectionMode(CorrectionMode cm);
CorrectionMode correctionMode() const;

bool hasAcceptableInput() const;
QString text() const;

QString specialValueText() const;
void setSpecialValueText(const QString &txt);

bool wrapping() const;
void setWrapping(bool w);

void setReadOnly(bool r);
bool isReadOnly() const;

void setKeyboardTracking(bool kt);
bool keyboardTracking() const;

void setAlignment(Qt::Alignment flag);
Qt::Alignment alignment() const;

void setFrame(bool);
bool hasFrame() const;

void setAccelerated(bool on);
bool isAccelerated() const;

QSize sizeHint() const;
QSize minimumSizeHint() const;
void interpretText();
bool event(QEvent *event);

virtual QValidator::State validate(QString &input, int &pos) const;
virtual void fixup(QString &input) const;

virtual void stepBy(int steps);
public slots:
void stepUp();
void stepDown();
void selectAll();
virtual void clear();
protected:
void resizeEvent(QResizeEvent *event);
void keyPressEvent(QKeyEvent *event);
void keyReleaseEvent(QKeyEvent *event);
void wheelEvent(QWheelEvent *event);
void focusInEvent(QFocusEvent *event);
void focusOutEvent(QFocusEvent *event);
void contextMenuEvent(QContextMenuEvent *event);
void changeEvent(QEvent *event);
void closeEvent(QCloseEvent *event);
void hideEvent(QHideEvent *event);
void mousePressEvent(QMouseEvent *event);
void mouseReleaseEvent(QMouseEvent *event);
void mouseMoveEvent(QMouseEvent *event);
void timerEvent(QTimerEvent *event);
void paintEvent(QPaintEvent *event);
void showEvent(QShowEvent *event);
void initStyleOption(QStyleOptionSpinBox *option) const;

QLineEdit *lineEdit() const;
void setLineEdit(QLineEdit *edit);

virtual StepEnabled stepEnabled() const;
signals:
void editingFinished();
protected:
QAbstractSpinBox(QAbstractSpinBoxPrivate &dd, QWidget *parent = 0);

private:



inline QAbstractSpinBoxPrivate* d_func() { return reinterpret_cast<QAbstractSpinBoxPrivate *>(d_ptr); } inline const QAbstractSpinBoxPrivate* d_func() const { return reinterpret_cast<const QAbstractSpinBoxPrivate *>(d_ptr); } friend class QAbstractSpinBoxPrivate;
QAbstractSpinBox(const QAbstractSpinBox &); QAbstractSpinBox &operator=(const QAbstractSpinBox &);
};
inline QFlags<QAbstractSpinBox::StepEnabled::enum_type> operator|(QAbstractSpinBox::StepEnabled::enum_type f1, QAbstractSpinBox::StepEnabled::enum_type f2) { return QFlags<QAbstractSpinBox::StepEnabled::enum_type>(f1) | f2; } inline QFlags<QAbstractSpinBox::StepEnabled::enum_type> operator|(QAbstractSpinBox::StepEnabled::enum_type f1, QFlags<QAbstractSpinBox::StepEnabled::enum_type> f2) { return f2 | f1; }



# 175 "/home/eagle/qt-copy/include/QtGui/qabstractspinbox.h"





# 48 "/home/eagle/qt-copy/include/QtGui/qstyleoption.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qicon.h"















































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qstyleoption.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qmatrix.h"















































































































































































# 50 "/home/eagle/qt-copy/include/QtGui/qstyleoption.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qslider.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qabstractslider.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qwidget.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qabstractslider.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qabstractslider.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QAbstractSliderPrivate;

class  QAbstractSlider : public QWidget
{
Q_OBJECT

Q_PROPERTY(int minimum READ minimum WRITE setMinimum)
Q_PROPERTY(int maximum READ maximum WRITE setMaximum)
Q_PROPERTY(int singleStep READ singleStep WRITE setSingleStep)
Q_PROPERTY(int pageStep READ pageStep WRITE setPageStep)
Q_PROPERTY(int value READ value WRITE setValue NOTIFY valueChanged USER true)
Q_PROPERTY(int sliderPosition READ sliderPosition WRITE setSliderPosition NOTIFY sliderMoved)
Q_PROPERTY(bool tracking READ hasTracking WRITE setTracking)
Q_PROPERTY(Qt::Orientation orientation READ orientation WRITE setOrientation)
Q_PROPERTY(bool invertedAppearance READ invertedAppearance WRITE setInvertedAppearance)
Q_PROPERTY(bool invertedControls READ invertedControls WRITE setInvertedControls)
Q_PROPERTY(bool sliderDown READ isSliderDown WRITE setSliderDown DESIGNABLE false)

public:
explicit QAbstractSlider(QWidget *parent=0);
~QAbstractSlider();

Qt::Orientation orientation() const;

void setMinimum(int);
int minimum() const;

void setMaximum(int);
int maximum() const;

void setRange(int min, int max);

void setSingleStep(int);
int singleStep() const;

void setPageStep(int);
int pageStep() const;

void setTracking(bool enable);
bool hasTracking() const;

void setSliderDown(bool);
bool isSliderDown() const;

void setSliderPosition(int);
int sliderPosition() const;

void setInvertedAppearance(bool);
bool invertedAppearance() const;

void setInvertedControls(bool);
bool invertedControls() const;

enum SliderAction {
SliderNoAction,
SliderSingleStepAdd,
SliderSingleStepSub,
SliderPageStepAdd,
SliderPageStepSub,
SliderToMinimum,
SliderToMaximum,
SliderMove
};

int value() const;

void triggerAction(SliderAction action);

public slots:
void setValue(int);
void setOrientation(Qt::Orientation);

signals:
void valueChanged(int value);

void sliderPressed();
void sliderMoved(int position);
void sliderReleased();

void rangeChanged(int min, int max);

void actionTriggered(int action);

protected:
bool event(QEvent *e);

void setRepeatAction(SliderAction action, int thresholdTime = 500, int repeatTime = 50);
SliderAction repeatAction() const;

enum SliderChange {
SliderRangeChange,
SliderOrientationChange,
SliderStepsChange,
SliderValueChange
};
virtual void sliderChange(SliderChange change);

void keyPressEvent(QKeyEvent *ev);
void timerEvent(QTimerEvent *);

# 155 "/home/eagle/qt-copy/include/QtGui/qabstractslider.h"
void wheelEvent(QWheelEvent *e);

# 157 "/home/eagle/qt-copy/include/QtGui/qabstractslider.h"
void changeEvent(QEvent *e);
















# 174 "/home/eagle/qt-copy/include/QtGui/qabstractslider.h"
protected:
QAbstractSlider(QAbstractSliderPrivate &dd, QWidget *parent=0);

private:
QAbstractSlider(const QAbstractSlider &); QAbstractSlider &operator=(const QAbstractSlider &);
inline QAbstractSliderPrivate* d_func() { return reinterpret_cast<QAbstractSliderPrivate *>(d_ptr); } inline const QAbstractSliderPrivate* d_func() const { return reinterpret_cast<const QAbstractSliderPrivate *>(d_ptr); } friend class QAbstractSliderPrivate;
};






# 47 "/home/eagle/qt-copy/include/QtGui/qslider.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qslider.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qslider.h"
class QSliderPrivate;
class QStyleOptionSlider;
class  QSlider : public QAbstractSlider
{
Q_OBJECT

Q_ENUMS(TickPosition)
Q_PROPERTY(TickPosition tickPosition READ tickPosition WRITE setTickPosition)
Q_PROPERTY(int tickInterval READ tickInterval WRITE setTickInterval)

public:
enum TickPosition {
NoTicks = 0,
TicksAbove = 1,
TicksLeft = TicksAbove,
TicksBelow = 2,
TicksRight = TicksBelow,
TicksBothSides = 3









# 84 "/home/eagle/qt-copy/include/QtGui/qslider.h"
};

explicit QSlider(QWidget *parent = 0);
explicit QSlider(Qt::Orientation orientation, QWidget *parent = 0);

~QSlider();

QSize sizeHint() const;
QSize minimumSizeHint() const;

void setTickPosition(TickPosition position);
TickPosition tickPosition() const;

void setTickInterval(int ti);
int tickInterval() const;

bool event(QEvent *event);

protected:
void paintEvent(QPaintEvent *ev);
void mousePressEvent(QMouseEvent *ev);
void mouseReleaseEvent(QMouseEvent *ev);
void mouseMoveEvent(QMouseEvent *ev);
void initStyleOption(QStyleOptionSlider *option) const;















# 123 "/home/eagle/qt-copy/include/QtGui/qslider.h"
private:
friend  QStyleOptionSlider qt_qsliderStyleOption(QSlider *slider);

QSlider(const QSlider &); QSlider &operator=(const QSlider &);
inline QSliderPrivate* d_func() { return reinterpret_cast<QSliderPrivate *>(d_ptr); } inline const QSliderPrivate* d_func() const { return reinterpret_cast<const QSliderPrivate *>(d_ptr); } friend class QSliderPrivate;
};



# 132 "/home/eagle/qt-copy/include/QtGui/qslider.h"





# 51 "/home/eagle/qt-copy/include/QtGui/qstyleoption.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qstyle.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qstyle.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qrect.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qstyle.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qsize.h"






































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qstyle.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qicon.h"















































































































































# 50 "/home/eagle/qt-copy/include/QtGui/qstyle.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qpixmap.h"











































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtGui/qstyle.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qpalette.h"






































































































































































































































































# 52 "/home/eagle/qt-copy/include/QtGui/qstyle.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qsizepolicy.h"



































































































































































































































# 53 "/home/eagle/qt-copy/include/QtGui/qstyle.h"


# 55 "/home/eagle/qt-copy/include/QtGui/qstyle.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QAction;
class QDebug;
class QTab;
class QFontMetrics;
class QStyleHintReturn;
class QStyleOption;
class QStyleOptionComplex;
class QStylePrivate;

class  QStyle : public QObject
{
Q_OBJECT
inline QStylePrivate* d_func() { return reinterpret_cast<QStylePrivate *>(d_ptr); } inline const QStylePrivate* d_func() const { return reinterpret_cast<const QStylePrivate *>(d_ptr); } friend class QStylePrivate;

protected:
QStyle(QStylePrivate &dd);

public:
QStyle();
virtual ~QStyle();

virtual void polish(QWidget *);
virtual void unpolish(QWidget *);

virtual void polish(QApplication *);
virtual void unpolish(QApplication *);

virtual void polish(QPalette &);

virtual QRect itemTextRect(const QFontMetrics &fm, const QRect &r,
int flags, bool enabled,
const QString &text) const;

virtual QRect itemPixmapRect(const QRect &r, int flags, const QPixmap &pixmap) const;

virtual void drawItemText(QPainter *painter, const QRect &rect,
int flags, const QPalette &pal, bool enabled,
const QString &text, QPalette::ColorRole textRole = QPalette::NoRole) const;

virtual void drawItemPixmap(QPainter *painter, const QRect &rect,
int alignment, const QPixmap &pixmap) const;

virtual QPalette standardPalette() const;

enum StateFlag {
State_None = 0x00000000,



# 110 "/home/eagle/qt-copy/include/QtGui/qstyle.h"
State_Enabled = 0x00000001,
State_Raised = 0x00000002,
State_Sunken = 0x00000004,
State_Off = 0x00000008,
State_NoChange = 0x00000010,
State_On = 0x00000020,
State_DownArrow = 0x00000040,
State_Horizontal = 0x00000080,
State_HasFocus = 0x00000100,
State_Top = 0x00000200,
State_Bottom = 0x00000400,
State_FocusAtBorder = 0x00000800,
State_AutoRaise = 0x00001000,
State_MouseOver = 0x00002000,
State_UpArrow = 0x00004000,
State_Selected = 0x00008000,
State_Active = 0x00010000,
State_Window = 0x00020000,
State_Open = 0x00040000,
State_Children = 0x00080000,
State_Item = 0x00100000,
State_Sibling = 0x00200000,
State_Editing = 0x00400000,
State_KeyboardFocusChange = 0x00800000,



# 137 "/home/eagle/qt-copy/include/QtGui/qstyle.h"
State_ReadOnly = 0x02000000,
State_Small = 0x04000000,
State_Mini = 0x08000000
};
typedef QFlags<StateFlag> State;





# 147 "/home/eagle/qt-copy/include/QtGui/qstyle.h"
enum PrimitiveElement {
PE_Q3CheckListController,
PE_Q3CheckListExclusiveIndicator,
PE_Q3CheckListIndicator,
PE_Q3DockWindowSeparator,
PE_Q3Separator,

PE_Frame,
PE_FrameDefaultButton,
PE_FrameDockWidget,
PE_FrameFocusRect,
PE_FrameGroupBox,
PE_FrameLineEdit,
PE_FrameMenu,
PE_FrameStatusBar, 
PE_FrameStatusBarItem = PE_FrameStatusBar,
PE_FrameTabWidget,
PE_FrameWindow,
PE_FrameButtonBevel,
PE_FrameButtonTool,
PE_FrameTabBarBase,

PE_PanelButtonCommand,
PE_PanelButtonBevel,
PE_PanelButtonTool,
PE_PanelMenuBar,
PE_PanelToolBar,
PE_PanelLineEdit,

PE_IndicatorArrowDown,
PE_IndicatorArrowLeft,
PE_IndicatorArrowRight,
PE_IndicatorArrowUp,
PE_IndicatorBranch,
PE_IndicatorButtonDropDown,
PE_IndicatorViewItemCheck,
PE_IndicatorItemViewItemCheck = PE_IndicatorViewItemCheck,
PE_IndicatorCheckBox,
PE_IndicatorDockWidgetResizeHandle,
PE_IndicatorHeaderArrow,
PE_IndicatorMenuCheckMark,
PE_IndicatorProgressChunk,
PE_IndicatorRadioButton,
PE_IndicatorSpinDown,
PE_IndicatorSpinMinus,
PE_IndicatorSpinPlus,
PE_IndicatorSpinUp,
PE_IndicatorToolBarHandle,
PE_IndicatorToolBarSeparator,
PE_PanelTipLabel,
PE_IndicatorTabTear,
PE_PanelScrollAreaCorner,

PE_Widget,

PE_IndicatorColumnViewArrow,
PE_IndicatorItemViewItemDrop,

PE_PanelItemViewItem,
PE_PanelItemViewRow, 

PE_PanelStatusBar,


PE_CustomBase = 0xf000000
};

virtual void drawPrimitive(PrimitiveElement pe, const QStyleOption *opt, QPainter *p,
const QWidget *w = 0) const = 0;
enum ControlElement {
CE_PushButton,
CE_PushButtonBevel,
CE_PushButtonLabel,

CE_CheckBox,
CE_CheckBoxLabel,

CE_RadioButton,
CE_RadioButtonLabel,

CE_TabBarTab,
CE_TabBarTabShape,
CE_TabBarTabLabel,

CE_ProgressBar,
CE_ProgressBarGroove,
CE_ProgressBarContents,
CE_ProgressBarLabel,

CE_MenuItem,
CE_MenuScroller,
CE_MenuVMargin,
CE_MenuHMargin,
CE_MenuTearoff,
CE_MenuEmptyArea,

CE_MenuBarItem,
CE_MenuBarEmptyArea,

CE_ToolButtonLabel,

CE_Header,
CE_HeaderSection,
CE_HeaderLabel,

CE_Q3DockWindowEmptyArea,
CE_ToolBoxTab,
CE_SizeGrip,
CE_Splitter,
CE_RubberBand,
CE_DockWidgetTitle,

CE_ScrollBarAddLine,
CE_ScrollBarSubLine,
CE_ScrollBarAddPage,
CE_ScrollBarSubPage,
CE_ScrollBarSlider,
CE_ScrollBarFirst,
CE_ScrollBarLast,

CE_FocusFrame,
CE_ComboBoxLabel,

CE_ToolBar,
CE_ToolBoxTabShape,
CE_ToolBoxTabLabel,
CE_HeaderEmptyArea,

CE_ColumnViewGrip,

CE_ItemViewItem,


CE_CustomBase = 0xf0000000
};

virtual void drawControl(ControlElement element, const QStyleOption *opt, QPainter *p,
const QWidget *w = 0) const = 0;

enum SubElement {
SE_PushButtonContents,
SE_PushButtonFocusRect,

SE_CheckBoxIndicator,
SE_CheckBoxContents,
SE_CheckBoxFocusRect,
SE_CheckBoxClickRect,

SE_RadioButtonIndicator,
SE_RadioButtonContents,
SE_RadioButtonFocusRect,
SE_RadioButtonClickRect,

SE_ComboBoxFocusRect,

SE_SliderFocusRect,

SE_Q3DockWindowHandleRect,

SE_ProgressBarGroove,
SE_ProgressBarContents,
SE_ProgressBarLabel,


SE_DialogButtonAccept,
SE_DialogButtonReject,
SE_DialogButtonApply,
SE_DialogButtonHelp,
SE_DialogButtonAll,
SE_DialogButtonAbort,
SE_DialogButtonIgnore,
SE_DialogButtonRetry,
SE_DialogButtonCustom,

SE_ToolBoxTabContents,

SE_HeaderLabel,
SE_HeaderArrow,

SE_TabWidgetTabBar,
SE_TabWidgetTabPane,
SE_TabWidgetTabContents,
SE_TabWidgetLeftCorner,
SE_TabWidgetRightCorner,

SE_ViewItemCheckIndicator,
SE_ItemViewItemCheckIndicator = SE_ViewItemCheckIndicator,

SE_TabBarTearIndicator,

SE_TreeViewDisclosureItem,

SE_LineEditContents,
SE_FrameContents,

SE_DockWidgetCloseButton,
SE_DockWidgetFloatButton,
SE_DockWidgetTitleBarText,
SE_DockWidgetIcon,

SE_CheckBoxLayoutItem,
SE_ComboBoxLayoutItem,
SE_DateTimeEditLayoutItem,
SE_DialogButtonBoxLayoutItem, 
SE_LabelLayoutItem,
SE_ProgressBarLayoutItem,
SE_PushButtonLayoutItem,
SE_RadioButtonLayoutItem,
SE_SliderLayoutItem,
SE_SpinBoxLayoutItem,
SE_ToolButtonLayoutItem,

SE_FrameLayoutItem,
SE_GroupBoxLayoutItem,
SE_TabWidgetLayoutItem,

SE_ItemViewItemDecoration,
SE_ItemViewItemText,
SE_ItemViewItemFocusRect,


SE_CustomBase = 0xf0000000
};

virtual QRect subElementRect(SubElement subElement, const QStyleOption *option,
const QWidget *widget = 0) const = 0;


enum ComplexControl {
CC_SpinBox,
CC_ComboBox,
CC_ScrollBar,
CC_Slider,
CC_ToolButton,
CC_TitleBar,
CC_Q3ListView,
CC_Dial,
CC_GroupBox,
CC_MdiControls,


CC_CustomBase = 0xf0000000
};

enum SubControl {
SC_None = 0x00000000,

SC_ScrollBarAddLine = 0x00000001,
SC_ScrollBarSubLine = 0x00000002,
SC_ScrollBarAddPage = 0x00000004,
SC_ScrollBarSubPage = 0x00000008,
SC_ScrollBarFirst = 0x00000010,
SC_ScrollBarLast = 0x00000020,
SC_ScrollBarSlider = 0x00000040,
SC_ScrollBarGroove = 0x00000080,

SC_SpinBoxUp = 0x00000001,
SC_SpinBoxDown = 0x00000002,
SC_SpinBoxFrame = 0x00000004,
SC_SpinBoxEditField = 0x00000008,

SC_ComboBoxFrame = 0x00000001,
SC_ComboBoxEditField = 0x00000002,
SC_ComboBoxArrow = 0x00000004,
SC_ComboBoxListBoxPopup = 0x00000008,

SC_SliderGroove = 0x00000001,
SC_SliderHandle = 0x00000002,
SC_SliderTickmarks = 0x00000004,

SC_ToolButton = 0x00000001,
SC_ToolButtonMenu = 0x00000002,

SC_TitleBarSysMenu = 0x00000001,
SC_TitleBarMinButton = 0x00000002,
SC_TitleBarMaxButton = 0x00000004,
SC_TitleBarCloseButton = 0x00000008,
SC_TitleBarNormalButton = 0x00000010,
SC_TitleBarShadeButton = 0x00000020,
SC_TitleBarUnshadeButton = 0x00000040,
SC_TitleBarContextHelpButton = 0x00000080,
SC_TitleBarLabel = 0x00000100,

SC_Q3ListView = 0x00000001,
SC_Q3ListViewBranch = 0x00000002,
SC_Q3ListViewExpand = 0x00000004,

SC_DialGroove = 0x00000001,
SC_DialHandle = 0x00000002,
SC_DialTickmarks = 0x00000004,

SC_GroupBoxCheckBox = 0x00000001,
SC_GroupBoxLabel = 0x00000002,
SC_GroupBoxContents = 0x00000004,
SC_GroupBoxFrame = 0x00000008,

SC_MdiMinButton = 0x00000001,
SC_MdiNormalButton = 0x00000002,
SC_MdiCloseButton = 0x00000004,

SC_All = 0xffffffff
};
typedef QFlags<SubControl> SubControls;





# 455 "/home/eagle/qt-copy/include/QtGui/qstyle.h"
virtual void drawComplexControl(ComplexControl cc, const QStyleOptionComplex *opt, QPainter *p,
const QWidget *widget = 0) const = 0;
virtual SubControl hitTestComplexControl(ComplexControl cc, const QStyleOptionComplex *opt,
const QPoint &pt, const QWidget *widget = 0) const = 0;
virtual QRect subControlRect(ComplexControl cc, const QStyleOptionComplex *opt,
SubControl sc, const QWidget *widget = 0) const = 0;

enum PixelMetric {
PM_ButtonMargin,
PM_ButtonDefaultIndicator,
PM_MenuButtonIndicator,
PM_ButtonShiftHorizontal,
PM_ButtonShiftVertical,

PM_DefaultFrameWidth,
PM_SpinBoxFrameWidth,
PM_ComboBoxFrameWidth,

PM_MaximumDragDistance,

PM_ScrollBarExtent,
PM_ScrollBarSliderMin,

PM_SliderThickness, 
PM_SliderControlThickness, 
PM_SliderLength, 
PM_SliderTickmarkOffset, 
PM_SliderSpaceAvailable, 

PM_DockWidgetSeparatorExtent,
PM_DockWidgetHandleExtent,
PM_DockWidgetFrameWidth,

PM_TabBarTabOverlap,
PM_TabBarTabHSpace,
PM_TabBarTabVSpace,
PM_TabBarBaseHeight,
PM_TabBarBaseOverlap,

PM_ProgressBarChunkWidth,

PM_SplitterWidth,
PM_TitleBarHeight,

PM_MenuScrollerHeight,
PM_MenuHMargin,
PM_MenuVMargin,
PM_MenuPanelWidth,
PM_MenuTearoffHeight,
PM_MenuDesktopFrameWidth,

PM_MenuBarPanelWidth,
PM_MenuBarItemSpacing,
PM_MenuBarVMargin,
PM_MenuBarHMargin,

PM_IndicatorWidth,
PM_IndicatorHeight,
PM_ExclusiveIndicatorWidth,
PM_ExclusiveIndicatorHeight,
PM_CheckListButtonSize,
PM_CheckListControllerSize,

PM_DialogButtonsSeparator,
PM_DialogButtonsButtonWidth,
PM_DialogButtonsButtonHeight,

PM_MdiSubWindowFrameWidth,
PM_MDIFrameWidth = PM_MdiSubWindowFrameWidth, 
PM_MdiSubWindowMinimizedWidth,
PM_MDIMinimizedWidth = PM_MdiSubWindowMinimizedWidth, 

PM_HeaderMargin,
PM_HeaderMarkSize,
PM_HeaderGripMargin,
PM_TabBarTabShiftHorizontal,
PM_TabBarTabShiftVertical,
PM_TabBarScrollButtonWidth,

PM_ToolBarFrameWidth,
PM_ToolBarHandleExtent,
PM_ToolBarItemSpacing,
PM_ToolBarItemMargin,
PM_ToolBarSeparatorExtent,
PM_ToolBarExtensionExtent,

PM_SpinBoxSliderHeight,

PM_DefaultTopLevelMargin,
PM_DefaultChildMargin,
PM_DefaultLayoutSpacing,

PM_ToolBarIconSize,
PM_ListViewIconSize,
PM_IconViewIconSize,
PM_SmallIconSize,
PM_LargeIconSize,

PM_FocusFrameVMargin,
PM_FocusFrameHMargin,

PM_ToolTipLabelFrameWidth,
PM_CheckBoxLabelSpacing,
PM_TabBarIconSize,
PM_SizeGripSize,
PM_DockWidgetTitleMargin,
PM_MessageBoxIconSize,
PM_ButtonIconSize,

PM_DockWidgetTitleBarButtonMargin,

PM_RadioButtonLabelSpacing,
PM_LayoutLeftMargin,
PM_LayoutTopMargin,
PM_LayoutRightMargin,
PM_LayoutBottomMargin,
PM_LayoutHorizontalSpacing,
PM_LayoutVerticalSpacing,
PM_TabBar_ScrollButtonOverlap,

PM_TextCursorWidth,


PM_CustomBase = 0xf0000000
};

virtual int pixelMetric(PixelMetric metric, const QStyleOption *option = 0,
const QWidget *widget = 0) const = 0;

enum ContentsType {
CT_PushButton,
CT_CheckBox,
CT_RadioButton,
CT_ToolButton,
CT_ComboBox,
CT_Splitter,
CT_Q3DockWindow,
CT_ProgressBar,
CT_MenuItem,
CT_MenuBarItem,
CT_MenuBar,
CT_Menu,
CT_TabBarTab,
CT_Slider,
CT_ScrollBar,
CT_Q3Header,
CT_LineEdit,
CT_SpinBox,
CT_SizeGrip,
CT_TabWidget,
CT_DialogButtons,
CT_HeaderSection,
CT_GroupBox,
CT_MdiControls,
CT_ItemViewItem,

CT_CustomBase = 0xf0000000
};

virtual QSize sizeFromContents(ContentsType ct, const QStyleOption *opt,
const QSize &contentsSize, const QWidget *w = 0) const = 0;

enum StyleHint {
SH_EtchDisabledText,
SH_DitherDisabledText,
SH_ScrollBar_MiddleClickAbsolutePosition,
SH_ScrollBar_ScrollWhenPointerLeavesControl,
SH_TabBar_SelectMouseType,
SH_TabBar_Alignment,
SH_Header_ArrowAlignment,
SH_Slider_SnapToValue,
SH_Slider_SloppyKeyEvents,
SH_ProgressDialog_CenterCancelButton,
SH_ProgressDialog_TextLabelAlignment,
SH_PrintDialog_RightAlignButtons,
SH_MainWindow_SpaceBelowMenuBar,
SH_FontDialog_SelectAssociatedText,
SH_Menu_AllowActiveAndDisabled,
SH_Menu_SpaceActivatesItem,
SH_Menu_SubMenuPopupDelay,
SH_ScrollView_FrameOnlyAroundContents,
SH_MenuBar_AltKeyNavigation,
SH_ComboBox_ListMouseTracking,
SH_Menu_MouseTracking,
SH_MenuBar_MouseTracking,
SH_ItemView_ChangeHighlightOnFocus,
SH_Widget_ShareActivation,
SH_Workspace_FillSpaceOnMaximize,
SH_ComboBox_Popup,
SH_TitleBar_NoBorder,
SH_Slider_StopMouseOverSlider,
SH_ScrollBar_StopMouseOverSlider = SH_Slider_StopMouseOverSlider, 
SH_BlinkCursorWhenTextSelected,
SH_RichText_FullWidthSelection,
SH_Menu_Scrollable,
SH_GroupBox_TextLabelVerticalAlignment,
SH_GroupBox_TextLabelColor,
SH_Menu_SloppySubMenus,
SH_Table_GridLineColor,
SH_LineEdit_PasswordCharacter,
SH_DialogButtons_DefaultButton,
SH_ToolBox_SelectedPageTitleBold,
SH_TabBar_PreferNoArrows,
SH_ScrollBar_LeftClickAbsolutePosition,
SH_Q3ListViewExpand_SelectMouseType,
SH_UnderlineShortcut,
SH_SpinBox_AnimateButton,
SH_SpinBox_KeyPressAutoRepeatRate,
SH_SpinBox_ClickAutoRepeatRate,
SH_Menu_FillScreenWithScroll,
SH_ToolTipLabel_Opacity,
SH_DrawMenuBarSeparator,
SH_TitleBar_ModifyNotification,
SH_Button_FocusPolicy,
SH_MenuBar_DismissOnSecondClick,
SH_MessageBox_UseBorderForButtonSpacing,
SH_TitleBar_AutoRaise,
SH_ToolButton_PopupDelay,
SH_FocusFrame_Mask,
SH_RubberBand_Mask,
SH_WindowFrame_Mask,
SH_SpinControls_DisableOnBounds,
SH_Dial_BackgroundRole,
SH_ComboBox_LayoutDirection,
SH_ItemView_EllipsisLocation,
SH_ItemView_ShowDecorationSelected,
SH_ItemView_ActivateItemOnSingleClick,
SH_ScrollBar_ContextMenu,
SH_ScrollBar_RollBetweenButtons,
SH_Slider_AbsoluteSetButtons,
SH_Slider_PageSetButtons,
SH_Menu_KeyboardSearch,
SH_TabBar_ElideMode,
SH_DialogButtonLayout,
SH_ComboBox_PopupFrameStyle,
SH_MessageBox_TextInteractionFlags,
SH_DialogButtonBox_ButtonsHaveIcons,
SH_SpellCheckUnderlineStyle,
SH_MessageBox_CenterButtons,
SH_Menu_SelectionWrap,
SH_ItemView_MovementWithoutUpdatingSelection,
SH_ToolTip_Mask,
SH_FocusFrame_AboveWidget,
SH_TextControl_FocusIndicatorTextCharFormat,
SH_WizardStyle,
SH_ItemView_ArrowKeysNavigateIntoChildren,
SH_Menu_Mask,
SH_Menu_FlashTriggeredItem,
SH_Menu_FadeOutOnHide,
SH_SpinBox_ClickAutoRepeatThreshold,
SH_ItemView_PaintAlternatingRowColorsForEmptyArea,
SH_FormLayoutWrapPolicy,
SH_TabWidget_DefaultTabPosition,
SH_ToolBar_Movable,
SH_FormLayoutFieldGrowthPolicy,
SH_FormLayoutFormAlignment,
SH_FormLayoutLabelAlignment,










# 722 "/home/eagle/qt-copy/include/QtGui/qstyle.h"
SH_CustomBase = 0xf0000000
};

virtual int styleHint(StyleHint stylehint, const QStyleOption *opt = 0,
const QWidget *widget = 0, QStyleHintReturn* returnData = 0) const = 0;

enum StandardPixmap {
SP_TitleBarMenuButton,
SP_TitleBarMinButton,
SP_TitleBarMaxButton,
SP_TitleBarCloseButton,
SP_TitleBarNormalButton,
SP_TitleBarShadeButton,
SP_TitleBarUnshadeButton,
SP_TitleBarContextHelpButton,
SP_DockWidgetCloseButton,
SP_MessageBoxInformation,
SP_MessageBoxWarning,
SP_MessageBoxCritical,
SP_MessageBoxQuestion,
SP_DesktopIcon,
SP_TrashIcon,
SP_ComputerIcon,
SP_DriveFDIcon,
SP_DriveHDIcon,
SP_DriveCDIcon,
SP_DriveDVDIcon,
SP_DriveNetIcon,
SP_DirOpenIcon,
SP_DirClosedIcon,
SP_DirLinkIcon,
SP_FileIcon,
SP_FileLinkIcon,
SP_ToolBarHorizontalExtensionButton,
SP_ToolBarVerticalExtensionButton,
SP_FileDialogStart,
SP_FileDialogEnd,
SP_FileDialogToParent,
SP_FileDialogNewFolder,
SP_FileDialogDetailedView,
SP_FileDialogInfoView,
SP_FileDialogContentsView,
SP_FileDialogListView,
SP_FileDialogBack,
SP_DirIcon,
SP_DialogOkButton,
SP_DialogCancelButton,
SP_DialogHelpButton,
SP_DialogOpenButton,
SP_DialogSaveButton,
SP_DialogCloseButton,
SP_DialogApplyButton,
SP_DialogResetButton,
SP_DialogDiscardButton,
SP_DialogYesButton,
SP_DialogNoButton,
SP_ArrowUp,
SP_ArrowDown,
SP_ArrowLeft,
SP_ArrowRight,
SP_ArrowBack,
SP_ArrowForward,
SP_DirHomeIcon,
SP_CommandLink,
SP_VistaShield,
SP_BrowserReload,
SP_BrowserStop,
SP_MediaPlay,
SP_MediaStop,
SP_MediaPause,
SP_MediaSkipForward,
SP_MediaSkipBackward,
SP_MediaSeekForward,
SP_MediaSeekBackward,
SP_MediaVolume,
SP_MediaVolumeMuted,

SP_CustomBase = 0xf0000000
};

virtual QPixmap standardPixmap(StandardPixmap standardPixmap, const QStyleOption *opt = 0,
const QWidget *widget = 0) const = 0;

QIcon standardIcon(StandardPixmap standardIcon, const QStyleOption *option = 0,
const QWidget *widget = 0) const;

virtual QPixmap generatedIconPixmap(QIcon::Mode iconMode, const QPixmap &pixmap,
const QStyleOption *opt) const = 0;

static QRect visualRect(Qt::LayoutDirection direction, const QRect &boundingRect,
const QRect &logicalRect);
static QPoint visualPos(Qt::LayoutDirection direction, const QRect &boundingRect,
const QPoint &logicalPos);
static int sliderPositionFromValue(int min, int max, int val, int space,
bool upsideDown = false);
static int sliderValueFromPosition(int min, int max, int pos, int space,
bool upsideDown = false);
static Qt::Alignment visualAlignment(Qt::LayoutDirection direction, Qt::Alignment alignment);
static QRect alignedRect(Qt::LayoutDirection direction, Qt::Alignment alignment,
const QSize &size, const QRect &rectangle);

int layoutSpacing(QSizePolicy::ControlType control1,
QSizePolicy::ControlType control2, Qt::Orientation orientation,
const QStyleOption *option = 0, const QWidget *widget = 0) const;
int combinedLayoutSpacing(QSizePolicy::ControlTypes controls1,
QSizePolicy::ControlTypes controls2, Qt::Orientation orientation,
QStyleOption *option = 0, QWidget *widget = 0) const;

protected slots:
QIcon standardIconImplementation(StandardPixmap standardIcon, const QStyleOption *opt = 0,
const QWidget *widget = 0) const;
int layoutSpacingImplementation(QSizePolicy::ControlType control1,
QSizePolicy::ControlType control2,
Qt::Orientation orientation,
const QStyleOption *option = 0,
const QWidget *widget = 0) const;

private:
QStyle(const QStyle &); QStyle &operator=(const QStyle &);
friend class QWidget;
friend class QWidgetPrivate;
friend class QApplication;
};

inline QFlags<QStyle::State::enum_type> operator|(QStyle::State::enum_type f1, QStyle::State::enum_type f2) { return QFlags<QStyle::State::enum_type>(f1) | f2; } inline QFlags<QStyle::State::enum_type> operator|(QStyle::State::enum_type f1, QFlags<QStyle::State::enum_type> f2) { return f2 | f1; }
inline QFlags<QStyle::SubControls::enum_type> operator|(QStyle::SubControls::enum_type f1, QStyle::SubControls::enum_type f2) { return QFlags<QStyle::SubControls::enum_type>(f1) | f2; } inline QFlags<QStyle::SubControls::enum_type> operator|(QStyle::SubControls::enum_type f1, QFlags<QStyle::SubControls::enum_type> f2) { return f2 | f1; }





# 853 "/home/eagle/qt-copy/include/QtGui/qstyle.h"





# 52 "/home/eagle/qt-copy/include/QtGui/qstyleoption.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qtabbar.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qwidget.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qtabbar.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qtabbar.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qtabbar.h"
class QIcon;
class QTabBarPrivate;
class QStyleOptionTab;

class  QTabBar: public QWidget
{
Q_OBJECT

Q_ENUMS(Shape)
Q_PROPERTY(Shape shape READ shape WRITE setShape)
Q_PROPERTY(int currentIndex READ currentIndex WRITE setCurrentIndex NOTIFY currentChanged)
Q_PROPERTY(int count READ count)
Q_PROPERTY(bool drawBase READ drawBase WRITE setDrawBase)
Q_PROPERTY(QSize iconSize READ iconSize WRITE setIconSize)
Q_PROPERTY(Qt::TextElideMode elideMode READ elideMode WRITE setElideMode)
Q_PROPERTY(bool usesScrollButtons READ usesScrollButtons WRITE setUsesScrollButtons)

public:
explicit QTabBar(QWidget* parent=0);
~QTabBar();

enum Shape { RoundedNorth, RoundedSouth, RoundedWest, RoundedEast,
TriangularNorth, TriangularSouth, TriangularWest, TriangularEast




# 84 "/home/eagle/qt-copy/include/QtGui/qtabbar.h"
};

Shape shape() const;
void setShape(Shape shape);

int addTab(const QString &text);
int addTab(const QIcon &icon, const QString &text);

int insertTab(int index, const QString &text);
int insertTab(int index, const QIcon&icon, const QString &text);

void removeTab(int index);

bool isTabEnabled(int index) const;
void setTabEnabled(int index, bool);

QString tabText(int index) const;
void setTabText(int index, const QString &text);

QColor tabTextColor(int index) const;
void setTabTextColor(int index, const QColor &color);

QIcon tabIcon(int index) const;
void setTabIcon(int index, const QIcon &icon);

Qt::TextElideMode elideMode() const;
void setElideMode(Qt::TextElideMode);


# 113 "/home/eagle/qt-copy/include/QtGui/qtabbar.h"
void setTabToolTip(int index, const QString &tip);
QString tabToolTip(int index) const;



# 118 "/home/eagle/qt-copy/include/QtGui/qtabbar.h"
void setTabWhatsThis(int index, const QString &text);
QString tabWhatsThis(int index) const;


# 122 "/home/eagle/qt-copy/include/QtGui/qtabbar.h"
void setTabData(int index, const QVariant &data);
QVariant tabData(int index) const;

QRect tabRect(int index) const;
int tabAt(const QPoint &pos) const;


int currentIndex() const;
int count() const;

QSize sizeHint() const;
QSize minimumSizeHint() const;

void setDrawBase(bool drawTheBase);
bool drawBase() const;

QSize iconSize() const;
void setIconSize(const QSize &size);

bool usesScrollButtons() const;
void setUsesScrollButtons(bool useButtons);

public slots:
void setCurrentIndex(int index);

signals:
void currentChanged(int index);

protected:
virtual QSize tabSizeHint(int index) const;
virtual void tabInserted(int index);
virtual void tabRemoved(int index);
virtual void tabLayoutChange();

bool event(QEvent *);
void resizeEvent(QResizeEvent *);
void showEvent(QShowEvent *);
void paintEvent(QPaintEvent *);
void mousePressEvent (QMouseEvent *);
void mouseMoveEvent (QMouseEvent *);
void mouseReleaseEvent (QMouseEvent *);
void keyPressEvent(QKeyEvent *);
void changeEvent(QEvent *);
void initStyleOption(QStyleOptionTab *option, int tabIndex) const;








# 174 "/home/eagle/qt-copy/include/QtGui/qtabbar.h"
friend class QAccessibleTabBar;
private:
QTabBar(const QTabBar &); QTabBar &operator=(const QTabBar &);
inline QTabBarPrivate* d_func() { return reinterpret_cast<QTabBarPrivate *>(d_ptr); } inline const QTabBarPrivate* d_func() const { return reinterpret_cast<const QTabBarPrivate *>(d_ptr); } friend class QTabBarPrivate;

};



# 183 "/home/eagle/qt-copy/include/QtGui/qtabbar.h"





# 53 "/home/eagle/qt-copy/include/QtGui/qstyleoption.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qtabwidget.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qwidget.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qtabwidget.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qicon.h"















































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qtabwidget.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qtabwidget.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 58 "/home/eagle/qt-copy/include/QtGui/qtabwidget.h"
class QTabBar;
class QTabWidgetPrivate;
class QStyleOptionTabWidgetFrame;

class  QTabWidget : public QWidget
{
Q_OBJECT
Q_ENUMS(TabPosition TabShape)
Q_PROPERTY(TabPosition tabPosition READ tabPosition WRITE setTabPosition)
Q_PROPERTY(TabShape tabShape READ tabShape WRITE setTabShape)
Q_PROPERTY(int currentIndex READ currentIndex WRITE setCurrentIndex NOTIFY currentChanged)
Q_PROPERTY(int count READ count)
Q_PROPERTY(QSize iconSize READ iconSize WRITE setIconSize)
Q_PROPERTY(Qt::TextElideMode elideMode READ elideMode WRITE setElideMode)
Q_PROPERTY(bool usesScrollButtons READ usesScrollButtons WRITE setUsesScrollButtons)

public:
explicit QTabWidget(QWidget *parent = 0);
~QTabWidget();

int addTab(QWidget *widget, const QString &);
int addTab(QWidget *widget, const QIcon& icon, const QString &label);

int insertTab(int index, QWidget *widget, const QString &);
int insertTab(int index, QWidget *widget, const QIcon& icon, const QString &label);

void removeTab(int index);

bool isTabEnabled(int index) const;
void setTabEnabled(int index, bool);

QString tabText(int index) const;
void setTabText(int index, const QString &);

QIcon tabIcon(int index) const;
void setTabIcon(int index, const QIcon & icon);


# 96 "/home/eagle/qt-copy/include/QtGui/qtabwidget.h"
void setTabToolTip(int index, const QString & tip);
QString tabToolTip(int index) const;



# 101 "/home/eagle/qt-copy/include/QtGui/qtabwidget.h"
void setTabWhatsThis(int index, const QString &text);
QString tabWhatsThis(int index) const;


# 105 "/home/eagle/qt-copy/include/QtGui/qtabwidget.h"
int currentIndex() const;
QWidget *currentWidget() const;
QWidget *widget(int index) const;
int indexOf(QWidget *widget) const;
int count() const;

enum TabPosition { North, South, West, East



# 115 "/home/eagle/qt-copy/include/QtGui/qtabwidget.h"
};
TabPosition tabPosition() const;
void setTabPosition(TabPosition);

enum TabShape { Rounded, Triangular };
TabShape tabShape() const;
void setTabShape(TabShape s);

QSize sizeHint() const;
QSize minimumSizeHint() const;

void setCornerWidget(QWidget * w, Qt::Corner corner = Qt::TopRightCorner);
QWidget * cornerWidget(Qt::Corner corner = Qt::TopRightCorner) const;

Qt::TextElideMode elideMode() const;
void setElideMode(Qt::TextElideMode);

QSize iconSize() const;
void setIconSize(const QSize &size);

bool usesScrollButtons() const;
void setUsesScrollButtons(bool useButtons);

void clear();

public slots:
void setCurrentIndex(int index);
void setCurrentWidget(QWidget *widget);

signals:
void currentChanged(int index);

protected:
virtual void tabInserted(int index);
virtual void tabRemoved(int index);

void showEvent(QShowEvent *);
void resizeEvent(QResizeEvent *);
void keyPressEvent(QKeyEvent *);
void paintEvent(QPaintEvent *);
void setTabBar(QTabBar *);
QTabBar* tabBar() const;
void changeEvent(QEvent *);
bool event(QEvent *);
void initStyleOption(QStyleOptionTabWidgetFrame *option) const;

































































# 225 "/home/eagle/qt-copy/include/QtGui/qtabwidget.h"
private:
inline QTabWidgetPrivate* d_func() { return reinterpret_cast<QTabWidgetPrivate *>(d_ptr); } inline const QTabWidgetPrivate* d_func() const { return reinterpret_cast<const QTabWidgetPrivate *>(d_ptr); } friend class QTabWidgetPrivate;
QTabWidget(const QTabWidget &); QTabWidget &operator=(const QTabWidget &);


void setUpLayout(bool = false);
friend class Q3TabDialog;
};



# 236 "/home/eagle/qt-copy/include/QtGui/qtabwidget.h"





# 54 "/home/eagle/qt-copy/include/QtGui/qstyleoption.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qrubberband.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qwidget.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qrubberband.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qrubberband.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qrubberband.h"
class QRubberBandPrivate;
class QStyleOptionRubberBand;

class  QRubberBand : public QWidget
{
Q_OBJECT

public:
enum Shape { Line, Rectangle };
explicit QRubberBand(Shape, QWidget * =0);
~QRubberBand();

Shape shape() const;

void setGeometry(const QRect &r);

inline void setGeometry(int x, int y, int w, int h);
inline void move(int x, int y);
inline void move(const QPoint &p)
{ move(p.x(), p.y()); }
inline void resize(int w, int h)
{ setGeometry(geometry().x(), geometry().y(), w, h); }
inline void resize(const QSize &s)
{ resize(s.width(), s.height()); }

protected:
bool event(QEvent *e);
void paintEvent(QPaintEvent *);
void changeEvent(QEvent *);
void showEvent(QShowEvent *);
void resizeEvent(QResizeEvent *);
void moveEvent(QMoveEvent *);
void initStyleOption(QStyleOptionRubberBand *option) const;

private:
inline QRubberBandPrivate* d_func() { return reinterpret_cast<QRubberBandPrivate *>(d_ptr); } inline const QRubberBandPrivate* d_func() const { return reinterpret_cast<const QRubberBandPrivate *>(d_ptr); } friend class QRubberBandPrivate;
};

inline void QRubberBand::setGeometry(int ax, int ay, int aw, int ah)
{ setGeometry(QRect(ax, ay, aw, ah)); }
inline void QRubberBand::move(int ax, int ay)
{ setGeometry(ax, ay, width(), height()); }



# 102 "/home/eagle/qt-copy/include/QtGui/qrubberband.h"





# 55 "/home/eagle/qt-copy/include/QtGui/qstyleoption.h"


# 1 "/home/eagle/qt-copy/include/QtCore/qabstractitemmodel.h"

































































































































































































































































































































































































# 57 "/home/eagle/qt-copy/include/QtGui/qstyleoption.h"



# 60 "/home/eagle/qt-copy/include/QtGui/qstyleoption.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QDebug;

class  QStyleOption
{
public:
enum OptionType {
SO_Default, SO_FocusRect, SO_Button, SO_Tab, SO_MenuItem,
SO_Frame, SO_ProgressBar, SO_ToolBox, SO_Header, SO_Q3DockWindow,
SO_DockWidget, SO_Q3ListViewItem, SO_ViewItem, SO_TabWidgetFrame,
SO_TabBarBase, SO_RubberBand, SO_ToolBar, SO_GraphicsItem,

SO_Complex = 0xf0000, SO_Slider, SO_SpinBox, SO_ToolButton, SO_ComboBox,
SO_Q3ListView, SO_TitleBar, SO_GroupBox, SO_SizeGrip,

SO_CustomBase = 0xf00,
SO_ComplexCustomBase = 0xf000000
};

enum StyleOptionType { Type = SO_Default };
enum StyleOptionVersion { Version = 1 };

int version;
int type;
QStyle::State state;
Qt::LayoutDirection direction;
QRect rect;
QFontMetrics fontMetrics;
QPalette palette;

QStyleOption(int version = QStyleOption::Version, int type = SO_Default);
QStyleOption(const QStyleOption &other);
~QStyleOption();

void init(const QWidget *w);
inline void initFrom(const QWidget *w) { init(w); }
QStyleOption &operator=(const QStyleOption &other);
};

class  QStyleOptionFocusRect : public QStyleOption
{
public:
enum StyleOptionType { Type = SO_FocusRect };
enum StyleOptionVersion { Version = 1 };

QColor backgroundColor;

QStyleOptionFocusRect();
QStyleOptionFocusRect(const QStyleOptionFocusRect &other) : QStyleOption(Version, Type) { *this = other; }

protected:
QStyleOptionFocusRect(int version);
};

class  QStyleOptionFrame : public QStyleOption
{
public:
enum StyleOptionType { Type = SO_Frame };
enum StyleOptionVersion { Version = 1 };

int lineWidth;
int midLineWidth;

QStyleOptionFrame();
QStyleOptionFrame(const QStyleOptionFrame &other) : QStyleOption(Version, Type) { *this = other; }

protected:
QStyleOptionFrame(int version);
};

class  QStyleOptionFrameV2 : public QStyleOptionFrame
{
public:
enum StyleOptionVersion { Version = 2 };
enum FrameFeature {
None = 0x00,
Flat = 0x01
};
typedef QFlags<FrameFeature> FrameFeatures;
FrameFeatures features;

QStyleOptionFrameV2();
QStyleOptionFrameV2(const QStyleOptionFrameV2 &other) : QStyleOptionFrame(Version) { *this = other; }
QStyleOptionFrameV2(const QStyleOptionFrame &other);
QStyleOptionFrameV2 &operator=(const QStyleOptionFrame &other);

protected:
QStyleOptionFrameV2(int version);
};

inline QFlags<QStyleOptionFrameV2::FrameFeatures::enum_type> operator|(QStyleOptionFrameV2::FrameFeatures::enum_type f1, QStyleOptionFrameV2::FrameFeatures::enum_type f2) { return QFlags<QStyleOptionFrameV2::FrameFeatures::enum_type>(f1) | f2; } inline QFlags<QStyleOptionFrameV2::FrameFeatures::enum_type> operator|(QStyleOptionFrameV2::FrameFeatures::enum_type f1, QFlags<QStyleOptionFrameV2::FrameFeatures::enum_type> f2) { return f2 | f1; }


# 158 "/home/eagle/qt-copy/include/QtGui/qstyleoption.h"
class  QStyleOptionTabWidgetFrame : public QStyleOption
{
public:
enum StyleOptionType { Type = SO_TabWidgetFrame };
enum StyleOptionVersion { Version = 1 };

int lineWidth;
int midLineWidth;
QTabBar::Shape shape;
QSize tabBarSize;
QSize rightCornerWidgetSize;
QSize leftCornerWidgetSize;

QStyleOptionTabWidgetFrame();
inline QStyleOptionTabWidgetFrame(const QStyleOptionTabWidgetFrame &other)
: QStyleOption(Version, Type) { *this = other; }

protected:
QStyleOptionTabWidgetFrame(int version);
};



# 181 "/home/eagle/qt-copy/include/QtGui/qstyleoption.h"
class  QStyleOptionTabBarBase : public QStyleOption
{
public:
enum StyleOptionType { Type = SO_TabBarBase };
enum StyleOptionVersion { Version = 1 };

QTabBar::Shape shape;
QRect tabBarRect;
QRect selectedTabRect;

QStyleOptionTabBarBase();
QStyleOptionTabBarBase(const QStyleOptionTabBarBase &other) : QStyleOption(Version, Type) { *this = other; }

protected:
QStyleOptionTabBarBase(int version);
};


# 199 "/home/eagle/qt-copy/include/QtGui/qstyleoption.h"
class  QStyleOptionHeader : public QStyleOption
{
public:
enum StyleOptionType { Type = SO_Header };
enum StyleOptionVersion { Version = 1 };

enum SectionPosition { Beginning, Middle, End, OnlyOneSection };
enum SelectedPosition { NotAdjacent, NextIsSelected, PreviousIsSelected,
NextAndPreviousAreSelected };
enum SortIndicator { None, SortUp, SortDown };

int section;
QString text;
Qt::Alignment textAlignment;
QIcon icon;
Qt::Alignment iconAlignment;
SectionPosition position;
SelectedPosition selectedPosition;
SortIndicator sortIndicator;
Qt::Orientation orientation;

QStyleOptionHeader();
QStyleOptionHeader(const QStyleOptionHeader &other) : QStyleOption(Version, Type) { *this = other; }

protected:
QStyleOptionHeader(int version);
};

class  QStyleOptionButton : public QStyleOption
{
public:
enum StyleOptionType { Type = SO_Button };
enum StyleOptionVersion { Version = 1 };

enum ButtonFeature { None = 0x00, Flat = 0x01, HasMenu = 0x02, DefaultButton = 0x04,
AutoDefaultButton = 0x08, CommandLinkButton = 0x10 };
typedef QFlags<ButtonFeature> ButtonFeatures;

ButtonFeatures features;
QString text;
QIcon icon;
QSize iconSize;

QStyleOptionButton();
QStyleOptionButton(const QStyleOptionButton &other) : QStyleOption(Version, Type) { *this = other; }

protected:
QStyleOptionButton(int version);
};

inline QFlags<QStyleOptionButton::ButtonFeatures::enum_type> operator|(QStyleOptionButton::ButtonFeatures::enum_type f1, QStyleOptionButton::ButtonFeatures::enum_type f2) { return QFlags<QStyleOptionButton::ButtonFeatures::enum_type>(f1) | f2; } inline QFlags<QStyleOptionButton::ButtonFeatures::enum_type> operator|(QStyleOptionButton::ButtonFeatures::enum_type f1, QFlags<QStyleOptionButton::ButtonFeatures::enum_type> f2) { return f2 | f1; }


# 252 "/home/eagle/qt-copy/include/QtGui/qstyleoption.h"
class  QStyleOptionTab : public QStyleOption
{
public:
enum StyleOptionType { Type = SO_Tab };
enum StyleOptionVersion { Version = 1 };

enum TabPosition { Beginning, Middle, End, OnlyOneTab };
enum SelectedPosition { NotAdjacent, NextIsSelected, PreviousIsSelected };
enum CornerWidget { NoCornerWidgets = 0x00, LeftCornerWidget = 0x01,
RightCornerWidget = 0x02 };
typedef QFlags<CornerWidget> CornerWidgets;

QTabBar::Shape shape;
QString text;
QIcon icon;
int row;
TabPosition position;
SelectedPosition selectedPosition;
CornerWidgets cornerWidgets;

QStyleOptionTab();
QStyleOptionTab(const QStyleOptionTab &other) : QStyleOption(Version, Type) { *this = other; }

protected:
QStyleOptionTab(int version);
};

inline QFlags<QStyleOptionTab::CornerWidgets::enum_type> operator|(QStyleOptionTab::CornerWidgets::enum_type f1, QStyleOptionTab::CornerWidgets::enum_type f2) { return QFlags<QStyleOptionTab::CornerWidgets::enum_type>(f1) | f2; } inline QFlags<QStyleOptionTab::CornerWidgets::enum_type> operator|(QStyleOptionTab::CornerWidgets::enum_type f1, QFlags<QStyleOptionTab::CornerWidgets::enum_type> f2) { return f2 | f1; }

class  QStyleOptionTabV2 : public QStyleOptionTab
{
public:
enum StyleOptionVersion { Version = 2 };
QSize iconSize;
QStyleOptionTabV2();
QStyleOptionTabV2(const QStyleOptionTabV2 &other) : QStyleOptionTab(Version) { *this = other; }
QStyleOptionTabV2(const QStyleOptionTab &other);
QStyleOptionTabV2 &operator=(const QStyleOptionTab &other);

protected:
QStyleOptionTabV2(int version);
};






# 300 "/home/eagle/qt-copy/include/QtGui/qstyleoption.h"
class  QStyleOptionToolBar : public QStyleOption
{
public:
enum StyleOptionType { Type = SO_ToolBar };
enum StyleOptionVersion { Version = 1 };
enum ToolBarPosition { Beginning, Middle, End, OnlyOne };
enum ToolBarFeature { None = 0x0, Movable = 0x1 };
typedef QFlags<ToolBarFeature> ToolBarFeatures;
ToolBarPosition positionOfLine; 
ToolBarPosition positionWithinLine; 
Qt::ToolBarArea toolBarArea; 
ToolBarFeatures features;
int lineWidth;
int midLineWidth;
QStyleOptionToolBar();
QStyleOptionToolBar(const QStyleOptionToolBar &other) : QStyleOption(Version, Type) { *this = other; }

protected:
QStyleOptionToolBar(int version);
};

inline QFlags<QStyleOptionToolBar::ToolBarFeatures::enum_type> operator|(QStyleOptionToolBar::ToolBarFeatures::enum_type f1, QStyleOptionToolBar::ToolBarFeatures::enum_type f2) { return QFlags<QStyleOptionToolBar::ToolBarFeatures::enum_type>(f1) | f2; } inline QFlags<QStyleOptionToolBar::ToolBarFeatures::enum_type> operator|(QStyleOptionToolBar::ToolBarFeatures::enum_type f1, QFlags<QStyleOptionToolBar::ToolBarFeatures::enum_type> f2) { return f2 | f1; }





# 327 "/home/eagle/qt-copy/include/QtGui/qstyleoption.h"
class  QStyleOptionProgressBar : public QStyleOption
{
public:
enum StyleOptionType { Type = SO_ProgressBar };
enum StyleOptionVersion { Version = 1 };

int minimum;
int maximum;
int progress;
QString text;
Qt::Alignment textAlignment;
bool textVisible;

QStyleOptionProgressBar();
QStyleOptionProgressBar(const QStyleOptionProgressBar &other) : QStyleOption(Version, Type) { *this = other; }

protected:
QStyleOptionProgressBar(int version);
};


class  QStyleOptionProgressBarV2 : public QStyleOptionProgressBar
{
public:
enum StyleOptionType { Type = SO_ProgressBar };
enum StyleOptionVersion { Version = 2 };
Qt::Orientation orientation;
bool invertedAppearance;
bool bottomToTop;

QStyleOptionProgressBarV2();
QStyleOptionProgressBarV2(const QStyleOptionProgressBar &other);
QStyleOptionProgressBarV2(const QStyleOptionProgressBarV2 &other);
QStyleOptionProgressBarV2 &operator=(const QStyleOptionProgressBar &other);

protected:
QStyleOptionProgressBarV2(int version);
};

class  QStyleOptionMenuItem : public QStyleOption
{
public:
enum StyleOptionType { Type = SO_MenuItem };
enum StyleOptionVersion { Version = 1 };

enum MenuItemType { Normal, DefaultItem, Separator, SubMenu, Scroller, TearOff, Margin,
EmptyArea };
enum CheckType { NotCheckable, Exclusive, NonExclusive };

MenuItemType menuItemType;
CheckType checkType;
bool checked;
bool menuHasCheckableItems;
QRect menuRect;
QString text;
QIcon icon;
int maxIconWidth;
int tabWidth;
QFont font;

QStyleOptionMenuItem();
QStyleOptionMenuItem(const QStyleOptionMenuItem &other) : QStyleOption(Version, Type) { *this = other; }

protected:
QStyleOptionMenuItem(int version);
};

class  QStyleOptionQ3ListViewItem : public QStyleOption
{
public:
enum StyleOptionType { Type = SO_Q3ListViewItem };
enum StyleOptionVersion { Version = 1 };

enum Q3ListViewItemFeature { None = 0x00, Expandable = 0x01, MultiLine = 0x02, Visible = 0x04,
ParentControl = 0x08 };
typedef QFlags<Q3ListViewItemFeature> Q3ListViewItemFeatures;

Q3ListViewItemFeatures features;
int height;
int totalHeight;
int itemY;
int childCount;

QStyleOptionQ3ListViewItem();
QStyleOptionQ3ListViewItem(const QStyleOptionQ3ListViewItem &other) : QStyleOption(Version, Type) { *this = other; }

protected:
QStyleOptionQ3ListViewItem(int version);
};

inline QFlags<QStyleOptionQ3ListViewItem::Q3ListViewItemFeatures::enum_type> operator|(QStyleOptionQ3ListViewItem::Q3ListViewItemFeatures::enum_type f1, QStyleOptionQ3ListViewItem::Q3ListViewItemFeatures::enum_type f2) { return QFlags<QStyleOptionQ3ListViewItem::Q3ListViewItemFeatures::enum_type>(f1) | f2; } inline QFlags<QStyleOptionQ3ListViewItem::Q3ListViewItemFeatures::enum_type> operator|(QStyleOptionQ3ListViewItem::Q3ListViewItemFeatures::enum_type f1, QFlags<QStyleOptionQ3ListViewItem::Q3ListViewItemFeatures::enum_type> f2) { return f2 | f1; }

class  QStyleOptionQ3DockWindow : public QStyleOption
{
public:
enum StyleOptionType { Type = SO_Q3DockWindow };
enum StyleOptionVersion { Version = 1 };

bool docked;
bool closeEnabled;

QStyleOptionQ3DockWindow();
QStyleOptionQ3DockWindow(const QStyleOptionQ3DockWindow &other) : QStyleOption(Version, Type) { *this = other; }

protected:
QStyleOptionQ3DockWindow(int version);
};

class  QStyleOptionDockWidget : public QStyleOption
{
public:
enum StyleOptionType { Type = SO_DockWidget };
enum StyleOptionVersion { Version = 1 };

QString title;
bool closable;
bool movable;
bool floatable;

QStyleOptionDockWidget();
QStyleOptionDockWidget(const QStyleOptionDockWidget &other) : QStyleOption(Version, Type) { *this = other; }

protected:
QStyleOptionDockWidget(int version);
};

class  QStyleOptionDockWidgetV2 : public QStyleOptionDockWidget
{
public:
enum StyleOptionVersion { Version = 2 };

bool verticalTitleBar;

QStyleOptionDockWidgetV2();
QStyleOptionDockWidgetV2(const QStyleOptionDockWidgetV2 &other)
: QStyleOptionDockWidget(Version) { *this = other; }
QStyleOptionDockWidgetV2(const QStyleOptionDockWidget &other);
QStyleOptionDockWidgetV2 &operator = (const QStyleOptionDockWidget &other);

protected:
QStyleOptionDockWidgetV2(int version);
};

class  QStyleOptionViewItem : public QStyleOption
{
public:
enum StyleOptionType { Type = SO_ViewItem };
enum StyleOptionVersion { Version = 1 };

enum Position { Left, Right, Top, Bottom };

Qt::Alignment displayAlignment;
Qt::Alignment decorationAlignment;
Qt::TextElideMode textElideMode;
Position decorationPosition;
QSize decorationSize;
QFont font;
bool showDecorationSelected;

QStyleOptionViewItem();
QStyleOptionViewItem(const QStyleOptionViewItem &other) : QStyleOption(Version, Type) { *this = other; }

protected:
QStyleOptionViewItem(int version);
};

class  QStyleOptionViewItemV2 : public QStyleOptionViewItem
{
public:
enum StyleOptionVersion { Version = 2 };

enum ViewItemFeature {
None = 0x00,
WrapText = 0x01,
Alternate = 0x02,
HasCheckIndicator = 0x04,
HasDisplay = 0x08,
HasDecoration = 0x10
};
typedef QFlags<ViewItemFeature> ViewItemFeatures;

ViewItemFeatures features;

QStyleOptionViewItemV2();
QStyleOptionViewItemV2(const QStyleOptionViewItemV2 &other) : QStyleOptionViewItem(Version) { *this = other; }
QStyleOptionViewItemV2(const QStyleOptionViewItem &other);
QStyleOptionViewItemV2 &operator=(const QStyleOptionViewItem &other);

protected:
QStyleOptionViewItemV2(int version);
};

inline QFlags<QStyleOptionViewItemV2::ViewItemFeatures::enum_type> operator|(QStyleOptionViewItemV2::ViewItemFeatures::enum_type f1, QStyleOptionViewItemV2::ViewItemFeatures::enum_type f2) { return QFlags<QStyleOptionViewItemV2::ViewItemFeatures::enum_type>(f1) | f2; } inline QFlags<QStyleOptionViewItemV2::ViewItemFeatures::enum_type> operator|(QStyleOptionViewItemV2::ViewItemFeatures::enum_type f1, QFlags<QStyleOptionViewItemV2::ViewItemFeatures::enum_type> f2) { return f2 | f1; }

class  QStyleOptionViewItemV3 : public QStyleOptionViewItemV2
{
public:
enum StyleOptionVersion { Version = 3 };

QLocale locale;
const QWidget *widget;

QStyleOptionViewItemV3();
QStyleOptionViewItemV3(const QStyleOptionViewItemV3 &other)
: QStyleOptionViewItemV2(Version) { *this = other; }
QStyleOptionViewItemV3(const QStyleOptionViewItem &other);
QStyleOptionViewItemV3 &operator = (const QStyleOptionViewItem &other);

protected:
QStyleOptionViewItemV3(int version);
};


# 540 "/home/eagle/qt-copy/include/QtGui/qstyleoption.h"
class  QStyleOptionViewItemV4 : public QStyleOptionViewItemV3
{
public:
enum StyleOptionVersion { Version = 4 };
enum ViewItemPosition { Invalid, Beginning, Middle, End, OnlyOne };

QModelIndex index;
Qt::CheckState checkState;
QIcon icon;
QString text;
ViewItemPosition viewItemPosition;
QBrush backgroundBrush;

QStyleOptionViewItemV4();
QStyleOptionViewItemV4(const QStyleOptionViewItemV4 &other)
: QStyleOptionViewItemV3(Version) { *this = other; }
QStyleOptionViewItemV4(const QStyleOptionViewItem &other);
QStyleOptionViewItemV4 &operator = (const QStyleOptionViewItem &other);

protected:
QStyleOptionViewItemV4(int version);
};


# 564 "/home/eagle/qt-copy/include/QtGui/qstyleoption.h"
class  QStyleOptionToolBox : public QStyleOption
{
public:
enum StyleOptionType { Type = SO_ToolBox };
enum StyleOptionVersion { Version = 1 };

QString text;
QIcon icon;

QStyleOptionToolBox();
QStyleOptionToolBox(const QStyleOptionToolBox &other) : QStyleOption(Version, Type) { *this = other; }

protected:
QStyleOptionToolBox(int version);
};

class  QStyleOptionToolBoxV2 : public QStyleOptionToolBox
{
public:
enum StyleOptionVersion { Version = 2 };
enum TabPosition { Beginning, Middle, End, OnlyOneTab };
enum SelectedPosition { NotAdjacent, NextIsSelected, PreviousIsSelected };

TabPosition position;
SelectedPosition selectedPosition;

QStyleOptionToolBoxV2();
QStyleOptionToolBoxV2(const QStyleOptionToolBoxV2 &other) : QStyleOptionToolBox(Version) { *this = other; }
QStyleOptionToolBoxV2(const QStyleOptionToolBox &other);
QStyleOptionToolBoxV2 &operator=(const QStyleOptionToolBox &other);

protected:
QStyleOptionToolBoxV2(int version);
};


# 600 "/home/eagle/qt-copy/include/QtGui/qstyleoption.h"
class  QStyleOptionRubberBand : public QStyleOption
{
public:
enum StyleOptionType { Type = SO_RubberBand };
enum StyleOptionVersion { Version = 1 };

QRubberBand::Shape shape;
bool opaque;

QStyleOptionRubberBand();
QStyleOptionRubberBand(const QStyleOptionRubberBand &other) : QStyleOption(Version, Type) { *this = other; }

protected:
QStyleOptionRubberBand(int version);
};


# 617 "/home/eagle/qt-copy/include/QtGui/qstyleoption.h"

class  QStyleOptionComplex : public QStyleOption
{
public:
enum StyleOptionType { Type = SO_Complex };
enum StyleOptionVersion { Version = 1 };

QStyle::SubControls subControls;
QStyle::SubControls activeSubControls;

QStyleOptionComplex(int version = QStyleOptionComplex::Version, int type = SO_Complex);
QStyleOptionComplex(const QStyleOptionComplex &other) : QStyleOption(Version, Type) { *this = other; }
};


# 632 "/home/eagle/qt-copy/include/QtGui/qstyleoption.h"
class  QStyleOptionSlider : public QStyleOptionComplex
{
public:
enum StyleOptionType { Type = SO_Slider };
enum StyleOptionVersion { Version = 1 };

Qt::Orientation orientation;
int minimum;
int maximum;
QSlider::TickPosition tickPosition;
int tickInterval;
bool upsideDown;
int sliderPosition;
int sliderValue;
int singleStep;
int pageStep;
qreal notchTarget;
bool dialWrapping;

QStyleOptionSlider();
QStyleOptionSlider(const QStyleOptionSlider &other) : QStyleOptionComplex(Version, Type) { *this = other; }

protected:
QStyleOptionSlider(int version);
};



# 660 "/home/eagle/qt-copy/include/QtGui/qstyleoption.h"
class  QStyleOptionSpinBox : public QStyleOptionComplex
{
public:
enum StyleOptionType { Type = SO_SpinBox };
enum StyleOptionVersion { Version = 1 };

QAbstractSpinBox::ButtonSymbols buttonSymbols;
QAbstractSpinBox::StepEnabled stepEnabled;
bool frame;

QStyleOptionSpinBox();
QStyleOptionSpinBox(const QStyleOptionSpinBox &other) : QStyleOptionComplex(Version, Type) { *this = other; }

protected:
QStyleOptionSpinBox(int version);
};


# 678 "/home/eagle/qt-copy/include/QtGui/qstyleoption.h"
class  QStyleOptionQ3ListView : public QStyleOptionComplex
{
public:
enum StyleOptionType { Type = SO_Q3ListView };
enum StyleOptionVersion { Version = 1 };

QList<QStyleOptionQ3ListViewItem> items;
QPalette viewportPalette;
QPalette::ColorRole viewportBGRole;
int sortColumn;
int itemMargin;
int treeStepSize;
bool rootIsDecorated;

QStyleOptionQ3ListView();
QStyleOptionQ3ListView(const QStyleOptionQ3ListView &other) : QStyleOptionComplex(Version, Type) { *this = other; }

protected:
QStyleOptionQ3ListView(int version);
};

class  QStyleOptionToolButton : public QStyleOptionComplex
{
public:
enum StyleOptionType { Type = SO_ToolButton };
enum StyleOptionVersion { Version = 1 };

enum ToolButtonFeature { None = 0x00, Arrow = 0x01, Menu = 0x04, MenuButtonPopup = Menu, PopupDelay = 0x08,
HasMenu = 0x10 };
typedef QFlags<ToolButtonFeature> ToolButtonFeatures;

ToolButtonFeatures features;
QIcon icon;
QSize iconSize;
QString text;
Qt::ArrowType arrowType;
Qt::ToolButtonStyle toolButtonStyle;
QPoint pos;
QFont font;

QStyleOptionToolButton();
QStyleOptionToolButton(const QStyleOptionToolButton &other) : QStyleOptionComplex(Version, Type) { *this = other; }

protected:
QStyleOptionToolButton(int version);
};

inline QFlags<QStyleOptionToolButton::ToolButtonFeatures::enum_type> operator|(QStyleOptionToolButton::ToolButtonFeatures::enum_type f1, QStyleOptionToolButton::ToolButtonFeatures::enum_type f2) { return QFlags<QStyleOptionToolButton::ToolButtonFeatures::enum_type>(f1) | f2; } inline QFlags<QStyleOptionToolButton::ToolButtonFeatures::enum_type> operator|(QStyleOptionToolButton::ToolButtonFeatures::enum_type f1, QFlags<QStyleOptionToolButton::ToolButtonFeatures::enum_type> f2) { return f2 | f1; }

class  QStyleOptionComboBox : public QStyleOptionComplex
{
public:
enum StyleOptionType { Type = SO_ComboBox };
enum StyleOptionVersion { Version = 1 };

bool editable;
QRect popupRect;
bool frame;
QString currentText;
QIcon currentIcon;
QSize iconSize;

QStyleOptionComboBox();
QStyleOptionComboBox(const QStyleOptionComboBox &other) : QStyleOptionComplex(Version, Type) { *this = other; }

protected:
QStyleOptionComboBox(int version);
};

class  QStyleOptionTitleBar : public QStyleOptionComplex
{
public:
enum StyleOptionType { Type = SO_TitleBar };
enum StyleOptionVersion { Version = 1 };

QString text;
QIcon icon;
int titleBarState;
Qt::WindowFlags titleBarFlags;

QStyleOptionTitleBar();
QStyleOptionTitleBar(const QStyleOptionTitleBar &other) : QStyleOptionComplex(Version, Type) { *this = other; }

protected:
QStyleOptionTitleBar(int version);
};

class  QStyleOptionGroupBox : public QStyleOptionComplex
{
public:
enum StyleOptionType { Type = SO_GroupBox };
enum StyleOptionVersion { Version = 1 };

QStyleOptionFrameV2::FrameFeatures features;
QString text;
Qt::Alignment textAlignment;
QColor textColor;
int lineWidth;
int midLineWidth;

QStyleOptionGroupBox();
QStyleOptionGroupBox(const QStyleOptionGroupBox &other) : QStyleOptionComplex(Version, Type) { *this = other; }
protected:
QStyleOptionGroupBox(int version);
};

class  QStyleOptionSizeGrip : public QStyleOptionComplex
{
public:
enum StyleOptionType { Type = SO_SizeGrip };
enum StyleOptionVersion { Version = 1 };

Qt::Corner corner;

QStyleOptionSizeGrip();
QStyleOptionSizeGrip(const QStyleOptionSizeGrip &other) : QStyleOptionComplex(Version, Type) { *this = other; }
protected:
QStyleOptionSizeGrip(int version);
};

class  QStyleOptionGraphicsItem : public QStyleOption
{
public:
enum StyleOptionType { Type = SO_GraphicsItem };
enum StyleOptionVersion { Version = 1 };

QRectF exposedRect;
QMatrix matrix;
qreal levelOfDetail;

QStyleOptionGraphicsItem();
QStyleOptionGraphicsItem(const QStyleOptionGraphicsItem &other) : QStyleOption(Version, Type) { *this = other; }
protected:
QStyleOptionGraphicsItem(int version);
};

template <typename T>
T qstyleoption_cast(const QStyleOption *opt)
{
if (opt && opt->version >= static_cast<T>(0)->Version && (opt->type == static_cast<T>(0)->Type
|| int(static_cast<T>(0)->Type) == QStyleOption::SO_Default
|| (int(static_cast<T>(0)->Type) == QStyleOption::SO_Complex
&& opt->type > QStyleOption::SO_Complex)))
return static_cast<T>(opt);
return 0;
}

template <typename T>
T qstyleoption_cast(QStyleOption *opt)
{
if (opt && opt->version >= static_cast<T>(0)->Version && (opt->type == static_cast<T>(0)->Type
|| int(static_cast<T>(0)->Type) == QStyleOption::SO_Default
|| (int(static_cast<T>(0)->Type) == QStyleOption::SO_Complex
&& opt->type > QStyleOption::SO_Complex)))
return static_cast<T>(opt);
return 0;
}


class  QStyleHintReturn {
public:
enum HintReturnType {
SH_Default=0xf000, SH_Mask, SH_Variant
};

enum StyleOptionType { Type = SH_Default };
enum StyleOptionVersion { Version = 1 };

QStyleHintReturn(int version = QStyleOption::Version, int type = SH_Default);
~QStyleHintReturn();

int version;
int type;
};

class  QStyleHintReturnMask : public QStyleHintReturn {
public:
enum StyleOptionType { Type = SH_Mask };
enum StyleOptionVersion { Version = 1 };

QStyleHintReturnMask();

QRegion region;
};

class  QStyleHintReturnVariant : public QStyleHintReturn {
public:
enum StyleOptionType { Type = SH_Variant };
enum StyleOptionVersion { Version = 1 };

QStyleHintReturnVariant();

QVariant variant;
};

template <typename T>
T qstyleoption_cast(const QStyleHintReturn *hint)
{
if (hint && hint->version <= static_cast<T>(0)->Version &&
(hint->type == static_cast<T>(0)->Type || int(static_cast<T>(0)->Type) == QStyleHintReturn::SH_Default))
return static_cast<T>(hint);
return 0;
}

template <typename T>
T qstyleoption_cast(QStyleHintReturn *hint)
{
if (hint && hint->version <= static_cast<T>(0)->Version &&
(hint->type == static_cast<T>(0)->Type || int(static_cast<T>(0)->Type) == QStyleHintReturn::SH_Default))
return static_cast<T>(hint);
return 0;
}






# 896 "/home/eagle/qt-copy/include/QtGui/qstyleoption.h"





# 48 "/home/eagle/qt-copy/include/QtGui/qabstractitemdelegate.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qabstractitemdelegate.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 58 "/home/eagle/qt-copy/include/QtGui/qabstractitemdelegate.h"
class QPainter;
class QModelIndex;
class QAbstractItemModel;
class QAbstractItemView;
class QHelpEvent;

class  QAbstractItemDelegate : public QObject
{
Q_OBJECT

public:

enum EndEditHint {
NoHint,
EditNextItem,
EditPreviousItem,
SubmitModelCache,
RevertModelCache
};

explicit QAbstractItemDelegate(QObject *parent = 0);
virtual ~QAbstractItemDelegate();


virtual void paint(QPainter *painter,
const QStyleOptionViewItem &option,
const QModelIndex &index) const = 0;

virtual QSize sizeHint(const QStyleOptionViewItem &option,
const QModelIndex &index) const = 0;


virtual QWidget *createEditor(QWidget *parent,
const QStyleOptionViewItem &option,
const QModelIndex &index) const;

virtual void setEditorData(QWidget *editor, const QModelIndex &index) const;

virtual void setModelData(QWidget *editor,
QAbstractItemModel *model,
const QModelIndex &index) const;

virtual void updateEditorGeometry(QWidget *editor,
const QStyleOptionViewItem &option,
const QModelIndex &index) const;


virtual bool editorEvent(QEvent *event,
QAbstractItemModel *model,
const QStyleOptionViewItem &option,
const QModelIndex &index);

static QString elidedText(const QFontMetrics &fontMetrics, int width,
Qt::TextElideMode mode, const QString &text);

public slots:
bool helpEvent(QHelpEvent *event,
QAbstractItemView *view,
const QStyleOptionViewItem &option,
const QModelIndex &index);

signals:
void commitData(QWidget *editor);
void closeEditor(QWidget *editor, QAbstractItemDelegate::EndEditHint hint = NoHint);
void sizeHintChanged(const QModelIndex &);

protected:
QAbstractItemDelegate(QObjectPrivate &, QObject *parent = 0);
private:
QAbstractItemDelegate(const QAbstractItemDelegate &); QAbstractItemDelegate &operator=(const QAbstractItemDelegate &);
};



# 132 "/home/eagle/qt-copy/include/QtGui/qabstractitemdelegate.h"





# 50 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qabstractitemview.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qabstractscrollarea.h"













































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qabstractitemview.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstractitemmodel.h"

































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qabstractitemview.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qitemselectionmodel.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qset.h"


































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qitemselectionmodel.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qvector.h"































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qitemselectionmodel.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qlist.h"











































































































































































































































































































































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qitemselectionmodel.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstractitemmodel.h"

































































































































































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtGui/qitemselectionmodel.h"


# 52 "/home/eagle/qt-copy/include/QtGui/qitemselectionmodel.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 60 "/home/eagle/qt-copy/include/QtGui/qitemselectionmodel.h"
class  QItemSelectionRange
{

public:
inline QItemSelectionRange() {}
inline QItemSelectionRange(const QItemSelectionRange &other)
: tl(other.tl), br(other.br) {}
inline QItemSelectionRange(const QModelIndex &topLeft, const QModelIndex &bottomRight);
explicit inline QItemSelectionRange(const QModelIndex &index)
{ tl = index; br = tl; }

inline int top() const { return tl.row(); }
inline int left() const { return tl.column(); }
inline int bottom() const { return br.row(); }
inline int right() const { return br.column(); }
inline int width() const { return br.column() - tl.column() + 1; }
inline int height() const { return br.row() - tl.row() + 1; }

inline QModelIndex topLeft() const { return QModelIndex(tl); }
inline QModelIndex bottomRight() const { return QModelIndex(br); }
inline QModelIndex parent() const { return tl.parent(); }
inline const QAbstractItemModel *model() const { return tl.model(); }

inline bool contains(const QModelIndex &index) const
{
return (parent() == index.parent()
&& tl.row() <= index.row() && tl.column() <= index.column()
&& br.row() >= index.row() && br.column() >= index.column());
}

inline bool contains(int row, int column, const QModelIndex &parentIndex) const
{
return (parent() == parentIndex
&& tl.row() <= row && tl.column() <= column
&& br.row() >= row && br.column() >= column);
}

bool intersects(const QItemSelectionRange &other) const;
QItemSelectionRange intersect(const QItemSelectionRange &other) const; 
inline QItemSelectionRange intersected(const QItemSelectionRange &other) const
{ return intersect(other); }

inline bool operator==(const QItemSelectionRange &other) const
{ return (tl == other.tl && br == other.br); }
inline bool operator!=(const QItemSelectionRange &other) const
{ return !operator==(other); }

inline bool isValid() const
{
return (tl.isValid() && br.isValid() && tl.parent() == br.parent()
&& top() <= bottom() && left() <= right());
}

QModelIndexList indexes() const;

private:
QPersistentModelIndex tl, br;
};
template <> class QTypeInfo<QItemSelectionRange> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QItemSelectionRange)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QItemSelectionRange"; } };

inline QItemSelectionRange::QItemSelectionRange(const QModelIndex &atopLeft,
const QModelIndex &abottomRight)
{ tl = atopLeft; br = abottomRight; }

class QItemSelection;
class QItemSelectionModelPrivate;

class  QItemSelectionModel : public QObject
{
Q_OBJECT
inline QItemSelectionModelPrivate* d_func() { return reinterpret_cast<QItemSelectionModelPrivate *>(d_ptr); } inline const QItemSelectionModelPrivate* d_func() const { return reinterpret_cast<const QItemSelectionModelPrivate *>(d_ptr); } friend class QItemSelectionModelPrivate;


public:

enum SelectionFlag {
NoUpdate = 0x0000,
Clear = 0x0001,
Select = 0x0002,
Deselect = 0x0004,
Toggle = 0x0008,
Current = 0x0010,
Rows = 0x0020,
Columns = 0x0040,
SelectCurrent = Select | Current,
ToggleCurrent = Toggle | Current,
ClearAndSelect = Clear | Select
};

typedef QFlags<SelectionFlag> SelectionFlags;

explicit QItemSelectionModel(QAbstractItemModel *model);
explicit QItemSelectionModel(QAbstractItemModel *model, QObject *parent);
virtual ~QItemSelectionModel();

QModelIndex currentIndex() const;

bool isSelected(const QModelIndex &index) const;
bool isRowSelected(int row, const QModelIndex &parent) const;
bool isColumnSelected(int column, const QModelIndex &parent) const;

bool rowIntersectsSelection(int row, const QModelIndex &parent) const;
bool columnIntersectsSelection(int column, const QModelIndex &parent) const;

bool hasSelection() const;

QModelIndexList selectedIndexes() const;
QModelIndexList selectedRows(int column = 0) const;
QModelIndexList selectedColumns(int row = 0) const;
const QItemSelection selection() const;

const QAbstractItemModel *model() const;

public slots:
void setCurrentIndex(const QModelIndex &index, QItemSelectionModel::SelectionFlags command);
virtual void select(const QModelIndex &index, QItemSelectionModel::SelectionFlags command);
virtual void select(const QItemSelection &selection, QItemSelectionModel::SelectionFlags command);
virtual void clear();
virtual void reset();

void clearSelection();

signals:
void selectionChanged(const QItemSelection &selected, const QItemSelection &deselected);
void currentChanged(const QModelIndex &current, const QModelIndex &previous);
void currentRowChanged(const QModelIndex &current, const QModelIndex &previous);
void currentColumnChanged(const QModelIndex &current, const QModelIndex &previous);

protected:
QItemSelectionModel(QItemSelectionModelPrivate &dd, QAbstractItemModel *model);
void emitSelectionChanged(const QItemSelection &newSelection, const QItemSelection &oldSelection);

private:
QItemSelectionModel(const QItemSelectionModel &); QItemSelectionModel &operator=(const QItemSelectionModel &);






};

inline QFlags<QItemSelectionModel::SelectionFlags::enum_type> operator|(QItemSelectionModel::SelectionFlags::enum_type f1, QItemSelectionModel::SelectionFlags::enum_type f2) { return QFlags<QItemSelectionModel::SelectionFlags::enum_type>(f1) | f2; } inline QFlags<QItemSelectionModel::SelectionFlags::enum_type> operator|(QItemSelectionModel::SelectionFlags::enum_type f1, QFlags<QItemSelectionModel::SelectionFlags::enum_type> f2) { return f2 | f1; }


inline uint qHash(const QItemSelectionRange &) { return 0; }

class  QItemSelection : public QList<QItemSelectionRange>
{
public:
QItemSelection() {}
QItemSelection(const QModelIndex &topLeft, const QModelIndex &bottomRight);
void select(const QModelIndex &topLeft, const QModelIndex &bottomRight);
bool contains(const QModelIndex &index) const;
QModelIndexList indexes() const;
void merge(const QItemSelection &other, QItemSelectionModel::SelectionFlags command);
static void split(const QItemSelectionRange &range,
const QItemSelectionRange &other,
QItemSelection *result);
};


# 222 "/home/eagle/qt-copy/include/QtGui/qitemselectionmodel.h"
 QDebug operator<<(QDebug, const QItemSelectionRange &);




# 227 "/home/eagle/qt-copy/include/QtGui/qitemselectionmodel.h"





# 49 "/home/eagle/qt-copy/include/QtGui/qabstractitemview.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qabstractitemdelegate.h"








































































































































# 50 "/home/eagle/qt-copy/include/QtGui/qabstractitemview.h"


# 52 "/home/eagle/qt-copy/include/QtGui/qabstractitemview.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 60 "/home/eagle/qt-copy/include/QtGui/qabstractitemview.h"
class QMenu;
class QDrag;
class QEvent;
class QAbstractItemViewPrivate;

class  QAbstractItemView : public QAbstractScrollArea
{
Q_OBJECT
Q_ENUMS(SelectionMode SelectionBehavior ScrollHint ScrollMode DragDropMode)

Q_PROPERTY(bool autoScroll READ hasAutoScroll WRITE setAutoScroll)
Q_PROPERTY(int autoScrollMargin READ autoScrollMargin WRITE setAutoScrollMargin)
Q_PROPERTY(EditTriggers editTriggers READ editTriggers WRITE setEditTriggers)
Q_PROPERTY(bool tabKeyNavigation READ tabKeyNavigation WRITE setTabKeyNavigation)

# 75 "/home/eagle/qt-copy/include/QtGui/qabstractitemview.h"
Q_PROPERTY(bool showDropIndicator READ showDropIndicator WRITE setDropIndicatorShown)
Q_PROPERTY(bool dragEnabled READ dragEnabled WRITE setDragEnabled)
Q_PROPERTY(bool dragDropOverwriteMode READ dragDropOverwriteMode WRITE setDragDropOverwriteMode)
Q_PROPERTY(DragDropMode dragDropMode READ dragDropMode WRITE setDragDropMode)

# 80 "/home/eagle/qt-copy/include/QtGui/qabstractitemview.h"
Q_PROPERTY(bool alternatingRowColors READ alternatingRowColors WRITE setAlternatingRowColors)
Q_PROPERTY(SelectionMode selectionMode READ selectionMode WRITE setSelectionMode)
Q_PROPERTY(SelectionBehavior selectionBehavior READ selectionBehavior WRITE setSelectionBehavior)
Q_PROPERTY(QSize iconSize READ iconSize WRITE setIconSize)
Q_PROPERTY(Qt::TextElideMode textElideMode READ textElideMode WRITE setTextElideMode)
Q_PROPERTY(ScrollMode verticalScrollMode READ verticalScrollMode WRITE setVerticalScrollMode)
Q_PROPERTY(ScrollMode horizontalScrollMode READ horizontalScrollMode WRITE setHorizontalScrollMode)

public:
enum SelectionMode {
NoSelection,
SingleSelection,
MultiSelection,
ExtendedSelection,
ContiguousSelection
};

enum SelectionBehavior {
SelectItems,
SelectRows,
SelectColumns
};

enum ScrollHint {
EnsureVisible,
PositionAtTop,
PositionAtBottom,
PositionAtCenter
};

enum EditTrigger {
NoEditTriggers = 0,
CurrentChanged = 1,
DoubleClicked = 2,
SelectedClicked = 4,
EditKeyPressed = 8,
AnyKeyPressed = 16,
AllEditTriggers = 31
};

typedef QFlags<EditTrigger> EditTriggers;

enum ScrollMode {
ScrollPerItem,
ScrollPerPixel
};

explicit QAbstractItemView(QWidget *parent = 0);
~QAbstractItemView();

virtual void setModel(QAbstractItemModel *model);
QAbstractItemModel *model() const;

virtual void setSelectionModel(QItemSelectionModel *selectionModel);
QItemSelectionModel *selectionModel() const;

void setItemDelegate(QAbstractItemDelegate *delegate);
QAbstractItemDelegate *itemDelegate() const;

void setSelectionMode(QAbstractItemView::SelectionMode mode);
QAbstractItemView::SelectionMode selectionMode() const;

void setSelectionBehavior(QAbstractItemView::SelectionBehavior behavior);
QAbstractItemView::SelectionBehavior selectionBehavior() const;

QModelIndex currentIndex() const;
QModelIndex rootIndex() const;

void setEditTriggers(EditTriggers triggers);
EditTriggers editTriggers() const;

void setVerticalScrollMode(ScrollMode mode);
ScrollMode verticalScrollMode() const;

void setHorizontalScrollMode(ScrollMode mode);
ScrollMode horizontalScrollMode() const;

void setAutoScroll(bool enable);
bool hasAutoScroll() const;

void setAutoScrollMargin(int margin);
int autoScrollMargin() const;

void setTabKeyNavigation(bool enable);
bool tabKeyNavigation() const;


# 167 "/home/eagle/qt-copy/include/QtGui/qabstractitemview.h"
void setDropIndicatorShown(bool enable);
bool showDropIndicator() const;

void setDragEnabled(bool enable);
bool dragEnabled() const;

void setDragDropOverwriteMode(bool overwrite);
bool dragDropOverwriteMode() const;

enum DragDropMode {
NoDragDrop,
DragOnly,
DropOnly,
DragDrop,
InternalMove
};

void setDragDropMode(DragDropMode behavior);
DragDropMode dragDropMode() const;

# 187 "/home/eagle/qt-copy/include/QtGui/qabstractitemview.h"
void setAlternatingRowColors(bool enable);
bool alternatingRowColors() const;

void setIconSize(const QSize &size);
QSize iconSize() const;

void setTextElideMode(Qt::TextElideMode mode);
Qt::TextElideMode textElideMode() const;

virtual void keyboardSearch(const QString &search);

virtual QRect visualRect(const QModelIndex &index) const = 0;
virtual void scrollTo(const QModelIndex &index, ScrollHint hint = EnsureVisible) = 0;
virtual QModelIndex indexAt(const QPoint &point) const = 0;

QSize sizeHintForIndex(const QModelIndex &index) const;
virtual int sizeHintForRow(int row) const;
virtual int sizeHintForColumn(int column) const;

void openPersistentEditor(const QModelIndex &index);
void closePersistentEditor(const QModelIndex &index);

void setIndexWidget(const QModelIndex &index, QWidget *widget);
QWidget *indexWidget(const QModelIndex &index) const;

void setItemDelegateForRow(int row, QAbstractItemDelegate *delegate);
QAbstractItemDelegate *itemDelegateForRow(int row) const;

void setItemDelegateForColumn(int column, QAbstractItemDelegate *delegate);
QAbstractItemDelegate *itemDelegateForColumn(int column) const;

QAbstractItemDelegate *itemDelegate(const QModelIndex &index) const;

virtual QVariant inputMethodQuery(Qt::InputMethodQuery query) const;


# 223 "/home/eagle/qt-copy/include/QtGui/qabstractitemview.h"
inline void update() { QAbstractScrollArea::update(); }




# 228 "/home/eagle/qt-copy/include/QtGui/qabstractitemview.h"
public slots:
virtual void reset();
virtual void setRootIndex(const QModelIndex &index);
virtual void doItemsLayout();
virtual void selectAll();
void edit(const QModelIndex &index);
void clearSelection();
void setCurrentIndex(const QModelIndex &index);
void scrollToTop();
void scrollToBottom();
void update(const QModelIndex &index);

protected slots:
virtual void dataChanged(const QModelIndex &topLeft, const QModelIndex &bottomRight);
virtual void rowsInserted(const QModelIndex &parent, int start, int end);
virtual void rowsAboutToBeRemoved(const QModelIndex &parent, int start, int end);
virtual void selectionChanged(const QItemSelection &selected, const QItemSelection &deselected);
virtual void currentChanged(const QModelIndex &current, const QModelIndex &previous);
virtual void updateEditorData();
virtual void updateEditorGeometries();
virtual void updateGeometries();
virtual void verticalScrollbarAction(int action);
virtual void horizontalScrollbarAction(int action);
virtual void verticalScrollbarValueChanged(int value);
virtual void horizontalScrollbarValueChanged(int value);
virtual void closeEditor(QWidget *editor, QAbstractItemDelegate::EndEditHint hint);
virtual void commitData(QWidget *editor);
virtual void editorDestroyed(QObject *editor);

signals:
void pressed(const QModelIndex &index);
void clicked(const QModelIndex &index);
void doubleClicked(const QModelIndex &index);

void activated(const QModelIndex &index);
void entered(const QModelIndex &index);
void viewportEntered();

protected:
QAbstractItemView(QAbstractItemViewPrivate &, QWidget *parent = 0);

void setHorizontalStepsPerItem(int steps);
int horizontalStepsPerItem() const;
void setVerticalStepsPerItem(int steps);
int verticalStepsPerItem() const;

enum CursorAction { MoveUp, MoveDown, MoveLeft, MoveRight,
MoveHome, MoveEnd, MovePageUp, MovePageDown,
MoveNext, MovePrevious };
virtual QModelIndex moveCursor(CursorAction cursorAction,
Qt::KeyboardModifiers modifiers) = 0;

virtual int horizontalOffset() const = 0;
virtual int verticalOffset() const = 0;

virtual bool isIndexHidden(const QModelIndex &index) const = 0;

virtual void setSelection(const QRect &rect, QItemSelectionModel::SelectionFlags command) = 0;
virtual QRegion visualRegionForSelection(const QItemSelection &selection) const = 0;
virtual QModelIndexList selectedIndexes() const;

virtual bool edit(const QModelIndex &index, EditTrigger trigger, QEvent *event);

virtual QItemSelectionModel::SelectionFlags selectionCommand(const QModelIndex &index,
const QEvent *event = 0) const;


# 295 "/home/eagle/qt-copy/include/QtGui/qabstractitemview.h"
virtual void startDrag(Qt::DropActions supportedActions);


# 298 "/home/eagle/qt-copy/include/QtGui/qabstractitemview.h"
virtual QStyleOptionViewItem viewOptions() const;

enum State {
NoState,
DraggingState,
DragSelectingState,
EditingState,
ExpandingState,
CollapsingState,
AnimatingState
};

State state() const;
void setState(State state);

void scheduleDelayedItemsLayout();
void executeDelayedItemsLayout();

void setDirtyRegion(const QRegion &region);
void scrollDirtyRegion(int dx, int dy);
QPoint dirtyRegionOffset() const;

void startAutoScroll();
void stopAutoScroll();
void doAutoScroll();

bool focusNextPrevChild(bool next);
bool event(QEvent *event);
bool viewportEvent(QEvent *event);
void mousePressEvent(QMouseEvent *event);
void mouseMoveEvent(QMouseEvent *event);
void mouseReleaseEvent(QMouseEvent *event);
void mouseDoubleClickEvent(QMouseEvent *event);

# 332 "/home/eagle/qt-copy/include/QtGui/qabstractitemview.h"
void dragEnterEvent(QDragEnterEvent *event);
void dragMoveEvent(QDragMoveEvent *event);
void dragLeaveEvent(QDragLeaveEvent *event);
void dropEvent(QDropEvent *event);

# 337 "/home/eagle/qt-copy/include/QtGui/qabstractitemview.h"
void focusInEvent(QFocusEvent *event);
void focusOutEvent(QFocusEvent *event);
void keyPressEvent(QKeyEvent *event);
void resizeEvent(QResizeEvent *event);
void timerEvent(QTimerEvent *event);
void inputMethodEvent(QInputMethodEvent *event);


# 345 "/home/eagle/qt-copy/include/QtGui/qabstractitemview.h"
enum DropIndicatorPosition { OnItem, AboveItem, BelowItem, OnViewport };
DropIndicatorPosition dropIndicatorPosition() const;


# 349 "/home/eagle/qt-copy/include/QtGui/qabstractitemview.h"
private:
inline QAbstractItemViewPrivate* d_func() { return reinterpret_cast<QAbstractItemViewPrivate *>(d_ptr); } inline const QAbstractItemViewPrivate* d_func() const { return reinterpret_cast<const QAbstractItemViewPrivate *>(d_ptr); } friend class QAbstractItemViewPrivate;
QAbstractItemView(const QAbstractItemView &); QAbstractItemView &operator=(const QAbstractItemView &);







friend class QTreeViewPrivate; 
friend class QAccessibleItemRow;
};

inline QFlags<QAbstractItemView::EditTriggers::enum_type> operator|(QAbstractItemView::EditTriggers::enum_type f1, QAbstractItemView::EditTriggers::enum_type f2) { return QFlags<QAbstractItemView::EditTriggers::enum_type>(f1) | f2; } inline QFlags<QAbstractItemView::EditTriggers::enum_type> operator|(QAbstractItemView::EditTriggers::enum_type f1, QFlags<QAbstractItemView::EditTriggers::enum_type> f2) { return f2 | f1; }



# 367 "/home/eagle/qt-copy/include/QtGui/qabstractitemview.h"





# 51 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qabstractproxymodel.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qabstractitemmodel.h"

































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qabstractproxymodel.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qabstractproxymodel.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qabstractproxymodel.h"
class QAbstractProxyModelPrivate;
class QItemSelection;

class  QAbstractProxyModel : public QAbstractItemModel
{
Q_OBJECT

public:
QAbstractProxyModel(QObject *parent = 0);
~QAbstractProxyModel();

virtual void setSourceModel(QAbstractItemModel *sourceModel);
QAbstractItemModel *sourceModel() const;

virtual QModelIndex mapToSource(const QModelIndex &proxyIndex) const = 0;
virtual QModelIndex mapFromSource(const QModelIndex &sourceIndex) const = 0;

virtual QItemSelection mapSelectionToSource(const QItemSelection &selection) const;
virtual QItemSelection mapSelectionFromSource(const QItemSelection &selection) const;

bool submit();
void revert();

QVariant data(const QModelIndex &proxyIndex, int role = Qt::DisplayRole) const;
QVariant headerData(int section, Qt::Orientation orientation, int role) const;
QMap<int, QVariant> itemData(const QModelIndex &index) const;
Qt::ItemFlags flags(const QModelIndex &index) const;

bool setData(const QModelIndex &index, const QVariant &value, int role = Qt::EditRole);
bool setHeaderData(int section, Qt::Orientation orientation, const QVariant &value, int role = Qt::EditRole);

protected:
QAbstractProxyModel(QAbstractProxyModelPrivate &, QObject *parent);

private:
inline QAbstractProxyModelPrivate* d_func() { return reinterpret_cast<QAbstractProxyModelPrivate *>(d_ptr); } inline const QAbstractProxyModelPrivate* d_func() const { return reinterpret_cast<const QAbstractProxyModelPrivate *>(d_ptr); } friend class QAbstractProxyModelPrivate;
QAbstractProxyModel(const QAbstractProxyModel &); QAbstractProxyModel &operator=(const QAbstractProxyModel &);

};



# 99 "/home/eagle/qt-copy/include/QtGui/qabstractproxymodel.h"





# 52 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qcolumnview.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qabstractitemview.h"



















































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qcolumnview.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qcolumnview.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qcolumnview.h"
class QColumnViewPrivate;

class  QColumnView : public QAbstractItemView {

Q_OBJECT
Q_PROPERTY(bool resizeGripsVisible READ resizeGripsVisible WRITE setResizeGripsVisible)

signals:
void updatePreviewWidget(const QModelIndex &index);

public:
explicit QColumnView(QWidget *parent = 0);
~QColumnView();


QModelIndex indexAt(const QPoint &point) const;
void scrollTo(const QModelIndex &index, ScrollHint hint = EnsureVisible);
QSize sizeHint() const;
QRect visualRect(const QModelIndex &index) const;
void setModel(QAbstractItemModel *model);
void setSelectionModel(QItemSelectionModel * selectionModel);
void setRootIndex(const QModelIndex &index);
void selectAll();


void setResizeGripsVisible(bool visible);
bool resizeGripsVisible() const;

QWidget *previewWidget() const;
void setPreviewWidget(QWidget *widget);

void setColumnWidths(const QList<int> &list);
QList<int> columnWidths() const;

protected:
QColumnView(QColumnViewPrivate &dd, QWidget *parent = 0);


bool isIndexHidden(const QModelIndex &index) const;
QModelIndex moveCursor(CursorAction cursorAction, Qt::KeyboardModifiers modifiers);
void resizeEvent(QResizeEvent *event);
void setSelection(const QRect & rect, QItemSelectionModel::SelectionFlags command);
QRegion visualRegionForSelection(const QItemSelection &selection) const;
int horizontalOffset() const;
int verticalOffset() const;
void scrollContentsBy(int dx, int dy);


virtual QAbstractItemView* createColumn(const QModelIndex &rootIndex);
void initializeColumn(QAbstractItemView *column) const;

protected slots:

void currentChanged(const QModelIndex &current, const QModelIndex &previous);

private:
inline QColumnViewPrivate* d_func() { return reinterpret_cast<QColumnViewPrivate *>(d_ptr); } inline const QColumnViewPrivate* d_func() const { return reinterpret_cast<const QColumnViewPrivate *>(d_ptr); } friend class QColumnViewPrivate;
QColumnView(const QColumnView &); QColumnView &operator=(const QColumnView &);



};



# 122 "/home/eagle/qt-copy/include/QtGui/qcolumnview.h"






# 53 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qdatawidgetmapper.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qdatawidgetmapper.h"




# 51 "/home/eagle/qt-copy/include/QtGui/qdatawidgetmapper.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QAbstractItemDelegate;
class QAbstractItemModel;
class QModelIndex;
class QDataWidgetMapperPrivate;

class  QDataWidgetMapper: public QObject
{
Q_OBJECT

Q_ENUMS(SubmitPolicy)
Q_PROPERTY(int currentIndex READ currentIndex WRITE setCurrentIndex NOTIFY currentIndexChanged)
Q_PROPERTY(Qt::Orientation orientation READ orientation WRITE setOrientation)
Q_PROPERTY(SubmitPolicy submitPolicy READ submitPolicy WRITE setSubmitPolicy)

public:
QDataWidgetMapper(QObject *parent = 0);
~QDataWidgetMapper();

void setModel(QAbstractItemModel *model);
QAbstractItemModel *model() const;

void setItemDelegate(QAbstractItemDelegate *delegate);
QAbstractItemDelegate *itemDelegate() const;

void setRootIndex(const QModelIndex &index);
QModelIndex rootIndex() const;

void setOrientation(Qt::Orientation aOrientation);
Qt::Orientation orientation() const;

enum SubmitPolicy { AutoSubmit, ManualSubmit };
void setSubmitPolicy(SubmitPolicy policy);
SubmitPolicy submitPolicy() const;

void addMapping(QWidget *widget, int section);
void addMapping(QWidget *widget, int section, const QByteArray &propertyName);
void removeMapping(QWidget *widget);
int mappedSection(QWidget *widget) const;
QByteArray mappedPropertyName(QWidget *widget) const;
QWidget *mappedWidgetAt(int section) const;
void clearMapping();

int currentIndex() const;

public slots:
void revert();
bool submit();

void toFirst();
void toLast();
void toNext();
void toPrevious();
virtual void setCurrentIndex(int index);
void setCurrentModelIndex(const QModelIndex &index);

signals:
void currentIndexChanged(int index);

private:
inline QDataWidgetMapperPrivate* d_func() { return reinterpret_cast<QDataWidgetMapperPrivate *>(d_ptr); } inline const QDataWidgetMapperPrivate* d_func() const { return reinterpret_cast<const QDataWidgetMapperPrivate *>(d_ptr); } friend class QDataWidgetMapperPrivate;
QDataWidgetMapper(const QDataWidgetMapper &); QDataWidgetMapper &operator=(const QDataWidgetMapper &);




};








# 54 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qdirmodel.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qabstractitemmodel.h"

































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qdirmodel.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qdir.h"










































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qdirmodel.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qfileiconprovider.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qicon.h"















































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qfileiconprovider.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qfileinfo.h"





























































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qfileiconprovider.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qfileiconprovider.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 58 "/home/eagle/qt-copy/include/QtGui/qfileiconprovider.h"
class QFileIconProviderPrivate;

class  QFileIconProvider
{
public:
QFileIconProvider();
virtual ~QFileIconProvider();
enum IconType { Computer, Desktop, Trashcan, Network, Drive, Folder, File };
virtual QIcon icon(IconType type) const;
virtual QIcon icon(const QFileInfo &info) const;
virtual QString type(const QFileInfo &info) const;

private:
inline QFileIconProviderPrivate* d_func() { return reinterpret_cast<QFileIconProviderPrivate *>(d_ptr); } inline const QFileIconProviderPrivate* d_func() const { return reinterpret_cast<const QFileIconProviderPrivate *>(d_ptr); } friend class QFileIconProviderPrivate;
QFileIconProviderPrivate *d_ptr;
QFileIconProvider(const QFileIconProvider &); QFileIconProvider &operator=(const QFileIconProvider &);
};



# 78 "/home/eagle/qt-copy/include/QtGui/qfileiconprovider.h"






# 49 "/home/eagle/qt-copy/include/QtGui/qdirmodel.h"


# 51 "/home/eagle/qt-copy/include/QtGui/qdirmodel.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 59 "/home/eagle/qt-copy/include/QtGui/qdirmodel.h"
class QDirModelPrivate;

class  QDirModel : public QAbstractItemModel
{
Q_OBJECT
Q_PROPERTY(bool resolveSymlinks READ resolveSymlinks WRITE setResolveSymlinks)
Q_PROPERTY(bool readOnly READ isReadOnly WRITE setReadOnly)
Q_PROPERTY(bool lazyChildCount READ lazyChildCount WRITE setLazyChildCount)

public:
enum Roles {
FileIconRole = Qt::DecorationRole,
FilePathRole = Qt::UserRole + 1,
FileNameRole
};

QDirModel(const QStringList &nameFilters, QDir::Filters filters,
QDir::SortFlags sort, QObject *parent = 0);
explicit QDirModel(QObject *parent = 0);
~QDirModel();

QModelIndex index(int row, int column, const QModelIndex &parent = QModelIndex()) const;
QModelIndex parent(const QModelIndex &child) const;

int rowCount(const QModelIndex &parent = QModelIndex()) const;
int columnCount(const QModelIndex &parent = QModelIndex()) const;

QVariant data(const QModelIndex &index, int role = Qt::DisplayRole) const;
bool setData(const QModelIndex &index, const QVariant &value, int role = Qt::EditRole);

QVariant headerData(int section, Qt::Orientation orientation, int role = Qt::DisplayRole) const;

bool hasChildren(const QModelIndex &index = QModelIndex()) const;
Qt::ItemFlags flags(const QModelIndex &index) const;

void sort(int column, Qt::SortOrder order = Qt::AscendingOrder);

QStringList mimeTypes() const;
QMimeData *mimeData(const QModelIndexList &indexes) const;
bool dropMimeData(const QMimeData *data, Qt::DropAction action,
int row, int column, const QModelIndex &parent);
Qt::DropActions supportedDropActions() const;



void setIconProvider(QFileIconProvider *provider);
QFileIconProvider *iconProvider() const;

void setNameFilters(const QStringList &filters);
QStringList nameFilters() const;

void setFilter(QDir::Filters filters);
QDir::Filters filter() const;

void setSorting(QDir::SortFlags sort);
QDir::SortFlags sorting() const;

void setResolveSymlinks(bool enable);
bool resolveSymlinks() const;

void setReadOnly(bool enable);
bool isReadOnly() const;

void setLazyChildCount(bool enable);
bool lazyChildCount() const;

QModelIndex index(const QString &path, int column = 0) const;

bool isDir(const QModelIndex &index) const;
QModelIndex mkdir(const QModelIndex &parent, const QString &name);
bool rmdir(const QModelIndex &index);
bool remove(const QModelIndex &index);

QString filePath(const QModelIndex &index) const;
QString fileName(const QModelIndex &index) const;
QIcon fileIcon(const QModelIndex &index) const;
QFileInfo fileInfo(const QModelIndex &index) const;


# 138 "/home/eagle/qt-copy/include/QtGui/qdirmodel.h"
inline QObject *parent() const { return QObject::parent(); }




# 143 "/home/eagle/qt-copy/include/QtGui/qdirmodel.h"
public slots:
void refresh(const QModelIndex &parent = QModelIndex());

protected:
QDirModel(QDirModelPrivate &, QObject *parent = 0);
friend class QFileDialogPrivate;

private:
inline QDirModelPrivate* d_func() { return reinterpret_cast<QDirModelPrivate *>(d_ptr); } inline const QDirModelPrivate* d_func() const { return reinterpret_cast<const QDirModelPrivate *>(d_ptr); } friend class QDirModelPrivate;
QDirModel(const QDirModel &); QDirModel &operator=(const QDirModel &);

};



# 158 "/home/eagle/qt-copy/include/QtGui/qdirmodel.h"





# 55 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qfileiconprovider.h"



















































































# 56 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qheaderview.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qabstractitemview.h"



















































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qheaderview.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qheaderview.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qheaderview.h"
class QHeaderViewPrivate;
class QStyleOptionHeader;

class  QHeaderView : public QAbstractItemView
{
Q_OBJECT
Q_PROPERTY(bool showSortIndicator READ isSortIndicatorShown WRITE setSortIndicatorShown)
Q_PROPERTY(bool highlightSections READ highlightSections WRITE setHighlightSections)
Q_PROPERTY(bool stretchLastSection READ stretchLastSection WRITE setStretchLastSection)
Q_PROPERTY(bool cascadingSectionResizes READ cascadingSectionResizes WRITE setCascadingSectionResizes)
Q_PROPERTY(int defaultSectionSize READ defaultSectionSize WRITE setDefaultSectionSize)
Q_PROPERTY(int minimumSectionSize READ minimumSectionSize WRITE setMinimumSectionSize)
Q_PROPERTY(Qt::Alignment defaultAlignment READ defaultAlignment WRITE setDefaultAlignment)
Q_ENUMS(ResizeMode)

public:

enum ResizeMode
{
Interactive,
Stretch,
Fixed,
ResizeToContents,
Custom = Fixed
};

explicit QHeaderView(Qt::Orientation orientation, QWidget *parent = 0);
virtual ~QHeaderView();

void setModel(QAbstractItemModel *model);

Qt::Orientation orientation() const;
int offset() const;
int length() const;
QSize sizeHint() const;
int sectionSizeHint(int logicalIndex) const;

int visualIndexAt(int position) const;
int logicalIndexAt(int position) const;

inline int logicalIndexAt(int x, int y) const;
inline int logicalIndexAt(const QPoint &pos) const;

int sectionSize(int logicalIndex) const;
int sectionPosition(int logicalIndex) const;
int sectionViewportPosition(int logicalIndex) const;

void moveSection(int from, int to);
void swapSections(int first, int second);
void resizeSection(int logicalIndex, int size);
void resizeSections(QHeaderView::ResizeMode mode);

bool isSectionHidden(int logicalIndex) const;
void setSectionHidden(int logicalIndex, bool hide);
int hiddenSectionCount() const;

inline void hideSection(int logicalIndex);
inline void showSection(int logicalIndex);

int count() const;
int visualIndex(int logicalIndex) const;
int logicalIndex(int visualIndex) const;

void setMovable(bool movable);
bool isMovable() const;

void setClickable(bool clickable);
bool isClickable() const;

void setHighlightSections(bool highlight);
bool highlightSections() const;

void setResizeMode(ResizeMode mode);
void setResizeMode(int logicalIndex, ResizeMode mode);
ResizeMode resizeMode(int logicalIndex) const;
int stretchSectionCount() const;

void setSortIndicatorShown(bool show);
bool isSortIndicatorShown() const;

void setSortIndicator(int logicalIndex, Qt::SortOrder order);
int sortIndicatorSection() const;
Qt::SortOrder sortIndicatorOrder() const;

bool stretchLastSection() const;
void setStretchLastSection(bool stretch);

bool cascadingSectionResizes() const;
void setCascadingSectionResizes(bool enable);

int defaultSectionSize() const;
void setDefaultSectionSize(int size);

int minimumSectionSize() const;
void setMinimumSectionSize(int size);

Qt::Alignment defaultAlignment() const;
void setDefaultAlignment(Qt::Alignment alignment);

void doItemsLayout();
bool sectionsMoved() const;
bool sectionsHidden() const;


# 161 "/home/eagle/qt-copy/include/QtGui/qheaderview.h"
QByteArray saveState() const;
bool restoreState(const QByteArray &state);


# 165 "/home/eagle/qt-copy/include/QtGui/qheaderview.h"
void reset();

public slots:
void setOffset(int offset);
void setOffsetToSectionPosition(int visualIndex);
void setOffsetToLastSection();
void headerDataChanged(Qt::Orientation orientation, int logicalFirst, int logicalLast);

signals:
void sectionMoved(int logicalIndex, int oldVisualIndex, int newVisualIndex);
void sectionResized(int logicalIndex, int oldSize, int newSize);
void sectionPressed(int logicalIndex);
void sectionClicked(int logicalIndex);
void sectionEntered(int logicalIndex);
void sectionDoubleClicked(int logicalIndex);
void sectionCountChanged(int oldCount, int newCount);
void sectionHandleDoubleClicked(int logicalIndex);
void sectionAutoResize(int logicalIndex, QHeaderView::ResizeMode mode);
void geometriesChanged();
void sortIndicatorChanged(int logicalIndex, Qt::SortOrder order);

protected slots:
void updateSection(int logicalIndex);
void resizeSections();
void sectionsInserted(const QModelIndex &parent, int logicalFirst, int logicalLast);
void sectionsAboutToBeRemoved(const QModelIndex &parent, int logicalFirst, int logicalLast);

protected:
QHeaderView(QHeaderViewPrivate &dd, Qt::Orientation orientation, QWidget *parent = 0);
void initialize();

void initializeSections();
void initializeSections(int start, int end);
void currentChanged(const QModelIndex &current, const QModelIndex &old);

bool event(QEvent *e);
void paintEvent(QPaintEvent *e);
void mousePressEvent(QMouseEvent *e);
void mouseMoveEvent(QMouseEvent *e);
void mouseReleaseEvent(QMouseEvent *e);
void mouseDoubleClickEvent(QMouseEvent *e);
bool viewportEvent(QEvent *e);

virtual void paintSection(QPainter *painter, const QRect &rect, int logicalIndex) const;
virtual QSize sectionSizeFromContents(int logicalIndex) const;

int horizontalOffset() const;
int verticalOffset() const;
void updateGeometries();
void scrollContentsBy(int dx, int dy);

void dataChanged(const QModelIndex &topLeft, const QModelIndex &bottomRight);
void rowsInserted(const QModelIndex &parent, int start, int end);

QRect visualRect(const QModelIndex &index) const;
void scrollTo(const QModelIndex &index, ScrollHint hint);

QModelIndex indexAt(const QPoint &p) const;
bool isIndexHidden(const QModelIndex &index) const;

QModelIndex moveCursor(CursorAction, Qt::KeyboardModifiers);
void setSelection(const QRect&, QItemSelectionModel::SelectionFlags);
QRegion visualRegionForSelection(const QItemSelection &selection) const;
void initStyleOption(QStyleOptionHeader *option) const;

private:



inline QHeaderViewPrivate* d_func() { return reinterpret_cast<QHeaderViewPrivate *>(d_ptr); } inline const QHeaderViewPrivate* d_func() const { return reinterpret_cast<const QHeaderViewPrivate *>(d_ptr); } friend class QHeaderViewPrivate;
QHeaderView(const QHeaderView &); QHeaderView &operator=(const QHeaderView &);
};

inline int QHeaderView::logicalIndexAt(int ax, int ay) const
{ return orientation() == Qt::Horizontal ? logicalIndexAt(ax) : logicalIndexAt(ay); }
inline int QHeaderView::logicalIndexAt(const QPoint &apos) const
{ return logicalIndexAt(apos.x(), apos.y()); }
inline void QHeaderView::hideSection(int alogicalIndex)
{ setSectionHidden(alogicalIndex, true); }
inline void QHeaderView::showSection(int alogicalIndex)
{ setSectionHidden(alogicalIndex, false); }



# 249 "/home/eagle/qt-copy/include/QtGui/qheaderview.h"





# 57 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qitemdelegate.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qabstractitemdelegate.h"








































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qitemdelegate.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qitemdelegate.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qpixmap.h"











































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qitemdelegate.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qvariant.h"






















































































































































































































































































































































































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtGui/qitemdelegate.h"


# 52 "/home/eagle/qt-copy/include/QtGui/qitemdelegate.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 60 "/home/eagle/qt-copy/include/QtGui/qitemdelegate.h"
class QItemDelegatePrivate;
class QItemEditorFactory;

class  QItemDelegate : public QAbstractItemDelegate
{
Q_OBJECT
Q_PROPERTY(bool clipping READ hasClipping WRITE setClipping)

public:
explicit QItemDelegate(QObject *parent = 0);
~QItemDelegate();

bool hasClipping() const;
void setClipping(bool clip);


void paint(QPainter *painter,
const QStyleOptionViewItem &option,
const QModelIndex &index) const;
QSize sizeHint(const QStyleOptionViewItem &option,
const QModelIndex &index) const;


QWidget *createEditor(QWidget *parent,
const QStyleOptionViewItem &option,
const QModelIndex &index) const;

void setEditorData(QWidget *editor, const QModelIndex &index) const;
void setModelData(QWidget *editor, QAbstractItemModel *model, const QModelIndex &index) const;

void updateEditorGeometry(QWidget *editor,
const QStyleOptionViewItem &option,
const QModelIndex &index) const;


QItemEditorFactory *itemEditorFactory() const;
void setItemEditorFactory(QItemEditorFactory *factory);

protected:
virtual void drawDisplay(QPainter *painter, const QStyleOptionViewItem &option,
const QRect &rect, const QString &text) const;
virtual void drawDecoration(QPainter *painter, const QStyleOptionViewItem &option,
const QRect &rect, const QPixmap &pixmap) const;
virtual void drawFocus(QPainter *painter, const QStyleOptionViewItem &option,
const QRect &rect) const;
virtual void drawCheck(QPainter *painter, const QStyleOptionViewItem &option,
const QRect &rect, Qt::CheckState state) const;
void drawBackground(QPainter *painter, const QStyleOptionViewItem &option,
const QModelIndex &index) const;

void doLayout(const QStyleOptionViewItem &option,
QRect *checkRect, QRect *iconRect, QRect *textRect, bool hint) const;

QRect rect(const QStyleOptionViewItem &option, const QModelIndex &index, int role) const;

bool eventFilter(QObject *object, QEvent *event);
bool editorEvent(QEvent *event, QAbstractItemModel *model,
const QStyleOptionViewItem &option, const QModelIndex &index);

QStyleOptionViewItem setOptions(const QModelIndex &index,
const QStyleOptionViewItem &option) const;

QPixmap decoration(const QStyleOptionViewItem &option, const QVariant &variant) const;
QPixmap *selected(const QPixmap &pixmap, const QPalette &palette, bool enabled) const;

QRect check(const QStyleOptionViewItem &option, const QRect &bounding,
const QVariant &variant) const;
QRect textRectangle(QPainter *painter, const QRect &rect,
const QFont &font, const QString &text) const;

private:
inline QItemDelegatePrivate* d_func() { return reinterpret_cast<QItemDelegatePrivate *>(d_ptr); } inline const QItemDelegatePrivate* d_func() const { return reinterpret_cast<const QItemDelegatePrivate *>(d_ptr); } friend class QItemDelegatePrivate;
QItemDelegate(const QItemDelegate &); QItemDelegate &operator=(const QItemDelegate &);


};



# 139 "/home/eagle/qt-copy/include/QtGui/qitemdelegate.h"





# 58 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qitemeditorfactory.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qmetaobject.h"










































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qitemeditorfactory.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"












































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qitemeditorfactory.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qhash.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qitemeditorfactory.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qvariant.h"






















































































































































































































































































































































































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtGui/qitemeditorfactory.h"


# 52 "/home/eagle/qt-copy/include/QtGui/qitemeditorfactory.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 60 "/home/eagle/qt-copy/include/QtGui/qitemeditorfactory.h"
class QWidget;

class  QItemEditorCreatorBase
{
public:
virtual ~QItemEditorCreatorBase() {}

virtual QWidget *createWidget(QWidget *parent) const = 0;
virtual QByteArray valuePropertyName() const = 0;
};

template <class T>
class QItemEditorCreator : public QItemEditorCreatorBase
{
public:
inline QItemEditorCreator(const QByteArray &valuePropertyName);
inline QWidget *createWidget(QWidget *parent) const { return new T(parent); }
inline QByteArray valuePropertyName() const { return propertyName; }

private:
QByteArray propertyName;
};

template <class T>
class QStandardItemEditorCreator: public QItemEditorCreatorBase
{
public:
inline QStandardItemEditorCreator()
: propertyName(T::staticMetaObject.userProperty().name())
{}
inline QWidget *createWidget(QWidget *parent) const { return new T(parent); }
inline QByteArray valuePropertyName() const { return propertyName; }

private:
QByteArray propertyName;
};


template <class T>
inline QItemEditorCreator<T>::QItemEditorCreator(const QByteArray &avaluePropertyName)
: propertyName(avaluePropertyName) {}

class  QItemEditorFactory
{
public:
inline QItemEditorFactory() {}
virtual ~QItemEditorFactory();

virtual QWidget *createEditor(QVariant::Type type, QWidget *parent) const;
virtual QByteArray valuePropertyName(QVariant::Type type) const;

void registerEditor(QVariant::Type type, QItemEditorCreatorBase *creator);

static const QItemEditorFactory *defaultFactory();
static void setDefaultFactory(QItemEditorFactory *factory);

private:
QHash<QVariant::Type, QItemEditorCreatorBase *> creatorMap;
};



# 122 "/home/eagle/qt-copy/include/QtGui/qitemeditorfactory.h"





# 59 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qitemselectionmodel.h"







































































































































































































































# 60 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qlistview.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qabstractitemview.h"



















































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qlistview.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qlistview.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qlistview.h"
class QListViewPrivate;

class  QListView : public QAbstractItemView
{
Q_OBJECT
Q_ENUMS(Movement Flow ResizeMode LayoutMode ViewMode)
Q_PROPERTY(Movement movement READ movement WRITE setMovement)
Q_PROPERTY(Flow flow READ flow WRITE setFlow)
Q_PROPERTY(bool isWrapping READ isWrapping WRITE setWrapping)
Q_PROPERTY(ResizeMode resizeMode READ resizeMode WRITE setResizeMode)
Q_PROPERTY(LayoutMode layoutMode READ layoutMode WRITE setLayoutMode)
Q_PROPERTY(int spacing READ spacing WRITE setSpacing)
Q_PROPERTY(QSize gridSize READ gridSize WRITE setGridSize)
Q_PROPERTY(ViewMode viewMode READ viewMode WRITE setViewMode)
Q_PROPERTY(int modelColumn READ modelColumn WRITE setModelColumn)
Q_PROPERTY(bool uniformItemSizes READ uniformItemSizes WRITE setUniformItemSizes)
Q_PROPERTY(int batchSize READ batchSize WRITE setBatchSize)
Q_PROPERTY(bool wordWrap READ wordWrap WRITE setWordWrap)
Q_PROPERTY(bool selectionRectVisible READ isSelectionRectVisible WRITE setSelectionRectVisible)

public:
enum Movement { Static, Free, Snap };
enum Flow { LeftToRight, TopToBottom };
enum ResizeMode { Fixed, Adjust };
enum LayoutMode { SinglePass, Batched };
enum ViewMode { ListMode, IconMode };

explicit QListView(QWidget *parent = 0);
~QListView();

void setMovement(Movement movement);
Movement movement() const;

void setFlow(Flow flow);
Flow flow() const;

void setWrapping(bool enable);
bool isWrapping() const;

void setResizeMode(ResizeMode mode);
ResizeMode resizeMode() const;

void setLayoutMode(LayoutMode mode);
LayoutMode layoutMode() const;

void setSpacing(int space);
int spacing() const;

void setBatchSize(int batchSize);
int batchSize() const;

void setGridSize(const QSize &size);
QSize gridSize() const;

void setViewMode(ViewMode mode);
ViewMode viewMode() const;

void clearPropertyFlags();

bool isRowHidden(int row) const;
void setRowHidden(int row, bool hide);

void setModelColumn(int column);
int modelColumn() const;

void setUniformItemSizes(bool enable);
bool uniformItemSizes() const;

void setWordWrap(bool on);
bool wordWrap() const;

void setSelectionRectVisible(bool show);
bool isSelectionRectVisible() const;

QRect visualRect(const QModelIndex &index) const;
void scrollTo(const QModelIndex &index, ScrollHint hint = EnsureVisible);
QModelIndex indexAt(const QPoint &p) const;

void doItemsLayout();
void reset();
void setRootIndex(const QModelIndex &index);

signals:
void indexesMoved(const QModelIndexList &indexes);

protected:
QListView(QListViewPrivate &, QWidget *parent = 0);

bool event(QEvent *e);

void scrollContentsBy(int dx, int dy);

void resizeContents(int width, int height);
QSize contentsSize() const;

void dataChanged(const QModelIndex &topLeft, const QModelIndex &bottomRight);
void rowsInserted(const QModelIndex &parent, int start, int end);
void rowsAboutToBeRemoved(const QModelIndex &parent, int start, int end);

void mouseMoveEvent(QMouseEvent *e);
void mouseReleaseEvent(QMouseEvent *e);

void timerEvent(QTimerEvent *e);
void resizeEvent(QResizeEvent *e);

# 162 "/home/eagle/qt-copy/include/QtGui/qlistview.h"
void dragMoveEvent(QDragMoveEvent *e);
void dragLeaveEvent(QDragLeaveEvent *e);
void dropEvent(QDropEvent *e);
void startDrag(Qt::DropActions supportedActions);

void internalDrop(QDropEvent *e);
void internalDrag(Qt::DropActions supportedActions);


# 171 "/home/eagle/qt-copy/include/QtGui/qlistview.h"
QStyleOptionViewItem viewOptions() const;
void paintEvent(QPaintEvent *e);

int horizontalOffset() const;
int verticalOffset() const;
QModelIndex moveCursor(CursorAction cursorAction, Qt::KeyboardModifiers modifiers);
QRect rectForIndex(const QModelIndex &index) const;
void setPositionForIndex(const QPoint &position, const QModelIndex &index);

void setSelection(const QRect &rect, QItemSelectionModel::SelectionFlags command);
QRegion visualRegionForSelection(const QItemSelection &selection) const;
QModelIndexList selectedIndexes() const;

void updateGeometries();

bool isIndexHidden(const QModelIndex &index) const;

void selectionChanged(const QItemSelection &selected, const QItemSelection &deselected);
void currentChanged(const QModelIndex &current, const QModelIndex &previous);

private:
friend class QAccessibleItemView;
int visualIndex(const QModelIndex &index) const;

inline QListViewPrivate* d_func() { return reinterpret_cast<QListViewPrivate *>(d_ptr); } inline const QListViewPrivate* d_func() const { return reinterpret_cast<const QListViewPrivate *>(d_ptr); } friend class QListViewPrivate;
QListView(const QListView &); QListView &operator=(const QListView &);
};



# 201 "/home/eagle/qt-copy/include/QtGui/qlistview.h"





# 61 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qlistwidget.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qlistview.h"













































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qlistwidget.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qvariant.h"






















































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qlistwidget.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qvector.h"































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qlistwidget.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qitemselectionmodel.h"







































































































































































































































# 50 "/home/eagle/qt-copy/include/QtGui/qlistwidget.h"


# 52 "/home/eagle/qt-copy/include/QtGui/qlistwidget.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 60 "/home/eagle/qt-copy/include/QtGui/qlistwidget.h"
class QListWidget;
class QListModel;
class QWidgetItemData;
class QListWidgetItemPrivate;

class  QListWidgetItem
{
friend class QListModel;
friend class QListWidget;
public:
enum ItemType { Type = 0, UserType = 1000 };
explicit QListWidgetItem(QListWidget *view = 0, int type = Type);
explicit QListWidgetItem(const QString &text, QListWidget *view = 0, int type = Type);
explicit QListWidgetItem(const QIcon &icon, const QString &text,
QListWidget *view = 0, int type = Type);
QListWidgetItem(const QListWidgetItem &other);
virtual ~QListWidgetItem();

virtual QListWidgetItem *clone() const;

inline QListWidget *listWidget() const { return view; }

inline void setSelected(bool select);
inline bool isSelected() const;

inline void setHidden(bool hide);
inline bool isHidden() const;

inline Qt::ItemFlags flags() const { return itemFlags; }
void setFlags(Qt::ItemFlags flags);

inline QString text() const
{ return data(Qt::DisplayRole).toString(); }
inline void setText(const QString &text);

inline QIcon icon() const
{ return qvariant_cast<QIcon>(data(Qt::DecorationRole)); }
inline void setIcon(const QIcon &icon);

inline QString statusTip() const
{ return data(Qt::StatusTipRole).toString(); }
inline void setStatusTip(const QString &statusTip);


# 104 "/home/eagle/qt-copy/include/QtGui/qlistwidget.h"
inline QString toolTip() const
{ return data(Qt::ToolTipRole).toString(); }
inline void setToolTip(const QString &toolTip);



# 110 "/home/eagle/qt-copy/include/QtGui/qlistwidget.h"
inline QString whatsThis() const
{ return data(Qt::WhatsThisRole).toString(); }
inline void setWhatsThis(const QString &whatsThis);


# 115 "/home/eagle/qt-copy/include/QtGui/qlistwidget.h"
inline QFont font() const
{ return qvariant_cast<QFont>(data(Qt::FontRole)); }
inline void setFont(const QFont &font);

inline int textAlignment() const
{ return data(Qt::TextAlignmentRole).toInt(); }
inline void setTextAlignment(int alignment)
{ setData(Qt::TextAlignmentRole, alignment); }

inline QColor backgroundColor() const
{ return qvariant_cast<QColor>(data(Qt::BackgroundColorRole)); }
virtual void setBackgroundColor(const QColor &color)
{ setData(Qt::BackgroundColorRole, color); }

inline QBrush background() const
{ return qvariant_cast<QBrush>(data(Qt::BackgroundRole)); }
inline void setBackground(const QBrush &brush)
{ setData(Qt::BackgroundRole, brush); }

inline QColor textColor() const
{ return qvariant_cast<QColor>(data(Qt::TextColorRole)); }
inline void setTextColor(const QColor &color)
{ setData(Qt::TextColorRole, color); }

inline QBrush foreground() const
{ return qvariant_cast<QBrush>(data(Qt::ForegroundRole)); }
inline void setForeground(const QBrush &brush)
{ setData(Qt::ForegroundRole, brush); }

inline Qt::CheckState checkState() const
{ return static_cast<Qt::CheckState>(data(Qt::CheckStateRole).toInt()); }
inline void setCheckState(Qt::CheckState state)
{ setData(Qt::CheckStateRole, state); }

inline QSize sizeHint() const
{ return qvariant_cast<QSize>(data(Qt::SizeHintRole)); }
inline void setSizeHint(const QSize &size)
{ setData(Qt::SizeHintRole, size); }

virtual QVariant data(int role) const;
virtual void setData(int role, const QVariant &value);

virtual bool operator<(const QListWidgetItem &other) const;


# 160 "/home/eagle/qt-copy/include/QtGui/qlistwidget.h"
virtual void read(QDataStream &in);
virtual void write(QDataStream &out) const;

# 163 "/home/eagle/qt-copy/include/QtGui/qlistwidget.h"
QListWidgetItem &operator=(const QListWidgetItem &other);

inline int type() const { return rtti; }

private:
int rtti;
QVector<void *> dummy;
QListWidget *view;
QListWidgetItemPrivate *d;
Qt::ItemFlags itemFlags;
};

inline void QListWidgetItem::setText(const QString &atext)
{ setData(Qt::DisplayRole, atext); }

inline void QListWidgetItem::setIcon(const QIcon &aicon)
{ setData(Qt::DecorationRole, aicon); }

inline void QListWidgetItem::setStatusTip(const QString &astatusTip)
{ setData(Qt::StatusTipRole, astatusTip); }


# 185 "/home/eagle/qt-copy/include/QtGui/qlistwidget.h"
inline void QListWidgetItem::setToolTip(const QString &atoolTip)
{ setData(Qt::ToolTipRole, atoolTip); }



# 190 "/home/eagle/qt-copy/include/QtGui/qlistwidget.h"
inline void QListWidgetItem::setWhatsThis(const QString &awhatsThis)
{ setData(Qt::WhatsThisRole, awhatsThis); }


# 194 "/home/eagle/qt-copy/include/QtGui/qlistwidget.h"
inline void QListWidgetItem::setFont(const QFont &afont)
{ setData(Qt::FontRole, afont); }


# 198 "/home/eagle/qt-copy/include/QtGui/qlistwidget.h"
 QDataStream &operator<<(QDataStream &out, const QListWidgetItem &item);
 QDataStream &operator>>(QDataStream &in, QListWidgetItem &item);


# 202 "/home/eagle/qt-copy/include/QtGui/qlistwidget.h"
class QListWidgetPrivate;

class  QListWidget : public QListView
{
Q_OBJECT
Q_PROPERTY(int count READ count)
Q_PROPERTY(int currentRow READ currentRow WRITE setCurrentRow NOTIFY currentRowChanged USER true)
Q_PROPERTY(bool sortingEnabled READ isSortingEnabled WRITE setSortingEnabled)

friend class QListWidgetItem;
friend class QListModel;
public:
explicit QListWidget(QWidget *parent = 0);
~QListWidget();

QListWidgetItem *item(int row) const;
int row(const QListWidgetItem *item) const;
void insertItem(int row, QListWidgetItem *item);
void insertItem(int row, const QString &label);
void insertItems(int row, const QStringList &labels);
inline void addItem(const QString &label) { insertItem(count(), label); }
inline void addItem(QListWidgetItem *item);
inline void addItems(const QStringList &labels) { insertItems(count(), labels); }
QListWidgetItem *takeItem(int row);
int count() const;

QListWidgetItem *currentItem() const;
void setCurrentItem(QListWidgetItem *item);
void setCurrentItem(QListWidgetItem *item, QItemSelectionModel::SelectionFlags command);

int currentRow() const;
void setCurrentRow(int row);
void setCurrentRow(int row, QItemSelectionModel::SelectionFlags command);

QListWidgetItem *itemAt(const QPoint &p) const;
inline QListWidgetItem *itemAt(int x, int y) const;
QRect visualItemRect(const QListWidgetItem *item) const;

void sortItems(Qt::SortOrder order = Qt::AscendingOrder);
void setSortingEnabled(bool enable);
bool isSortingEnabled() const;

void editItem(QListWidgetItem *item);
void openPersistentEditor(QListWidgetItem *item);
void closePersistentEditor(QListWidgetItem *item);

QWidget *itemWidget(QListWidgetItem *item) const;
void setItemWidget(QListWidgetItem *item, QWidget *widget);
inline void removeItemWidget(QListWidgetItem *item);

bool isItemSelected(const QListWidgetItem *item) const;
void setItemSelected(const QListWidgetItem *item, bool select);
QList<QListWidgetItem*> selectedItems() const;
QList<QListWidgetItem*> findItems(const QString &text, Qt::MatchFlags flags) const;

bool isItemHidden(const QListWidgetItem *item) const;
void setItemHidden(const QListWidgetItem *item, bool hide);
void dropEvent(QDropEvent *event);

public slots:
void scrollToItem(const QListWidgetItem *item, QAbstractItemView::ScrollHint hint = EnsureVisible);
void clear();

signals:
void itemPressed(QListWidgetItem *item);
void itemClicked(QListWidgetItem *item);
void itemDoubleClicked(QListWidgetItem *item);
void itemActivated(QListWidgetItem *item);
void itemEntered(QListWidgetItem *item);
void itemChanged(QListWidgetItem *item);

void currentItemChanged(QListWidgetItem *current, QListWidgetItem *previous);
void currentTextChanged(const QString &currentText);
void currentRowChanged(int currentRow);

void itemSelectionChanged();

protected:
bool event(QEvent *e);
virtual QStringList mimeTypes() const;
virtual QMimeData *mimeData(const QList<QListWidgetItem*> items) const;

# 284 "/home/eagle/qt-copy/include/QtGui/qlistwidget.h"
virtual bool dropMimeData(int index, const QMimeData *data, Qt::DropAction action);
virtual Qt::DropActions supportedDropActions() const;

# 287 "/home/eagle/qt-copy/include/QtGui/qlistwidget.h"
QList<QListWidgetItem*> items(const QMimeData *data) const;

QModelIndex indexFromItem(QListWidgetItem *item) const;
QListWidgetItem *itemFromIndex(const QModelIndex &index) const;

private:
void setModel(QAbstractItemModel *model);
Qt::SortOrder sortOrder() const;

inline QListWidgetPrivate* d_func() { return reinterpret_cast<QListWidgetPrivate *>(d_ptr); } inline const QListWidgetPrivate* d_func() const { return reinterpret_cast<const QListWidgetPrivate *>(d_ptr); } friend class QListWidgetPrivate;
QListWidget(const QListWidget &); QListWidget &operator=(const QListWidget &);










};

inline void QListWidget::removeItemWidget(QListWidgetItem *aItem)
{ setItemWidget(aItem, 0); }

inline void QListWidget::addItem(QListWidgetItem *aitem)
{ insertItem(count(), aitem); }

inline QListWidgetItem *QListWidget::itemAt(int ax, int ay) const
{ return itemAt(QPoint(ax, ay)); }

inline void QListWidgetItem::setSelected(bool aselect)
{ if (view) view->setItemSelected(this, aselect); }

inline bool QListWidgetItem::isSelected() const
{ return (view ? view->isItemSelected(this) : false); }

inline void QListWidgetItem::setHidden(bool ahide)
{ if (view) view->setItemHidden(this, ahide); }

inline bool QListWidgetItem::isHidden() const
{ return (view ? view->isItemHidden(this) : false); }



# 333 "/home/eagle/qt-copy/include/QtGui/qlistwidget.h"





# 62 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qproxymodel.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qabstractitemmodel.h"

































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qproxymodel.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qproxymodel.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qproxymodel.h"
class QProxyModelPrivate;

class  QProxyModel : public QAbstractItemModel
{
Q_OBJECT

public:
explicit QProxyModel(QObject *parent = 0);
~QProxyModel();

virtual void setModel(QAbstractItemModel *model);
QAbstractItemModel *model() const;



QModelIndex index(int row, int column, const QModelIndex &parent) const;
QModelIndex parent(const QModelIndex &child) const;

int rowCount(const QModelIndex &parent) const;
int columnCount(const QModelIndex &parent) const;
bool hasChildren(const QModelIndex &parent) const;

QVariant data(const QModelIndex &index, int role) const;
bool setData(const QModelIndex &index, const QVariant &value, int role);

QVariant headerData(int section, Qt::Orientation orientation, int role) const;
bool setHeaderData(int section, Qt::Orientation orientation, const QVariant &value,
int role);

QStringList mimeTypes() const;
QMimeData *mimeData(const QModelIndexList &indexes) const;
bool dropMimeData(const QMimeData *data, Qt::DropAction action,
int row, int column, const QModelIndex &parent);
Qt::DropActions supportedDropActions() const;

bool insertRows(int row, int count, const QModelIndex &parent);
bool insertColumns(int column, int count, const QModelIndex &parent);

void fetchMore(const QModelIndex &parent);
Qt::ItemFlags flags(const QModelIndex &index) const;

void sort(int column, Qt::SortOrder order);

QModelIndexList match(const QModelIndex &start, int role, const QVariant &value,
int hits, Qt::MatchFlags flags) const;

QSize span(const QModelIndex &index) const;

bool submit();
void revert();


# 109 "/home/eagle/qt-copy/include/QtGui/qproxymodel.h"
inline QObject *parent() const { return QObject::parent(); }




# 114 "/home/eagle/qt-copy/include/QtGui/qproxymodel.h"
protected:
QProxyModel(QProxyModelPrivate &, QObject *parent = 0);

QModelIndex setProxyModel(const QModelIndex &source_index) const;
QModelIndex setSourceModel(const QModelIndex &proxy_index) const;

void connectToModel(const QAbstractItemModel *model) const;
void disconnectFromModel(const QAbstractItemModel *model) const;

private: 
inline QProxyModelPrivate* d_func() { return reinterpret_cast<QProxyModelPrivate *>(d_ptr); } inline const QProxyModelPrivate* d_func() const { return reinterpret_cast<const QProxyModelPrivate *>(d_ptr); } friend class QProxyModelPrivate;
QProxyModel(const QProxyModel &); QProxyModel &operator=(const QProxyModel &);










};



# 140 "/home/eagle/qt-copy/include/QtGui/qproxymodel.h"





# 63 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qsortfilterproxymodel.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qabstractproxymodel.h"







































































































# 47 "/home/eagle/qt-copy/include/QtGui/qsortfilterproxymodel.h"




# 1 "/home/eagle/qt-copy/include/QtCore/qregexp.h"

























































































































































# 51 "/home/eagle/qt-copy/include/QtGui/qsortfilterproxymodel.h"


# 53 "/home/eagle/qt-copy/include/QtGui/qsortfilterproxymodel.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QSortFilterProxyModelPrivate;
class QSortFilterProxyModelLessThan;
class QSortFilterProxyModelGreaterThan;

class  QSortFilterProxyModel : public QAbstractProxyModel
{
friend class QSortFilterProxyModelLessThan;
friend class QSortFilterProxyModelGreaterThan;

Q_OBJECT
Q_PROPERTY(QRegExp filterRegExp READ filterRegExp WRITE setFilterRegExp)
Q_PROPERTY(int filterKeyColumn READ filterKeyColumn WRITE setFilterKeyColumn)
Q_PROPERTY(bool dynamicSortFilter READ dynamicSortFilter WRITE setDynamicSortFilter)
Q_PROPERTY(Qt::CaseSensitivity filterCaseSensitivity READ filterCaseSensitivity WRITE setFilterCaseSensitivity)
Q_PROPERTY(Qt::CaseSensitivity sortCaseSensitivity READ sortCaseSensitivity WRITE setSortCaseSensitivity)
Q_PROPERTY(bool isSortLocaleAware READ isSortLocaleAware WRITE setSortLocaleAware)
Q_PROPERTY(int sortRole READ sortRole WRITE setSortRole)
Q_PROPERTY(int filterRole READ filterRole WRITE setFilterRole)

public:
QSortFilterProxyModel(QObject *parent = 0);
~QSortFilterProxyModel();

void setSourceModel(QAbstractItemModel *sourceModel);

QModelIndex mapToSource(const QModelIndex &proxyIndex) const;
QModelIndex mapFromSource(const QModelIndex &sourceIndex) const;

QItemSelection mapSelectionToSource(const QItemSelection &proxySelection) const;
QItemSelection mapSelectionFromSource(const QItemSelection &sourceSelection) const;

QRegExp filterRegExp() const;
void setFilterRegExp(const QRegExp &regExp);

int filterKeyColumn() const;
void setFilterKeyColumn(int column);

Qt::CaseSensitivity filterCaseSensitivity() const;
void setFilterCaseSensitivity(Qt::CaseSensitivity cs);

Qt::CaseSensitivity sortCaseSensitivity() const;
void setSortCaseSensitivity(Qt::CaseSensitivity cs);

bool isSortLocaleAware() const;
void setSortLocaleAware(bool on);

bool dynamicSortFilter() const;
void setDynamicSortFilter(bool enable);

int sortRole() const;
void setSortRole(int role);

int filterRole() const;
void setFilterRole(int role);

public slots:
void setFilterRegExp(const QString &pattern);
void setFilterWildcard(const QString &pattern);
void setFilterFixedString(const QString &pattern);
void clear();
void invalidate();

protected:
virtual bool filterAcceptsRow(int source_row, const QModelIndex &source_parent) const;
virtual bool filterAcceptsColumn(int source_column, const QModelIndex &source_parent) const;
virtual bool lessThan(const QModelIndex &left, const QModelIndex &right) const;

void filterChanged();
void invalidateFilter();

public:

# 131 "/home/eagle/qt-copy/include/QtGui/qsortfilterproxymodel.h"
inline QObject *parent() const { return QObject::parent(); }




# 136 "/home/eagle/qt-copy/include/QtGui/qsortfilterproxymodel.h"
QModelIndex index(int row, int column, const QModelIndex &parent = QModelIndex()) const;
QModelIndex parent(const QModelIndex &child) const;

int rowCount(const QModelIndex &parent = QModelIndex()) const;
int columnCount(const QModelIndex &parent = QModelIndex()) const;
bool hasChildren(const QModelIndex &parent = QModelIndex()) const;

QVariant data(const QModelIndex &index, int role = Qt::DisplayRole) const;
bool setData(const QModelIndex &index, const QVariant &value, int role = Qt::EditRole);

QVariant headerData(int section, Qt::Orientation orientation, int role = Qt::EditRole) const;
bool setHeaderData(int section, Qt::Orientation orientation,
const QVariant &value, int role = Qt::EditRole);

QMimeData *mimeData(const QModelIndexList &indexes) const;
bool dropMimeData(const QMimeData *data, Qt::DropAction action,
int row, int column, const QModelIndex &parent);

bool insertRows(int row, int count, const QModelIndex &parent = QModelIndex());
bool insertColumns(int column, int count, const QModelIndex &parent = QModelIndex());
bool removeRows(int row, int count, const QModelIndex &parent = QModelIndex());
bool removeColumns(int column, int count, const QModelIndex &parent = QModelIndex());

void fetchMore(const QModelIndex &parent);
bool canFetchMore(const QModelIndex &parent) const;
Qt::ItemFlags flags(const QModelIndex &index) const;

QModelIndex buddy(const QModelIndex &index) const;
QModelIndexList match(const QModelIndex &start, int role,
const QVariant &value, int hits = 1,
Qt::MatchFlags flags =
Qt::MatchFlags(Qt::MatchStartsWith|Qt::MatchWrap)) const;
QSize span(const QModelIndex &index) const;
void sort(int column, Qt::SortOrder order = Qt::AscendingOrder);

QStringList mimeTypes() const;
Qt::DropActions supportedDropActions() const;
private:
inline QSortFilterProxyModelPrivate* d_func() { return reinterpret_cast<QSortFilterProxyModelPrivate *>(d_ptr); } inline const QSortFilterProxyModelPrivate* d_func() const { return reinterpret_cast<const QSortFilterProxyModelPrivate *>(d_ptr); } friend class QSortFilterProxyModelPrivate;
QSortFilterProxyModel(const QSortFilterProxyModel &); QSortFilterProxyModel &operator=(const QSortFilterProxyModel &);














};








# 64 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qstandarditemmodel.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qabstractitemmodel.h"

































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qstandarditemmodel.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qbrush.h"

























































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qstandarditemmodel.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qfont.h"

































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qstandarditemmodel.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qicon.h"















































































































































# 50 "/home/eagle/qt-copy/include/QtGui/qstandarditemmodel.h"


# 1 "/home/eagle/qt-copy/include/QtCore/qdatastream.h"









































































































































































































































































































































































































































# 52 "/home/eagle/qt-copy/include/QtGui/qstandarditemmodel.h"



# 55 "/home/eagle/qt-copy/include/QtGui/qstandarditemmodel.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 63 "/home/eagle/qt-copy/include/QtGui/qstandarditemmodel.h"
template <class T> class QList;

class QStandardItemModel;

class QStandardItemPrivate;
class  QStandardItem
{
public:
QStandardItem();
QStandardItem(const QString &text);
QStandardItem(const QIcon &icon, const QString &text);
QStandardItem(int rows, int columns = 1);
virtual ~QStandardItem();

virtual QVariant data(int role = Qt::UserRole + 1) const;
virtual void setData(const QVariant &value, int role = Qt::UserRole + 1);

inline QString text() const {
return qvariant_cast<QString>(data(Qt::DisplayRole));
}
inline void setText(const QString &text);

inline QIcon icon() const {
return qvariant_cast<QIcon>(data(Qt::DecorationRole));
}
inline void setIcon(const QIcon &icon);


# 91 "/home/eagle/qt-copy/include/QtGui/qstandarditemmodel.h"
inline QString toolTip() const {
return qvariant_cast<QString>(data(Qt::ToolTipRole));
}
inline void setToolTip(const QString &toolTip);



# 98 "/home/eagle/qt-copy/include/QtGui/qstandarditemmodel.h"
inline QString statusTip() const {
return qvariant_cast<QString>(data(Qt::StatusTipRole));
}
inline void setStatusTip(const QString &statusTip);



# 105 "/home/eagle/qt-copy/include/QtGui/qstandarditemmodel.h"
inline QString whatsThis() const {
return qvariant_cast<QString>(data(Qt::WhatsThisRole));
}
inline void setWhatsThis(const QString &whatsThis);


# 111 "/home/eagle/qt-copy/include/QtGui/qstandarditemmodel.h"
inline QSize sizeHint() const {
return qvariant_cast<QSize>(data(Qt::SizeHintRole));
}
inline void setSizeHint(const QSize &sizeHint);

inline QFont font() const {
return qvariant_cast<QFont>(data(Qt::FontRole));
}
inline void setFont(const QFont &font);

inline Qt::Alignment textAlignment() const {
return Qt::Alignment(qvariant_cast<int>(data(Qt::TextAlignmentRole)));
}
inline void setTextAlignment(Qt::Alignment textAlignment);

inline QBrush background() const {
return qvariant_cast<QBrush>(data(Qt::BackgroundRole));
}
inline void setBackground(const QBrush &brush);

inline QBrush foreground() const {
return qvariant_cast<QBrush>(data(Qt::ForegroundRole));
}
inline void setForeground(const QBrush &brush);

inline Qt::CheckState checkState() const {
return Qt::CheckState(qvariant_cast<int>(data(Qt::CheckStateRole)));
}
inline void setCheckState(Qt::CheckState checkState);

inline QString accessibleText() const {
return qvariant_cast<QString>(data(Qt::AccessibleTextRole));
}
inline void setAccessibleText(const QString &accessibleText);

inline QString accessibleDescription() const {
return qvariant_cast<QString>(data(Qt::AccessibleDescriptionRole));
}
inline void setAccessibleDescription(const QString &accessibleDescription);

Qt::ItemFlags flags() const;
void setFlags(Qt::ItemFlags flags);

inline bool isEnabled() const {
return (flags() & Qt::ItemIsEnabled) != 0;
}
void setEnabled(bool enabled);

inline bool isEditable() const {
return (flags() & Qt::ItemIsEditable) != 0;
}
void setEditable(bool editable);

inline bool isSelectable() const {
return (flags() & Qt::ItemIsSelectable) != 0;
}
void setSelectable(bool selectable);

inline bool isCheckable() const {
return (flags() & Qt::ItemIsUserCheckable) != 0;
}
void setCheckable(bool checkable);

inline bool isTristate() const {
return (flags() & Qt::ItemIsTristate) != 0;
}
void setTristate(bool tristate);


# 180 "/home/eagle/qt-copy/include/QtGui/qstandarditemmodel.h"
inline bool isDragEnabled() const {
return (flags() & Qt::ItemIsDragEnabled) != 0;
}
void setDragEnabled(bool dragEnabled);

inline bool isDropEnabled() const {
return (flags() & Qt::ItemIsDropEnabled) != 0;
}
void setDropEnabled(bool dropEnabled);


# 191 "/home/eagle/qt-copy/include/QtGui/qstandarditemmodel.h"
QStandardItem *parent() const;
int row() const;
int column() const;
QModelIndex index() const;
QStandardItemModel *model() const;

int rowCount() const;
void setRowCount(int rows);
int columnCount() const;
void setColumnCount(int columns);

bool hasChildren() const;
QStandardItem *child(int row, int column = 0) const;
void setChild(int row, int column, QStandardItem *item);
inline void setChild(int row, QStandardItem *item);

void insertRow(int row, const QList<QStandardItem*> &items);
void insertColumn(int column, const QList<QStandardItem*> &items);
void insertRows(int row, const QList<QStandardItem*> &items);
void insertRows(int row, int count);
void insertColumns(int column, int count);

void removeRow(int row);
void removeColumn(int column);
void removeRows(int row, int count);
void removeColumns(int column, int count);

inline void appendRow(const QList<QStandardItem*> &items);
inline void appendRows(const QList<QStandardItem*> &items);
inline void appendColumn(const QList<QStandardItem*> &items);
inline void insertRow(int row, QStandardItem *item);
inline void appendRow(QStandardItem *item);

QStandardItem *takeChild(int row, int column = 0);
QList<QStandardItem*> takeRow(int row);
QList<QStandardItem*> takeColumn(int column);

void sortChildren(int column, Qt::SortOrder order = Qt::AscendingOrder);

virtual QStandardItem *clone() const;

enum ItemType { Type = 0, UserType = 1000 };
virtual int type() const;


# 236 "/home/eagle/qt-copy/include/QtGui/qstandarditemmodel.h"
virtual void read(QDataStream &in);
virtual void write(QDataStream &out) const;

# 239 "/home/eagle/qt-copy/include/QtGui/qstandarditemmodel.h"
virtual bool operator<(const QStandardItem &other) const;

protected:
QStandardItem(const QStandardItem &other);
QStandardItem(QStandardItemPrivate &dd);
QStandardItem &operator=(const QStandardItem &other);
QStandardItemPrivate *d_ptr;

void emitDataChanged();

private:
inline QStandardItemPrivate* d_func() { return reinterpret_cast<QStandardItemPrivate *>(d_ptr); } inline const QStandardItemPrivate* d_func() const { return reinterpret_cast<const QStandardItemPrivate *>(d_ptr); } friend class QStandardItemPrivate;
friend class QStandardItemModelPrivate;
friend class QStandardItemModel;
};

inline void QStandardItem::setText(const QString &atext)
{ setData(atext, Qt::DisplayRole); }

inline void QStandardItem::setIcon(const QIcon &aicon)
{ setData(aicon, Qt::DecorationRole); }


# 262 "/home/eagle/qt-copy/include/QtGui/qstandarditemmodel.h"
inline void QStandardItem::setToolTip(const QString &atoolTip)
{ setData(atoolTip, Qt::ToolTipRole); }



# 267 "/home/eagle/qt-copy/include/QtGui/qstandarditemmodel.h"
inline void QStandardItem::setStatusTip(const QString &astatusTip)
{ setData(astatusTip, Qt::StatusTipRole); }



# 272 "/home/eagle/qt-copy/include/QtGui/qstandarditemmodel.h"
inline void QStandardItem::setWhatsThis(const QString &awhatsThis)
{ setData(awhatsThis, Qt::WhatsThisRole); }


# 276 "/home/eagle/qt-copy/include/QtGui/qstandarditemmodel.h"
inline void QStandardItem::setSizeHint(const QSize &asizeHint)
{ setData(asizeHint, Qt::SizeHintRole); }

inline void QStandardItem::setFont(const QFont &afont)
{ setData(afont, Qt::FontRole); }

inline void QStandardItem::setTextAlignment(Qt::Alignment atextAlignment)
{ setData(int(atextAlignment), Qt::TextAlignmentRole); }

inline void QStandardItem::setBackground(const QBrush &abrush)
{ setData(abrush, Qt::BackgroundRole); }

inline void QStandardItem::setForeground(const QBrush &abrush)
{ setData(abrush, Qt::ForegroundRole); }

inline void QStandardItem::setCheckState(Qt::CheckState acheckState)
{ setData(acheckState, Qt::CheckStateRole); }

inline void QStandardItem::setAccessibleText(const QString &aaccessibleText)
{ setData(aaccessibleText, Qt::AccessibleTextRole); }

inline void QStandardItem::setAccessibleDescription(const QString &aaccessibleDescription)
{ setData(aaccessibleDescription, Qt::AccessibleDescriptionRole); }

inline void QStandardItem::setChild(int arow, QStandardItem *aitem)
{ setChild(arow, 0, aitem); }

inline void QStandardItem::appendRow(const QList<QStandardItem*> &aitems)
{ insertRow(rowCount(), aitems); }

inline void QStandardItem::appendRows(const QList<QStandardItem*> &aitems)
{ insertRows(rowCount(), aitems); }

inline void QStandardItem::appendColumn(const QList<QStandardItem*> &aitems)
{ insertColumn(columnCount(), aitems); }

inline void QStandardItem::insertRow(int arow, QStandardItem *aitem)
{ insertRow(arow, QList<QStandardItem*>() << aitem); }

inline void QStandardItem::appendRow(QStandardItem *aitem)
{ insertRow(rowCount(), aitem); }

class QStandardItemModelPrivate;

class  QStandardItemModel : public QAbstractItemModel
{
Q_OBJECT
Q_PROPERTY(int sortRole READ sortRole WRITE setSortRole)

public:
explicit QStandardItemModel(QObject *parent = 0);
QStandardItemModel(int rows, int columns, QObject *parent = 0);
~QStandardItemModel();

QModelIndex index(int row, int column, const QModelIndex &parent = QModelIndex()) const;
QModelIndex parent(const QModelIndex &child) const;

int rowCount(const QModelIndex &parent = QModelIndex()) const;
int columnCount(const QModelIndex &parent = QModelIndex()) const;
bool hasChildren(const QModelIndex &parent = QModelIndex()) const;

QVariant data(const QModelIndex &index, int role = Qt::DisplayRole) const;
bool setData(const QModelIndex &index, const QVariant &value, int role = Qt::EditRole);

QVariant headerData(int section, Qt::Orientation orientation,
int role = Qt::DisplayRole) const;
bool setHeaderData(int section, Qt::Orientation orientation, const QVariant &value,
int role = Qt::EditRole);

bool insertRows(int row, int count, const QModelIndex &parent = QModelIndex());
bool insertColumns(int column, int count, const QModelIndex &parent = QModelIndex());
bool removeRows(int row, int count, const QModelIndex &parent = QModelIndex());
bool removeColumns(int column, int count, const QModelIndex &parent = QModelIndex());

Qt::ItemFlags flags(const QModelIndex &index) const;
Qt::DropActions supportedDropActions() const;

QMap<int, QVariant> itemData(const QModelIndex &index) const;
bool setItemData(const QModelIndex &index, const QMap<int, QVariant> &roles);

void clear();


# 359 "/home/eagle/qt-copy/include/QtGui/qstandarditemmodel.h"
inline QObject *parent() const { return QObject::parent(); }




# 364 "/home/eagle/qt-copy/include/QtGui/qstandarditemmodel.h"
void sort(int column, Qt::SortOrder order = Qt::AscendingOrder);

QStandardItem *itemFromIndex(const QModelIndex &index) const;
QModelIndex indexFromItem(const QStandardItem *item) const;

QStandardItem *item(int row, int column = 0) const;
void setItem(int row, int column, QStandardItem *item);
inline void setItem(int row, QStandardItem *item);
QStandardItem *invisibleRootItem() const;

QStandardItem *horizontalHeaderItem(int column) const;
void setHorizontalHeaderItem(int column, QStandardItem *item);
QStandardItem *verticalHeaderItem(int row) const;
void setVerticalHeaderItem(int row, QStandardItem *item);

void setHorizontalHeaderLabels(const QStringList &labels);
void setVerticalHeaderLabels(const QStringList &labels);

void setRowCount(int rows);
void setColumnCount(int columns);

void appendRow(const QList<QStandardItem*> &items);
void appendColumn(const QList<QStandardItem*> &items);
inline void appendRow(QStandardItem *item);

void insertRow(int row, const QList<QStandardItem*> &items);
void insertColumn(int column, const QList<QStandardItem*> &items);
inline void insertRow(int row, QStandardItem *item);

inline bool insertRow(int row, const QModelIndex &parent = QModelIndex());
inline bool insertColumn(int column, const QModelIndex &parent = QModelIndex());

QStandardItem *takeItem(int row, int column = 0);
QList<QStandardItem*> takeRow(int row);
QList<QStandardItem*> takeColumn(int column);

QStandardItem *takeHorizontalHeaderItem(int column);
QStandardItem *takeVerticalHeaderItem(int row);

const QStandardItem *itemPrototype() const;
void setItemPrototype(const QStandardItem *item);

QList<QStandardItem*> findItems(const QString &text,
Qt::MatchFlags flags = Qt::MatchExactly,
int column = 0) const;

int sortRole() const;
void setSortRole(int role);

signals:
void itemChanged(QStandardItem *item);

protected:
QStandardItemModel(QStandardItemModelPrivate &dd, QObject *parent = 0);

private:
friend class QStandardItemPrivate;
friend class QStandardItem;
QStandardItemModel(const QStandardItemModel &); QStandardItemModel &operator=(const QStandardItemModel &);
inline QStandardItemModelPrivate* d_func() { return reinterpret_cast<QStandardItemModelPrivate *>(d_ptr); } inline const QStandardItemModelPrivate* d_func() const { return reinterpret_cast<const QStandardItemModelPrivate *>(d_ptr); } friend class QStandardItemModelPrivate;


};

inline void QStandardItemModel::setItem(int arow, QStandardItem *aitem)
{ setItem(arow, 0, aitem); }

inline void QStandardItemModel::appendRow(QStandardItem *aitem)
{ appendRow(QList<QStandardItem*>() << aitem); }

inline void QStandardItemModel::insertRow(int arow, QStandardItem *aitem)
{ insertRow(arow, QList<QStandardItem*>() << aitem); }

inline bool QStandardItemModel::insertRow(int arow, const QModelIndex &aparent)
{ return QAbstractItemModel::insertRow(arow, aparent); }
inline bool QStandardItemModel::insertColumn(int acolumn, const QModelIndex &aparent)
{ return QAbstractItemModel::insertColumn(acolumn, aparent); }


# 443 "/home/eagle/qt-copy/include/QtGui/qstandarditemmodel.h"
 QDataStream &operator>>(QDataStream &in, QStandardItem &item);
 QDataStream &operator<<(QDataStream &out, const QStandardItem &item);




# 449 "/home/eagle/qt-copy/include/QtGui/qstandarditemmodel.h"





# 65 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qstringlistmodel.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"
















































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qstringlistmodel.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qabstractitemview.h"



















































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qstringlistmodel.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qstringlistmodel.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 58 "/home/eagle/qt-copy/include/QtGui/qstringlistmodel.h"
class  QStringListModel : public QAbstractListModel
{
Q_OBJECT
public:
explicit QStringListModel(QObject *parent = 0);
QStringListModel(const QStringList &strings, QObject *parent = 0);

int rowCount(const QModelIndex &parent = QModelIndex()) const;

QVariant data(const QModelIndex &index, int role) const;
bool setData(const QModelIndex &index, const QVariant &value, int role = Qt::EditRole);

Qt::ItemFlags flags(const QModelIndex &index) const;

bool insertRows(int row, int count, const QModelIndex &parent = QModelIndex());
bool removeRows(int row, int count, const QModelIndex &parent = QModelIndex());

void sort(int column, Qt::SortOrder order = Qt::AscendingOrder);

QStringList stringList() const;
void setStringList(const QStringList &strings);

Qt::DropActions supportedDropActions() const;

private:
QStringListModel(const QStringListModel &); QStringListModel &operator=(const QStringListModel &);
QStringList lst;
};



# 89 "/home/eagle/qt-copy/include/QtGui/qstringlistmodel.h"





# 66 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qstyleditemdelegate.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qabstractitemdelegate.h"








































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qstyleditemdelegate.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qstyleditemdelegate.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qpixmap.h"











































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qstyleditemdelegate.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qvariant.h"






















































































































































































































































































































































































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtGui/qstyleditemdelegate.h"


# 52 "/home/eagle/qt-copy/include/QtGui/qstyleditemdelegate.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 60 "/home/eagle/qt-copy/include/QtGui/qstyleditemdelegate.h"
class QStyledItemDelegatePrivate;
class QItemEditorFactory;

class  QStyledItemDelegate : public QAbstractItemDelegate
{
Q_OBJECT

public:
explicit QStyledItemDelegate(QObject *parent = 0);
~QStyledItemDelegate();


void paint(QPainter *painter,
const QStyleOptionViewItem &option, const QModelIndex &index) const;
QSize sizeHint(const QStyleOptionViewItem &option,
const QModelIndex &index) const;


QWidget *createEditor(QWidget *parent,
const QStyleOptionViewItem &option,
const QModelIndex &index) const;

void setEditorData(QWidget *editor, const QModelIndex &index) const;
void setModelData(QWidget *editor,
QAbstractItemModel *model,
const QModelIndex &index) const;

void updateEditorGeometry(QWidget *editor,
const QStyleOptionViewItem &option,
const QModelIndex &index) const;


QItemEditorFactory *itemEditorFactory() const;
void setItemEditorFactory(QItemEditorFactory *factory);

virtual QString displayText(const QVariant &value, const QLocale &locale) const;

protected:
virtual void initStyleOption(QStyleOptionViewItem *option,
const QModelIndex &index) const;

bool eventFilter(QObject *object, QEvent *event);
bool editorEvent(QEvent *event, QAbstractItemModel *model,
const QStyleOptionViewItem &option, const QModelIndex &index);

private:
inline QStyledItemDelegatePrivate* d_func() { return reinterpret_cast<QStyledItemDelegatePrivate *>(d_ptr); } inline const QStyledItemDelegatePrivate* d_func() const { return reinterpret_cast<const QStyledItemDelegatePrivate *>(d_ptr); } friend class QStyledItemDelegatePrivate;
QStyledItemDelegate(const QStyledItemDelegate &); QStyledItemDelegate &operator=(const QStyledItemDelegate &);


};



# 114 "/home/eagle/qt-copy/include/QtGui/qstyleditemdelegate.h"





# 67 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtableview.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qabstractitemview.h"



















































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qtableview.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qtableview.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qtableview.h"
class QHeaderView;
class QTableViewPrivate;

class  QTableView : public QAbstractItemView
{
Q_OBJECT
Q_PROPERTY(bool showGrid READ showGrid WRITE setShowGrid)
Q_PROPERTY(Qt::PenStyle gridStyle READ gridStyle WRITE setGridStyle)
Q_PROPERTY(bool sortingEnabled READ isSortingEnabled WRITE setSortingEnabled)
Q_PROPERTY(bool wordWrap READ wordWrap WRITE setWordWrap)
Q_PROPERTY(bool cornerButtonEnabled READ isCornerButtonEnabled WRITE setCornerButtonEnabled)

public:
explicit QTableView(QWidget *parent = 0);
~QTableView();

void setModel(QAbstractItemModel *model);
void setRootIndex(const QModelIndex &index);
void setSelectionModel(QItemSelectionModel *selectionModel);

QHeaderView *horizontalHeader() const;
QHeaderView *verticalHeader() const;
void setHorizontalHeader(QHeaderView *header);
void setVerticalHeader(QHeaderView *header);

int rowViewportPosition(int row) const;
int rowAt(int y) const;

void setRowHeight(int row, int height);
int rowHeight(int row) const;

int columnViewportPosition(int column) const;
int columnAt(int x) const;

void setColumnWidth(int column, int width);
int columnWidth(int column) const;

bool isRowHidden(int row) const;
void setRowHidden(int row, bool hide);

bool isColumnHidden(int column) const;
void setColumnHidden(int column, bool hide);

void setSortingEnabled(bool enable);
bool isSortingEnabled() const;

bool showGrid() const;

Qt::PenStyle gridStyle() const;
void setGridStyle(Qt::PenStyle style);

void setWordWrap(bool on);
bool wordWrap() const;

void setCornerButtonEnabled(bool enable);
bool isCornerButtonEnabled() const;

QRect visualRect(const QModelIndex &index) const;
void scrollTo(const QModelIndex &index, ScrollHint hint = EnsureVisible);
QModelIndex indexAt(const QPoint &p) const;

void setSpan(int row, int column, int rowSpan, int columnSpan);
int rowSpan(int row, int column) const;
int columnSpan(int row, int column) const;
void clearSpans();

void sortByColumn(int column, Qt::SortOrder order);

public slots:
void selectRow(int row);
void selectColumn(int column);
void hideRow(int row);
void hideColumn(int column);
void showRow(int row);
void showColumn(int column);
void resizeRowToContents(int row);
void resizeRowsToContents();
void resizeColumnToContents(int column);
void resizeColumnsToContents();
void sortByColumn(int column);
void setShowGrid(bool show);

protected slots:
void rowMoved(int row, int oldIndex, int newIndex);
void columnMoved(int column, int oldIndex, int newIndex);
void rowResized(int row, int oldHeight, int newHeight);
void columnResized(int column, int oldWidth, int newWidth);
void rowCountChanged(int oldCount, int newCount);
void columnCountChanged(int oldCount, int newCount);

protected:
QTableView(QTableViewPrivate &, QWidget *parent);
void scrollContentsBy(int dx, int dy);

QStyleOptionViewItem viewOptions() const;
void paintEvent(QPaintEvent *e);

void timerEvent(QTimerEvent *event);

int horizontalOffset() const;
int verticalOffset() const;
QModelIndex moveCursor(CursorAction cursorAction, Qt::KeyboardModifiers modifiers);

void setSelection(const QRect &rect, QItemSelectionModel::SelectionFlags command);
QRegion visualRegionForSelection(const QItemSelection &selection) const;
QModelIndexList selectedIndexes() const;

void updateGeometries();

int sizeHintForRow(int row) const;
int sizeHintForColumn(int column) const;

void verticalScrollbarAction(int action);
void horizontalScrollbarAction(int action);

bool isIndexHidden(const QModelIndex &index) const;

void selectionChanged(const QItemSelection &selected,
const QItemSelection &deselected);
void currentChanged(const QModelIndex &current,
const QModelIndex &previous);

private:
friend class QAccessibleItemView;
int visualIndex(const QModelIndex &index) const;

inline QTableViewPrivate* d_func() { return reinterpret_cast<QTableViewPrivate *>(d_ptr); } inline const QTableViewPrivate* d_func() const { return reinterpret_cast<const QTableViewPrivate *>(d_ptr); } friend class QTableViewPrivate;
QTableView(const QTableView &); QTableView &operator=(const QTableView &);


};



# 191 "/home/eagle/qt-copy/include/QtGui/qtableview.h"





# 68 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtablewidget.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qtableview.h"



































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qtablewidget.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qvariant.h"






















































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qtablewidget.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qvector.h"































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qtablewidget.h"

# 50 "/home/eagle/qt-copy/include/QtGui/qtablewidget.h"






typedef QtValidLicenseForGuiModule QtGuiModule;



# 60 "/home/eagle/qt-copy/include/QtGui/qtablewidget.h"
class  QTableWidgetSelectionRange
{
public:
QTableWidgetSelectionRange();
QTableWidgetSelectionRange(int top, int left, int bottom, int right);
QTableWidgetSelectionRange(const QTableWidgetSelectionRange &other);
~QTableWidgetSelectionRange();

inline int topRow() const { return top; }
inline int bottomRow() const { return bottom; }
inline int leftColumn() const { return left; }
inline int rightColumn() const { return right; }
inline int rowCount() const { return bottom - top + 1; }
inline int columnCount() const { return right - left + 1; }

private:
int top, left, bottom, right;
};

class QTableWidget;
class QTableModel;
class QWidgetItemData;
class QTableWidgetItemPrivate;

class  QTableWidgetItem
{
friend class QTableWidget;
friend class QTableModel;
public:
enum ItemType { Type = 0, UserType = 1000 };
QTableWidgetItem(int type = Type);
explicit QTableWidgetItem(const QString &text, int type = Type);
explicit QTableWidgetItem(const QIcon &icon, const QString &text, int type = Type);
QTableWidgetItem(const QTableWidgetItem &other);
virtual ~QTableWidgetItem();

virtual QTableWidgetItem *clone() const;

inline QTableWidget *tableWidget() const { return view; }

inline int row() const;
inline int column() const;

inline void setSelected(bool select);
inline bool isSelected() const;

inline Qt::ItemFlags flags() const { return itemFlags; }
void setFlags(Qt::ItemFlags flags);

inline QString text() const
{ return data(Qt::DisplayRole).toString(); }
inline void setText(const QString &text);

inline QIcon icon() const
{ return qvariant_cast<QIcon>(data(Qt::DecorationRole)); }
inline void setIcon(const QIcon &icon);

inline QString statusTip() const
{ return data(Qt::StatusTipRole).toString(); }
inline void setStatusTip(const QString &statusTip);


# 122 "/home/eagle/qt-copy/include/QtGui/qtablewidget.h"
inline QString toolTip() const
{ return data(Qt::ToolTipRole).toString(); }
inline void setToolTip(const QString &toolTip);



# 128 "/home/eagle/qt-copy/include/QtGui/qtablewidget.h"
inline QString whatsThis() const
{ return data(Qt::WhatsThisRole).toString(); }
inline void setWhatsThis(const QString &whatsThis);


# 133 "/home/eagle/qt-copy/include/QtGui/qtablewidget.h"
inline QFont font() const
{ return qvariant_cast<QFont>(data(Qt::FontRole)); }
inline void setFont(const QFont &font);

inline int textAlignment() const
{ return data(Qt::TextAlignmentRole).toInt(); }
inline void setTextAlignment(int alignment)
{ setData(Qt::TextAlignmentRole, alignment); }

inline QColor backgroundColor() const
{ return qvariant_cast<QColor>(data(Qt::BackgroundColorRole)); }
inline void setBackgroundColor(const QColor &color)
{ setData(Qt::BackgroundColorRole, color); }

inline QBrush background() const
{ return qvariant_cast<QBrush>(data(Qt::BackgroundRole)); }
inline void setBackground(const QBrush &brush)
{ setData(Qt::BackgroundRole, brush); }

inline QColor textColor() const
{ return qvariant_cast<QColor>(data(Qt::TextColorRole)); }
inline void setTextColor(const QColor &color)
{ setData(Qt::TextColorRole, color); }

inline QBrush foreground() const
{ return qvariant_cast<QBrush>(data(Qt::ForegroundRole)); }
inline void setForeground(const QBrush &brush)
{ setData(Qt::ForegroundRole, brush); }

inline Qt::CheckState checkState() const
{ return static_cast<Qt::CheckState>(data(Qt::CheckStateRole).toInt()); }
inline void setCheckState(Qt::CheckState state)
{ setData(Qt::CheckStateRole, state); }

inline QSize sizeHint() const
{ return qvariant_cast<QSize>(data(Qt::SizeHintRole)); }
inline void setSizeHint(const QSize &size)
{ setData(Qt::SizeHintRole, size); }

virtual QVariant data(int role) const;
virtual void setData(int role, const QVariant &value);

virtual bool operator<(const QTableWidgetItem &other) const;


# 178 "/home/eagle/qt-copy/include/QtGui/qtablewidget.h"
virtual void read(QDataStream &in);
virtual void write(QDataStream &out) const;

# 181 "/home/eagle/qt-copy/include/QtGui/qtablewidget.h"
QTableWidgetItem &operator=(const QTableWidgetItem &other);

inline int type() const { return rtti; }

private:
int rtti;
QVector<QWidgetItemData> values;
QTableWidget *view;
QTableWidgetItemPrivate *d;
Qt::ItemFlags itemFlags;
};

inline void QTableWidgetItem::setText(const QString &atext)
{ setData(Qt::DisplayRole, atext); }

inline void QTableWidgetItem::setIcon(const QIcon &aicon)
{ setData(Qt::DecorationRole, aicon); }

inline void QTableWidgetItem::setStatusTip(const QString &astatusTip)
{ setData(Qt::StatusTipRole, astatusTip); }


# 203 "/home/eagle/qt-copy/include/QtGui/qtablewidget.h"
inline void QTableWidgetItem::setToolTip(const QString &atoolTip)
{ setData(Qt::ToolTipRole, atoolTip); }



# 208 "/home/eagle/qt-copy/include/QtGui/qtablewidget.h"
inline void QTableWidgetItem::setWhatsThis(const QString &awhatsThis)
{ setData(Qt::WhatsThisRole, awhatsThis); }


# 212 "/home/eagle/qt-copy/include/QtGui/qtablewidget.h"
inline void QTableWidgetItem::setFont(const QFont &afont)
{ setData(Qt::FontRole, afont); }


# 216 "/home/eagle/qt-copy/include/QtGui/qtablewidget.h"
 QDataStream &operator>>(QDataStream &in, QTableWidgetItem &item);
 QDataStream &operator<<(QDataStream &out, const QTableWidgetItem &item);


# 220 "/home/eagle/qt-copy/include/QtGui/qtablewidget.h"
class QTableWidgetPrivate;

class  QTableWidget : public QTableView
{
Q_OBJECT
Q_PROPERTY(int rowCount READ rowCount WRITE setRowCount)
Q_PROPERTY(int columnCount READ columnCount WRITE setColumnCount)

friend class QTableModel;
public:
explicit QTableWidget(QWidget *parent = 0);
QTableWidget(int rows, int columns, QWidget *parent = 0);
~QTableWidget();

void setRowCount(int rows);
int rowCount() const;

void setColumnCount(int columns);
int columnCount() const;

int row(const QTableWidgetItem *item) const;
int column(const QTableWidgetItem *item) const;

QTableWidgetItem *item(int row, int column) const;
void setItem(int row, int column, QTableWidgetItem *item);
QTableWidgetItem *takeItem(int row, int column);

QTableWidgetItem *verticalHeaderItem(int row) const;
void setVerticalHeaderItem(int row, QTableWidgetItem *item);
QTableWidgetItem *takeVerticalHeaderItem(int row);

QTableWidgetItem *horizontalHeaderItem(int column) const;
void setHorizontalHeaderItem(int column, QTableWidgetItem *item);
QTableWidgetItem *takeHorizontalHeaderItem(int column);
void setVerticalHeaderLabels(const QStringList &labels);
void setHorizontalHeaderLabels(const QStringList &labels);

int currentRow() const;
int currentColumn() const;
QTableWidgetItem *currentItem() const;
void setCurrentItem(QTableWidgetItem *item);
void setCurrentItem(QTableWidgetItem *item, QItemSelectionModel::SelectionFlags command);
void setCurrentCell(int row, int column);
void setCurrentCell(int row, int column, QItemSelectionModel::SelectionFlags command);

void sortItems(int column, Qt::SortOrder order = Qt::AscendingOrder);
void setSortingEnabled(bool enable);
bool isSortingEnabled() const;

void editItem(QTableWidgetItem *item);
void openPersistentEditor(QTableWidgetItem *item);
void closePersistentEditor(QTableWidgetItem *item);

QWidget *cellWidget(int row, int column) const;
void setCellWidget(int row, int column, QWidget *widget);
inline void removeCellWidget(int row, int column);

bool isItemSelected(const QTableWidgetItem *item) const;
void setItemSelected(const QTableWidgetItem *item, bool select);
void setRangeSelected(const QTableWidgetSelectionRange &range, bool select);

QList<QTableWidgetSelectionRange> selectedRanges() const;
QList<QTableWidgetItem*> selectedItems();
QList<QTableWidgetItem*> findItems(const QString &text, Qt::MatchFlags flags) const;

int visualRow(int logicalRow) const;
int visualColumn(int logicalColumn) const;

QTableWidgetItem *itemAt(const QPoint &p) const;
inline QTableWidgetItem *itemAt(int x, int y) const;
QRect visualItemRect(const QTableWidgetItem *item) const;

const QTableWidgetItem *itemPrototype() const;
void setItemPrototype(const QTableWidgetItem *item);

public slots:
void scrollToItem(const QTableWidgetItem *item, QAbstractItemView::ScrollHint hint = EnsureVisible);
void insertRow(int row);
void insertColumn(int column);
void removeRow(int row);
void removeColumn(int column);
void clear();
void clearContents();

signals:
void itemPressed(QTableWidgetItem *item);
void itemClicked(QTableWidgetItem *item);
void itemDoubleClicked(QTableWidgetItem *item);

void itemActivated(QTableWidgetItem *item);
void itemEntered(QTableWidgetItem *item);
void itemChanged(QTableWidgetItem *item);

void currentItemChanged(QTableWidgetItem *current, QTableWidgetItem *previous);
void itemSelectionChanged();

void cellPressed(int row, int column);
void cellClicked(int row, int column);
void cellDoubleClicked(int row, int column);

void cellActivated(int row, int column);
void cellEntered(int row, int column);
void cellChanged(int row, int column);

void currentCellChanged(int currentRow, int currentColumn, int previousRow, int previousColumn);

protected:
bool event(QEvent *e);
virtual QStringList mimeTypes() const;
virtual QMimeData *mimeData(const QList<QTableWidgetItem*> items) const;
virtual bool dropMimeData(int row, int column, const QMimeData *data, Qt::DropAction action);
virtual Qt::DropActions supportedDropActions() const;
QList<QTableWidgetItem*> items(const QMimeData *data) const;

QModelIndex indexFromItem(QTableWidgetItem *item) const;
QTableWidgetItem *itemFromIndex(const QModelIndex &index) const;
void dropEvent(QDropEvent *event);

private:
void setModel(QAbstractItemModel *model);

inline QTableWidgetPrivate* d_func() { return reinterpret_cast<QTableWidgetPrivate *>(d_ptr); } inline const QTableWidgetPrivate* d_func() const { return reinterpret_cast<const QTableWidgetPrivate *>(d_ptr); } friend class QTableWidgetPrivate;
QTableWidget(const QTableWidget &); QTableWidget &operator=(const QTableWidget &);










};

inline void QTableWidget::removeCellWidget(int arow, int acolumn)
{ setCellWidget(arow, acolumn, 0); }

inline QTableWidgetItem *QTableWidget::itemAt(int ax, int ay) const
{ return itemAt(QPoint(ax, ay)); }

inline int QTableWidgetItem::row() const
{ return (view ? view->row(this) : -1); }

inline int QTableWidgetItem::column() const
{ return (view ? view->column(this) : -1); }

inline void QTableWidgetItem::setSelected(bool aselect)
{ if (view) view->setItemSelected(this, aselect); }

inline bool QTableWidgetItem::isSelected() const
{ return (view ? view->isItemSelected(this) : false); }



# 375 "/home/eagle/qt-copy/include/QtGui/qtablewidget.h"





# 69 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtreeview.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qabstractitemview.h"



















































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qtreeview.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qtreeview.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qtreeview.h"
class QTreeViewPrivate;
class QHeaderView;

class  QTreeView : public QAbstractItemView
{
Q_OBJECT
Q_PROPERTY(int autoExpandDelay READ autoExpandDelay WRITE setAutoExpandDelay)
Q_PROPERTY(int indentation READ indentation WRITE setIndentation)
Q_PROPERTY(bool rootIsDecorated READ rootIsDecorated WRITE setRootIsDecorated)
Q_PROPERTY(bool uniformRowHeights READ uniformRowHeights WRITE setUniformRowHeights)
Q_PROPERTY(bool itemsExpandable READ itemsExpandable WRITE setItemsExpandable)
Q_PROPERTY(bool sortingEnabled READ isSortingEnabled WRITE setSortingEnabled)
Q_PROPERTY(bool animated READ isAnimated WRITE setAnimated)
Q_PROPERTY(bool allColumnsShowFocus READ allColumnsShowFocus WRITE setAllColumnsShowFocus)
Q_PROPERTY(bool wordWrap READ wordWrap WRITE setWordWrap)
Q_PROPERTY(bool headerHidden READ isHeaderHidden WRITE setHeaderHidden)
Q_PROPERTY(bool expandsOnDoubleClick READ expandsOnDoubleClick WRITE setExpandsOnDoubleClick)

public:
explicit QTreeView(QWidget *parent = 0);
~QTreeView();

void setModel(QAbstractItemModel *model);
void setRootIndex(const QModelIndex &index);
void setSelectionModel(QItemSelectionModel *selectionModel);

QHeaderView *header() const;
void setHeader(QHeaderView *header);

int autoExpandDelay() const;
void setAutoExpandDelay(int delay);

int indentation() const;
void setIndentation(int i);

bool rootIsDecorated() const;
void setRootIsDecorated(bool show);

bool uniformRowHeights() const;
void setUniformRowHeights(bool uniform);

bool itemsExpandable() const;
void setItemsExpandable(bool enable);

bool expandsOnDoubleClick() const;
void setExpandsOnDoubleClick(bool enable);

int columnViewportPosition(int column) const;
int columnWidth(int column) const;
void setColumnWidth(int column, int width);
int columnAt(int x) const;

bool isColumnHidden(int column) const;
void setColumnHidden(int column, bool hide);

bool isHeaderHidden() const;
void setHeaderHidden(bool hide);

bool isRowHidden(int row, const QModelIndex &parent) const;
void setRowHidden(int row, const QModelIndex &parent, bool hide);

bool isFirstColumnSpanned(int row, const QModelIndex &parent) const;
void setFirstColumnSpanned(int row, const QModelIndex &parent, bool span);

bool isExpanded(const QModelIndex &index) const;
void setExpanded(const QModelIndex &index, bool expand);

void setSortingEnabled(bool enable);
bool isSortingEnabled() const;

void setAnimated(bool enable);
bool isAnimated() const;

void setAllColumnsShowFocus(bool enable);
bool allColumnsShowFocus() const;

void setWordWrap(bool on);
bool wordWrap() const;

void keyboardSearch(const QString &search);

QRect visualRect(const QModelIndex &index) const;
void scrollTo(const QModelIndex &index, ScrollHint hint = EnsureVisible);
QModelIndex indexAt(const QPoint &p) const;
QModelIndex indexAbove(const QModelIndex &index) const;
QModelIndex indexBelow(const QModelIndex &index) const;

void doItemsLayout();
void reset();

void sortByColumn(int column, Qt::SortOrder order);

signals:
void expanded(const QModelIndex &index);
void collapsed(const QModelIndex &index);

public slots:
void dataChanged(const QModelIndex &topLeft, const QModelIndex &bottomRight);
void hideColumn(int column);
void showColumn(int column);
void expand(const QModelIndex &index);
void collapse(const QModelIndex &index);
void resizeColumnToContents(int column);
void sortByColumn(int column);
void selectAll();
void expandAll();
void collapseAll();
void expandToDepth(int depth);

protected slots:
void columnResized(int column, int oldSize, int newSize);
void columnCountChanged(int oldCount, int newCount);
void columnMoved();
void reexpand();
void rowsRemoved(const QModelIndex &parent, int first, int last);

protected:
QTreeView(QTreeViewPrivate &dd, QWidget *parent = 0);
void scrollContentsBy(int dx, int dy);
void rowsInserted(const QModelIndex &parent, int start, int end);
void rowsAboutToBeRemoved(const QModelIndex &parent, int start, int end);

QModelIndex moveCursor(CursorAction cursorAction, Qt::KeyboardModifiers modifiers);
int horizontalOffset() const;
int verticalOffset() const;

void setSelection(const QRect &rect, QItemSelectionModel::SelectionFlags command);
QRegion visualRegionForSelection(const QItemSelection &selection) const;
QModelIndexList selectedIndexes() const;

void timerEvent(QTimerEvent *event);
void paintEvent(QPaintEvent *event);

void drawTree(QPainter *painter, const QRegion &region) const;
virtual void drawRow(QPainter *painter,
const QStyleOptionViewItem &options,
const QModelIndex &index) const;
virtual void drawBranches(QPainter *painter,
const QRect &rect,
const QModelIndex &index) const;

void mousePressEvent(QMouseEvent *event);
void mouseReleaseEvent(QMouseEvent *event);
void mouseDoubleClickEvent(QMouseEvent *event);
void mouseMoveEvent(QMouseEvent *event);
void keyPressEvent(QKeyEvent *event);

# 204 "/home/eagle/qt-copy/include/QtGui/qtreeview.h"
void dragMoveEvent(QDragMoveEvent *event);

# 206 "/home/eagle/qt-copy/include/QtGui/qtreeview.h"
bool viewportEvent(QEvent *event);

void updateGeometries();

int sizeHintForColumn(int column) const;
int indexRowSizeHint(const QModelIndex &index) const;
int rowHeight(const QModelIndex &index) const;

void horizontalScrollbarAction(int action);

bool isIndexHidden(const QModelIndex &index) const;
void selectionChanged(const QItemSelection &selected,
const QItemSelection &deselected);
void currentChanged(const QModelIndex &current, const QModelIndex &previous);

private:
friend class QAccessibleItemView;
int visualIndex(const QModelIndex &index) const;

inline QTreeViewPrivate* d_func() { return reinterpret_cast<QTreeViewPrivate *>(d_ptr); } inline const QTreeViewPrivate* d_func() const { return reinterpret_cast<const QTreeViewPrivate *>(d_ptr); } friend class QTreeViewPrivate;
QTreeView(const QTreeView &); QTreeView &operator=(const QTreeView &);






};



# 237 "/home/eagle/qt-copy/include/QtGui/qtreeview.h"





# 70 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtreewidget.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qtreeview.h"

















































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qtreewidget.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qtreewidgetitemiterator.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qtreewidgetitemiterator.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qtreewidgetitemiterator.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qtreewidgetitemiterator.h"
class QTreeWidget;
class QTreeWidgetItem;
class QTreeModel;

class QTreeWidgetItemIteratorPrivate;
class  QTreeWidgetItemIterator
{
friend class QTreeModel;

public:
enum IteratorFlag {
All = 0x00000000,
Hidden = 0x00000001,
NotHidden = 0x00000002,
Selected = 0x00000004,
Unselected = 0x00000008,
Selectable = 0x00000010,
NotSelectable = 0x00000020,
DragEnabled = 0x00000040,
DragDisabled = 0x00000080,
DropEnabled = 0x00000100,
DropDisabled = 0x00000200,
HasChildren = 0x00000400,
NoChildren = 0x00000800,
Checked = 0x00001000,
NotChecked = 0x00002000,
Enabled = 0x00004000,
Disabled = 0x00008000,
Editable = 0x00010000,
NotEditable = 0x00020000,
UserFlag = 0x01000000 
};
typedef QFlags<IteratorFlag> IteratorFlags;

QTreeWidgetItemIterator(const QTreeWidgetItemIterator &it);
explicit QTreeWidgetItemIterator(QTreeWidget *widget, IteratorFlags flags = All);
explicit QTreeWidgetItemIterator(QTreeWidgetItem *item, IteratorFlags flags = All);
~QTreeWidgetItemIterator();

QTreeWidgetItemIterator &operator=(const QTreeWidgetItemIterator &it);

QTreeWidgetItemIterator &operator++();
inline const QTreeWidgetItemIterator operator++(int);
inline QTreeWidgetItemIterator &operator+=(int n);

QTreeWidgetItemIterator &operator--();
inline const QTreeWidgetItemIterator operator--(int);
inline QTreeWidgetItemIterator &operator-=(int n);

inline QTreeWidgetItem *operator*() const;

private:
bool matchesFlags(const QTreeWidgetItem *item) const;
QTreeWidgetItemIteratorPrivate *d_ptr;
QTreeWidgetItem *current;
IteratorFlags flags;
inline QTreeWidgetItemIteratorPrivate* d_func() { return reinterpret_cast<QTreeWidgetItemIteratorPrivate *>(d_ptr); } inline const QTreeWidgetItemIteratorPrivate* d_func() const { return reinterpret_cast<const QTreeWidgetItemIteratorPrivate *>(d_ptr); } friend class QTreeWidgetItemIteratorPrivate;
};

inline const QTreeWidgetItemIterator QTreeWidgetItemIterator::operator++(int)
{
QTreeWidgetItemIterator it = *this;
++(*this);
return it;
}

inline const QTreeWidgetItemIterator QTreeWidgetItemIterator::operator--(int)
{
QTreeWidgetItemIterator it = *this;
--(*this);
return it;
}

inline QTreeWidgetItemIterator &QTreeWidgetItemIterator::operator+=(int n)
{
if (n < 0)
return (*this) -= (-n);
while (current && n--)
++(*this);
return *this;
}

inline QTreeWidgetItemIterator &QTreeWidgetItemIterator::operator-=(int n)
{
if (n < 0)
return (*this) += (-n);
while (current && n--)
--(*this);
return *this;
}

inline QTreeWidgetItem *QTreeWidgetItemIterator::operator*() const
{
return current;
}

inline QFlags<QTreeWidgetItemIterator::IteratorFlags::enum_type> operator|(QTreeWidgetItemIterator::IteratorFlags::enum_type f1, QTreeWidgetItemIterator::IteratorFlags::enum_type f2) { return QFlags<QTreeWidgetItemIterator::IteratorFlags::enum_type>(f1) | f2; } inline QFlags<QTreeWidgetItemIterator::IteratorFlags::enum_type> operator|(QTreeWidgetItemIterator::IteratorFlags::enum_type f1, QFlags<QTreeWidgetItemIterator::IteratorFlags::enum_type> f2) { return f2 | f1; }




# 158 "/home/eagle/qt-copy/include/QtGui/qtreewidgetitemiterator.h"



# 48 "/home/eagle/qt-copy/include/QtGui/qtreewidget.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qvariant.h"






















































































































































































































































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qtreewidget.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qvector.h"































































































































































































































































































































































































































































































































































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtGui/qtreewidget.h"


# 52 "/home/eagle/qt-copy/include/QtGui/qtreewidget.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 60 "/home/eagle/qt-copy/include/QtGui/qtreewidget.h"
class QTreeWidget;
class QTreeModel;
class QWidgetItemData;
class QTreeWidgetItemPrivate;

class  QTreeWidgetItem
{
friend class QTreeModel;
friend class QTreeWidget;
friend class QTreeWidgetPrivate;
friend class QTreeWidgetItemIterator;
friend class QTreeWidgetItemPrivate;
public:
enum ItemType { Type = 0, UserType = 1000 };
QTreeWidgetItem(int type = Type);
QTreeWidgetItem(const QStringList &strings, int type = Type);
explicit QTreeWidgetItem(QTreeWidget *view, int type = Type);
QTreeWidgetItem(QTreeWidget *view, const QStringList &strings, int type = Type);
QTreeWidgetItem(QTreeWidget *view, QTreeWidgetItem *after, int type = Type);
explicit QTreeWidgetItem(QTreeWidgetItem *parent, int type = Type);
QTreeWidgetItem(QTreeWidgetItem *parent, const QStringList &strings, int type = Type);
QTreeWidgetItem(QTreeWidgetItem *parent, QTreeWidgetItem *after, int type = Type);
QTreeWidgetItem(const QTreeWidgetItem &other);
virtual ~QTreeWidgetItem();

virtual QTreeWidgetItem *clone() const;

inline QTreeWidget *treeWidget() const { return view; }

inline void setSelected(bool select);
inline bool isSelected() const;

inline void setHidden(bool hide);
inline bool isHidden() const;

inline void setExpanded(bool expand);
inline bool isExpanded() const;

inline void setFirstColumnSpanned(bool span);
inline bool isFirstColumnSpanned() const;

inline void setDisabled(bool disabled);
inline bool isDisabled() const;

enum ChildIndicatorPolicy { ShowIndicator, DontShowIndicator, DontShowIndicatorWhenChildless };
void setChildIndicatorPolicy(QTreeWidgetItem::ChildIndicatorPolicy policy);
QTreeWidgetItem::ChildIndicatorPolicy childIndicatorPolicy() const;

Qt::ItemFlags flags() const;
void setFlags(Qt::ItemFlags flags);

inline QString text(int column) const
{ return data(column, Qt::DisplayRole).toString(); }
inline void setText(int column, const QString &text);

inline QIcon icon(int column) const
{ return qvariant_cast<QIcon>(data(column, Qt::DecorationRole)); }
inline void setIcon(int column, const QIcon &icon);

inline QString statusTip(int column) const
{ return data(column, Qt::StatusTipRole).toString(); }
inline void setStatusTip(int column, const QString &statusTip);


# 124 "/home/eagle/qt-copy/include/QtGui/qtreewidget.h"
inline QString toolTip(int column) const
{ return data(column, Qt::ToolTipRole).toString(); }
inline void setToolTip(int column, const QString &toolTip);



# 130 "/home/eagle/qt-copy/include/QtGui/qtreewidget.h"
inline QString whatsThis(int column) const
{ return data(column, Qt::WhatsThisRole).toString(); }
inline void setWhatsThis(int column, const QString &whatsThis);


# 135 "/home/eagle/qt-copy/include/QtGui/qtreewidget.h"
inline QFont font(int column) const
{ return qvariant_cast<QFont>(data(column, Qt::FontRole)); }
inline void setFont(int column, const QFont &font);

inline int textAlignment(int column) const
{ return data(column, Qt::TextAlignmentRole).toInt(); }
inline void setTextAlignment(int column, int alignment)
{ setData(column, Qt::TextAlignmentRole, alignment); }

inline QColor backgroundColor(int column) const
{ return qvariant_cast<QColor>(data(column, Qt::BackgroundColorRole)); }
inline void setBackgroundColor(int column, const QColor &color)
{ setData(column, Qt::BackgroundColorRole, color); }

inline QBrush background(int column) const
{ return qvariant_cast<QBrush>(data(column, Qt::BackgroundRole)); }
inline void setBackground(int column, const QBrush &brush)
{ setData(column, Qt::BackgroundRole, brush); }

inline QColor textColor(int column) const
{ return qvariant_cast<QColor>(data(column, Qt::TextColorRole)); }
inline void setTextColor(int column, const QColor &color)
{ setData(column, Qt::TextColorRole, color); }

inline QBrush foreground(int column) const
{ return qvariant_cast<QBrush>(data(column, Qt::ForegroundRole)); }
inline void setForeground(int column, const QBrush &brush)
{ setData(column, Qt::ForegroundRole, brush); }

inline Qt::CheckState checkState(int column) const
{ return static_cast<Qt::CheckState>(data(column, Qt::CheckStateRole).toInt()); }
inline void setCheckState(int column, Qt::CheckState state)
{ setData(column, Qt::CheckStateRole, state); }

inline QSize sizeHint(int column) const
{ return qvariant_cast<QSize>(data(column, Qt::SizeHintRole)); }
inline void setSizeHint(int column, const QSize &size)
{ setData(column, Qt::SizeHintRole, size); }

virtual QVariant data(int column, int role) const;
virtual void setData(int column, int role, const QVariant &value);

virtual bool operator<(const QTreeWidgetItem &other) const;


# 180 "/home/eagle/qt-copy/include/QtGui/qtreewidget.h"
virtual void read(QDataStream &in);
virtual void write(QDataStream &out) const;

# 183 "/home/eagle/qt-copy/include/QtGui/qtreewidget.h"
QTreeWidgetItem &operator=(const QTreeWidgetItem &other);

inline QTreeWidgetItem *parent() const { return par; }
inline QTreeWidgetItem *child(int index) const {
if (index < 0 || index >= children.size())
return 0;
return children.at(index);
}
inline int childCount() const { return children.count(); }
inline int columnCount() const { return values.count(); }
inline int indexOfChild(QTreeWidgetItem *child) const;

void addChild(QTreeWidgetItem *child);
void insertChild(int index, QTreeWidgetItem *child);
void removeChild(QTreeWidgetItem *child);
QTreeWidgetItem *takeChild(int index);

void addChildren(const QList<QTreeWidgetItem*> &children);
void insertChildren(int index, const QList<QTreeWidgetItem*> &children);
QList<QTreeWidgetItem*> takeChildren();

inline int type() const { return rtti; }
inline void sortChildren(int column, Qt::SortOrder order)
{ sortChildren(column, order, false); }
private:
void sortChildren(int column, Qt::SortOrder order, bool climb);
QVariant childrenCheckState(int column) const;
void itemChanged();
void executePendingSort() const;

int rtti;

QVector< QVector<QWidgetItemData> > values;
QTreeWidget *view;
QTreeWidgetItemPrivate *d;
QTreeWidgetItem *par;
QList<QTreeWidgetItem*> children;
Qt::ItemFlags itemFlags;
};

inline void QTreeWidgetItem::setText(int column, const QString &atext)
{ setData(column, Qt::DisplayRole, atext); }

inline void QTreeWidgetItem::setIcon(int column, const QIcon &aicon)
{ setData(column, Qt::DecorationRole, aicon); }


# 230 "/home/eagle/qt-copy/include/QtGui/qtreewidget.h"
inline void QTreeWidgetItem::setStatusTip(int column, const QString &astatusTip)
{ setData(column, Qt::StatusTipRole, astatusTip); }



# 235 "/home/eagle/qt-copy/include/QtGui/qtreewidget.h"
inline void QTreeWidgetItem::setToolTip(int column, const QString &atoolTip)
{ setData(column, Qt::ToolTipRole, atoolTip); }



# 240 "/home/eagle/qt-copy/include/QtGui/qtreewidget.h"
inline void QTreeWidgetItem::setWhatsThis(int column, const QString &awhatsThis)
{ setData(column, Qt::WhatsThisRole, awhatsThis); }


# 244 "/home/eagle/qt-copy/include/QtGui/qtreewidget.h"
inline void QTreeWidgetItem::setFont(int column, const QFont &afont)
{ setData(column, Qt::FontRole, afont); }

inline int QTreeWidgetItem::indexOfChild(QTreeWidgetItem *achild) const
{ (void)const_cast<QTreeWidgetItem*>(this)->takeChild(-1); return children.indexOf(achild); }


# 251 "/home/eagle/qt-copy/include/QtGui/qtreewidget.h"
 QDataStream &operator<<(QDataStream &out, const QTreeWidgetItem &item);
 QDataStream &operator>>(QDataStream &in, QTreeWidgetItem &item);


# 255 "/home/eagle/qt-copy/include/QtGui/qtreewidget.h"
class QTreeWidgetPrivate;

class  QTreeWidget : public QTreeView
{
Q_OBJECT
Q_PROPERTY(int columnCount READ columnCount WRITE setColumnCount)
Q_PROPERTY(int topLevelItemCount READ topLevelItemCount)

friend class QTreeModel;
public:
explicit QTreeWidget(QWidget *parent = 0);
~QTreeWidget();

int columnCount() const;
void setColumnCount(int columns);

QTreeWidgetItem *invisibleRootItem() const;
QTreeWidgetItem *topLevelItem(int index) const;
int topLevelItemCount() const;
void insertTopLevelItem(int index, QTreeWidgetItem *item);
void addTopLevelItem(QTreeWidgetItem *item);
QTreeWidgetItem *takeTopLevelItem(int index);
int indexOfTopLevelItem(QTreeWidgetItem *item); 
int indexOfTopLevelItem(QTreeWidgetItem *item) const;

void insertTopLevelItems(int index, const QList<QTreeWidgetItem*> &items);
void addTopLevelItems(const QList<QTreeWidgetItem*> &items);

QTreeWidgetItem *headerItem() const;
void setHeaderItem(QTreeWidgetItem *item);
void setHeaderLabels(const QStringList &labels);
inline void setHeaderLabel(const QString &label);

QTreeWidgetItem *currentItem() const;
int currentColumn() const;
void setCurrentItem(QTreeWidgetItem *item);
void setCurrentItem(QTreeWidgetItem *item, int column);
void setCurrentItem(QTreeWidgetItem *item, int column, QItemSelectionModel::SelectionFlags command);

QTreeWidgetItem *itemAt(const QPoint &p) const;
inline QTreeWidgetItem *itemAt(int x, int y) const;
QRect visualItemRect(const QTreeWidgetItem *item) const;

int sortColumn() const;
void sortItems(int column, Qt::SortOrder order);
void setSortingEnabled(bool enable);
bool isSortingEnabled() const;

void editItem(QTreeWidgetItem *item, int column = 0);
void openPersistentEditor(QTreeWidgetItem *item, int column = 0);
void closePersistentEditor(QTreeWidgetItem *item, int column = 0);

QWidget *itemWidget(QTreeWidgetItem *item, int column) const;
void setItemWidget(QTreeWidgetItem *item, int column, QWidget *widget);
inline void removeItemWidget(QTreeWidgetItem *item, int column);

bool isItemSelected(const QTreeWidgetItem *item) const;
void setItemSelected(const QTreeWidgetItem *item, bool select);
QList<QTreeWidgetItem*> selectedItems() const;
QList<QTreeWidgetItem*> findItems(const QString &text, Qt::MatchFlags flags,
int column = 0) const;

bool isItemHidden(const QTreeWidgetItem *item) const;
void setItemHidden(const QTreeWidgetItem *item, bool hide);

bool isItemExpanded(const QTreeWidgetItem *item) const;
void setItemExpanded(const QTreeWidgetItem *item, bool expand);

bool isFirstItemColumnSpanned(const QTreeWidgetItem *item) const;
void setFirstItemColumnSpanned(const QTreeWidgetItem *item, bool span);

QTreeWidgetItem *itemAbove(const QTreeWidgetItem *item) const;
QTreeWidgetItem *itemBelow(const QTreeWidgetItem *item) const;

public slots:
void scrollToItem(const QTreeWidgetItem *item,
QAbstractItemView::ScrollHint hint = EnsureVisible);
void expandItem(const QTreeWidgetItem *item);
void collapseItem(const QTreeWidgetItem *item);
void clear();

signals:
void itemPressed(QTreeWidgetItem *item, int column);
void itemClicked(QTreeWidgetItem *item, int column);
void itemDoubleClicked(QTreeWidgetItem *item, int column);
void itemActivated(QTreeWidgetItem *item, int column);
void itemEntered(QTreeWidgetItem *item, int column);
void itemChanged(QTreeWidgetItem *item, int column);
void itemExpanded(QTreeWidgetItem *item);
void itemCollapsed(QTreeWidgetItem *item);
void currentItemChanged(QTreeWidgetItem *current, QTreeWidgetItem *previous);
void itemSelectionChanged();

protected:
bool event(QEvent *e);
virtual QStringList mimeTypes() const;
virtual QMimeData *mimeData(const QList<QTreeWidgetItem*> items) const;
virtual bool dropMimeData(QTreeWidgetItem *parent, int index,
const QMimeData *data, Qt::DropAction action);
virtual Qt::DropActions supportedDropActions() const;
QList<QTreeWidgetItem*> items(const QMimeData *data) const;

QModelIndex indexFromItem(QTreeWidgetItem *item, int column = 0) const;
QTreeWidgetItem *itemFromIndex(const QModelIndex &index) const;
void dropEvent(QDropEvent *event);

private:
void setModel(QAbstractItemModel *model);

inline QTreeWidgetPrivate* d_func() { return reinterpret_cast<QTreeWidgetPrivate *>(d_ptr); } inline const QTreeWidgetPrivate* d_func() const { return reinterpret_cast<const QTreeWidgetPrivate *>(d_ptr); } friend class QTreeWidgetPrivate;
QTreeWidget(const QTreeWidget &); QTreeWidget &operator=(const QTreeWidget &);














};

inline void QTreeWidget::removeItemWidget(QTreeWidgetItem *item, int column)
{ setItemWidget(item, column, 0); }

inline QTreeWidgetItem *QTreeWidget::itemAt(int ax, int ay) const
{ return itemAt(QPoint(ax, ay)); }

inline void QTreeWidget::setHeaderLabel(const QString &alabel)
{ setHeaderLabels(QStringList(alabel)); }

inline void QTreeWidgetItem::setSelected(bool aselect)
{ if (view) view->setItemSelected(this, aselect); }

inline bool QTreeWidgetItem::isSelected() const
{ return (view ? view->isItemSelected(this) : false); }

inline void QTreeWidgetItem::setHidden(bool ahide)
{ if (view) view->setItemHidden(this, ahide); }

inline bool QTreeWidgetItem::isHidden() const
{ return (view ? view->isItemHidden(this) : false); }

inline void QTreeWidgetItem::setExpanded(bool aexpand)
{ if (view) view->setItemExpanded(this, aexpand); }

inline bool QTreeWidgetItem::isExpanded() const
{ return (view ? view->isItemExpanded(this) : false); }

inline void QTreeWidgetItem::setFirstColumnSpanned(bool aspan)
{ if (view) view->setFirstItemColumnSpanned(this, aspan); }

inline bool QTreeWidgetItem::isFirstColumnSpanned() const
{ return (view ? view->isFirstItemColumnSpanned(this) : false); }

inline void QTreeWidgetItem::setDisabled(bool disabled)
{ setFlags(disabled ? (flags() & ~Qt::ItemIsEnabled) : flags() | Qt::ItemIsEnabled); }

inline bool QTreeWidgetItem::isDisabled() const
{ return !(flags() & Qt::ItemIsEnabled); }



# 423 "/home/eagle/qt-copy/include/QtGui/qtreewidget.h"





# 71 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtreewidgetitemiterator.h"
































































































































































# 72 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qaction.h"



















































































































































































































































# 73 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qactiongroup.h"


















































































































# 74 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qapplication.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qcoreapplication.h"












































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qapplication.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qwindowdefs.h"























































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qapplication.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qpoint.h"






































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qapplication.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qsize.h"






































































































































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtGui/qapplication.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qcursor.h"






























































































































































# 51 "/home/eagle/qt-copy/include/QtGui/qapplication.h"













# 64 "/home/eagle/qt-copy/include/QtGui/qapplication.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QSessionManager;
class QDesktopWidget;
class QStyle;
class QEventLoop;
class QIcon;
class QInputContext;
template <typename T> class QList;
class QLocale;




# 82 "/home/eagle/qt-copy/include/QtGui/qapplication.h"
class QApplication;
class QApplicationPrivate;





# 89 "/home/eagle/qt-copy/include/QtGui/qapplication.h"
class  QApplication : public QCoreApplication
{
Q_OBJECT
Q_PROPERTY(Qt::LayoutDirection layoutDirection READ layoutDirection WRITE setLayoutDirection)
Q_PROPERTY(QIcon windowIcon READ windowIcon WRITE setWindowIcon)
Q_PROPERTY(int cursorFlashTime READ cursorFlashTime WRITE setCursorFlashTime)
Q_PROPERTY(int doubleClickInterval READ doubleClickInterval WRITE setDoubleClickInterval)
Q_PROPERTY(int keyboardInputInterval READ keyboardInputInterval WRITE setKeyboardInputInterval)

# 98 "/home/eagle/qt-copy/include/QtGui/qapplication.h"
Q_PROPERTY(int wheelScrollLines READ wheelScrollLines WRITE setWheelScrollLines)

# 100 "/home/eagle/qt-copy/include/QtGui/qapplication.h"
Q_PROPERTY(QSize globalStrut READ globalStrut WRITE setGlobalStrut)
Q_PROPERTY(int startDragTime READ startDragTime WRITE setStartDragTime)
Q_PROPERTY(int startDragDistance READ startDragDistance WRITE setStartDragDistance)
Q_PROPERTY(bool quitOnLastWindowClosed READ quitOnLastWindowClosed WRITE setQuitOnLastWindowClosed)

# 105 "/home/eagle/qt-copy/include/QtGui/qapplication.h"
Q_PROPERTY(QString styleSheet READ styleSheet WRITE setStyleSheet)





# 111 "/home/eagle/qt-copy/include/QtGui/qapplication.h"
public:
enum Type { Tty, GuiClient, GuiServer };

# 114 "/home/eagle/qt-copy/include/QtGui/qapplication.h"
QApplication(int &argc, char **argv, int = 0x040400);
QApplication(int &argc, char **argv, bool GUIenabled, int = 0x040400);
QApplication(int &argc, char **argv, Type, int = 0x040400);





# 122 "/home/eagle/qt-copy/include/QtGui/qapplication.h"
virtual ~QApplication();

static Type type();

static QStyle *style();
static void setStyle(QStyle*);
static QStyle *setStyle(const QString&);
enum ColorSpec { NormalColor=0, CustomColor=1, ManyColor=2 };
static int colorSpec();
static void setColorSpec(int);


# 134 "/home/eagle/qt-copy/include/QtGui/qapplication.h"
static QCursor *overrideCursor();
static void setOverrideCursor(const QCursor &);
static void changeOverrideCursor(const QCursor &);
static void restoreOverrideCursor();

# 139 "/home/eagle/qt-copy/include/QtGui/qapplication.h"
static QPalette palette();
static QPalette palette(const QWidget *);
static QPalette palette(const char *className);
static void setPalette(const QPalette &, const char* className = 0);
static QFont font();
static QFont font(const QWidget*);
static QFont font(const char *className);
static void setFont(const QFont &, const char* className = 0);
static QFontMetrics fontMetrics();

static void setWindowIcon(const QIcon &icon);
static QIcon windowIcon();







# 158 "/home/eagle/qt-copy/include/QtGui/qapplication.h"
static QWidgetList allWidgets();
static QWidgetList topLevelWidgets();

static QDesktopWidget *desktop();

static QWidget *activePopupWidget();
static QWidget *activeModalWidget();

# 166 "/home/eagle/qt-copy/include/QtGui/qapplication.h"
static QClipboard *clipboard();

# 168 "/home/eagle/qt-copy/include/QtGui/qapplication.h"
static QWidget *focusWidget();

static QWidget *activeWindow();
static void setActiveWindow(QWidget* act);

static QWidget *widgetAt(const QPoint &p);
static inline QWidget *widgetAt(int x, int y) { return widgetAt(QPoint(x, y)); }
static QWidget *topLevelAt(const QPoint &p);
static inline QWidget *topLevelAt(int x, int y) { return topLevelAt(QPoint(x, y)); }

static void syncX();
static void beep();
static void alert(QWidget *widget, int duration = 0);

static Qt::KeyboardModifiers keyboardModifiers();
static Qt::MouseButtons mouseButtons();

static void setDesktopSettingsAware(bool);
static bool desktopSettingsAware();

static void setCursorFlashTime(int);
static int cursorFlashTime();

static void setDoubleClickInterval(int);
static int doubleClickInterval();

static void setKeyboardInputInterval(int);
static int keyboardInputInterval();


# 198 "/home/eagle/qt-copy/include/QtGui/qapplication.h"
static void setWheelScrollLines(int);
static int wheelScrollLines();

# 201 "/home/eagle/qt-copy/include/QtGui/qapplication.h"
static void setGlobalStrut(const QSize &);
static QSize globalStrut();

static void setStartDragTime(int ms);
static int startDragTime();
static void setStartDragDistance(int l);
static int startDragDistance();

static void setLayoutDirection(Qt::LayoutDirection direction);
static Qt::LayoutDirection layoutDirection();

static inline bool isRightToLeft() { return layoutDirection() == Qt::RightToLeft; }
static inline bool isLeftToRight() { return layoutDirection() == Qt::LeftToRight; }

static bool isEffectEnabled(Qt::UIEffect);
static void setEffectEnabled(Qt::UIEffect, bool enable = true);



























# 244 "/home/eagle/qt-copy/include/QtGui/qapplication.h"

bool isSessionRestored() const;
QString sessionId() const;
QString sessionKey() const;
virtual void commitData(QSessionManager& sm);
virtual void saveState(QSessionManager& sm);

# 251 "/home/eagle/qt-copy/include/QtGui/qapplication.h"
void setInputContext(QInputContext *);
QInputContext *inputContext() const;

static QLocale keyboardInputLocale();
static Qt::LayoutDirection keyboardInputDirection();

static int exec();
bool notify(QObject *, QEvent *);


static void setQuitOnLastWindowClosed(bool quit);
static bool quitOnLastWindowClosed();






# 269 "/home/eagle/qt-copy/include/QtGui/qapplication.h"
signals:
void lastWindowClosed();
void focusChanged(QWidget *old, QWidget *now);

# 273 "/home/eagle/qt-copy/include/QtGui/qapplication.h"
void commitDataRequest(QSessionManager &sessionManager);
void saveStateRequest(QSessionManager &sessionManager);


# 277 "/home/eagle/qt-copy/include/QtGui/qapplication.h"
public:
QString styleSheet() const;
public slots:

# 281 "/home/eagle/qt-copy/include/QtGui/qapplication.h"
void setStyleSheet(const QString& sheet);





# 287 "/home/eagle/qt-copy/include/QtGui/qapplication.h"
static void closeAllWindows();
static void aboutQt();

protected:



# 294 "/home/eagle/qt-copy/include/QtGui/qapplication.h"
bool event(QEvent *);
bool compressEvent(QEvent *, QObject *receiver, QPostEventList *);



















































# 347 "/home/eagle/qt-copy/include/QtGui/qapplication.h"
private:
QApplication(const QApplication &); QApplication &operator=(const QApplication &);
inline QApplicationPrivate* d_func() { return reinterpret_cast<QApplicationPrivate *>(d_ptr); } inline const QApplicationPrivate* d_func() const { return reinterpret_cast<const QApplicationPrivate *>(d_ptr); } friend class QApplicationPrivate;

friend class QWidget;
friend class QWidgetPrivate;
friend class QETWidget;
friend class Q3AccelManager;
friend class QTranslator;
friend class QWidgetAnimator;

# 358 "/home/eagle/qt-copy/include/QtGui/qapplication.h"
friend class QShortcut;

# 360 "/home/eagle/qt-copy/include/QtGui/qapplication.h"
friend class QAction;











# 372 "/home/eagle/qt-copy/include/QtGui/qapplication.h"
};






# 75 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qboxlayout.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qlayout.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qlayout.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qlayoutitem.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qsizepolicy.h"



































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qlayoutitem.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qrect.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qlayoutitem.h"




# 52 "/home/eagle/qt-copy/include/QtGui/qlayoutitem.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

static const int QLAYOUTSIZE_MAX = INT_MAX/256/16;

class QLayout;
class QLayoutItem;
class QSpacerItem;
class QWidget;
class QSize;

class  QLayoutItem
{
public:
inline explicit QLayoutItem(Qt::Alignment alignment = 0);
virtual ~QLayoutItem();
virtual QSize sizeHint() const = 0;
virtual QSize minimumSize() const = 0;
virtual QSize maximumSize() const = 0;
virtual Qt::Orientations expandingDirections() const = 0;
virtual void setGeometry(const QRect&) = 0;
virtual QRect geometry() const = 0;
virtual bool isEmpty() const = 0;
virtual bool hasHeightForWidth() const;
virtual int heightForWidth(int) const;
virtual int minimumHeightForWidth(int) const;
virtual void invalidate();

virtual QWidget *widget();
virtual QLayout *layout();
virtual QSpacerItem *spacerItem();

Qt::Alignment alignment() const { return align; }
void setAlignment(Qt::Alignment a);
QSizePolicy::ControlTypes controlTypes() const;

protected:
Qt::Alignment align;
};

inline QLayoutItem::QLayoutItem(Qt::Alignment aalignment)
: align(aalignment) { }

class  QSpacerItem : public QLayoutItem
{
public:
QSpacerItem(int w, int h,
QSizePolicy::Policy hData = QSizePolicy::Minimum,
QSizePolicy::Policy vData = QSizePolicy::Minimum)
: width(w), height(h), sizeP(hData, vData) { }
void changeSize(int w, int h,
QSizePolicy::Policy hData = QSizePolicy::Minimum,
QSizePolicy::Policy vData = QSizePolicy::Minimum);
QSize sizeHint() const;
QSize minimumSize() const;
QSize maximumSize() const;
Qt::Orientations expandingDirections() const;
bool isEmpty() const;
void setGeometry(const QRect&);
QRect geometry() const;
QSpacerItem *spacerItem();

private:
int width;
int height;
QSizePolicy sizeP;
QRect rect;
};

class  QWidgetItem : public QLayoutItem
{
QWidgetItem(const QWidgetItem &); QWidgetItem &operator=(const QWidgetItem &);

public:
explicit QWidgetItem(QWidget *w) : wid(w) { }
QSize sizeHint() const;
QSize minimumSize() const;
QSize maximumSize() const;
Qt::Orientations expandingDirections() const;
bool isEmpty() const;
void setGeometry(const QRect&);
QRect geometry() const;
virtual QWidget *widget();

bool hasHeightForWidth() const;
int heightForWidth(int) const;

protected:
QWidget *wid;
};

class  QWidgetItemV2 : public QWidgetItem
{
public:
explicit QWidgetItemV2(QWidget *widget);
~QWidgetItemV2();

QSize sizeHint() const;
QSize minimumSize() const;
QSize maximumSize() const;
int heightForWidth(int width) const;

private:
enum { Dirty = -123, HfwCacheMaxSize = 3 };

inline bool useSizeCache() const;
void updateCacheIfNecessary() const;
inline void invalidateSizeCache() {
q_cachedMinimumSize.setWidth(Dirty);
q_hfwCacheSize = 0;
}

mutable QSize q_cachedMinimumSize;
mutable QSize q_cachedSizeHint;
mutable QSize q_cachedMaximumSize;
mutable QSize q_cachedHfws[HfwCacheMaxSize];
mutable short q_firstCachedHfw;
mutable short q_hfwCacheSize;
void *d;

friend class QWidgetPrivate;

QWidgetItemV2(const QWidgetItemV2 &); QWidgetItemV2 &operator=(const QWidgetItemV2 &);
};






# 48 "/home/eagle/qt-copy/include/QtGui/qlayout.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qsizepolicy.h"



































































































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qlayout.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qrect.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtGui/qlayout.h"




# 54 "/home/eagle/qt-copy/include/QtGui/qlayout.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QLayout;
class QSize;



























# 89 "/home/eagle/qt-copy/include/QtGui/qlayout.h"
class QLayoutPrivate;

class  QLayout : public QObject, public QLayoutItem
{
Q_OBJECT
inline QLayoutPrivate* d_func() { return reinterpret_cast<QLayoutPrivate *>(d_ptr); } inline const QLayoutPrivate* d_func() const { return reinterpret_cast<const QLayoutPrivate *>(d_ptr); } friend class QLayoutPrivate;

Q_ENUMS(SizeConstraint)
Q_PROPERTY(int margin READ margin WRITE setMargin)
Q_PROPERTY(int spacing READ spacing WRITE setSpacing)
Q_PROPERTY(SizeConstraint sizeConstraint READ sizeConstraint WRITE setSizeConstraint)
public:
enum SizeConstraint {
SetDefaultConstraint,
SetNoConstraint,
SetMinimumSize,
SetFixedSize,
SetMaximumSize,
SetMinAndMaxSize






# 114 "/home/eagle/qt-copy/include/QtGui/qlayout.h"
};

QLayout(QWidget *parent);
QLayout();
~QLayout();

int margin() const;
int spacing() const;

void setMargin(int);
void setSpacing(int);

void setContentsMargins(int left, int top, int right, int bottom);
void getContentsMargins(int *left, int *top, int *right, int *bottom) const;
QRect contentsRect() const;

bool setAlignment(QWidget *w, Qt::Alignment alignment);
bool setAlignment(QLayout *l, Qt::Alignment alignment);

# 133 "/home/eagle/qt-copy/include/QtGui/qlayout.h"
inline void setAlignment(Qt::Alignment alignment) { QLayoutItem::setAlignment(alignment); }




# 138 "/home/eagle/qt-copy/include/QtGui/qlayout.h"
void setSizeConstraint(SizeConstraint);
SizeConstraint sizeConstraint() const;




# 144 "/home/eagle/qt-copy/include/QtGui/qlayout.h"
void setMenuBar(QWidget *w);
QWidget *menuBar() const;

QWidget *parentWidget() const;

void invalidate();
QRect geometry() const;
bool activate();
void update();

void addWidget(QWidget *w);
virtual void addItem(QLayoutItem *) = 0;

void removeWidget(QWidget *w);
void removeItem(QLayoutItem *);

Qt::Orientations expandingDirections() const;
QSize minimumSize() const;
QSize maximumSize() const;
virtual void setGeometry(const QRect&);
virtual QLayoutItem *itemAt(int index) const = 0;
virtual QLayoutItem *takeAt(int index) = 0;
virtual int indexOf(QWidget *) const;
virtual int count() const = 0;
bool isEmpty() const;

int totalHeightForWidth(int w) const;
QSize totalMinimumSize() const;
QSize totalMaximumSize() const;
QSize totalSizeHint() const;
QLayout *layout();

void setEnabled(bool);
bool isEnabled() const;






# 184 "/home/eagle/qt-copy/include/QtGui/qlayout.h"
static QSize closestAcceptableSize(const QWidget *w, const QSize &s);

protected:
void widgetEvent(QEvent *);
void childEvent(QChildEvent *e);
void addChildLayout(QLayout *l);
void addChildWidget(QWidget *w);




# 195 "/home/eagle/qt-copy/include/QtGui/qlayout.h"
QRect alignmentRect(const QRect&) const;
protected:
QLayout(QLayoutPrivate &d, QLayout*, QWidget*);

private:
QLayout(const QLayout &); QLayout &operator=(const QLayout &);

static void activateRecursiveHelper(QLayoutItem *item);

friend class QApplicationPrivate;
friend class QWidget;

















# 223 "/home/eagle/qt-copy/include/QtGui/qlayout.h"
};








# 232 "/home/eagle/qt-copy/include/QtGui/qlayout.h"


# 234 "/home/eagle/qt-copy/include/QtGui/qlayout.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qboxlayout.h"













































































































































































# 235 "/home/eagle/qt-copy/include/QtGui/qlayout.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qgridlayout.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qlayout.h"




















































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qgridlayout.h"







# 54 "/home/eagle/qt-copy/include/QtGui/qgridlayout.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QGridLayoutPrivate;

class  QGridLayout : public QLayout
{
Q_OBJECT
inline QGridLayoutPrivate* d_func() { return reinterpret_cast<QGridLayoutPrivate *>(d_ptr); } inline const QGridLayoutPrivate* d_func() const { return reinterpret_cast<const QGridLayoutPrivate *>(d_ptr); } friend class QGridLayoutPrivate;



public:
explicit QGridLayout(QWidget *parent);
QGridLayout();








# 80 "/home/eagle/qt-copy/include/QtGui/qgridlayout.h"
~QGridLayout();

QSize sizeHint() const;
QSize minimumSize() const;
QSize maximumSize() const;

void setHorizontalSpacing(int spacing);
int horizontalSpacing() const;
void setVerticalSpacing(int spacing);
int verticalSpacing() const;
void setSpacing(int spacing);
int spacing() const;

void setRowStretch(int row, int stretch);
void setColumnStretch(int column, int stretch);
int rowStretch(int row) const;
int columnStretch(int column) const;

void setRowMinimumHeight(int row, int minSize);
void setColumnMinimumWidth(int column, int minSize);
int rowMinimumHeight(int row) const;
int columnMinimumWidth(int column) const;

int columnCount() const;
int rowCount() const;

QRect cellRect(int row, int column) const;




# 111 "/home/eagle/qt-copy/include/QtGui/qgridlayout.h"
bool hasHeightForWidth() const;
int heightForWidth(int) const;
int minimumHeightForWidth(int) const;

Qt::Orientations expandingDirections() const;
void invalidate();

inline void addWidget(QWidget *w) { QLayout::addWidget(w); }
void addWidget(QWidget *, int row, int column, Qt::Alignment = 0);
void addWidget(QWidget *, int row, int column, int rowSpan, int columnSpan, Qt::Alignment = 0);
void addLayout(QLayout *, int row, int column, Qt::Alignment = 0);
void addLayout(QLayout *, int row, int column, int rowSpan, int columnSpan, Qt::Alignment = 0);

void setOriginCorner(Qt::Corner);
Qt::Corner originCorner() const;





# 131 "/home/eagle/qt-copy/include/QtGui/qgridlayout.h"
QLayoutItem *itemAt(int index) const;
QLayoutItem *itemAtPosition(int row, int column) const;
QLayoutItem *takeAt(int index);
int count() const;
void setGeometry(const QRect&);

void addItem(QLayoutItem *item, int row, int column, int rowSpan = 1, int columnSpan = 1, Qt::Alignment = 0);

void setDefaultPositioning(int n, Qt::Orientation orient);
void getItemPosition(int idx, int *row, int *column, int *rowSpan, int *columnSpan);

protected:



# 146 "/home/eagle/qt-copy/include/QtGui/qgridlayout.h"
void addItem(QLayoutItem *);

private:
QGridLayout(const QGridLayout &); QGridLayout &operator=(const QGridLayout &);






















# 172 "/home/eagle/qt-copy/include/QtGui/qgridlayout.h"
};






# 236 "/home/eagle/qt-copy/include/QtGui/qlayout.h"

# 237 "/home/eagle/qt-copy/include/QtGui/qlayout.h"



# 240 "/home/eagle/qt-copy/include/QtGui/qlayout.h"





# 47 "/home/eagle/qt-copy/include/QtGui/qboxlayout.h"







# 54 "/home/eagle/qt-copy/include/QtGui/qboxlayout.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QBoxLayoutPrivate;

class  QBoxLayout : public QLayout
{
Q_OBJECT
inline QBoxLayoutPrivate* d_func() { return reinterpret_cast<QBoxLayoutPrivate *>(d_ptr); } inline const QBoxLayoutPrivate* d_func() const { return reinterpret_cast<const QBoxLayoutPrivate *>(d_ptr); } friend class QBoxLayoutPrivate;
public:
enum Direction { LeftToRight, RightToLeft, TopToBottom, BottomToTop,
Down = TopToBottom, Up = BottomToTop };

explicit QBoxLayout(Direction, QWidget *parent = 0);








# 79 "/home/eagle/qt-copy/include/QtGui/qboxlayout.h"
~QBoxLayout();

Direction direction() const;
void setDirection(Direction);

void addSpacing(int size);
void addStretch(int stretch = 0);
void addSpacerItem(QSpacerItem *spacerItem);
void addWidget(QWidget *, int stretch = 0, Qt::Alignment alignment = 0);
void addLayout(QLayout *layout, int stretch = 0);
void addStrut(int);
void addItem(QLayoutItem *);

void insertSpacing(int index, int size);
void insertStretch(int index, int stretch = 0);
void insertSpacerItem(int index, QSpacerItem *spacerItem);
void insertWidget(int index, QWidget *widget, int stretch = 0, Qt::Alignment alignment = 0);
void insertLayout(int index, QLayout *layout, int stretch = 0);

int spacing() const;
void setSpacing(int spacing);

bool setStretchFactor(QWidget *w, int stretch);
bool setStretchFactor(QLayout *l, int stretch);

QSize sizeHint() const;
QSize minimumSize() const;
QSize maximumSize() const;

bool hasHeightForWidth() const;
int heightForWidth(int) const;
int minimumHeightForWidth(int) const;

Qt::Orientations expandingDirections() const;
void invalidate();
QLayoutItem *itemAt(int) const;
QLayoutItem *takeAt(int);
int count() const;
void setGeometry(const QRect&);



# 121 "/home/eagle/qt-copy/include/QtGui/qboxlayout.h"
protected:

void insertItem(int index, QLayoutItem *);

private:
QBoxLayout(const QBoxLayout &); QBoxLayout &operator=(const QBoxLayout &);
};

class  QHBoxLayout : public QBoxLayout
{
Q_OBJECT
public:
QHBoxLayout();
explicit QHBoxLayout(QWidget *parent);
~QHBoxLayout();









# 145 "/home/eagle/qt-copy/include/QtGui/qboxlayout.h"
private:
QHBoxLayout(const QHBoxLayout &); QHBoxLayout &operator=(const QHBoxLayout &);
};

class  QVBoxLayout : public QBoxLayout
{
Q_OBJECT
public:
QVBoxLayout();
explicit QVBoxLayout(QWidget *parent);
~QVBoxLayout();









# 165 "/home/eagle/qt-copy/include/QtGui/qboxlayout.h"
private:
QVBoxLayout(const QVBoxLayout &); QVBoxLayout &operator=(const QVBoxLayout &);
};






# 76 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qclipboard.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qclipboard.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qclipboard.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qclipboard.h"
class QMimeSource;
class QMimeData;
class QImage;
class QPixmap;

class QClipboardPrivate;

class  QClipboard : public QObject
{
Q_OBJECT
inline QClipboardPrivate* d_func() { return reinterpret_cast<QClipboardPrivate *>(d_ptr); } inline const QClipboardPrivate* d_func() const { return reinterpret_cast<const QClipboardPrivate *>(d_ptr); } friend class QClipboardPrivate;
private:
QClipboard(QObject *parent);
~QClipboard();

public:
enum Mode { Clipboard, Selection, FindBuffer, LastMode = FindBuffer };

void clear(Mode mode = Clipboard);

bool supportsSelection() const;
bool supportsFindBuffer() const;

bool ownsSelection() const;
bool ownsClipboard() const;
bool ownsFindBuffer() const;

QString text(Mode mode = Clipboard) const;
QString text(QString& subtype, Mode mode = Clipboard) const;
void setText(const QString &, Mode mode = Clipboard);





# 92 "/home/eagle/qt-copy/include/QtGui/qclipboard.h"
const QMimeData *mimeData(Mode mode = Clipboard ) const;
void setMimeData(QMimeData *data, Mode mode = Clipboard);

QImage image(Mode mode = Clipboard) const;
QPixmap pixmap(Mode mode = Clipboard) const;
void setImage(const QImage &, Mode mode = Clipboard);
void setPixmap(const QPixmap &, Mode mode = Clipboard);

signals:
void changed(QClipboard::Mode mode);
void selectionChanged();
void findBufferChanged();
void dataChanged();
private slots:
void ownerDestroyed();

protected:
void connectNotify(const char *);
bool event(QEvent *);

friend class QApplication;
friend class QApplicationPrivate;
friend class QBaseApplication;
friend class QDragManager;
friend class QMimeSource;

private:
QClipboard(const QClipboard &); QClipboard &operator=(const QClipboard &);

bool supportsMode(Mode mode) const;
bool ownsMode(Mode mode) const;
void emitChanged(Mode mode);
};



# 128 "/home/eagle/qt-copy/include/QtGui/qclipboard.h"





# 77 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qcursor.h"






























































































































































# 78 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qdesktopwidget.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qwidget.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qdesktopwidget.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qdesktopwidget.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QApplication;
class QDesktopWidgetPrivate;

class  QDesktopWidget : public QWidget
{
Q_OBJECT
public:
QDesktopWidget();
~QDesktopWidget();

bool isVirtualDesktop() const;

int numScreens() const;
int primaryScreen() const;

int screenNumber(const QWidget *widget = 0) const;
int screenNumber(const QPoint &) const;

QWidget *screen(int screen = -1);

const QRect screenGeometry(int screen = -1) const;
const QRect screenGeometry(const QWidget *widget) const
{ return screenGeometry(screenNumber(widget)); }
const QRect screenGeometry(const QPoint &point) const
{ return screenGeometry(screenNumber(point)); }

const QRect availableGeometry(int screen = -1) const;
const QRect availableGeometry(const QWidget *widget) const
{ return availableGeometry(screenNumber(widget)); }
const QRect availableGeometry(const QPoint &point) const
{ return availableGeometry(screenNumber(point)); }

signals:
void resized(int);
void workAreaResized(int);

protected:
void resizeEvent(QResizeEvent *e);

private:
QDesktopWidget(const QDesktopWidget &); QDesktopWidget &operator=(const QDesktopWidget &);
inline QDesktopWidgetPrivate* d_func() { return reinterpret_cast<QDesktopWidgetPrivate *>(d_ptr); } inline const QDesktopWidgetPrivate* d_func() const { return reinterpret_cast<const QDesktopWidgetPrivate *>(d_ptr); } friend class QDesktopWidgetPrivate;

friend class QApplication;
friend class QApplicationPrivate;
};






# 79 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qdrag.h"











































































































# 80 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qevent.h"






















































































































































































































































































































































































































































































































































































































































































































































# 81 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qformlayout.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qlayout.h"




















































































































































































































































# 1 "/home/eagle/qt-copy/include/QtGui/QLayout"

# 47 "/home/eagle/qt-copy/include/QtGui/qformlayout.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qformlayout.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QFormLayoutPrivate;

class  QFormLayout : public QLayout
{
Q_OBJECT
Q_ENUMS(FormStyle FieldGrowthPolicy RowWrapPolicy ItemRole)
inline QFormLayoutPrivate* d_func() { return reinterpret_cast<QFormLayoutPrivate *>(d_ptr); } inline const QFormLayoutPrivate* d_func() const { return reinterpret_cast<const QFormLayoutPrivate *>(d_ptr); } friend class QFormLayoutPrivate;
Q_PROPERTY(FieldGrowthPolicy fieldGrowthPolicy READ fieldGrowthPolicy WRITE setFieldGrowthPolicy RESET resetFieldGrowthPolicy)
Q_PROPERTY(RowWrapPolicy rowWrapPolicy READ rowWrapPolicy WRITE setRowWrapPolicy RESET resetRowWrapPolicy)
Q_PROPERTY(Qt::Alignment labelAlignment READ labelAlignment WRITE setLabelAlignment RESET resetLabelAlignment)
Q_PROPERTY(Qt::Alignment formAlignment READ formAlignment WRITE setFormAlignment RESET resetFormAlignment)
Q_PROPERTY(int horizontalSpacing READ horizontalSpacing WRITE setHorizontalSpacing)
Q_PROPERTY(int verticalSpacing READ verticalSpacing WRITE setVerticalSpacing)

public:
enum FieldGrowthPolicy {
FieldsStayAtSizeHint,
ExpandingFieldsGrow,
AllNonFixedFieldsGrow
};

enum RowWrapPolicy {
DontWrapRows,
WrapLongRows,
WrapAllRows
};

enum ItemRole {
LabelRole = 0,
FieldRole = 1
};

explicit QFormLayout(QWidget *parent = 0);
~QFormLayout();

void setFieldGrowthPolicy(FieldGrowthPolicy policy);
FieldGrowthPolicy fieldGrowthPolicy() const;
void setRowWrapPolicy(RowWrapPolicy policy);
RowWrapPolicy rowWrapPolicy() const;
void setLabelAlignment(Qt::Alignment alignment);
Qt::Alignment labelAlignment() const;
void setFormAlignment(Qt::Alignment alignment);
Qt::Alignment formAlignment() const;

void setHorizontalSpacing(int spacing);
int horizontalSpacing() const;
void setVerticalSpacing(int spacing);
int verticalSpacing() const;

int spacing() const;
void setSpacing(int);

void addRow(QWidget *label, QWidget *field);
void addRow(QWidget *label, QLayout *field);
void addRow(const QString &labelText, QWidget *field);
void addRow(const QString &labelText, QLayout *field);
void addRow(QWidget *widget);
void addRow(QLayout *layout);

void insertRow(int row, QWidget *label, QWidget *field);
void insertRow(int row, QWidget *label, QLayout *field);
void insertRow(int row, const QString &labelText, QWidget *field);
void insertRow(int row, const QString &labelText, QLayout *field);
void insertRow(int row, QWidget *widget);
void insertRow(int row, QLayout *layout);

void setItem(int row, ItemRole role, QLayoutItem *item);
void setWidget(int row, ItemRole role, QWidget *widget);
void setLayout(int row, ItemRole role, QLayout *layout);

QLayoutItem *itemAt(int row, ItemRole role) const;
void getItemPosition(int index, int *rowPtr, ItemRole *rolePtr) const;
void getWidgetPosition(QWidget *widget, int *rowPtr, ItemRole *rolePtr) const;
void getLayoutPosition(QLayout *layout, int *rowPtr, ItemRole *rolePtr) const;
QWidget *labelForField(QWidget *field) const;
QWidget *labelForField(QLayout *field) const;


void addItem(QLayoutItem *item);
QLayoutItem *itemAt(int index) const;
QLayoutItem *takeAt(int index);

void setGeometry(const QRect &rect);
QSize minimumSize() const;
QSize sizeHint() const;
void invalidate();

bool hasHeightForWidth() const;
int heightForWidth(int width) const;
Qt::Orientations expandingDirections() const;
int count() const;

int rowCount() const;





# 153 "/home/eagle/qt-copy/include/QtGui/qformlayout.h"
private:
void resetFieldGrowthPolicy();
void resetRowWrapPolicy();
void resetLabelAlignment();
void resetFormAlignment();
};






# 82 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qgridlayout.h"


















































































































































































# 83 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qkeysequence.h"




































































































































































































































# 84 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qlayout.h"




















































































































































































































































# 85 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qlayoutitem.h"
























































































































































































# 86 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qmime.h"








































































































































































# 87 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qpalette.h"






































































































































































































































































# 88 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qsessionmanager.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qsessionmanager.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qwindowdefs.h"























































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qsessionmanager.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qsessionmanager.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"
















































































































































































































































# 50 "/home/eagle/qt-copy/include/QtGui/qsessionmanager.h"




# 54 "/home/eagle/qt-copy/include/QtGui/qsessionmanager.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QSessionManagerPrivate;

class  QSessionManager : public QObject
{
Q_OBJECT
inline QSessionManagerPrivate* d_func() { return reinterpret_cast<QSessionManagerPrivate *>(d_ptr); } inline const QSessionManagerPrivate* d_func() const { return reinterpret_cast<const QSessionManagerPrivate *>(d_ptr); } friend class QSessionManagerPrivate;
QSessionManager(QApplication *app, QString &id, QString &key);
~QSessionManager();
public:
QString sessionId() const;
QString sessionKey() const;




# 75 "/home/eagle/qt-copy/include/QtGui/qsessionmanager.h"
bool allowsInteraction();
bool allowsErrorInteraction();
void release();

void cancel();

enum RestartHint {
RestartIfRunning,
RestartAnyway,
RestartImmediately,
RestartNever
};
void setRestartHint(RestartHint);
RestartHint restartHint() const;

void setRestartCommand(const QStringList&);
QStringList restartCommand() const;
void setDiscardCommand(const QStringList&);
QStringList discardCommand() const;

void setManagerProperty(const QString& name, const QString& value);
void setManagerProperty(const QString& name, const QStringList& value);

bool isPhase2() const;
void requestPhase2();

private:
friend class QApplication;
friend class QApplicationPrivate;
friend class QBaseApplication;
};








# 89 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qshortcut.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qwidget.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qshortcut.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qkeysequence.h"




































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qshortcut.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qshortcut.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 58 "/home/eagle/qt-copy/include/QtGui/qshortcut.h"
class QShortcutPrivate;
class  QShortcut : public QObject
{
Q_OBJECT
inline QShortcutPrivate* d_func() { return reinterpret_cast<QShortcutPrivate *>(d_ptr); } inline const QShortcutPrivate* d_func() const { return reinterpret_cast<const QShortcutPrivate *>(d_ptr); } friend class QShortcutPrivate;
Q_PROPERTY(QKeySequence key READ key WRITE setKey)
Q_PROPERTY(QString whatsThis READ whatsThis WRITE setWhatsThis)
Q_PROPERTY(bool enabled READ isEnabled WRITE setEnabled)
Q_PROPERTY(bool autoRepeat READ autoRepeat WRITE setAutoRepeat)
Q_PROPERTY(Qt::ShortcutContext context READ context WRITE setContext)
public:
explicit QShortcut(QWidget *parent);
QShortcut(const QKeySequence& key, QWidget *parent,
const char *member = 0, const char *ambiguousMember = 0,
Qt::ShortcutContext context = Qt::WindowShortcut);
~QShortcut();

void setKey(const QKeySequence& key);
QKeySequence key() const;

void setEnabled(bool enable);
bool isEnabled() const;

void setContext(Qt::ShortcutContext context);
Qt::ShortcutContext context();

void setWhatsThis(const QString &text);
QString whatsThis() const;

void setAutoRepeat(bool on);
bool autoRepeat() const;

int id() const;

inline QWidget *parentWidget() const
{ return static_cast<QWidget *>(QObject::parent()); }

signals:
void activated();
void activatedAmbiguously();

protected:
bool event(QEvent *e);
};



# 105 "/home/eagle/qt-copy/include/QtGui/qshortcut.h"





# 90 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qsizepolicy.h"



































































































































































































































# 91 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qsound.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qsound.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qsound.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qsound.h"
class QSoundPrivate;

class  QSound : public QObject
{
Q_OBJECT

public:
static bool isAvailable();
static void play(const QString& filename);

explicit QSound(const QString& filename, QObject* parent = 0);
~QSound();

int loops() const;
int loopsRemaining() const;
void setLoops(int);
QString fileName() const;

bool isFinished() const;

public slots:
void play();
void stop();

public:




# 86 "/home/eagle/qt-copy/include/QtGui/qsound.h"
private:
inline QSoundPrivate* d_func() { return reinterpret_cast<QSoundPrivate *>(d_ptr); } inline const QSoundPrivate* d_func() const { return reinterpret_cast<const QSoundPrivate *>(d_ptr); } friend class QSoundPrivate;
friend class QAuServer;
};



# 93 "/home/eagle/qt-copy/include/QtGui/qsound.h"





# 92 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qstackedlayout.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qlayout.h"




















































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qstackedlayout.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qstackedlayout.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QStackedLayoutPrivate;

class  QStackedLayout : public QLayout
{
Q_OBJECT
inline QStackedLayoutPrivate* d_func() { return reinterpret_cast<QStackedLayoutPrivate *>(d_ptr); } inline const QStackedLayoutPrivate* d_func() const { return reinterpret_cast<const QStackedLayoutPrivate *>(d_ptr); } friend class QStackedLayoutPrivate;
Q_ENUMS(StackingMode)
Q_PROPERTY(int currentIndex READ currentIndex WRITE setCurrentIndex NOTIFY currentChanged)
Q_PROPERTY(StackingMode stackingMode READ stackingMode WRITE setStackingMode)


public:
enum StackingMode {
StackOne,
StackAll
};

QStackedLayout();
explicit QStackedLayout(QWidget *parent);
explicit QStackedLayout(QLayout *parentLayout);
~QStackedLayout();

int addWidget(QWidget *w);
int insertWidget(int index, QWidget *w);

QWidget *currentWidget() const;
int currentIndex() const;

# 83 "/home/eagle/qt-copy/include/QtGui/qstackedlayout.h"
inline QWidget *widget() { return QLayout::widget(); }



# 87 "/home/eagle/qt-copy/include/QtGui/qstackedlayout.h"
QWidget *widget(int) const;
int count() const;

StackingMode stackingMode() const;
void setStackingMode(StackingMode stackingMode);


void addItem(QLayoutItem *item);
QSize sizeHint() const;
QSize minimumSize() const;
QLayoutItem *itemAt(int) const;
QLayoutItem *takeAt(int);
void setGeometry(const QRect &rect);

signals:
void widgetRemoved(int index);
void currentChanged(int index);

public slots:
void setCurrentIndex(int index);
void setCurrentWidget(QWidget *w);

private:
QStackedLayout(const QStackedLayout &); QStackedLayout &operator=(const QStackedLayout &);
};






# 93 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtooltip.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qwidget.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qtooltip.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qtooltip.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qtooltip.h"
class  QToolTip
{
QToolTip();
public:
static void showText(const QPoint &pos, const QString &text, QWidget *w = 0);
static void showText(const QPoint &pos, const QString &text, QWidget *w, const QRect &rect);
static inline void hideText() { showText(QPoint(), QString()); }

static bool isVisible();
static QString text();

static QPalette palette();
static void setPalette(const QPalette &);
static QFont font();
static void setFont(const QFont &);






# 78 "/home/eagle/qt-copy/include/QtGui/qtooltip.h"
};



# 82 "/home/eagle/qt-copy/include/QtGui/qtooltip.h"





# 94 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qwhatsthis.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qwhatsthis.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qcursor.h"






























































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qwhatsthis.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qwhatsthis.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 58 "/home/eagle/qt-copy/include/QtGui/qwhatsthis.h"
class QAction;




# 63 "/home/eagle/qt-copy/include/QtGui/qwhatsthis.h"
class  QWhatsThis
{
QWhatsThis();

public:
static void enterWhatsThisMode();
static bool inWhatsThisMode();
static void leaveWhatsThisMode();

static void showText(const QPoint &pos, const QString &text, QWidget *w = 0);
static void hideText();

static QAction *createAction(QObject *parent = 0);






# 82 "/home/eagle/qt-copy/include/QtGui/qwhatsthis.h"
};



# 86 "/home/eagle/qt-copy/include/QtGui/qwhatsthis.h"





# 95 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qwidget.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 96 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qwidgetaction.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qaction.h"



















































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qwidgetaction.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qwidgetaction.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qwidgetaction.h"
class QWidgetActionPrivate;

class  QWidgetAction : public QAction
{
Q_OBJECT
inline QWidgetActionPrivate* d_func() { return reinterpret_cast<QWidgetActionPrivate *>(d_ptr); } inline const QWidgetActionPrivate* d_func() const { return reinterpret_cast<const QWidgetActionPrivate *>(d_ptr); } friend class QWidgetActionPrivate;

public:
explicit QWidgetAction(QObject *parent);
virtual ~QWidgetAction();

void setDefaultWidget(QWidget *w);
QWidget *defaultWidget() const;

QWidget *requestWidget(QWidget *parent);
void releaseWidget(QWidget *widget);

protected:
virtual bool event(QEvent *);
virtual bool eventFilter(QObject *, QEvent *);
virtual QWidget *createWidget(QWidget *parent);
virtual void deleteWidget(QWidget *widget);
QList<QWidget *> createdWidgets() const;

private:
QWidgetAction(const QWidgetAction &); QWidgetAction &operator=(const QWidgetAction &);

friend class QToolBar;
};



# 89 "/home/eagle/qt-copy/include/QtGui/qwidgetaction.h"





# 97 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qwindowdefs.h"























































































































































































# 98 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qbrush.h"

























































































































































































































































































































# 99 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qcolor.h"





















































































































































































































































































# 100 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qcolormap.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qatomic.h"

























































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qcolormap.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qrgb.h"


























































































# 48 "/home/eagle/qt-copy/include/QtGui/qcolormap.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qvector.h"































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qcolormap.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qwindowdefs.h"























































































































































































# 50 "/home/eagle/qt-copy/include/QtGui/qcolormap.h"


# 52 "/home/eagle/qt-copy/include/QtGui/qcolormap.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QColor;
class QColormapPrivate;

class  QColormap
{
public:
enum Mode { Direct, Indexed, Gray };

static void initialize();
static void cleanup();

static QColormap instance(int screen = -1);

QColormap(const QColormap &colormap);
~QColormap();

QColormap &operator=(const QColormap &colormap);

Mode mode() const;

int depth() const;
int size() const;

uint pixel(const QColor &color) const;
const QColor colorAt(uint pixel) const;

const QVector<QColor> colormap() const;





# 90 "/home/eagle/qt-copy/include/QtGui/qcolormap.h"
private:
QColormap();
QColormapPrivate *d;
};






# 101 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qdrawutil.h"














































































































































# 102 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qmatrix.h"















































































































































































# 103 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qpaintdevice.h"













































































































































































# 104 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qpaintengine.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qpaintengine.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qobjectdefs.h"











































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qpaintengine.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qpainter.h"






































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qpaintengine.h"


# 51 "/home/eagle/qt-copy/include/QtGui/qpaintengine.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QFontEngine;
class QLineF;
class QPaintDevice;
class QPaintEnginePrivate;
class QPainterPath;
class QPointF;
class QPolygonF;
class QRectF;
struct QGlyphLayout;
class QTextItemInt;
class QPaintEngineState;

class  QTextItem {
public:
enum RenderFlag {
RightToLeft = 0x1,
Overline = 0x10,
Underline = 0x20,
StrikeOut = 0x40,

Dummy = 0xffffffff
};
typedef QFlags<RenderFlag> RenderFlags;
qreal descent() const;
qreal ascent() const;
qreal width() const;

RenderFlags renderFlags() const;
QString text() const;
QFont font() const;
};
template <> class QTypeInfo<QTextItem> { public: enum { isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QTextItem)>sizeof(void*)), isPointer = false, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QTextItem"; } };


class  QPaintEngine
{
inline QPaintEnginePrivate* d_func() { return reinterpret_cast<QPaintEnginePrivate *>(d_ptr); } inline const QPaintEnginePrivate* d_func() const { return reinterpret_cast<const QPaintEnginePrivate *>(d_ptr); } friend class QPaintEnginePrivate;
public:
enum PaintEngineFeature {
PrimitiveTransform = 0x00000001, 
PatternTransform = 0x00000002, 
PixmapTransform = 0x00000004, 
PatternBrush = 0x00000008, 
LinearGradientFill = 0x00000010, 
RadialGradientFill = 0x00000020, 
ConicalGradientFill = 0x00000040, 
AlphaBlend = 0x00000080, 
PorterDuff = 0x00000100, 
PainterPaths = 0x00000200, 
Antialiasing = 0x00000400, 
BrushStroke = 0x00000800, 
ConstantOpacity = 0x00001000, 
MaskedBrush = 0x00002000, 
PerspectiveTransform = 0x00004000, 
BlendModes = 0x00008000, 
ObjectBoundingModeGradients = 0x00010000, 
PaintOutsidePaintEvent = 0x20000000, 







AllFeatures = 0xffffffff 
};
typedef QFlags<PaintEngineFeature> PaintEngineFeatures;

enum DirtyFlag {
DirtyPen = 0x0001,
DirtyBrush = 0x0002,
DirtyBrushOrigin = 0x0004,
DirtyFont = 0x0008,
DirtyBackground = 0x0010,
DirtyBackgroundMode = 0x0020,
DirtyTransform = 0x0040,
DirtyClipRegion = 0x0080,
DirtyClipPath = 0x0100,
DirtyHints = 0x0200,
DirtyCompositionMode = 0x0400,
DirtyClipEnabled = 0x0800,
DirtyOpacity = 0x1000,

AllDirty = 0xffff
};
typedef QFlags<DirtyFlag> DirtyFlags;

enum PolygonDrawMode {
OddEvenMode,
WindingMode,
ConvexMode,
PolylineMode
};

explicit QPaintEngine(PaintEngineFeatures features=0);
virtual ~QPaintEngine();

bool isActive() const { return active; }
void setActive(bool newState) { active = newState; }

virtual bool begin(QPaintDevice *pdev) = 0;
virtual bool end() = 0;

virtual void updateState(const QPaintEngineState &state) = 0;

virtual void drawRects(const QRect *rects, int rectCount);
virtual void drawRects(const QRectF *rects, int rectCount);

virtual void drawLines(const QLine *lines, int lineCount);
virtual void drawLines(const QLineF *lines, int lineCount);

virtual void drawEllipse(const QRectF &r);
virtual void drawEllipse(const QRect &r);

virtual void drawPath(const QPainterPath &path);

virtual void drawPoints(const QPointF *points, int pointCount);
virtual void drawPoints(const QPoint *points, int pointCount);

virtual void drawPolygon(const QPointF *points, int pointCount, PolygonDrawMode mode);
virtual void drawPolygon(const QPoint *points, int pointCount, PolygonDrawMode mode);

virtual void drawPixmap(const QRectF &r, const QPixmap &pm, const QRectF &sr) = 0;
virtual void drawTextItem(const QPointF &p, const QTextItem &textItem);
virtual void drawTiledPixmap(const QRectF &r, const QPixmap &pixmap, const QPointF &s);
virtual void drawImage(const QRectF &r, const QImage &pm, const QRectF &sr,
Qt::ImageConversionFlags flags = Qt::AutoColor);

void setPaintDevice(QPaintDevice *device);
QPaintDevice *paintDevice() const;

void setSystemClip(const QRegion &baseClip);
QRegion systemClip() const;

void setSystemRect(const QRect &rect);
QRect systemRect() const;






# 199 "/home/eagle/qt-copy/include/QtGui/qpaintengine.h"
virtual QPoint coordinateOffset() const;

enum Type {
X11,
Windows,
QuickDraw, CoreGraphics, MacPrinter,
QWindowSystem,
PostScript,
OpenGL,
Picture,
SVG,
Raster,
Direct3D,
Pdf,

User = 50, 
MaxUser = 100 
};
virtual Type type() const = 0;

inline void fix_neg_rect(int *x, int *y, int *w, int *h);

inline bool testDirty(DirtyFlags df);
inline void setDirty(DirtyFlags df);
inline void clearDirty(DirtyFlags df);

bool hasFeature(PaintEngineFeatures feature) const { return (gccaps & feature) != 0; }

QPainter *painter() const;

inline void syncState() { qt_noop(); updateState(*state); }

protected:
QPaintEngine(QPaintEnginePrivate &data, PaintEngineFeatures devcaps=0);

QPaintEngineState *state;
PaintEngineFeatures gccaps;

uint active : 1;
uint selfDestruct : 1;

QPaintEnginePrivate *d_ptr;

private:
void setAutoDestruct(bool autoDestr) { selfDestruct = autoDestr; }
bool autoDestruct() const { return selfDestruct; }
QPaintEngine(const QPaintEngine &); QPaintEngine &operator=(const QPaintEngine &);

friend class QFontEngineBox;
friend class QFontEngineMac;
friend class QFontEngineWin;

# 251 "/home/eagle/qt-copy/include/QtGui/qpaintengine.h"
friend class QFontEngineFT;


# 254 "/home/eagle/qt-copy/include/QtGui/qpaintengine.h"
friend class QFontEngineQPF1;
friend class QFontEngineQPF;

# 257 "/home/eagle/qt-copy/include/QtGui/qpaintengine.h"
friend class QPSPrintEngine;
friend class QMacPrintEngine;
friend class QMacPrintEnginePrivate;





# 265 "/home/eagle/qt-copy/include/QtGui/qpaintengine.h"
friend class QPainter;
friend class QPainterPrivate;
friend class QWidget;
friend class QWidgetPrivate;
friend class QWin32PaintEngine;
friend class QWin32PaintEnginePrivate;
friend class QMacCGContext;
friend class QPreviewPaintEngine;
};


class  QPaintEngineState
{
public:
QPaintEngine::DirtyFlags state() const { return dirtyFlags; }

QPen pen() const;
QBrush brush() const;
QPointF brushOrigin() const;
QBrush backgroundBrush() const;
Qt::BGMode backgroundMode() const;
QFont font() const;
QMatrix matrix() const;
QTransform transform() const;

Qt::ClipOperation clipOperation() const;
QRegion clipRegion() const;
QPainterPath clipPath() const;
bool isClipEnabled() const;

QPainter::RenderHints renderHints() const;
QPainter::CompositionMode compositionMode() const;
qreal opacity() const;

QPainter *painter() const;

bool brushNeedsResolving() const;
bool penNeedsResolving() const;

protected:
friend class QPaintEngine;
friend class QWidget;
friend class QPainter;
friend class QPainterPrivate;
friend class QMacPrintEnginePrivate;

QPaintEngine::DirtyFlags dirtyFlags;
};





inline void QPaintEngine::fix_neg_rect(int *x, int *y, int *w, int *h)
{
if (*w < 0) {
*w = -*w;
*x -= *w - 1;
}
if (*h < 0) {
*h = -*h;
*y -= *h - 1;
}
}

inline bool QPaintEngine::testDirty(DirtyFlags df) {
qt_noop();
return ((state->dirtyFlags & df) != 0);
}

inline void QPaintEngine::setDirty(DirtyFlags df) {
qt_noop();
state->dirtyFlags |= df;
}

inline void QPaintEngine::clearDirty(DirtyFlags df)
{
qt_noop();
state->dirtyFlags &= ~static_cast<uint>(df);
}

inline QFlags<QTextItem::RenderFlags::enum_type> operator|(QTextItem::RenderFlags::enum_type f1, QTextItem::RenderFlags::enum_type f2) { return QFlags<QTextItem::RenderFlags::enum_type>(f1) | f2; } inline QFlags<QTextItem::RenderFlags::enum_type> operator|(QTextItem::RenderFlags::enum_type f1, QFlags<QTextItem::RenderFlags::enum_type> f2) { return f2 | f1; }
inline QFlags<QPaintEngine::PaintEngineFeatures::enum_type> operator|(QPaintEngine::PaintEngineFeatures::enum_type f1, QPaintEngine::PaintEngineFeatures::enum_type f2) { return QFlags<QPaintEngine::PaintEngineFeatures::enum_type>(f1) | f2; } inline QFlags<QPaintEngine::PaintEngineFeatures::enum_type> operator|(QPaintEngine::PaintEngineFeatures::enum_type f1, QFlags<QPaintEngine::PaintEngineFeatures::enum_type> f2) { return f2 | f1; }
inline QFlags<QPaintEngine::DirtyFlags::enum_type> operator|(QPaintEngine::DirtyFlags::enum_type f1, QPaintEngine::DirtyFlags::enum_type f2) { return QFlags<QPaintEngine::DirtyFlags::enum_type>(f1) | f2; } inline QFlags<QPaintEngine::DirtyFlags::enum_type> operator|(QPaintEngine::DirtyFlags::enum_type f1, QFlags<QPaintEngine::DirtyFlags::enum_type> f2) { return f2 | f1; }






# 105 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qpainter.h"






































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 106 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qpainterpath.h"















































































































































































































































































































































































































# 107 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qpen.h"














































































































































# 108 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qpolygon.h"









































































































































































# 109 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qprintengine.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qvariant.h"






















































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qprintengine.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qprinter.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qpaintdevice.h"













































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qprinter.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qprinter.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qprinter.h"




typedef QtValidLicenseForGuiModule QtGuiModule;







# 62 "/home/eagle/qt-copy/include/QtGui/qprinter.h"
class QPrinterPrivate;
class QPaintEngine;
class QPrintEngine;
class QPrinterInfo;

class  QPrinter : public QPaintDevice
{
inline QPrinterPrivate* d_func() { return reinterpret_cast<QPrinterPrivate *>(d_ptr); } inline const QPrinterPrivate* d_func() const { return reinterpret_cast<const QPrinterPrivate *>(d_ptr); } friend class QPrinterPrivate;
public:
enum PrinterMode { ScreenResolution, PrinterResolution, HighResolution };

explicit QPrinter(PrinterMode mode = ScreenResolution);
explicit QPrinter(const QPrinterInfo& printer, PrinterMode mode = ScreenResolution);
~QPrinter();

int devType() const;

enum Orientation { Portrait, Landscape };


# 82 "/home/eagle/qt-copy/include/QtGui/qprinter.h"
enum PageSize { A4, B5, Letter, Legal, Executive,
A0, A1, A2, A3, A5, A6, A7, A8, A9, B0, B1,
B10, B2, B3, B4, B6, B7, B8, B9, C5E, Comm10E,
DLE, Folio, Ledger, Tabloid, Custom, NPageSize = Custom, NPaperSize = Custom };
typedef PageSize PaperSize;











# 98 "/home/eagle/qt-copy/include/QtGui/qprinter.h"
enum PageOrder { FirstPageFirst,
LastPageFirst };

enum ColorMode { GrayScale,
Color };

enum PaperSource { OnlyOne,
Lower,
Middle,
Manual,
Envelope,
EnvelopeManual,
Auto,
Tractor,
SmallFormat,
LargeFormat,
LargeCapacity,
Cassette,
FormSource,
MaxPageSource
};

enum PrinterState { Idle,
Active,
Aborted,
Error };

enum OutputFormat { NativeFormat, PdfFormat, PostScriptFormat };


enum PrintRange { AllPages, Selection, PageRange };

enum Unit {
Millimeter,
Point,
Inch,
Pica,
Didot,
Cicero,
DevicePixel
};

enum DuplexMode {
DuplexNone = 0,
DuplexAuto,
DuplexLongSide,
DuplexShortSide
};





# 151 "/home/eagle/qt-copy/include/QtGui/qprinter.h"
void setOutputFormat(OutputFormat format);
OutputFormat outputFormat() const;

void setPrinterName(const QString &);
QString printerName() const;

bool isValid() const;

void setOutputFileName(const QString &);
QString outputFileName()const;

void setPrintProgram(const QString &);
QString printProgram() const;

void setDocName(const QString &);
QString docName() const;

void setCreator(const QString &);
QString creator() const;

void setOrientation(Orientation);
Orientation orientation() const;

void setPageSize(PageSize);
PageSize pageSize() const;

void setPaperSize(PaperSize);
PaperSize paperSize() const;

void setPaperSize(const QSizeF &paperSize, Unit unit);
QSizeF paperSize(Unit unit) const;

void setPageOrder(PageOrder);
PageOrder pageOrder() const;

void setResolution(int);
int resolution() const;

void setColorMode(ColorMode);
ColorMode colorMode() const;

void setCollateCopies(bool collate);
bool collateCopies() const;

void setFullPage(bool);
bool fullPage() const;

void setNumCopies(int);
int numCopies() const;

void setPaperSource(PaperSource);
PaperSource paperSource() const;

void setDuplex(DuplexMode duplex);
DuplexMode duplex() const;

QList<int> supportedResolutions() const;





# 213 "/home/eagle/qt-copy/include/QtGui/qprinter.h"
void setFontEmbeddingEnabled(bool enable);
bool fontEmbeddingEnabled() const;

void setDoubleSidedPrinting(bool enable);
bool doubleSidedPrinting() const;






# 224 "/home/eagle/qt-copy/include/QtGui/qprinter.h"
QRect paperRect() const;
QRect pageRect() const;
QRectF paperRect(Unit) const;
QRectF pageRect(Unit) const;


# 230 "/home/eagle/qt-copy/include/QtGui/qprinter.h"
QString printerSelectionOption() const;
void setPrinterSelectionOption(const QString &);


# 234 "/home/eagle/qt-copy/include/QtGui/qprinter.h"
bool newPage();
bool abort();

PrinterState printerState() const;

QPaintEngine *paintEngine() const;
QPrintEngine *printEngine() const;






# 247 "/home/eagle/qt-copy/include/QtGui/qprinter.h"
void setFromTo(int fromPage, int toPage);
int fromPage() const;
int toPage() const;

void setPrintRange(PrintRange range);
PrintRange printRange() const;

void setPageMargins(qreal left, qreal top, qreal right, qreal bottom, Unit unit);
void getPageMargins(qreal *left, qreal *top, qreal *right, qreal *bottom, Unit unit) const;




























# 284 "/home/eagle/qt-copy/include/QtGui/qprinter.h"
protected:
int metric(PaintDeviceMetric) const;
void setEngines(QPrintEngine *printEngine, QPaintEngine *paintEngine);

private:
void init(PrinterMode mode);

QPrinter(const QPrinter &); QPrinter &operator=(const QPrinter &);

QPrinterPrivate *d_ptr;

friend class QPrintDialogWin;
friend class QAbstractPrintDialog;
friend class QPrintPreviewWidgetPrivate;
friend class QTextDocument;
};


























# 326 "/home/eagle/qt-copy/include/QtGui/qprinter.h"





# 48 "/home/eagle/qt-copy/include/QtGui/qprintengine.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qprintengine.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 58 "/home/eagle/qt-copy/include/QtGui/qprintengine.h"
class  QPrintEngine
{
public:
virtual ~QPrintEngine() {}
enum PrintEnginePropertyKey {
PPK_CollateCopies,
PPK_ColorMode,
PPK_Creator,
PPK_DocumentName,
PPK_FullPage,
PPK_NumberOfCopies,
PPK_Orientation,
PPK_OutputFileName,
PPK_PageOrder,
PPK_PageRect,
PPK_PageSize,
PPK_PaperRect,
PPK_PaperSource,
PPK_PrinterName,
PPK_PrinterProgram,
PPK_Resolution,
PPK_SelectionOption,
PPK_SupportedResolutions,

PPK_WindowsPageSize,
PPK_FontEmbedding,
PPK_SuppressSystemPrintStatus,

PPK_Duplex,

PPK_PaperSources,
PPK_CustomPaperSize,
PPK_PageMargins,
PPK_PaperSize = PPK_PageSize,

PPK_CustomBase = 0xff00
};

virtual void setProperty(PrintEnginePropertyKey key, const QVariant &value) = 0;
virtual QVariant property(PrintEnginePropertyKey key) const = 0;

virtual bool newPage() = 0;
virtual bool abort() = 0;

virtual int metric(QPaintDevice::PaintDeviceMetric) const = 0;

virtual QPrinter::PrinterState printerState() const = 0;






# 111 "/home/eagle/qt-copy/include/QtGui/qprintengine.h"
};



# 115 "/home/eagle/qt-copy/include/QtGui/qprintengine.h"





# 110 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qprinter.h"










































































































































































































































































































































# 111 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qprinterinfo.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qprinter.h"










































































































































































































































































































































# 1 "/home/eagle/qt-copy/include/QtGui/QPrinter"

# 47 "/home/eagle/qt-copy/include/QtGui/qprinterinfo.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qlist.h"











































































































































































































































































































































































































































































































































































































































































































# 1 "/home/eagle/qt-copy/include/QtCore/QList"

# 48 "/home/eagle/qt-copy/include/QtGui/qprinterinfo.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qprinterinfo.h"




typedef QtValidLicenseForGuiModule QtGuiModule;


# 57 "/home/eagle/qt-copy/include/QtGui/qprinterinfo.h"
class QPrinterInfoPrivate;
class  QPrinterInfo
{
inline QPrinterInfoPrivate* d_func() { return reinterpret_cast<QPrinterInfoPrivate *>(d_ptr); } inline const QPrinterInfoPrivate* d_func() const { return reinterpret_cast<const QPrinterInfoPrivate *>(d_ptr); } friend class QPrinterInfoPrivate;

public:
QPrinterInfo();
QPrinterInfo(const QPrinterInfo& src);
QPrinterInfo(const QPrinter& printer);
~QPrinterInfo();

QPrinterInfo& operator=(const QPrinterInfo& src);

QString printerName() const;
bool isNull() const;
bool isDefault() const;
QList<QPrinter::PaperSize> supportedPaperSizes() const;

static QList<QPrinterInfo> availablePrinters();
static QPrinterInfo defaultPrinter();

private:
QPrinterInfo(const QString& name);

QPrinterInfoPrivate* d_ptr;
};



# 86 "/home/eagle/qt-copy/include/QtGui/qprinterinfo.h"





# 112 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qregion.h"





















































































































































































































# 113 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qrgb.h"


























































































# 114 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qstylepainter.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qpainter.h"






































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qstylepainter.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qstyle.h"

























































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qstylepainter.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qwidget.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qstylepainter.h"


# 51 "/home/eagle/qt-copy/include/QtGui/qstylepainter.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QStylePainter : public QPainter
{
public:
inline QStylePainter() : QPainter(), widget(0), wstyle(0) {}
inline explicit QStylePainter(QWidget *w) { begin(w, w); }
inline QStylePainter(QPaintDevice *pd, QWidget *w) { begin(pd, w); }
inline bool begin(QWidget *w) { return begin(w, w); }
inline bool begin(QPaintDevice *pd, QWidget *w) {
qt_noop();
widget = w;
wstyle = w->style();
return QPainter::begin(pd);
};
inline void drawPrimitive(QStyle::PrimitiveElement pe, const QStyleOption &opt);
inline void drawControl(QStyle::ControlElement ce, const QStyleOption &opt);
inline void drawComplexControl(QStyle::ComplexControl cc, const QStyleOptionComplex &opt);
inline void drawItemText(const QRect &r, int flags, const QPalette &pal, bool enabled,
const QString &text, QPalette::ColorRole textRole = QPalette::NoRole);
inline void drawItemPixmap(const QRect &r, int flags, const QPixmap &pixmap);
inline QStyle *style() const { return wstyle; }

private:
QWidget *widget;
QStyle *wstyle;
QStylePainter(const QStylePainter &); QStylePainter &operator=(const QStylePainter &);
};

void QStylePainter::drawPrimitive(QStyle::PrimitiveElement pe, const QStyleOption &opt)
{
wstyle->drawPrimitive(pe, &opt, this, widget);
}

void QStylePainter::drawControl(QStyle::ControlElement ce, const QStyleOption &opt)
{
wstyle->drawControl(ce, &opt, this, widget);
}

void QStylePainter::drawComplexControl(QStyle::ComplexControl cc, const QStyleOptionComplex &opt)
{
wstyle->drawComplexControl(cc, &opt, this, widget);
}

void QStylePainter::drawItemText(const QRect &r, int flags, const QPalette &pal, bool enabled,
const QString &text, QPalette::ColorRole textRole)
{
wstyle->drawItemText(this, r, flags, pal, enabled, text, textRole);
}

void QStylePainter::drawItemPixmap(const QRect &r, int flags, const QPixmap &pixmap)
{
wstyle->drawItemPixmap(this, r, flags, pixmap);
}






# 115 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtransform.h"































































































































































































































































































































































# 116 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qwmatrix.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qmatrix.h"















































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qwmatrix.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qwmatrix.h"




typedef QtValidLicenseForGuiModule QtGuiModule;





# 59 "/home/eagle/qt-copy/include/QtGui/qwmatrix.h"





# 117 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qcdestyle.h"















































# 1 "/home/eagle/qt-copy/include/QtGui/qmotifstyle.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qcommonstyle.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qstyle.h"

























































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qcommonstyle.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qcommonstyle.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QCommonStylePrivate;

class  QCommonStyle: public QStyle
{
Q_OBJECT

public:
QCommonStyle();
~QCommonStyle();

void drawPrimitive(PrimitiveElement pe, const QStyleOption *opt, QPainter *p,
const QWidget *w = 0) const;
void drawControl(ControlElement element, const QStyleOption *opt, QPainter *p,
const QWidget *w = 0) const;
QRect subElementRect(SubElement r, const QStyleOption *opt, const QWidget *widget = 0) const;
void drawComplexControl(ComplexControl cc, const QStyleOptionComplex *opt, QPainter *p,
const QWidget *w = 0) const;
SubControl hitTestComplexControl(ComplexControl cc, const QStyleOptionComplex *opt,
const QPoint &pt, const QWidget *w = 0) const;
QRect subControlRect(ComplexControl cc, const QStyleOptionComplex *opt, SubControl sc,
const QWidget *w = 0) const;
QSize sizeFromContents(ContentsType ct, const QStyleOption *opt,
const QSize &contentsSize, const QWidget *widget = 0) const;

int pixelMetric(PixelMetric m, const QStyleOption *opt = 0, const QWidget *widget = 0) const;

int styleHint(StyleHint sh, const QStyleOption *opt = 0, const QWidget *w = 0,
QStyleHintReturn *shret = 0) const;

QPixmap standardPixmap(StandardPixmap sp, const QStyleOption *opt = 0,
const QWidget *widget = 0) const;

QPixmap generatedIconPixmap(QIcon::Mode iconMode, const QPixmap &pixmap,
const QStyleOption *opt) const;
protected slots:
QIcon standardIconImplementation(StandardPixmap standardIcon, const QStyleOption *opt = 0,
const QWidget *widget = 0) const;

protected:
QCommonStyle(QCommonStylePrivate &dd);

private:
inline QCommonStylePrivate* d_func() { return reinterpret_cast<QCommonStylePrivate *>(d_ptr); } inline const QCommonStylePrivate* d_func() const { return reinterpret_cast<const QCommonStylePrivate *>(d_ptr); } friend class QCommonStylePrivate;
QCommonStyle(const QCommonStyle &); QCommonStyle &operator=(const QCommonStyle &);
};






# 47 "/home/eagle/qt-copy/include/QtGui/qmotifstyle.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qpointer.h"


















































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qmotifstyle.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qmotifstyle.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 58 "/home/eagle/qt-copy/include/QtGui/qmotifstyle.h"
class QPalette;
class QFocusFrame;

class QMotifStylePrivate;
class  QMotifStyle : public QCommonStyle
{
Q_OBJECT
public:
explicit QMotifStyle(bool useHighlightCols=false);
virtual ~QMotifStyle();

void setUseHighlightColors(bool);
bool useHighlightColors() const;

void polish(QPalette&);
void polish(QWidget*);
void unpolish(QWidget*);
void polish(QApplication*);
void unpolish(QApplication*);

void drawPrimitive(PrimitiveElement pe, const QStyleOption *opt, QPainter *p,
const QWidget *w = 0) const;

void drawControl(ControlElement element, const QStyleOption *opt, QPainter *p,
const QWidget *w = 0) const;

void drawComplexControl(ComplexControl cc, const QStyleOptionComplex *opt, QPainter *p,
const QWidget *w = 0) const;

QRect subControlRect(ComplexControl cc, const QStyleOptionComplex *opt,
SubControl sc, const QWidget *widget = 0) const;

int pixelMetric(PixelMetric metric, const QStyleOption *option = 0,
const QWidget *widget = 0) const;

QSize sizeFromContents(ContentsType ct, const QStyleOption *opt,
const QSize &contentsSize, const QWidget *widget = 0) const;

QRect subElementRect(SubElement r, const QStyleOption *opt, const QWidget *widget = 0) const;

QPixmap standardPixmap(StandardPixmap standardPixmap, const QStyleOption *opt,
const QWidget *widget = 0) const;

int styleHint(StyleHint hint, const QStyleOption *opt = 0, const QWidget *widget = 0,
QStyleHintReturn *returnData = 0) const;

bool event(QEvent *);
QPalette standardPalette() const;

protected slots:
QIcon standardIconImplementation(StandardPixmap standardIcon, const QStyleOption *opt = 0,
const QWidget *widget = 0) const;

protected:
QPointer<QFocusFrame> focus;
QMotifStyle(QMotifStylePrivate &dd, bool useHighlightCols = false);
void timerEvent(QTimerEvent *event);
bool eventFilter(QObject *o, QEvent *e);

private:
inline QMotifStylePrivate* d_func() { return reinterpret_cast<QMotifStylePrivate *>(d_ptr); } inline const QMotifStylePrivate* d_func() const { return reinterpret_cast<const QMotifStylePrivate *>(d_ptr); } friend class QMotifStylePrivate;
QMotifStyle(const QMotifStyle &); QMotifStyle &operator=(const QMotifStyle &);

bool highlightCols;
};



# 126 "/home/eagle/qt-copy/include/QtGui/qmotifstyle.h"





# 48 "/home/eagle/qt-copy/include/QtGui/qcdestyle.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qcdestyle.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 58 "/home/eagle/qt-copy/include/QtGui/qcdestyle.h"
class  QCDEStyle : public QMotifStyle
{
Q_OBJECT
public:
explicit QCDEStyle(bool useHighlightCols = false);
virtual ~QCDEStyle();

int pixelMetric(PixelMetric metric, const QStyleOption *option = 0,
const QWidget *widget = 0) const;
void drawControl(ControlElement element, const QStyleOption *opt, QPainter *p,
const QWidget *w = 0) const;
void drawPrimitive(PrimitiveElement pe, const QStyleOption *opt, QPainter *p,
const QWidget *w = 0) const;
QPalette standardPalette() const;

protected slots:
QIcon standardIconImplementation(StandardPixmap standardIcon, const QStyleOption *opt = 0,
const QWidget *widget = 0) const;
};



# 80 "/home/eagle/qt-copy/include/QtGui/qcdestyle.h"





# 118 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qcleanlooksstyle.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qwindowsstyle.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qcommonstyle.h"









































































































# 47 "/home/eagle/qt-copy/include/QtGui/qwindowsstyle.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qwindowsstyle.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qwindowsstyle.h"
class QWindowsStylePrivate;

class  QWindowsStyle : public QCommonStyle
{
Q_OBJECT
public:
QWindowsStyle();
~QWindowsStyle();

void polish(QApplication*);
void unpolish(QApplication*);

void polish(QWidget*);
void unpolish(QWidget*);

void polish(QPalette &);

void drawPrimitive(PrimitiveElement pe, const QStyleOption *opt, QPainter *p,
const QWidget *w = 0) const;
void drawControl(ControlElement element, const QStyleOption *opt, QPainter *p,
const QWidget *w = 0) const;
QRect subElementRect(SubElement r, const QStyleOption *opt, const QWidget *widget = 0) const;
void drawComplexControl(ComplexControl cc, const QStyleOptionComplex *opt, QPainter *p,
const QWidget *w = 0) const;
QSize sizeFromContents(ContentsType ct, const QStyleOption *opt,
const QSize &contentsSize, const QWidget *widget = 0) const;

int pixelMetric(PixelMetric pm, const QStyleOption *option = 0, const QWidget *widget = 0) const;

int styleHint(StyleHint hint, const QStyleOption *opt = 0, const QWidget *widget = 0,
QStyleHintReturn *returnData = 0) const;

QPixmap standardPixmap(StandardPixmap standardPixmap, const QStyleOption *opt,
const QWidget *widget = 0) const;

protected slots:
QIcon standardIconImplementation(StandardPixmap standardIcon, const QStyleOption *option,
const QWidget *widget = 0) const;

protected:
bool eventFilter(QObject *o, QEvent *e);
void timerEvent(QTimerEvent *event);
QWindowsStyle(QWindowsStylePrivate &dd);

private:
QWindowsStyle(const QWindowsStyle &); QWindowsStyle &operator=(const QWindowsStyle &);
inline QWindowsStylePrivate* d_func() { return reinterpret_cast<QWindowsStylePrivate *>(d_ptr); } inline const QWindowsStylePrivate* d_func() const { return reinterpret_cast<const QWindowsStylePrivate *>(d_ptr); } friend class QWindowsStylePrivate;
void *reserved;
};



# 109 "/home/eagle/qt-copy/include/QtGui/qwindowsstyle.h"





# 47 "/home/eagle/qt-copy/include/QtGui/qcleanlooksstyle.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qcleanlooksstyle.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qcleanlooksstyle.h"
class QCleanlooksStylePrivate;
class  QCleanlooksStyle : public QWindowsStyle
{
Q_OBJECT
inline QCleanlooksStylePrivate* d_func() { return reinterpret_cast<QCleanlooksStylePrivate *>(d_ptr); } inline const QCleanlooksStylePrivate* d_func() const { return reinterpret_cast<const QCleanlooksStylePrivate *>(d_ptr); } friend class QCleanlooksStylePrivate;

public:
QCleanlooksStyle();
~QCleanlooksStyle();

QPalette standardPalette () const;
void drawPrimitive(PrimitiveElement elem,
const QStyleOption *option,
QPainter *painter, const QWidget *widget = 0) const;
void drawControl(ControlElement ce, const QStyleOption *option, QPainter *painter,
const QWidget *widget) const;
int pixelMetric(PixelMetric metric, const QStyleOption *option = 0, const QWidget *widget = 0) const;
void drawComplexControl(ComplexControl control, const QStyleOptionComplex *option,
QPainter *painter, const QWidget *widget) const;
QRect subElementRect(SubElement r, const QStyleOption *opt, const QWidget *widget = 0) const;
QSize sizeFromContents(ContentsType type, const QStyleOption *option,
const QSize &size, const QWidget *widget) const;
SubControl hitTestComplexControl(ComplexControl cc, const QStyleOptionComplex *opt,
const QPoint &pt, const QWidget *w = 0) const;
QRect subControlRect(ComplexControl cc, const QStyleOptionComplex *opt,
SubControl sc, const QWidget *widget) const;
QPixmap generatedIconPixmap(QIcon::Mode iconMode, const QPixmap &pixmap,
const QStyleOption *opt) const;
int styleHint(StyleHint hint, const QStyleOption *option = 0, const QWidget *widget = 0,
QStyleHintReturn *returnData = 0) const;
QRect itemPixmapRect(const QRect &r, int flags, const QPixmap &pixmap) const;
QPixmap standardPixmap(StandardPixmap standardPixmap, const QStyleOption *opt,
const QWidget *widget = 0) const;
void drawItemPixmap(QPainter *painter, const QRect &rect,
int alignment, const QPixmap &pixmap) const;
void drawItemText(QPainter *painter, const QRect &rect,
int flags, const QPalette &pal, bool enabled,
const QString &text, QPalette::ColorRole textRole = QPalette::NoRole) const;
void polish(QWidget *widget);
void polish(QApplication *app);
void polish(QPalette &pal);
void unpolish(QWidget *widget);
void unpolish(QApplication *app);

protected slots:
QIcon standardIconImplementation(StandardPixmap standardIcon, const QStyleOption *option,
const QWidget *widget = 0) const;

};



# 109 "/home/eagle/qt-copy/include/QtGui/qcleanlooksstyle.h"





# 119 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qcommonstyle.h"









































































































# 120 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qmotifstyle.h"


































































































































# 121 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qplastiquestyle.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qwindowsstyle.h"

















































































































# 47 "/home/eagle/qt-copy/include/QtGui/qplastiquestyle.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qplastiquestyle.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qplastiquestyle.h"
class QPlastiqueStylePrivate;
class  QPlastiqueStyle : public QWindowsStyle
{
Q_OBJECT
inline QPlastiqueStylePrivate* d_func() { return reinterpret_cast<QPlastiqueStylePrivate *>(d_ptr); } inline const QPlastiqueStylePrivate* d_func() const { return reinterpret_cast<const QPlastiqueStylePrivate *>(d_ptr); } friend class QPlastiqueStylePrivate;
public:
QPlastiqueStyle();
~QPlastiqueStyle();

void drawPrimitive(PrimitiveElement element, const QStyleOption *option,
QPainter *painter, const QWidget *widget = 0) const;
void drawControl(ControlElement element, const QStyleOption *option,
QPainter *painter, const QWidget *widget) const;
void drawComplexControl(ComplexControl control, const QStyleOptionComplex *option,
QPainter *painter, const QWidget *widget) const;
QSize sizeFromContents(ContentsType type, const QStyleOption *option,
const QSize &size, const QWidget *widget) const;

QRect subElementRect(SubElement element, const QStyleOption *option, const QWidget *widget) const;
QRect subControlRect(ComplexControl cc, const QStyleOptionComplex *opt,
SubControl sc, const QWidget *widget) const;

int styleHint(StyleHint hint, const QStyleOption *option = 0, const QWidget *widget = 0,
QStyleHintReturn *returnData = 0) const;
SubControl hitTestComplexControl(ComplexControl control, const QStyleOptionComplex *option,
const QPoint &pos, const QWidget *widget = 0) const;

int pixelMetric(PixelMetric metric, const QStyleOption *option = 0, const QWidget *widget = 0) const;

QPixmap standardPixmap(StandardPixmap standardPixmap, const QStyleOption *opt,
const QWidget *widget = 0) const;

void polish(QWidget *widget);
void polish(QApplication *app);
void polish(QPalette &pal);
void unpolish(QWidget *widget);
void unpolish(QApplication *app);

QPalette standardPalette() const;

protected slots:
QIcon standardIconImplementation(StandardPixmap standardIcon, const QStyleOption *opt = 0,
const QWidget *widget = 0) const;
int layoutSpacingImplementation(QSizePolicy::ControlType control1,
QSizePolicy::ControlType control2, 
Qt::Orientation orientation,
const QStyleOption *option = 0, 
const QWidget *widget = 0) const;

protected:
bool eventFilter(QObject *watched, QEvent *event);
void timerEvent(QTimerEvent *event);

private:
QPlastiqueStyle(const QPlastiqueStyle &); QPlastiqueStyle &operator=(const QPlastiqueStyle &);
void *reserved;
};



# 117 "/home/eagle/qt-copy/include/QtGui/qplastiquestyle.h"





# 122 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qstyle.h"

























































































































































































































































































































































































































































































































































































































































































































































































































































































# 123 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qstylefactory.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"
















































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qstylefactory.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qstylefactory.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QStyle;

class  QStyleFactory
{
public:
static QStringList keys();
static QStyle *create(const QString&);
};






# 124 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qstyleoption.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 125 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qstyleplugin.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qplugin.h"
















































































































# 47 "/home/eagle/qt-copy/include/QtGui/qstyleplugin.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qfactoryinterface.h"





































































# 48 "/home/eagle/qt-copy/include/QtGui/qstyleplugin.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qstyleplugin.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QStyle;

struct  QStyleFactoryInterface : public QFactoryInterface
{
virtual QStyle *create(const QString &key) = 0;
};



# 65 "/home/eagle/qt-copy/include/QtGui/qstyleplugin.h"
template <> inline QStyleFactoryInterface *qobject_cast<QStyleFactoryInterface *>(QObject *object) { return reinterpret_cast<QStyleFactoryInterface *>((object ? object->qt_metacast("com.trolltech.Qt.QStyleFactoryInterface") : 0)); } template <> inline QStyleFactoryInterface *qobject_cast<QStyleFactoryInterface *>(const QObject *object) { return reinterpret_cast<QStyleFactoryInterface *>((object ? const_cast<QObject *>(object)->qt_metacast("com.trolltech.Qt.QStyleFactoryInterface") : 0)); }

class  QStylePlugin : public QObject, public QStyleFactoryInterface
{
Q_OBJECT

public:
explicit QStylePlugin(QObject *parent = 0);
~QStylePlugin();

virtual QStringList keys() const = 0;
virtual QStyle *create(const QString &key) = 0;
};






# 126 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qwindowscestyle.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qwindowsstyle.h"

















































































































# 47 "/home/eagle/qt-copy/include/QtGui/qwindowscestyle.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qwindowscestyle.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qwindowscestyle.h"
class  QWindowsCEStyle : public QWindowsStyle
{
Q_OBJECT
public:
QWindowsCEStyle();

void drawPrimitive(PrimitiveElement element, const QStyleOption *option,
QPainter *painter, const QWidget *widget = 0) const;

void drawControl(ControlElement element, const QStyleOption *option,
QPainter *painter, const QWidget *widget) const;

void drawComplexControl(ComplexControl control, const QStyleOptionComplex *option,
QPainter *painter, const QWidget *widget) const;

virtual void drawItemText(QPainter *painter, const QRect &rect,
int flags, const QPalette &pal, bool enabled,
const QString &text, QPalette::ColorRole textRole = QPalette::NoRole) const;

QSize sizeFromContents(ContentsType type, const QStyleOption *option,
const QSize &size, const QWidget *widget) const;

QRect subElementRect(SubElement element, const QStyleOption *option, const QWidget *widget) const;
QRect subControlRect(ComplexControl cc, const QStyleOptionComplex *opt,
SubControl sc, const QWidget *widget) const;

SubControl hitTestComplexControl(ComplexControl control, const QStyleOptionComplex *option,
const QPoint &pos, const QWidget *widget = 0) const;

QPixmap standardPixmap(StandardPixmap standardPixmap, const QStyleOption *opt,
const QWidget *widget = 0) const;
int pixelMetric(PixelMetric metric, const QStyleOption *option = 0, const QWidget *widget = 0) const;

int styleHint(StyleHint hint, const QStyleOption *opt = 0, const QWidget *widget = 0,
QStyleHintReturn *returnData = 0) const;

void polish(QWidget *widget);
void polish(QPalette &palette);
void polish(QApplication *app);
QPalette standardPalette() const;
};



# 101 "/home/eagle/qt-copy/include/QtGui/qwindowscestyle.h"





# 127 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qwindowsmobilestyle.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qwindowsstyle.h"

















































































































# 47 "/home/eagle/qt-copy/include/QtGui/qwindowsmobilestyle.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qwindowsmobilestyle.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qwindowsmobilestyle.h"
class QWindowsMobileStylePrivate;

class  QWindowsMobileStyle : public QWindowsStyle
{
Q_OBJECT
public:
QWindowsMobileStyle();

void drawPrimitive(PrimitiveElement element, const QStyleOption *option,
QPainter *painter, const QWidget *widget = 0) const;

void drawControl(ControlElement element, const QStyleOption *option,
QPainter *painter, const QWidget *widget) const;

void drawComplexControl(ComplexControl control, const QStyleOptionComplex *option,
QPainter *painter, const QWidget *widget) const;

QSize sizeFromContents(ContentsType type, const QStyleOption *option,
const QSize &size, const QWidget *widget) const;

QRect subElementRect(SubElement element, const QStyleOption *option, const QWidget *widget) const;

QRect subControlRect(ComplexControl cc, const QStyleOptionComplex *opt,
SubControl sc, const QWidget *widget) const;

QPixmap generatedIconPixmap(QIcon::Mode iconMode, const QPixmap &pixmap,
const QStyleOption *option) const;

QPixmap standardPixmap(StandardPixmap sp, const QStyleOption *option,
const QWidget *widget) const;

int pixelMetric(PixelMetric metric, const QStyleOption *option = 0, const QWidget *widget = 0) const;

int styleHint(StyleHint hint, const QStyleOption *opt = 0, const QWidget *widget = 0,
QStyleHintReturn *returnData = 0) const;

void polish(QApplication*);
void polish(QWidget *widget);
void polish(QPalette &);

QPalette standardPalette() const;

bool doubleControls() const;

void setDoubleControls(bool);

protected:
QWindowsMobileStyle(QWindowsMobileStylePrivate &dd);

private:
inline QWindowsMobileStylePrivate* d_func() { return reinterpret_cast<QWindowsMobileStylePrivate *>(d_ptr); } inline const QWindowsMobileStylePrivate* d_func() const { return reinterpret_cast<const QWindowsMobileStylePrivate *>(d_ptr); } friend class QWindowsMobileStylePrivate;
};



# 112 "/home/eagle/qt-copy/include/QtGui/qwindowsmobilestyle.h"





# 128 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qwindowsstyle.h"

















































































































# 129 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qwindowsvistastyle.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qwindowsxpstyle.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qwindowsstyle.h"

















































































































# 47 "/home/eagle/qt-copy/include/QtGui/qwindowsxpstyle.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qwindowsxpstyle.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qwindowsxpstyle.h"
class QWindowsXPStylePrivate;
class  QWindowsXPStyle : public QWindowsStyle
{
Q_OBJECT
public:
QWindowsXPStyle();
QWindowsXPStyle(QWindowsXPStylePrivate &dd);
~QWindowsXPStyle();

void unpolish(QApplication*);
void polish(QApplication*);
void polish(QWidget*);
void polish(QPalette&);
void unpolish(QWidget*);

void drawPrimitive(PrimitiveElement pe, const QStyleOption *option, QPainter *p,
const QWidget *widget = 0) const;
void drawControl(ControlElement element, const QStyleOption *option, QPainter *p,
const QWidget *wwidget = 0) const;
QRect subElementRect(SubElement r, const QStyleOption *option, const QWidget *widget = 0) const;
QRect subControlRect(ComplexControl cc, const QStyleOptionComplex *option, SubControl sc,
const QWidget *widget = 0) const;
void drawComplexControl(ComplexControl cc, const QStyleOptionComplex *option, QPainter *p,
const QWidget *widget = 0) const;
QSize sizeFromContents(ContentsType ct, const QStyleOption *option, const QSize &contentsSize,
const QWidget *widget = 0) const;
int pixelMetric(PixelMetric pm, const QStyleOption *option = 0,
const QWidget *widget = 0) const;
int styleHint(StyleHint hint, const QStyleOption *option = 0, const QWidget *widget = 0,
QStyleHintReturn *returnData = 0) const;

QPalette standardPalette() const;
QPixmap standardPixmap(StandardPixmap standardIcon, const QStyleOption *option,
const QWidget *widget = 0) const;

protected slots:
QIcon standardIconImplementation(StandardPixmap standardIcon, const QStyleOption *option,
const QWidget *widget = 0) const;

private:
QWindowsXPStyle(const QWindowsXPStyle &); QWindowsXPStyle &operator=(const QWindowsXPStyle &);
inline QWindowsXPStylePrivate* d_func() { return reinterpret_cast<QWindowsXPStylePrivate *>(d_ptr); } inline const QWindowsXPStylePrivate* d_func() const { return reinterpret_cast<const QWindowsXPStylePrivate *>(d_ptr); } friend class QWindowsXPStylePrivate;
friend class QStyleFactory;
void *reserved;
};



# 105 "/home/eagle/qt-copy/include/QtGui/qwindowsxpstyle.h"





# 47 "/home/eagle/qt-copy/include/QtGui/qwindowsvistastyle.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qwindowsvistastyle.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qwindowsvistastyle.h"
class QWindowsVistaStylePrivate;
class  QWindowsVistaStyle : public QWindowsXPStyle
{
Q_OBJECT
public:
QWindowsVistaStyle();

void drawPrimitive(PrimitiveElement element, const QStyleOption *option,
QPainter *painter, const QWidget *widget = 0) const;
void drawControl(ControlElement element, const QStyleOption *option,
QPainter *painter, const QWidget *widget) const;
void drawComplexControl(ComplexControl control, const QStyleOptionComplex *option,
QPainter *painter, const QWidget *widget) const;
QSize sizeFromContents(ContentsType type, const QStyleOption *option,
const QSize &size, const QWidget *widget) const;

QRect subElementRect(SubElement element, const QStyleOption *option, const QWidget *widget) const;
QRect subControlRect(ComplexControl cc, const QStyleOptionComplex *opt,
SubControl sc, const QWidget *widget) const;

SubControl hitTestComplexControl(ComplexControl control, const QStyleOptionComplex *option,
const QPoint &pos, const QWidget *widget = 0) const;

QPixmap standardPixmap(StandardPixmap standardPixmap, const QStyleOption *opt,
const QWidget *widget = 0) const;
int pixelMetric(PixelMetric metric, const QStyleOption *option = 0, const QWidget *widget = 0) const;
int styleHint(StyleHint hint, const QStyleOption *opt = 0, const QWidget *widget = 0,
QStyleHintReturn *returnData = 0) const;


void polish(QWidget *widget);
void unpolish(QWidget *widget);
void polish(QPalette &pal);
void polish(QApplication *app);
void unpolish(QApplication *app);
bool event(QEvent *event);
QPalette standardPalette() const;

protected slots:
QIcon standardIconImplementation(StandardPixmap standardIcon, const QStyleOption *option,
const QWidget *widget = 0) const;

private:
QWindowsVistaStyle(const QWindowsVistaStyle &); QWindowsVistaStyle &operator=(const QWindowsVistaStyle &);
inline QWindowsVistaStylePrivate* d_func() { return reinterpret_cast<QWindowsVistaStylePrivate *>(d_ptr); } inline const QWindowsVistaStylePrivate* d_func() const { return reinterpret_cast<const QWindowsVistaStylePrivate *>(d_ptr); } friend class QWindowsVistaStylePrivate;
friend class QStyleFactory;
};


# 106 "/home/eagle/qt-copy/include/QtGui/qwindowsvistastyle.h"





# 130 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qwindowsxpstyle.h"













































































































# 131 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qabstracttextdocumentlayout.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qabstracttextdocumentlayout.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextlayout.h"













































# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/eagle/qt-copy/include/QtGui/qtextlayout.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qtextlayout.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qrect.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qtextlayout.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qvector.h"































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qtextlayout.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qcolor.h"





















































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtGui/qtextlayout.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtGui/qtextlayout.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qevent.h"






















































































































































































































































































































































































































































































































































































































































































































































# 52 "/home/eagle/qt-copy/include/QtGui/qtextlayout.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextformat.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qcolor.h"





















































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qtextformat.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qfont.h"

































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qtextformat.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qshareddata.h"



































































































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qtextformat.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qvector.h"































































































































































































































































































































































































































































































































































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtGui/qtextformat.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qvariant.h"






















































































































































































































































































































































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtGui/qtextformat.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qpen.h"














































































































































# 52 "/home/eagle/qt-copy/include/QtGui/qtextformat.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qbrush.h"

























































































































































































































































































































# 53 "/home/eagle/qt-copy/include/QtGui/qtextformat.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextoption.h"































































































































































# 54 "/home/eagle/qt-copy/include/QtGui/qtextformat.h"


# 56 "/home/eagle/qt-copy/include/QtGui/qtextformat.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QString;
class QVariant;
class QFont;

class QTextFormatCollection;
class QTextFormatPrivate;
class QTextBlockFormat;
class QTextCharFormat;
class QTextListFormat;
class QTextTableFormat;
class QTextFrameFormat;
class QTextImageFormat;
class QTextTableCellFormat;
class QTextFormat;
class QTextObject;
class QTextCursor;
class QTextDocument;
class QTextLength;

 QDataStream &operator<<(QDataStream &, const QTextLength &);
 QDataStream &operator>>(QDataStream &, QTextLength &);

class  QTextLength
{
public:
enum Type { VariableLength = 0, FixedLength, PercentageLength };

inline QTextLength() : lengthType(VariableLength), fixedValueOrPercentage(0) {}

inline explicit QTextLength(Type type, qreal value);

inline Type type() const { return lengthType; }
inline qreal value(qreal maximumLength) const
{
switch (lengthType) {
case FixedLength: return fixedValueOrPercentage;
case VariableLength: return maximumLength;
case PercentageLength: return fixedValueOrPercentage * maximumLength / qreal(100);
}
return -1;
}

inline qreal rawValue() const { return fixedValueOrPercentage; }

inline bool operator==(const QTextLength &other) const
{ return lengthType == other.lengthType
&& qFuzzyCompare(fixedValueOrPercentage, other.fixedValueOrPercentage); }
inline bool operator!=(const QTextLength &other) const
{ return lengthType != other.lengthType
|| !qFuzzyCompare(fixedValueOrPercentage, other.fixedValueOrPercentage); }
operator QVariant() const;

private:
Type lengthType;
qreal fixedValueOrPercentage;
friend  QDataStream &operator<<(QDataStream &, const QTextLength &);
friend  QDataStream &operator>>(QDataStream &, QTextLength &);
};

inline QTextLength::QTextLength(Type atype, qreal avalue)
: lengthType(atype), fixedValueOrPercentage(avalue) {}

 QDataStream &operator<<(QDataStream &, const QTextFormat &);
 QDataStream &operator>>(QDataStream &, QTextFormat &);

class  QTextFormat
{

Q_ENUMS(FormatType Property ObjectTypes)
public:
enum FormatType {
InvalidFormat = -1,
BlockFormat = 1,
CharFormat = 2,
ListFormat = 3,
TableFormat = 4,
FrameFormat = 5,

UserFormat = 100
};

enum Property {
ObjectIndex = 0x0,


CssFloat = 0x0800,
LayoutDirection = 0x0801,

OutlinePen = 0x810,
BackgroundBrush = 0x820,
ForegroundBrush = 0x821,

BackgroundImageUrl = 0x823,


BlockAlignment = 0x1010,
BlockTopMargin = 0x1030,
BlockBottomMargin = 0x1031,
BlockLeftMargin = 0x1032,
BlockRightMargin = 0x1033,
TextIndent = 0x1034,
TabPositions = 0x1035,
BlockIndent = 0x1040,
BlockNonBreakableLines = 0x1050,
BlockTrailingHorizontalRulerWidth = 0x1060,


FirstFontProperty = 0x1FE0,
FontCapitalization = FirstFontProperty,
FontLetterSpacing = 0x1FE1,
FontWordSpacing = 0x1FE2,
FontFamily = 0x2000,
FontPointSize = 0x2001,
FontSizeAdjustment = 0x2002,
FontSizeIncrement = FontSizeAdjustment, 
FontWeight = 0x2003,
FontItalic = 0x2004,
FontUnderline = 0x2005, 
FontOverline = 0x2006,
FontStrikeOut = 0x2007,
FontFixedPitch = 0x2008,
FontPixelSize = 0x2009,
LastFontProperty = FontPixelSize,

TextUnderlineColor = 0x2010,
TextVerticalAlignment = 0x2021,
TextOutline = 0x2022,
TextUnderlineStyle = 0x2023,
TextToolTip = 0x2024,

IsAnchor = 0x2030,
AnchorHref = 0x2031,
AnchorName = 0x2032,

ObjectType = 0x2f00,


ListStyle = 0x3000,
ListIndent = 0x3001,


FrameBorder = 0x4000,
FrameMargin = 0x4001,
FramePadding = 0x4002,
FrameWidth = 0x4003,
FrameHeight = 0x4004,
FrameTopMargin = 0x4005,
FrameBottomMargin = 0x4006,
FrameLeftMargin = 0x4007,
FrameRightMargin = 0x4008,
FrameBorderBrush = 0x4009,
FrameBorderStyle = 0x4010,

TableColumns = 0x4100,
TableColumnWidthConstraints = 0x4101,
TableCellSpacing = 0x4102,
TableCellPadding = 0x4103,
TableHeaderRowCount = 0x4104,


TableCellRowSpan = 0x4810,
TableCellColumnSpan = 0x4811,

TableCellTopPadding = 0x4812,
TableCellBottomPadding = 0x4813,
TableCellLeftPadding = 0x4814,
TableCellRightPadding = 0x4815,


ImageName = 0x5000,
ImageWidth = 0x5010,
ImageHeight = 0x5011,


FullWidthSelection = 0x06000,


PageBreakPolicy = 0x7000,


UserProperty = 0x100000
};

enum ObjectTypes {
NoObject,
ImageObject,
TableObject,
TableCellObject,

UserObject = 0x1000
};

enum PageBreakFlag {
PageBreak_Auto = 0,
PageBreak_AlwaysBefore = 0x001,
PageBreak_AlwaysAfter = 0x010

};
typedef QFlags<PageBreakFlag> PageBreakFlags;

QTextFormat();

explicit QTextFormat(int type);

QTextFormat(const QTextFormat &rhs);
QTextFormat &operator=(const QTextFormat &rhs);
~QTextFormat();

void merge(const QTextFormat &other);

inline bool isValid() const { return type() != InvalidFormat; }

int type() const;

int objectIndex() const;
void setObjectIndex(int object);

QVariant property(int propertyId) const;
void setProperty(int propertyId, const QVariant &value);
void clearProperty(int propertyId);
bool hasProperty(int propertyId) const;

bool boolProperty(int propertyId) const;
int intProperty(int propertyId) const;
qreal doubleProperty(int propertyId) const;
QString stringProperty(int propertyId) const;
QColor colorProperty(int propertyId) const;
QPen penProperty(int propertyId) const;
QBrush brushProperty(int propertyId) const;
QTextLength lengthProperty(int propertyId) const;
QVector<QTextLength> lengthVectorProperty(int propertyId) const;

void setProperty(int propertyId, const QVector<QTextLength> &lengths);

QMap<int, QVariant> properties() const;
int propertyCount() const;

inline void setObjectType(int type);
inline int objectType() const
{ return intProperty(ObjectType); }

inline bool isCharFormat() const { return type() == CharFormat; }
inline bool isBlockFormat() const { return type() == BlockFormat; }
inline bool isListFormat() const { return type() == ListFormat; }
inline bool isFrameFormat() const { return type() == FrameFormat; }
inline bool isImageFormat() const { return type() == CharFormat && objectType() == ImageObject; }
inline bool isTableFormat() const { return type() == FrameFormat && objectType() == TableObject; }
inline bool isTableCellFormat() const { return type() == CharFormat && objectType() == TableCellObject; }

QTextBlockFormat toBlockFormat() const;
QTextCharFormat toCharFormat() const;
QTextListFormat toListFormat() const;
QTextTableFormat toTableFormat() const;
QTextFrameFormat toFrameFormat() const;
QTextImageFormat toImageFormat() const;
QTextTableCellFormat toTableCellFormat() const;

bool operator==(const QTextFormat &rhs) const;
inline bool operator!=(const QTextFormat &rhs) const { return !operator==(rhs); }
operator QVariant() const;

inline void setLayoutDirection(Qt::LayoutDirection direction)
{ setProperty(QTextFormat::LayoutDirection, direction); }
inline Qt::LayoutDirection layoutDirection() const
{ return Qt::LayoutDirection(intProperty(QTextFormat::LayoutDirection)); }

inline void setBackground(const QBrush &brush)
{ setProperty(BackgroundBrush, brush); }
inline QBrush background() const
{ return brushProperty(BackgroundBrush); }
inline void clearBackground()
{ clearProperty(BackgroundBrush); }

inline void setForeground(const QBrush &brush)
{ setProperty(ForegroundBrush, brush); }
inline QBrush foreground() const
{ return brushProperty(ForegroundBrush); }
inline void clearForeground()
{ clearProperty(ForegroundBrush); }

private:
QSharedDataPointer<QTextFormatPrivate> d;
qint32 format_type;

friend class QTextFormatCollection;
friend class QTextCharFormat;
friend  QDataStream &operator<<(QDataStream &, const QTextFormat &);
friend  QDataStream &operator>>(QDataStream &, QTextFormat &);
};

inline void QTextFormat::setObjectType(int atype)
{ setProperty(ObjectType, atype); }

inline QFlags<QTextFormat::PageBreakFlags::enum_type> operator|(QTextFormat::PageBreakFlags::enum_type f1, QTextFormat::PageBreakFlags::enum_type f2) { return QFlags<QTextFormat::PageBreakFlags::enum_type>(f1) | f2; } inline QFlags<QTextFormat::PageBreakFlags::enum_type> operator|(QTextFormat::PageBreakFlags::enum_type f1, QFlags<QTextFormat::PageBreakFlags::enum_type> f2) { return f2 | f1; }

class  QTextCharFormat : public QTextFormat
{
public:
enum VerticalAlignment {
AlignNormal = 0,
AlignSuperScript,
AlignSubScript,
AlignMiddle,
AlignTop,
AlignBottom
};
enum UnderlineStyle { 
NoUnderline,
SingleUnderline,
DashUnderline,
DotLine,
DashDotLine,
DashDotDotLine,
WaveUnderline,
SpellCheckUnderline
};

QTextCharFormat();

bool isValid() const { return isCharFormat(); }
void setFont(const QFont &font);
QFont font() const;

inline void setFontFamily(const QString &family)
{ setProperty(FontFamily, family); }
inline QString fontFamily() const
{ return stringProperty(FontFamily); }

inline void setFontPointSize(qreal size)
{ setProperty(FontPointSize, size); }
inline qreal fontPointSize() const
{ return doubleProperty(FontPointSize); }

inline void setFontWeight(int weight)
{ if (weight == QFont::Normal) weight = 0; setProperty(FontWeight, weight); }
inline int fontWeight() const
{ int weight = intProperty(FontWeight); if (weight == 0) weight = QFont::Normal; return weight; }
inline void setFontItalic(bool italic)
{ setProperty(FontItalic, italic); }
inline bool fontItalic() const
{ return boolProperty(FontItalic); }
inline void setFontCapitalization(QFont::Capitalization capitalization)
{ setProperty(FontCapitalization, capitalization); }
inline QFont::Capitalization fontCapitalization() const
{ return static_cast<QFont::Capitalization>(intProperty(FontCapitalization)); }
inline void setFontLetterSpacing(qreal spacing)
{ setProperty(FontLetterSpacing, spacing); }
inline qreal fontLetterSpacing() const
{ return doubleProperty(FontLetterSpacing); }
inline void setFontWordSpacing(qreal spacing)
{ setProperty(FontWordSpacing, spacing); }
inline qreal fontWordSpacing() const
{ return doubleProperty(FontWordSpacing); }

inline void setFontUnderline(bool underline)
{ setProperty(TextUnderlineStyle, underline ? SingleUnderline : NoUnderline); }
bool fontUnderline() const;

inline void setFontOverline(bool overline)
{ setProperty(FontOverline, overline); }
inline bool fontOverline() const
{ return boolProperty(FontOverline); }

inline void setFontStrikeOut(bool strikeOut)
{ setProperty(FontStrikeOut, strikeOut); }
inline bool fontStrikeOut() const
{ return boolProperty(FontStrikeOut); }

inline void setUnderlineColor(const QColor &color)
{ setProperty(TextUnderlineColor, color); }
inline QColor underlineColor() const
{ return colorProperty(TextUnderlineColor); }

inline void setFontFixedPitch(bool fixedPitch)
{ setProperty(FontFixedPitch, fixedPitch); }
inline bool fontFixedPitch() const
{ return boolProperty(FontFixedPitch); }

void setUnderlineStyle(UnderlineStyle style);
inline UnderlineStyle underlineStyle() const
{ return static_cast<UnderlineStyle>(intProperty(TextUnderlineStyle)); }

inline void setVerticalAlignment(VerticalAlignment alignment)
{ setProperty(TextVerticalAlignment, alignment); }
inline VerticalAlignment verticalAlignment() const
{ return static_cast<VerticalAlignment>(intProperty(TextVerticalAlignment)); }

inline void setTextOutline(const QPen &pen)
{ setProperty(TextOutline, pen); }
inline QPen textOutline() const
{ return penProperty(TextOutline); }

inline void setToolTip(const QString &tip)
{ setProperty(TextToolTip, tip); }
inline QString toolTip() const
{ return stringProperty(TextToolTip); }

inline void setAnchor(bool anchor)
{ setProperty(IsAnchor, anchor); }
inline bool isAnchor() const
{ return boolProperty(IsAnchor); }

inline void setAnchorHref(const QString &value)
{ setProperty(AnchorHref, value); }
inline QString anchorHref() const
{ return stringProperty(AnchorHref); }

inline void setAnchorName(const QString &name)
{ setAnchorNames(QStringList(name)); }
QString anchorName() const;

inline void setAnchorNames(const QStringList &names)
{ setProperty(AnchorName, names); }
QStringList anchorNames() const;

inline void setTableCellRowSpan(int tableCellRowSpan);
inline int tableCellRowSpan() const
{ int s = intProperty(TableCellRowSpan); if (s == 0) s = 1; return s; }
inline void setTableCellColumnSpan(int tableCellColumnSpan);
inline int tableCellColumnSpan() const
{ int s = intProperty(TableCellColumnSpan); if (s == 0) s = 1; return s; }

protected:
explicit QTextCharFormat(const QTextFormat &fmt);
friend class QTextFormat;
};

inline void QTextCharFormat::setTableCellRowSpan(int atableCellRowSpan)
{
if (atableCellRowSpan == 1)
atableCellRowSpan = 0;
setProperty(TableCellRowSpan, atableCellRowSpan);
}

inline void QTextCharFormat::setTableCellColumnSpan(int atableCellColumnSpan)
{
if (atableCellColumnSpan == 1)
atableCellColumnSpan = 0;
setProperty(TableCellColumnSpan, atableCellColumnSpan);
}

class  QTextBlockFormat : public QTextFormat
{
public:
QTextBlockFormat();

bool isValid() const { return isBlockFormat(); }

inline void setAlignment(Qt::Alignment alignment);
inline Qt::Alignment alignment() const
{ int a = intProperty(BlockAlignment); if (a == 0) a = Qt::AlignLeft; return QFlag(a); }

inline void setTopMargin(qreal margin)
{ setProperty(BlockTopMargin, margin); }
inline qreal topMargin() const
{ return doubleProperty(BlockTopMargin); }

inline void setBottomMargin(qreal margin)
{ setProperty(BlockBottomMargin, margin); }
inline qreal bottomMargin() const
{ return doubleProperty(BlockBottomMargin); }

inline void setLeftMargin(qreal margin)
{ setProperty(BlockLeftMargin, margin); }
inline qreal leftMargin() const
{ return doubleProperty(BlockLeftMargin); }

inline void setRightMargin(qreal margin)
{ setProperty(BlockRightMargin, margin); }
inline qreal rightMargin() const
{ return doubleProperty(BlockRightMargin); }

inline void setTextIndent(qreal margin)
{ setProperty(TextIndent, margin); }
inline qreal textIndent() const
{ return doubleProperty(TextIndent); }

inline void setIndent(int indent);
inline int indent() const
{ return intProperty(BlockIndent); }

inline void setNonBreakableLines(bool b)
{ setProperty(BlockNonBreakableLines, b); }
inline bool nonBreakableLines() const
{ return boolProperty(BlockNonBreakableLines); }

inline void setPageBreakPolicy(PageBreakFlags flags)
{ setProperty(PageBreakPolicy, int(flags)); }
inline PageBreakFlags pageBreakPolicy() const
{ return PageBreakFlags(intProperty(PageBreakPolicy)); }

void setTabPositions(const QList<QTextOption::Tab> &tabs);
QList<QTextOption::Tab> tabPositions() const;

protected:
explicit QTextBlockFormat(const QTextFormat &fmt);
friend class QTextFormat;
};

inline void QTextBlockFormat::setAlignment(Qt::Alignment aalignment)
{ setProperty(BlockAlignment, int(aalignment)); }

inline void QTextBlockFormat::setIndent(int aindent)
{ setProperty(BlockIndent, aindent); }

class  QTextListFormat : public QTextFormat
{
public:
QTextListFormat();

bool isValid() const { return isListFormat(); }

enum Style {
ListDisc = -1,
ListCircle = -2,
ListSquare = -3,
ListDecimal = -4,
ListLowerAlpha = -5,
ListUpperAlpha = -6,
ListStyleUndefined = 0
};

inline void setStyle(Style style);
inline Style style() const
{ return static_cast<Style>(intProperty(ListStyle)); }

inline void setIndent(int indent);
inline int indent() const
{ return intProperty(ListIndent); }

protected:
explicit QTextListFormat(const QTextFormat &fmt);
friend class QTextFormat;
};

inline void QTextListFormat::setStyle(Style astyle)
{ setProperty(ListStyle, astyle); }

inline void QTextListFormat::setIndent(int aindent)
{ setProperty(ListIndent, aindent); }

class  QTextImageFormat : public QTextCharFormat
{
public:
QTextImageFormat();

bool isValid() const { return isImageFormat(); }

inline void setName(const QString &name);
inline QString name() const
{ return stringProperty(ImageName); }

inline void setWidth(qreal width);
inline qreal width() const
{ return doubleProperty(ImageWidth); }

inline void setHeight(qreal height);
inline qreal height() const
{ return doubleProperty(ImageHeight); }

protected:
explicit QTextImageFormat(const QTextFormat &format);
friend class QTextFormat;
};

inline void QTextImageFormat::setName(const QString &aname)
{ setProperty(ImageName, aname); }

inline void QTextImageFormat::setWidth(qreal awidth)
{ setProperty(ImageWidth, awidth); }

inline void QTextImageFormat::setHeight(qreal aheight)
{ setProperty(ImageHeight, aheight); }

class  QTextFrameFormat : public QTextFormat
{
public:
QTextFrameFormat();

bool isValid() const { return isFrameFormat(); }

enum Position {
InFlow,
FloatLeft,
FloatRight


};

enum BorderStyle {
BorderStyle_None,
BorderStyle_Dotted,
BorderStyle_Dashed,
BorderStyle_Solid,
BorderStyle_Double,
BorderStyle_DotDash,
BorderStyle_DotDotDash,
BorderStyle_Groove,
BorderStyle_Ridge,
BorderStyle_Inset,
BorderStyle_Outset
};

inline void setPosition(Position f)
{ setProperty(CssFloat, f); }
inline Position position() const
{ return static_cast<Position>(intProperty(CssFloat)); }

inline void setBorder(qreal border);
inline qreal border() const
{ return doubleProperty(FrameBorder); }

inline void setBorderBrush(const QBrush &brush)
{ setProperty(FrameBorderBrush, brush); }
inline QBrush borderBrush() const
{ return brushProperty(FrameBorderBrush); }

inline void setBorderStyle(BorderStyle style)
{ setProperty(FrameBorderStyle, style); }
inline BorderStyle borderStyle() const
{ return static_cast<BorderStyle>(intProperty(FrameBorderStyle)); }

void setMargin(qreal margin);
inline qreal margin() const
{ return doubleProperty(FrameMargin); }

inline void setTopMargin(qreal margin);
qreal topMargin() const;

inline void setBottomMargin(qreal margin);
qreal bottomMargin() const;

inline void setLeftMargin(qreal margin);
qreal leftMargin() const;

inline void setRightMargin(qreal margin);
qreal rightMargin() const;

inline void setPadding(qreal padding);
inline qreal padding() const
{ return doubleProperty(FramePadding); }

inline void setWidth(qreal width);
inline void setWidth(const QTextLength &length)
{ setProperty(FrameWidth, length); }
inline QTextLength width() const
{ return lengthProperty(FrameWidth); }

inline void setHeight(qreal height);
inline void setHeight(const QTextLength &height);
inline QTextLength height() const
{ return lengthProperty(FrameHeight); }

inline void setPageBreakPolicy(PageBreakFlags flags)
{ setProperty(PageBreakPolicy, int(flags)); }
inline PageBreakFlags pageBreakPolicy() const
{ return PageBreakFlags(intProperty(PageBreakPolicy)); }

protected:
explicit QTextFrameFormat(const QTextFormat &fmt);
friend class QTextFormat;
};

inline void QTextFrameFormat::setBorder(qreal aborder)
{ setProperty(FrameBorder, aborder); }

inline void QTextFrameFormat::setPadding(qreal apadding)
{ setProperty(FramePadding, apadding); }

inline void QTextFrameFormat::setWidth(qreal awidth)
{ setProperty(FrameWidth, QTextLength(QTextLength::FixedLength, awidth)); }

inline void QTextFrameFormat::setHeight(qreal aheight)
{ setProperty(FrameHeight, QTextLength(QTextLength::FixedLength, aheight)); }
inline void QTextFrameFormat::setHeight(const QTextLength &aheight)
{ setProperty(FrameHeight, aheight); }

inline void QTextFrameFormat::setTopMargin(qreal amargin)
{ setProperty(FrameTopMargin, amargin); }

inline void QTextFrameFormat::setBottomMargin(qreal amargin)
{ setProperty(FrameBottomMargin, amargin); }

inline void QTextFrameFormat::setLeftMargin(qreal amargin)
{ setProperty(FrameLeftMargin, amargin); }

inline void QTextFrameFormat::setRightMargin(qreal amargin)
{ setProperty(FrameRightMargin, amargin); }

class  QTextTableFormat : public QTextFrameFormat
{
public:
QTextTableFormat();

inline bool isValid() const { return isTableFormat(); }

inline int columns() const
{ int cols = intProperty(TableColumns); if (cols == 0) cols = 1; return cols; }
inline void setColumns(int columns);

inline void setColumnWidthConstraints(const QVector<QTextLength> &constraints)
{ setProperty(TableColumnWidthConstraints, constraints); }

inline QVector<QTextLength> columnWidthConstraints() const
{ return lengthVectorProperty(TableColumnWidthConstraints); }

inline void clearColumnWidthConstraints()
{ clearProperty(TableColumnWidthConstraints); }

inline qreal cellSpacing() const
{ return doubleProperty(TableCellSpacing); }
inline void setCellSpacing(qreal spacing)
{ setProperty(TableCellSpacing, spacing); }

inline qreal cellPadding() const
{ return doubleProperty(TableCellPadding); }
inline void setCellPadding(qreal padding);

inline void setAlignment(Qt::Alignment alignment);
inline Qt::Alignment alignment() const
{ return QFlag(intProperty(BlockAlignment)); }

inline void setHeaderRowCount(int count)
{ setProperty(TableHeaderRowCount, count); }
inline int headerRowCount() const
{ return intProperty(TableHeaderRowCount); }

protected:
explicit QTextTableFormat(const QTextFormat &fmt);
friend class QTextFormat;
};

inline void QTextTableFormat::setColumns(int acolumns)
{
if (acolumns == 1)
acolumns = 0;
setProperty(TableColumns, acolumns);
}

inline void QTextTableFormat::setCellPadding(qreal apadding)
{ setProperty(TableCellPadding, apadding); }

inline void QTextTableFormat::setAlignment(Qt::Alignment aalignment)
{ setProperty(BlockAlignment, int(aalignment)); }

class  QTextTableCellFormat : public QTextCharFormat
{
public:
QTextTableCellFormat();

inline bool isValid() const { return isTableCellFormat(); }

inline void setTopPadding(qreal padding);
inline qreal topPadding() const;

inline void setBottomPadding(qreal padding);
inline qreal bottomPadding() const;

inline void setLeftPadding(qreal padding);
inline qreal leftPadding() const;

inline void setRightPadding(qreal padding);
inline qreal rightPadding() const;

inline void setPadding(qreal padding);

protected:
explicit QTextTableCellFormat(const QTextFormat &fmt);
friend class QTextFormat;
};

inline void QTextTableCellFormat::setTopPadding(qreal padding)
{
setProperty(TableCellTopPadding, padding);
}

inline qreal QTextTableCellFormat::topPadding() const
{
return doubleProperty(TableCellTopPadding);
}

inline void QTextTableCellFormat::setBottomPadding(qreal padding)
{
setProperty(TableCellBottomPadding, padding);
}

inline qreal QTextTableCellFormat::bottomPadding() const
{
return doubleProperty(TableCellBottomPadding);
}

inline void QTextTableCellFormat::setLeftPadding(qreal padding)
{
setProperty(TableCellLeftPadding, padding);
}

inline qreal QTextTableCellFormat::leftPadding() const
{
return doubleProperty(TableCellLeftPadding);
}

inline void QTextTableCellFormat::setRightPadding(qreal padding)
{
setProperty(TableCellRightPadding, padding);
}

inline qreal QTextTableCellFormat::rightPadding() const
{
return doubleProperty(TableCellRightPadding);
}

inline void QTextTableCellFormat::setPadding(qreal padding)
{
setTopPadding(padding);
setBottomPadding(padding);
setLeftPadding(padding);
setRightPadding(padding);
}







# 53 "/home/eagle/qt-copy/include/QtGui/qtextlayout.h"


# 55 "/home/eagle/qt-copy/include/QtGui/qtextlayout.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QTextEngine;
class QFont;
class QRect;
class QRegion;
class QTextFormat;
class QPalette;
class QPainter;

class  QTextInlineObject
{
public:
QTextInlineObject(int i, QTextEngine *e) : itm(i), eng(e) {}
inline QTextInlineObject() : itm(0), eng(0) {}
inline bool isValid() const { return eng; }

QRectF rect() const;
qreal width() const;
qreal ascent() const;
qreal descent() const;
qreal height() const;

Qt::LayoutDirection textDirection() const;

void setWidth(qreal w);
void setAscent(qreal a);
void setDescent(qreal d);

int textPosition() const;

int formatIndex() const;
QTextFormat format() const;

private:
friend class QTextLayout;
int itm;
QTextEngine *eng;
};

class QPaintDevice;
class QTextFormat;
class QTextLine;
class QTextBlock;
class QTextOption;

class  QTextLayout
{
public:

QTextLayout();
QTextLayout(const QString& text);
QTextLayout(const QString& text, const QFont &font, QPaintDevice *paintdevice = 0);
QTextLayout(const QTextBlock &b);
~QTextLayout();

void setFont(const QFont &f);
QFont font() const;

void setText(const QString& string);
QString text() const;

void setTextOption(const QTextOption &option);
QTextOption textOption() const;

void setPreeditArea(int position, const QString &text);
int preeditAreaPosition() const;
QString preeditAreaText() const;

struct FormatRange {
int start;
int length;
QTextCharFormat format;
};
void setAdditionalFormats(const QList<FormatRange> &overrides);
QList<FormatRange> additionalFormats() const;
void clearAdditionalFormats();

void setCacheEnabled(bool enable);
bool cacheEnabled() const;

void beginLayout();
void endLayout();
void clearLayout();

QTextLine createLine();

int lineCount() const;
QTextLine lineAt(int i) const;
QTextLine lineForTextPosition(int pos) const;

enum CursorMode {
SkipCharacters,
SkipWords
};
bool isValidCursorPosition(int pos) const;
int nextCursorPosition(int oldPos, CursorMode mode = SkipCharacters) const;
int previousCursorPosition(int oldPos, CursorMode mode = SkipCharacters) const;

void draw(QPainter *p, const QPointF &pos, const QVector<FormatRange> &selections = QVector<FormatRange>(),
const QRectF &clip = QRectF()) const;
void drawCursor(QPainter *p, const QPointF &pos, int cursorPosition) const;
void drawCursor(QPainter *p, const QPointF &pos, int cursorPosition, int width) const;

QPointF position() const;
void setPosition(const QPointF &p);

QRectF boundingRect() const;

qreal minimumWidth() const;
qreal maximumWidth() const;

QTextEngine *engine() const { return d; }
void setFlags(int flags);
private:
QTextLayout(QTextEngine *e) : d(e) {}
QTextLayout(const QTextLayout &); QTextLayout &operator=(const QTextLayout &);

friend class QPainter;
friend class QPSPrinter;
friend class QGraphicsSimpleTextItemPrivate;
friend class QGraphicsSimpleTextItem;
friend void qt_format_text(const QFont &font, const QRectF &_r, int tf, const QTextOption *, const QString& str,
QRectF *brect, int tabstops, int* tabarray, int tabarraylen,
QPainter *painter);
QTextEngine *d;
};


class  QTextLine
{
public:
inline QTextLine() : i(0), eng(0) {}
inline bool isValid() const { return eng; }

QRectF rect() const;
qreal x() const;
qreal y() const;
qreal width() const;
qreal ascent() const;
qreal descent() const;
qreal height() const;

qreal naturalTextWidth() const;
QRectF naturalTextRect() const;

enum Edge {
Leading,
Trailing
};
enum CursorPosition {
CursorBetweenCharacters,
CursorOnCharacter
};


qreal cursorToX(int *cursorPos, Edge edge = Leading) const;
inline qreal cursorToX(int cursorPos, Edge edge = Leading) const { return cursorToX(&cursorPos, edge); }
int xToCursor(qreal x, CursorPosition = CursorBetweenCharacters) const;

void setLineWidth(qreal width);
void setNumColumns(int columns);
void setNumColumns(int columns, qreal alignmentWidth);

void setPosition(const QPointF &pos);
QPointF position() const;

int textStart() const;
int textLength() const;

int lineNumber() const { return i; }

void draw(QPainter *p, const QPointF &point, const QTextLayout::FormatRange *selection = 0) const;

private:
QTextLine(int line, QTextEngine *e) : i(line), eng(e) {}
void layout_helper(int numGlyphs);
friend class QTextLayout;
int i;
QTextEngine *eng;
};






# 48 "/home/eagle/qt-copy/include/QtGui/qabstracttextdocumentlayout.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextdocument.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qtextdocument.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qsize.h"






































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qtextdocument.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qrect.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qtextdocument.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qfont.h"

































































































































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtGui/qtextdocument.h"


# 52 "/home/eagle/qt-copy/include/QtGui/qtextdocument.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QTextFormatCollection;
class QTextListFormat;
class QRect;
class QPainter;
class QPrinter;
class QAbstractTextDocumentLayout;
class QPoint;
class QTextCursor;
class QTextObject;
class QTextFormat;
class QTextFrame;
class QTextBlock;
class QTextCodec;
class QUrl;
class QVariant;
class QRectF;
class QTextOption;

template<typename T> class QVector;

namespace Qt
{
enum HitTestAccuracy { ExactHit, FuzzyHit };
enum WhiteSpaceMode {
WhiteSpaceNormal,
WhiteSpacePre,
WhiteSpaceNoWrap,
WhiteSpaceModeUndefined = -1
};

 bool mightBeRichText(const QString&);
 QString escape(const QString& plain);
 QString convertFromPlainText(const QString &plain, WhiteSpaceMode mode = WhiteSpacePre);


# 93 "/home/eagle/qt-copy/include/QtGui/qtextdocument.h"
 QTextCodec *codecForHtml(const QByteArray &ba);

# 95 "/home/eagle/qt-copy/include/QtGui/qtextdocument.h"
}

class  QAbstractUndoItem
{
public:
virtual ~QAbstractUndoItem() = 0;
virtual void undo() = 0;
virtual void redo() = 0;
};

inline QAbstractUndoItem::~QAbstractUndoItem()
{
}

class QTextDocumentPrivate;

class  QTextDocument : public QObject
{
Q_OBJECT

Q_PROPERTY(bool undoRedoEnabled READ isUndoRedoEnabled WRITE setUndoRedoEnabled)
Q_PROPERTY(bool modified READ isModified WRITE setModified DESIGNABLE false)
Q_PROPERTY(QSizeF pageSize READ pageSize WRITE setPageSize)
Q_PROPERTY(QFont defaultFont READ defaultFont WRITE setDefaultFont)
Q_PROPERTY(bool useDesignMetrics READ useDesignMetrics WRITE setUseDesignMetrics)
Q_PROPERTY(QSizeF size READ size)
Q_PROPERTY(qreal textWidth READ textWidth WRITE setTextWidth)
Q_PROPERTY(int blockCount READ blockCount)
Q_PROPERTY(qreal indentWidth READ indentWidth WRITE setIndentWidth)

# 125 "/home/eagle/qt-copy/include/QtGui/qtextdocument.h"
Q_PROPERTY(QString defaultStyleSheet READ defaultStyleSheet WRITE setDefaultStyleSheet)

# 127 "/home/eagle/qt-copy/include/QtGui/qtextdocument.h"
Q_PROPERTY(int maximumBlockCount READ maximumBlockCount WRITE setMaximumBlockCount)


public:
explicit QTextDocument(QObject *parent = 0);
explicit QTextDocument(const QString &text, QObject *parent = 0);
~QTextDocument();

QTextDocument *clone(QObject *parent = 0) const;

bool isEmpty() const;
virtual void clear();

void setUndoRedoEnabled(bool enable);
bool isUndoRedoEnabled() const;

bool isUndoAvailable() const;
bool isRedoAvailable() const;

int revision() const;

void setDocumentLayout(QAbstractTextDocumentLayout *layout);
QAbstractTextDocumentLayout *documentLayout() const;

enum MetaInformation {
DocumentTitle,
DocumentUrl
};
void setMetaInformation(MetaInformation info, const QString &);
QString metaInformation(MetaInformation info) const;


# 159 "/home/eagle/qt-copy/include/QtGui/qtextdocument.h"
QString toHtml(const QByteArray &encoding = QByteArray()) const;
void setHtml(const QString &html);


# 163 "/home/eagle/qt-copy/include/QtGui/qtextdocument.h"
QString toPlainText() const;
void setPlainText(const QString &text);

enum FindFlag
{
FindBackward = 0x00001,
FindCaseSensitively = 0x00002,
FindWholeWords = 0x00004
};
typedef QFlags<FindFlag> FindFlags;

QTextCursor find(const QString &subString, int from = 0, FindFlags options = 0) const;
QTextCursor find(const QString &subString, const QTextCursor &from, FindFlags options = 0) const;

QTextCursor find(const QRegExp &expr, int from = 0, FindFlags options = 0) const;
QTextCursor find(const QRegExp &expr, const QTextCursor &from, FindFlags options = 0) const;

QTextFrame *frameAt(int pos) const;
QTextFrame *rootFrame() const;

QTextObject *object(int objectIndex) const;
QTextObject *objectForFormat(const QTextFormat &) const;

QTextBlock findBlock(int pos) const;
QTextBlock findBlockByNumber(int blockNumber) const;
QTextBlock begin() const;
QTextBlock end() const;

QTextBlock firstBlock() const;
QTextBlock lastBlock() const;

void setPageSize(const QSizeF &size);
QSizeF pageSize() const;

void setDefaultFont(const QFont &font);
QFont defaultFont() const;

int pageCount() const;

bool isModified() const;


# 205 "/home/eagle/qt-copy/include/QtGui/qtextdocument.h"
void print(QPrinter *printer) const;


# 208 "/home/eagle/qt-copy/include/QtGui/qtextdocument.h"
enum ResourceType {
HtmlResource = 1,
ImageResource = 2,
StyleSheetResource = 3,

UserResource = 100
};

QVariant resource(int type, const QUrl &name) const;
void addResource(int type, const QUrl &name, const QVariant &resource);

QVector<QTextFormat> allFormats() const;

void markContentsDirty(int from, int length);

void setUseDesignMetrics(bool b);
bool useDesignMetrics() const;

void drawContents(QPainter *painter, const QRectF &rect = QRectF());

void setTextWidth(qreal width);
qreal textWidth() const;

qreal idealWidth() const;

qreal indentWidth() const;
void setIndentWidth(qreal width);

void adjustSize();
QSizeF size() const;

int blockCount() const;


# 242 "/home/eagle/qt-copy/include/QtGui/qtextdocument.h"
void setDefaultStyleSheet(const QString &sheet);
QString defaultStyleSheet() const;


# 246 "/home/eagle/qt-copy/include/QtGui/qtextdocument.h"
void undo(QTextCursor *cursor);
void redo(QTextCursor *cursor);

int maximumBlockCount() const;
void setMaximumBlockCount(int maximum);

QTextOption defaultTextOption() const;
void setDefaultTextOption(const QTextOption &option);

signals:
void contentsChange(int from, int charsRemoves, int charsAdded);
void contentsChanged();
void undoAvailable(bool);
void redoAvailable(bool);
void undoCommandAdded();
void modificationChanged(bool m);
void cursorPositionChanged(const QTextCursor &cursor);
void blockCountChanged(int newBlockCount);

void documentLayoutChanged();

public slots:
void undo();
void redo();
void appendUndoItem(QAbstractUndoItem *);
void setModified(bool m = true);

protected:
virtual QTextObject *createObject(const QTextFormat &f);
virtual QVariant loadResource(int type, const QUrl &name);

QTextDocument(QTextDocumentPrivate &dd, QObject *parent);
public:
QTextDocumentPrivate *docHandle() const;
private:
QTextDocument(const QTextDocument &); QTextDocument &operator=(const QTextDocument &);
inline QTextDocumentPrivate* d_func() { return reinterpret_cast<QTextDocumentPrivate *>(d_ptr); } inline const QTextDocumentPrivate* d_func() const { return reinterpret_cast<const QTextDocumentPrivate *>(d_ptr); } friend class QTextDocumentPrivate;
};

inline QFlags<QTextDocument::FindFlags::enum_type> operator|(QTextDocument::FindFlags::enum_type f1, QTextDocument::FindFlags::enum_type f2) { return QFlags<QTextDocument::FindFlags::enum_type>(f1) | f2; } inline QFlags<QTextDocument::FindFlags::enum_type> operator|(QTextDocument::FindFlags::enum_type f1, QFlags<QTextDocument::FindFlags::enum_type> f2) { return f2 | f1; }






# 49 "/home/eagle/qt-copy/include/QtGui/qabstracttextdocumentlayout.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextcursor.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qtextcursor.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qshareddata.h"



































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qtextcursor.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextformat.h"






















































































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qtextcursor.h"


# 51 "/home/eagle/qt-copy/include/QtGui/qtextcursor.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QTextDocument;
class QTextCursorPrivate;
class QTextDocumentFragment;
class QTextCharFormat;
class QTextBlockFormat;
class QTextListFormat;
class QTextTableFormat;
class QTextFrameFormat;
class QTextImageFormat;
class QTextDocumentPrivate;
class QTextList;
class QTextTable;
class QTextFrame;
class QTextBlock;

class  QTextCursor
{
public:
QTextCursor();
explicit QTextCursor(QTextDocument *document);
QTextCursor(QTextDocumentPrivate *p, int pos);
explicit QTextCursor(QTextFrame *frame);
explicit QTextCursor(const QTextBlock &block);
explicit QTextCursor(QTextCursorPrivate *d);
QTextCursor(const QTextCursor &cursor);
QTextCursor &operator=(const QTextCursor &other);
~QTextCursor();

bool isNull() const;

enum MoveMode {
MoveAnchor,
KeepAnchor
};

void setPosition(int pos, MoveMode mode = MoveAnchor);
int position() const;

int anchor() const;

void insertText(const QString &text);
void insertText(const QString &text, const QTextCharFormat &format);

enum MoveOperation {
NoMove,

Start,
Up,
StartOfLine,
StartOfBlock,
StartOfWord,
PreviousBlock,
PreviousCharacter,
PreviousWord,
Left,
WordLeft,

End,
Down,
EndOfLine,
EndOfWord,
EndOfBlock,
NextBlock,
NextCharacter,
NextWord,
Right,
WordRight
};

bool movePosition(MoveOperation op, MoveMode = MoveAnchor, int n = 1);

bool visualNavigation() const;
void setVisualNavigation(bool b);

void deleteChar();
void deletePreviousChar();

enum SelectionType {
WordUnderCursor,
LineUnderCursor,
BlockUnderCursor,
Document
};
void select(SelectionType selection);

bool hasSelection() const;
bool hasComplexSelection() const;
void removeSelectedText();
void clearSelection();
int selectionStart() const;
int selectionEnd() const;

QString selectedText() const;
QTextDocumentFragment selection() const;
void selectedTableCells(int *firstRow, int *numRows, int *firstColumn, int *numColumns) const;

QTextBlock block() const;

QTextCharFormat charFormat() const;
void setCharFormat(const QTextCharFormat &format);
void mergeCharFormat(const QTextCharFormat &modifier);

QTextBlockFormat blockFormat() const;
void setBlockFormat(const QTextBlockFormat &format);
void mergeBlockFormat(const QTextBlockFormat &modifier);

QTextCharFormat blockCharFormat() const;
void setBlockCharFormat(const QTextCharFormat &format);
void mergeBlockCharFormat(const QTextCharFormat &modifier);

bool atBlockStart() const;
bool atBlockEnd() const;
bool atStart() const;
bool atEnd() const;

void insertBlock();
void insertBlock(const QTextBlockFormat &format);
void insertBlock(const QTextBlockFormat &format, const QTextCharFormat &charFormat);

QTextList *insertList(const QTextListFormat &format);
QTextList *insertList(QTextListFormat::Style style);

QTextList *createList(const QTextListFormat &format);
QTextList *createList(QTextListFormat::Style style);
QTextList *currentList() const;

QTextTable *insertTable(int rows, int cols, const QTextTableFormat &format);
QTextTable *insertTable(int rows, int cols);
QTextTable *currentTable() const;

QTextFrame *insertFrame(const QTextFrameFormat &format);
QTextFrame *currentFrame() const;

void insertFragment(const QTextDocumentFragment &fragment);


# 193 "/home/eagle/qt-copy/include/QtGui/qtextcursor.h"
void insertHtml(const QString &html);


# 196 "/home/eagle/qt-copy/include/QtGui/qtextcursor.h"
void insertImage(const QTextImageFormat &format, QTextFrameFormat::Position alignment);
void insertImage(const QTextImageFormat &format);
void insertImage(const QString &name);

void beginEditBlock();
void joinPreviousEditBlock();
void endEditBlock();

bool operator!=(const QTextCursor &rhs) const;
bool operator<(const QTextCursor &rhs) const;
bool operator<=(const QTextCursor &rhs) const;
bool operator==(const QTextCursor &rhs) const;
bool operator>=(const QTextCursor &rhs) const;
bool operator>(const QTextCursor &rhs) const;

bool isCopyOf(const QTextCursor &other) const;

int blockNumber() const;
int columnNumber() const;

private:
QSharedDataPointer<QTextCursorPrivate> d;
friend class QTextDocumentFragmentPrivate;
friend class QTextCopyHelper;
};






# 50 "/home/eagle/qt-copy/include/QtGui/qabstracttextdocumentlayout.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qpalette.h"






































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtGui/qabstracttextdocumentlayout.h"


# 53 "/home/eagle/qt-copy/include/QtGui/qabstracttextdocumentlayout.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QAbstractTextDocumentLayoutPrivate;
class QTextBlock;
class QTextObjectInterface;
class QTextFrame;

class  QAbstractTextDocumentLayout : public QObject
{
Q_OBJECT
inline QAbstractTextDocumentLayoutPrivate* d_func() { return reinterpret_cast<QAbstractTextDocumentLayoutPrivate *>(d_ptr); } inline const QAbstractTextDocumentLayoutPrivate* d_func() const { return reinterpret_cast<const QAbstractTextDocumentLayoutPrivate *>(d_ptr); } friend class QAbstractTextDocumentLayoutPrivate;

public:
explicit QAbstractTextDocumentLayout(QTextDocument *doc);
~QAbstractTextDocumentLayout();

struct Selection
{
QTextCursor cursor;
QTextCharFormat format;
};

struct PaintContext
{
PaintContext()
: cursorPosition(-1)
{}
int cursorPosition;
QPalette palette;
QRectF clip;
QVector<Selection> selections;
};

virtual void draw(QPainter *painter, const PaintContext &context) = 0;
virtual int hitTest(const QPointF &point, Qt::HitTestAccuracy accuracy) const = 0;
QString anchorAt(const QPointF& pos) const;

virtual int pageCount() const = 0;
virtual QSizeF documentSize() const = 0;

virtual QRectF frameBoundingRect(QTextFrame *frame) const = 0;
virtual QRectF blockBoundingRect(const QTextBlock &block) const = 0;

void setPaintDevice(QPaintDevice *device);
QPaintDevice *paintDevice() const;

QTextDocument *document() const;

void registerHandler(int objectType, QObject *component);
QTextObjectInterface *handlerForObject(int objectType) const;

signals:
void update(const QRectF & = QRectF(0., 0., 1000000000., 1000000000.));
void updateBlock(const QTextBlock &block);
void documentSizeChanged(const QSizeF &newSize);
void pageCountChanged(int newPages);

protected:
QAbstractTextDocumentLayout(QAbstractTextDocumentLayoutPrivate &, QTextDocument *);

virtual void documentChanged(int from, int charsRemoved, int charsAdded) = 0;

virtual void resizeInlineObject(QTextInlineObject item, int posInDocument, const QTextFormat &format);
virtual void positionInlineObject(QTextInlineObject item, int posInDocument, const QTextFormat &format);
virtual void drawInlineObject(QPainter *painter, const QRectF &rect, QTextInlineObject object, int posInDocument, const QTextFormat &format);

int formatIndex(int pos);
QTextCharFormat format(int pos);

private:
friend class QTextDocument;
friend class QTextDocumentPrivate;
friend class QTextEngine;
friend class QTextLayout;
friend class QTextLine;



};

class  QTextObjectInterface
{
public:
virtual ~QTextObjectInterface() {}
virtual QSizeF intrinsicSize(QTextDocument *doc, int posInDocument, const QTextFormat &format) = 0;
virtual void drawObject(QPainter *painter, const QRectF &rect, QTextDocument *doc, int posInDocument, const QTextFormat &format) = 0;
};

template <> inline QTextObjectInterface *qobject_cast<QTextObjectInterface *>(QObject *object) { return reinterpret_cast<QTextObjectInterface *>((object ? object->qt_metacast("com.trolltech.Qt.QTextObjectInterface") : 0)); } template <> inline QTextObjectInterface *qobject_cast<QTextObjectInterface *>(const QObject *object) { return reinterpret_cast<QTextObjectInterface *>((object ? const_cast<QObject *>(object)->qt_metacast("com.trolltech.Qt.QTextObjectInterface") : 0)); }






# 132 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qfont.h"

































































































































































































































































































































































# 133 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qfontdatabase.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qwindowdefs.h"























































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qfontdatabase.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qfontdatabase.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qfont.h"

































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qfontdatabase.h"






# 55 "/home/eagle/qt-copy/include/QtGui/qfontdatabase.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QStringList;
template <class T> class QList;
struct QFontDef;
class QFontEngine;

class QFontDatabasePrivate;

class  QFontDatabase
{

Q_ENUMS(WritingSystem)
public:


enum WritingSystem {
Any,

Latin,
Greek,
Cyrillic,
Armenian,
Hebrew,
Arabic,
Syriac,
Thaana,
Devanagari,
Bengali,
Gurmukhi,
Gujarati,
Oriya,
Tamil,
Telugu,
Kannada,
Malayalam,
Sinhala,
Thai,
Lao,
Tibetan,
Myanmar,
Georgian,
Khmer,
SimplifiedChinese,
TraditionalChinese,
Japanese,
Korean,
Vietnamese,

Symbol,
Other = Symbol,

Ogham,
Runic,

WritingSystemsCount
};

static QList<int> standardSizes();

QFontDatabase();

QList<WritingSystem> writingSystems() const;
QList<WritingSystem> writingSystems(const QString &family) const;

QStringList families(WritingSystem writingSystem = Any) const;
QStringList styles(const QString &family) const;
QList<int> pointSizes(const QString &family, const QString &style = QString());
QList<int> smoothSizes(const QString &family, const QString &style);
QString styleString(const QFont &font);
QString styleString(const QFontInfo &fontInfo);

QFont font(const QString &family, const QString &style, int pointSize) const;

bool isBitmapScalable(const QString &family, const QString &style = QString()) const;
bool isSmoothlyScalable(const QString &family, const QString &style = QString()) const;
bool isScalable(const QString &family, const QString &style = QString()) const;
bool isFixedPitch(const QString &family, const QString &style = QString()) const;

bool italic(const QString &family, const QString &style) const;
bool bold(const QString &family, const QString &style) const;
int weight(const QString &family, const QString &style) const;

static QString writingSystemName(WritingSystem writingSystem);
static QString writingSystemSample(WritingSystem writingSystem);

static int addApplicationFont(const QString &fileName);
static int addApplicationFontFromData(const QByteArray &fontData);
static QStringList applicationFontFamilies(int id);
static bool removeApplicationFont(int id);
static bool removeAllApplicationFonts();

static bool supportsThreadedFontRendering();

private:
static void createDatabase();
static void parseFontName(const QString &name, QString &foundry, QString &family);



# 159 "/home/eagle/qt-copy/include/QtGui/qfontdatabase.h"
static void load(const QFontPrivate *d, int script);




# 164 "/home/eagle/qt-copy/include/QtGui/qfontdatabase.h"
friend struct QFontDef;
friend class QFontPrivate;
friend class QFontDialog;
friend class QFontEngineMultiXLFD;
friend class QFontEngineMultiQWS;

QFontDatabasePrivate *d;
};






# 134 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qfontinfo.h"

























































































# 135 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qfontmetrics.h"







































































































































































































# 136 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qsyntaxhighlighter.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qsyntaxhighlighter.h"




# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtGui/qsyntaxhighlighter.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextobject.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qtextobject.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextformat.h"






















































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qtextobject.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qtextobject.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QTextObjectPrivate;
class QTextDocument;
class QTextDocumentPrivate;
class QTextCursor;
class QTextBlock;
class QTextFragment;
class QTextLayout;
class QTextList;

class  QTextObject : public QObject
{
Q_OBJECT

protected:
explicit QTextObject(QTextDocument *doc);
~QTextObject();

void setFormat(const QTextFormat &format);

public:
QTextFormat format() const;
int formatIndex() const;

QTextDocument *document() const;

int objectIndex() const;

QTextDocumentPrivate *docHandle() const;

protected:
QTextObject(QTextObjectPrivate &p, QTextDocument *doc);

private:
inline QTextObjectPrivate* d_func() { return reinterpret_cast<QTextObjectPrivate *>(d_ptr); } inline const QTextObjectPrivate* d_func() const { return reinterpret_cast<const QTextObjectPrivate *>(d_ptr); } friend class QTextObjectPrivate;
QTextObject(const QTextObject &); QTextObject &operator=(const QTextObject &);
friend class QTextDocumentPrivate;
};

class QTextBlockGroupPrivate;
class  QTextBlockGroup : public QTextObject
{
Q_OBJECT

protected:
explicit QTextBlockGroup(QTextDocument *doc);
~QTextBlockGroup();

virtual void blockInserted(const QTextBlock &block);
virtual void blockRemoved(const QTextBlock &block);
virtual void blockFormatChanged(const QTextBlock &block);

QList<QTextBlock> blockList() const;

protected:
QTextBlockGroup(QTextBlockGroupPrivate &p, QTextDocument *doc);
private:
inline QTextBlockGroupPrivate* d_func() { return reinterpret_cast<QTextBlockGroupPrivate *>(d_ptr); } inline const QTextBlockGroupPrivate* d_func() const { return reinterpret_cast<const QTextBlockGroupPrivate *>(d_ptr); } friend class QTextBlockGroupPrivate;
QTextBlockGroup(const QTextBlockGroup &); QTextBlockGroup &operator=(const QTextBlockGroup &);
friend class QTextDocumentPrivate;
};

class  QTextFrameLayoutData {
public:
virtual ~QTextFrameLayoutData();
};

class QTextFramePrivate;
class  QTextFrame : public QTextObject
{
Q_OBJECT

public:
explicit QTextFrame(QTextDocument *doc);
~QTextFrame();

inline void setFrameFormat(const QTextFrameFormat &format);
QTextFrameFormat frameFormat() const { return QTextObject::format().toFrameFormat(); }

QTextCursor firstCursorPosition() const;
QTextCursor lastCursorPosition() const;
int firstPosition() const;
int lastPosition() const;

QTextFrameLayoutData *layoutData() const;
void setLayoutData(QTextFrameLayoutData *data);

QList<QTextFrame *> childFrames() const;
QTextFrame *parentFrame() const;

class  iterator {
QTextFrame *f;
int b;
int e;
QTextFrame *cf;
int cb;

friend class QTextFrame;
friend class QTextTableCell;
friend class QTextDocumentLayoutPrivate;
iterator(QTextFrame *frame, int block, int begin, int end);
public:
iterator();
iterator(const iterator &o);
iterator &operator=(const iterator &o);

QTextFrame *parentFrame() const { return f; }

QTextFrame *currentFrame() const;
QTextBlock currentBlock() const;

bool atEnd() const { return !cf && cb == e; }

inline bool operator==(const iterator &o) const { return f == o.f && cf == o.cf && cb == o.cb; }
inline bool operator!=(const iterator &o) const { return f != o.f || cf != o.cf || cb != o.cb; }
iterator &operator++();
inline iterator operator++(int) { iterator tmp = *this; operator++(); return tmp; }
iterator &operator--();
inline iterator operator--(int) { iterator tmp = *this; operator--(); return tmp; }
};

friend class iterator;

typedef iterator Iterator;

iterator begin() const;
iterator end() const;

protected:
QTextFrame(QTextFramePrivate &p, QTextDocument *doc);
private:
friend class QTextDocumentPrivate;
inline QTextFramePrivate* d_func() { return reinterpret_cast<QTextFramePrivate *>(d_ptr); } inline const QTextFramePrivate* d_func() const { return reinterpret_cast<const QTextFramePrivate *>(d_ptr); } friend class QTextFramePrivate;
QTextFrame(const QTextFrame &); QTextFrame &operator=(const QTextFrame &);
};
template <> class QTypeInfo<QTextFrame::iterator> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QTextFrame::iterator)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QTextFrame::iterator"; } };

inline void QTextFrame::setFrameFormat(const QTextFrameFormat &aformat)
{ QTextObject::setFormat(aformat); }

class  QTextBlockUserData {
public:
virtual ~QTextBlockUserData();
};

class  QTextBlock
{
friend class QSyntaxHighlighter;
public:
inline QTextBlock(QTextDocumentPrivate *priv, int b) : p(priv), n(b) {}
inline QTextBlock() : p(0), n(0) {}
inline QTextBlock(const QTextBlock &o) : p(o.p), n(o.n) {}
inline QTextBlock &operator=(const QTextBlock &o) { p = o.p; n = o.n; return *this; }

inline bool isValid() const { return p != 0 && n != 0; }

inline bool operator==(const QTextBlock &o) const { return p == o.p && n == o.n; }
inline bool operator!=(const QTextBlock &o) const { return p != o.p || n != o.n; }
inline bool operator<(const QTextBlock &o) const { return position() < o.position(); }

int position() const;
int length() const;
bool contains(int position) const;

QTextLayout *layout() const;
void clearLayout();
QTextBlockFormat blockFormat() const;
int blockFormatIndex() const;
QTextCharFormat charFormat() const;
int charFormatIndex() const;

QString text() const;

const QTextDocument *document() const;

QTextList *textList() const;

QTextBlockUserData *userData() const;
void setUserData(QTextBlockUserData *data);

int userState() const;
void setUserState(int state);

int revision() const;
void setRevision(int rev);

bool isVisible() const;
void setVisible(bool visible);

int blockNumber() const;

class  iterator {
const QTextDocumentPrivate *p;
int b;
int e;
int n;
friend class QTextBlock;
iterator(const QTextDocumentPrivate *priv, int begin, int end, int f) : p(priv), b(begin), e(end), n(f) {}
public:
iterator() : p(0), b(0), e(0), n(0) {}
iterator(const iterator &o) : p(o.p), b(o.b), e(o.e), n(o.n) {}

QTextFragment fragment() const;

bool atEnd() const { return n == e; }

inline bool operator==(const iterator &o) const { return p == o.p && n == o.n; }
inline bool operator!=(const iterator &o) const { return p != o.p || n != o.n; }
iterator &operator++();
inline iterator operator++(int) { iterator tmp = *this; operator++(); return tmp; }
iterator &operator--();
inline iterator operator--(int) { iterator tmp = *this; operator--(); return tmp; }
};


typedef iterator Iterator;

iterator begin() const;
iterator end() const;

QTextBlock next() const;
QTextBlock previous() const;

inline QTextDocumentPrivate *docHandle() const { return p; }

private:
QTextDocumentPrivate *p;
int n;
friend class QTextDocumentPrivate;
friend class QTextLayout;
};

template <> class QTypeInfo<QTextBlock> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QTextBlock)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QTextBlock"; } };
template <> class QTypeInfo<QTextBlock::iterator> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QTextBlock::iterator)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QTextBlock::iterator"; } };


class  QTextFragment
{
public:
inline QTextFragment(const QTextDocumentPrivate *priv, int f, int fe) : p(priv), n(f), ne(fe) {}
inline QTextFragment() : p(0), n(0), ne(0) {}
inline QTextFragment(const QTextFragment &o) : p(o.p), n(o.n), ne(o.ne) {}
inline QTextFragment &operator=(const QTextFragment &o) { p = o.p; n = o.n; ne = o.ne; return *this; }

inline bool isValid() const { return p && n; }

inline bool operator==(const QTextFragment &o) const { return p == o.p && n == o.n; }
inline bool operator!=(const QTextFragment &o) const { return p != o.p || n != o.n; }
inline bool operator<(const QTextFragment &o) const { return position() < o.position(); }

int position() const;
int length() const;
bool contains(int position) const;

QTextCharFormat charFormat() const;
int charFormatIndex() const;
QString text() const;

private:
const QTextDocumentPrivate *p;
int n;
int ne;
};

template <> class QTypeInfo<QTextFragment> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QTextFragment)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QTextFragment"; } };






# 52 "/home/eagle/qt-copy/include/QtGui/qsyntaxhighlighter.h"


# 54 "/home/eagle/qt-copy/include/QtGui/qsyntaxhighlighter.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QTextDocument;
class QSyntaxHighlighterPrivate;
class QTextCharFormat;
class QFont;
class QColor;
class QTextBlockUserData;
class QTextEdit;

class  QSyntaxHighlighter : public QObject
{
Q_OBJECT
inline QSyntaxHighlighterPrivate* d_func() { return reinterpret_cast<QSyntaxHighlighterPrivate *>(d_ptr); } inline const QSyntaxHighlighterPrivate* d_func() const { return reinterpret_cast<const QSyntaxHighlighterPrivate *>(d_ptr); } friend class QSyntaxHighlighterPrivate;
public:
QSyntaxHighlighter(QObject *parent);
QSyntaxHighlighter(QTextDocument *parent);
QSyntaxHighlighter(QTextEdit *parent);
virtual ~QSyntaxHighlighter();

void setDocument(QTextDocument *doc);
QTextDocument *document() const;

public slots:
void rehighlight();

protected:
virtual void highlightBlock(const QString &text) = 0;

void setFormat(int start, int count, const QTextCharFormat &format);
void setFormat(int start, int count, const QColor &color);
void setFormat(int start, int count, const QFont &font);
QTextCharFormat format(int pos) const;

int previousBlockState() const;
int currentBlockState() const;
void setCurrentBlockState(int newState);

void setCurrentBlockUserData(QTextBlockUserData *data);
QTextBlockUserData *currentBlockUserData() const;

QTextBlock currentBlock() const;

private:
QSyntaxHighlighter(const QSyntaxHighlighter &); QSyntaxHighlighter &operator=(const QSyntaxHighlighter &);


};








# 137 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextcursor.h"


































































































































































































































# 138 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextdocument.h"



































































































































































































































































































# 139 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextdocumentfragment.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qtextdocumentfragment.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qtextdocumentfragment.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QTextStream;
class QTextDocument;
class QTextDocumentFragmentPrivate;
class QTextCursor;

class  QTextDocumentFragment
{
public:
QTextDocumentFragment();
explicit QTextDocumentFragment(const QTextDocument *document);
explicit QTextDocumentFragment(const QTextCursor &range);
QTextDocumentFragment(const QTextDocumentFragment &rhs);
QTextDocumentFragment &operator=(const QTextDocumentFragment &rhs);
~QTextDocumentFragment();

bool isEmpty() const;

QString toPlainText() const;

# 74 "/home/eagle/qt-copy/include/QtGui/qtextdocumentfragment.h"
QString toHtml() const;
QString toHtml(const QByteArray &encoding) const;


# 78 "/home/eagle/qt-copy/include/QtGui/qtextdocumentfragment.h"
static QTextDocumentFragment fromPlainText(const QString &plainText);

# 80 "/home/eagle/qt-copy/include/QtGui/qtextdocumentfragment.h"
static QTextDocumentFragment fromHtml(const QString &html);
static QTextDocumentFragment fromHtml(const QString &html, const QTextDocument *resourceProvider);


# 84 "/home/eagle/qt-copy/include/QtGui/qtextdocumentfragment.h"
private:
QTextDocumentFragmentPrivate *d;
friend class QTextCursor;
};






# 140 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextformat.h"






















































































































































































































































































































































































































































































































































































































































































































































































































































































































# 141 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextlayout.h"





















































































































































































































































# 142 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextlist.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qtextobject.h"





































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qtextlist.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qtextlist.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qtextlist.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QTextListPrivate;
class QTextCursor;

class  QTextList : public QTextBlockGroup
{
Q_OBJECT
public:
explicit QTextList(QTextDocument *doc);
~QTextList();

int count() const;

inline bool isEmpty() const
{ return count() == 0; }

QTextBlock item(int i) const;

int itemNumber(const QTextBlock &) const;
QString itemText(const QTextBlock &) const;

void removeItem(int i);
void remove(const QTextBlock &);

void add(const QTextBlock &block);

inline void setFormat(const QTextListFormat &format);
QTextListFormat format() const { return QTextObject::format().toListFormat(); }

private:
QTextList(const QTextList &); QTextList &operator=(const QTextList &);
inline QTextListPrivate* d_func() { return reinterpret_cast<QTextListPrivate *>(d_ptr); } inline const QTextListPrivate* d_func() const { return reinterpret_cast<const QTextListPrivate *>(d_ptr); } friend class QTextListPrivate;
};

inline void QTextList::setFormat(const QTextListFormat &aformat)
{ QTextObject::setFormat(aformat); }






# 143 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextobject.h"





































































































































































































































































































































# 144 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextoption.h"































































































































































# 145 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtexttable.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qtexttable.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qtexttable.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextobject.h"





































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qtexttable.h"


# 51 "/home/eagle/qt-copy/include/QtGui/qtexttable.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QTextCursor;
class QTextTable;
class QTextTablePrivate;

class  QTextTableCell
{
public:
QTextTableCell() : table(0) {}
~QTextTableCell() {}
QTextTableCell(const QTextTableCell &o) : table(o.table), fragment(o.fragment) {}
QTextTableCell &operator=(const QTextTableCell &o)
{ table = o.table; fragment = o.fragment; return *this; }

void setFormat(const QTextCharFormat &format);
QTextCharFormat format() const;

int row() const;
int column() const;

int rowSpan() const;
int columnSpan() const;

inline bool isValid() const { return table != 0; }

QTextCursor firstCursorPosition() const;
QTextCursor lastCursorPosition() const;
int firstPosition() const;
int lastPosition() const;

inline bool operator==(const QTextTableCell &other) const
{ return table == other.table && fragment == other.fragment; }
inline bool operator!=(const QTextTableCell &other) const
{ return !operator==(other); }

QTextFrame::iterator begin() const;
QTextFrame::iterator end() const;

private:
friend class QTextTable;
QTextTableCell(const QTextTable *t, int f)
: table(t), fragment(f) {}

const QTextTable *table;
int fragment;
};

class  QTextTable : public QTextFrame
{
Q_OBJECT
public:
explicit QTextTable(QTextDocument *doc);
~QTextTable();

void resize(int rows, int cols);
void insertRows(int pos, int num);
void insertColumns(int pos, int num);
void removeRows(int pos, int num);
void removeColumns(int pos, int num);

void mergeCells(int row, int col, int numRows, int numCols);
void mergeCells(const QTextCursor &cursor);
void splitCell(int row, int col, int numRows, int numCols);

int rows() const;
int columns() const;

QTextTableCell cellAt(int row, int col) const;
QTextTableCell cellAt(int position) const;
QTextTableCell cellAt(const QTextCursor &c) const;

QTextCursor rowStart(const QTextCursor &c) const;
QTextCursor rowEnd(const QTextCursor &c) const;

void setFormat(const QTextTableFormat &format);
QTextTableFormat format() const { return QTextObject::format().toTableFormat(); }

private:
QTextTable(const QTextTable &); QTextTable &operator=(const QTextTable &);
inline QTextTablePrivate* d_func() { return reinterpret_cast<QTextTablePrivate *>(d_ptr); } inline const QTextTablePrivate* d_func() const { return reinterpret_cast<const QTextTablePrivate *>(d_ptr); } friend class QTextTablePrivate;
friend class QTextTableCell;
};






# 146 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qcompleter.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qcompleter.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qpoint.h"






































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qcompleter.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qcompleter.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstractitemmodel.h"

































































































































































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtGui/qcompleter.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qrect.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtGui/qcompleter.h"


# 53 "/home/eagle/qt-copy/include/QtGui/qcompleter.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 61 "/home/eagle/qt-copy/include/QtGui/qcompleter.h"
class QCompleterPrivate;
class QAbstractItemView;
class QAbstractProxyModel;
class QWidget;

class  QCompleter : public QObject
{
Q_OBJECT
Q_PROPERTY(QString completionPrefix READ completionPrefix WRITE setCompletionPrefix)
Q_PROPERTY(ModelSorting modelSorting READ modelSorting WRITE setModelSorting)
Q_PROPERTY(CompletionMode completionMode READ completionMode WRITE setCompletionMode)
Q_PROPERTY(int completionColumn READ completionColumn WRITE setCompletionColumn)
Q_PROPERTY(int completionRole READ completionRole WRITE setCompletionRole)
Q_PROPERTY(Qt::CaseSensitivity caseSensitivity READ caseSensitivity WRITE setCaseSensitivity)
Q_PROPERTY(bool wrapAround READ wrapAround WRITE setWrapAround)

public:
enum CompletionMode {
PopupCompletion,
UnfilteredPopupCompletion,
InlineCompletion
};

enum ModelSorting {
UnsortedModel = 0,
CaseSensitivelySortedModel,
CaseInsensitivelySortedModel
};

QCompleter(QObject *parent = 0);
QCompleter(QAbstractItemModel *model, QObject *parent = 0);

# 93 "/home/eagle/qt-copy/include/QtGui/qcompleter.h"
QCompleter(const QStringList& completions, QObject *parent = 0);

# 95 "/home/eagle/qt-copy/include/QtGui/qcompleter.h"
~QCompleter();

void setWidget(QWidget *widget);
QWidget *widget() const;

void setModel(QAbstractItemModel *c);
QAbstractItemModel *model() const;

void setCompletionMode(CompletionMode mode);
CompletionMode completionMode() const;

QAbstractItemView *popup() const;
void setPopup(QAbstractItemView *popup);

void setCaseSensitivity(Qt::CaseSensitivity caseSensitivity);
Qt::CaseSensitivity caseSensitivity() const;

void setModelSorting(ModelSorting sorting);
ModelSorting modelSorting() const;

void setCompletionColumn(int column);
int completionColumn() const;

void setCompletionRole(int role);
int completionRole() const;

bool wrapAround() const;

int completionCount() const;
bool setCurrentRow(int row);
int currentRow() const;

QModelIndex currentIndex() const;
QString currentCompletion() const;

QAbstractItemModel *completionModel() const;

QString completionPrefix() const;

public slots:
void setCompletionPrefix(const QString &prefix);
void complete(const QRect& rect = QRect());
void setWrapAround(bool wrap);

public:
virtual QString pathFromIndex(const QModelIndex &index) const;
virtual QStringList splitPath(const QString &path) const;

protected:
bool eventFilter(QObject *o, QEvent *e);
bool event(QEvent *);

signals:
void activated(const QString &text);
void activated(const QModelIndex &index);
void highlighted(const QString &text);
void highlighted(const QModelIndex &index);

private:
QCompleter(const QCompleter &); QCompleter &operator=(const QCompleter &);
inline QCompleterPrivate* d_func() { return reinterpret_cast<QCompleterPrivate *>(d_ptr); } inline const QCompleterPrivate* d_func() const { return reinterpret_cast<const QCompleterPrivate *>(d_ptr); } friend class QCompleterPrivate;




};



# 164 "/home/eagle/qt-copy/include/QtGui/qcompleter.h"





# 147 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qdesktopservices.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qdesktopservices.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qdesktopservices.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qdesktopservices.h"
class QStringList;
class QUrl;
class QObject;

class  QDesktopServices
{
public:
static bool openUrl(const QUrl &url);
static void setUrlHandler(const QString &scheme, QObject *receiver, const char *method);
static void unsetUrlHandler(const QString &scheme);

enum StandardLocation {
DesktopLocation,
DocumentsLocation,
FontsLocation,
ApplicationsLocation,
MusicLocation,
MoviesLocation,
PicturesLocation,
TempLocation,
HomeLocation,
DataLocation
};

static QString storageLocation(StandardLocation type);
static QString displayName(StandardLocation type);
};



# 87 "/home/eagle/qt-copy/include/QtGui/qdesktopservices.h"






# 148 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qsystemtrayicon.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qsystemtrayicon.h"




# 1 "/home/eagle/qt-copy/include/QtGui/qicon.h"















































































































































# 51 "/home/eagle/qt-copy/include/QtGui/qsystemtrayicon.h"


# 53 "/home/eagle/qt-copy/include/QtGui/qsystemtrayicon.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QSystemTrayIconPrivate;

class QMenu;
class QEvent;
class QWheelEvent;
class QMouseEvent;
class QPoint;

class  QSystemTrayIcon : public QObject
{
Q_OBJECT
Q_PROPERTY(QString toolTip READ toolTip WRITE setToolTip)
Q_PROPERTY(QIcon icon READ icon WRITE setIcon)
Q_PROPERTY(bool visible READ isVisible WRITE setVisible DESIGNABLE false)

public:
QSystemTrayIcon(QObject *parent = 0);
QSystemTrayIcon(const QIcon &icon, QObject *parent = 0);
~QSystemTrayIcon();

enum ActivationReason {
Unknown,
Context,
DoubleClick,
Trigger,
MiddleClick
};


# 88 "/home/eagle/qt-copy/include/QtGui/qsystemtrayicon.h"
void setContextMenu(QMenu *menu);
QMenu *contextMenu() const;


# 92 "/home/eagle/qt-copy/include/QtGui/qsystemtrayicon.h"
QIcon icon() const;
void setIcon(const QIcon &icon);

QString toolTip() const;
void setToolTip(const QString &tip);

static bool isSystemTrayAvailable();
static bool supportsMessages();

enum MessageIcon { NoIcon, Information, Warning, Critical };
void showMessage(const QString &title, const QString &msg,
MessageIcon icon = Information, int msecs = 10000);

QRect geometry() const;
bool isVisible() const;

public slots:
void setVisible(bool visible);
inline void show() { setVisible(true); }
inline void hide() { setVisible(false); }

signals:
void activated(QSystemTrayIcon::ActivationReason reason);
void messageClicked();

protected:
bool event(QEvent *event);

private:
QSystemTrayIcon(const QSystemTrayIcon &); QSystemTrayIcon &operator=(const QSystemTrayIcon &);
inline QSystemTrayIconPrivate* d_func() { return reinterpret_cast<QSystemTrayIconPrivate *>(d_ptr); } inline const QSystemTrayIconPrivate* d_func() const { return reinterpret_cast<const QSystemTrayIconPrivate *>(d_ptr); } friend class QSystemTrayIconPrivate;

friend class QSystemTrayIconSys;
friend class QBalloonTip;
friend void qtsystray_sendActivated(QSystemTrayIcon *, int);
};







# 149 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qundogroup.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qundogroup.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qundogroup.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qundogroup.h"




class QUndoGroupPrivate;
class QUndoStack;
class QAction;

typedef QtValidLicenseForGuiModule QtGuiModule;



# 62 "/home/eagle/qt-copy/include/QtGui/qundogroup.h"
class  QUndoGroup : public QObject
{
Q_OBJECT
inline QUndoGroupPrivate* d_func() { return reinterpret_cast<QUndoGroupPrivate *>(d_ptr); } inline const QUndoGroupPrivate* d_func() const { return reinterpret_cast<const QUndoGroupPrivate *>(d_ptr); } friend class QUndoGroupPrivate;

public:
explicit QUndoGroup(QObject *parent = 0);

void addStack(QUndoStack *stack);
void removeStack(QUndoStack *stack);
QList<QUndoStack*> stacks() const;
QUndoStack *activeStack() const;


# 76 "/home/eagle/qt-copy/include/QtGui/qundogroup.h"
QAction *createUndoAction(QObject *parent,
const QString &prefix = QString()) const;
QAction *createRedoAction(QObject *parent,
const QString &prefix = QString()) const;

# 81 "/home/eagle/qt-copy/include/QtGui/qundogroup.h"
bool canUndo() const;
bool canRedo() const;
QString undoText() const;
QString redoText() const;
bool isClean() const;

public slots:
void undo();
void redo();
void setActiveStack(QUndoStack *stack);

signals:
void activeStackChanged(QUndoStack *stack);
void indexChanged(int idx);
void cleanChanged(bool clean);
void canUndoChanged(bool canUndo);
void canRedoChanged(bool canRedo);
void undoTextChanged(const QString &undoText);
void redoTextChanged(const QString &redoText);

private:
QUndoGroup(const QUndoGroup &); QUndoGroup &operator=(const QUndoGroup &);
};



# 107 "/home/eagle/qt-copy/include/QtGui/qundogroup.h"





# 150 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qundostack.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qundostack.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qundostack.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qundostack.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QAction;
class QUndoCommandPrivate;
class QUndoStackPrivate;



# 62 "/home/eagle/qt-copy/include/QtGui/qundostack.h"
class  QUndoCommand
{
QUndoCommandPrivate *d;

public:
explicit QUndoCommand(QUndoCommand *parent = 0);
explicit QUndoCommand(const QString &text, QUndoCommand *parent = 0);
virtual ~QUndoCommand();

virtual void undo();
virtual void redo();

QString text() const;
void setText(const QString &text);

virtual int id() const;
virtual bool mergeWith(const QUndoCommand *other);

int childCount() const;
const QUndoCommand *child(int index) const;

private:
QUndoCommand(const QUndoCommand &); QUndoCommand &operator=(const QUndoCommand &);
friend class QUndoStack;
};





# 92 "/home/eagle/qt-copy/include/QtGui/qundostack.h"
class  QUndoStack : public QObject
{
Q_OBJECT
inline QUndoStackPrivate* d_func() { return reinterpret_cast<QUndoStackPrivate *>(d_ptr); } inline const QUndoStackPrivate* d_func() const { return reinterpret_cast<const QUndoStackPrivate *>(d_ptr); } friend class QUndoStackPrivate;
Q_PROPERTY(bool active READ isActive WRITE setActive)
Q_PROPERTY(int undoLimit READ undoLimit WRITE setUndoLimit)

public:
explicit QUndoStack(QObject *parent = 0);
~QUndoStack();
void clear();

void push(QUndoCommand *cmd);

bool canUndo() const;
bool canRedo() const;
QString undoText() const;
QString redoText() const;

int count() const;
int index() const;
QString text(int idx) const;


# 116 "/home/eagle/qt-copy/include/QtGui/qundostack.h"
QAction *createUndoAction(QObject *parent,
const QString &prefix = QString()) const;
QAction *createRedoAction(QObject *parent,
const QString &prefix = QString()) const;


# 122 "/home/eagle/qt-copy/include/QtGui/qundostack.h"
bool isActive() const;
bool isClean() const;
int cleanIndex() const;

void beginMacro(const QString &text);
void endMacro();

void setUndoLimit(int limit);
int undoLimit() const;

const QUndoCommand *command(int index) const;

public slots:
void setClean();
void setIndex(int idx);
void undo();
void redo();
void setActive(bool active = true);

signals:
void indexChanged(int idx);
void cleanChanged(bool clean);
void canUndoChanged(bool canUndo);
void canRedoChanged(bool canRedo);
void undoTextChanged(const QString &undoText);
void redoTextChanged(const QString &redoText);

private:
QUndoStack(const QUndoStack &); QUndoStack &operator=(const QUndoStack &);
friend class QUndoGroup;
};



# 156 "/home/eagle/qt-copy/include/QtGui/qundostack.h"





# 151 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qundoview.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qlistview.h"













































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qundoview.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qundoview.h"




# 52 "/home/eagle/qt-copy/include/QtGui/qundoview.h"




class QUndoViewPrivate;
class QUndoStack;
class QUndoGroup;
class QIcon;

typedef QtValidLicenseForGuiModule QtGuiModule;

class  QUndoView : public QListView
{
Q_OBJECT
inline QUndoViewPrivate* d_func() { return reinterpret_cast<QUndoViewPrivate *>(d_ptr); } inline const QUndoViewPrivate* d_func() const { return reinterpret_cast<const QUndoViewPrivate *>(d_ptr); } friend class QUndoViewPrivate;
Q_PROPERTY(QString emptyLabel READ emptyLabel WRITE setEmptyLabel)
Q_PROPERTY(QIcon cleanIcon READ cleanIcon WRITE setCleanIcon)

public:
explicit QUndoView(QWidget *parent = 0);
explicit QUndoView(QUndoStack *stack, QWidget *parent = 0);

# 74 "/home/eagle/qt-copy/include/QtGui/qundoview.h"
explicit QUndoView(QUndoGroup *group, QWidget *parent = 0);

# 76 "/home/eagle/qt-copy/include/QtGui/qundoview.h"
~QUndoView();

QUndoStack *stack() const;

# 80 "/home/eagle/qt-copy/include/QtGui/qundoview.h"
QUndoGroup *group() const;


# 83 "/home/eagle/qt-copy/include/QtGui/qundoview.h"
void setEmptyLabel(const QString &label);
QString emptyLabel() const;

void setCleanIcon(const QIcon &icon);
QIcon cleanIcon() const;

public slots:
void setStack(QUndoStack *stack);

# 92 "/home/eagle/qt-copy/include/QtGui/qundoview.h"
void setGroup(QUndoGroup *group);


# 95 "/home/eagle/qt-copy/include/QtGui/qundoview.h"
private:
QUndoView(const QUndoView &); QUndoView &operator=(const QUndoView &);
};







# 152 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qabstractbutton.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qicon.h"















































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qabstractbutton.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qkeysequence.h"




































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qabstractbutton.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qwidget.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qabstractbutton.h"


# 51 "/home/eagle/qt-copy/include/QtGui/qabstractbutton.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QButtonGroup;
class QAbstractButtonPrivate;

class  QAbstractButton : public QWidget
{
Q_OBJECT

Q_PROPERTY(QString text READ text WRITE setText)
Q_PROPERTY(QIcon icon READ icon WRITE setIcon)
Q_PROPERTY(QSize iconSize READ iconSize WRITE setIconSize)

# 68 "/home/eagle/qt-copy/include/QtGui/qabstractbutton.h"
Q_PROPERTY(QKeySequence shortcut READ shortcut WRITE setShortcut)

# 70 "/home/eagle/qt-copy/include/QtGui/qabstractbutton.h"
Q_PROPERTY(bool checkable READ isCheckable WRITE setCheckable)
Q_PROPERTY(bool checked READ isChecked WRITE setChecked DESIGNABLE isCheckable NOTIFY toggled USER true)
Q_PROPERTY(bool autoRepeat READ autoRepeat WRITE setAutoRepeat)
Q_PROPERTY(bool autoExclusive READ autoExclusive WRITE setAutoExclusive)
Q_PROPERTY(int autoRepeatDelay READ autoRepeatDelay WRITE setAutoRepeatDelay)
Q_PROPERTY(int autoRepeatInterval READ autoRepeatInterval WRITE setAutoRepeatInterval)
Q_PROPERTY(bool down READ isDown WRITE setDown DESIGNABLE false)

public:
explicit QAbstractButton(QWidget* parent=0);
~QAbstractButton();

void setText(const QString &text);
QString text() const;

void setIcon(const QIcon &icon);
QIcon icon() const;

QSize iconSize() const;


# 91 "/home/eagle/qt-copy/include/QtGui/qabstractbutton.h"
void setShortcut(const QKeySequence &key);
QKeySequence shortcut() const;


# 95 "/home/eagle/qt-copy/include/QtGui/qabstractbutton.h"
void setCheckable(bool);
bool isCheckable() const;

bool isChecked() const;

void setDown(bool);
bool isDown() const;

void setAutoRepeat(bool);
bool autoRepeat() const;

void setAutoRepeatDelay(int);
int autoRepeatDelay() const;

void setAutoRepeatInterval(int);
int autoRepeatInterval() const;

void setAutoExclusive(bool);
bool autoExclusive() const;


# 116 "/home/eagle/qt-copy/include/QtGui/qabstractbutton.h"
QButtonGroup *group() const;


# 119 "/home/eagle/qt-copy/include/QtGui/qabstractbutton.h"
public slots:
void setIconSize(const QSize &size);
void animateClick(int msec = 100);
void click();
void toggle();
void setChecked(bool);

signals:
void pressed();
void released();
void clicked(bool checked = false);
void toggled(bool checked);

protected:
virtual void paintEvent(QPaintEvent *e) = 0;
virtual bool hitButton(const QPoint &pos) const;
virtual void checkStateSet();
virtual void nextCheckState();

bool event(QEvent *e);
void keyPressEvent(QKeyEvent *e);
void keyReleaseEvent(QKeyEvent *e);
void mousePressEvent(QMouseEvent *e);
void mouseReleaseEvent(QMouseEvent *e);
void mouseMoveEvent(QMouseEvent *e);
void focusInEvent(QFocusEvent *e);
void focusOutEvent(QFocusEvent *e);
void changeEvent(QEvent *e);
void timerEvent(QTimerEvent *e);





















# 169 "/home/eagle/qt-copy/include/QtGui/qabstractbutton.h"
protected:
QAbstractButton(QAbstractButtonPrivate &dd, QWidget* parent = 0);

private:
inline QAbstractButtonPrivate* d_func() { return reinterpret_cast<QAbstractButtonPrivate *>(d_ptr); } inline const QAbstractButtonPrivate* d_func() const { return reinterpret_cast<const QAbstractButtonPrivate *>(d_ptr); } friend class QAbstractButtonPrivate;
QAbstractButton(const QAbstractButton &); QAbstractButton &operator=(const QAbstractButton &);
friend class QButtonGroup;
};






# 153 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qabstractscrollarea.h"













































































































































# 154 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qabstractslider.h"


























































































































































































# 155 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qabstractspinbox.h"



















































































































































































# 156 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qbuttongroup.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qbuttongroup.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qbuttongroup.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qbuttongroup.h"
class QAbstractButton;
class QAbstractButtonPrivate;
class QButtonGroupPrivate;

class  QButtonGroup : public QObject
{
Q_OBJECT

Q_PROPERTY(bool exclusive READ exclusive WRITE setExclusive)
public:
explicit QButtonGroup(QObject *parent = 0);
~QButtonGroup();

void setExclusive(bool);
bool exclusive() const;

void addButton(QAbstractButton *);
void addButton(QAbstractButton *, int id);
void removeButton(QAbstractButton *);

QList<QAbstractButton*> buttons() const;

QAbstractButton * checkedButton() const;


QAbstractButton *button(int id) const;
void setId(QAbstractButton *button, int id);
int id(QAbstractButton *button) const;
int checkedId() const;

signals:
void buttonClicked(QAbstractButton *);
void buttonClicked(int);
void buttonPressed(QAbstractButton *);
void buttonPressed(int);
void buttonReleased(QAbstractButton *);
void buttonReleased(int);







# 101 "/home/eagle/qt-copy/include/QtGui/qbuttongroup.h"
private:
QButtonGroup(const QButtonGroup &); QButtonGroup &operator=(const QButtonGroup &);
inline QButtonGroupPrivate* d_func() { return reinterpret_cast<QButtonGroupPrivate *>(d_ptr); } inline const QButtonGroupPrivate* d_func() const { return reinterpret_cast<const QButtonGroupPrivate *>(d_ptr); } friend class QButtonGroupPrivate;
friend class QAbstractButton;
friend class QAbstractButtonPrivate;
};



# 110 "/home/eagle/qt-copy/include/QtGui/qbuttongroup.h"





# 157 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qcalendarwidget.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qwidget.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qcalendarwidget.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"



































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qcalendarwidget.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qcalendarwidget.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 58 "/home/eagle/qt-copy/include/QtGui/qcalendarwidget.h"
class QDate;
class QTextCharFormat;
class QCalendarWidgetPrivate;

class  QCalendarWidget : public QWidget
{
Q_OBJECT
Q_ENUMS(Qt::DayOfWeek)
Q_ENUMS(HorizontalHeaderFormat)
Q_ENUMS(VerticalHeaderFormat)
Q_ENUMS(SelectionMode)
Q_PROPERTY(QDate selectedDate READ selectedDate WRITE setSelectedDate)
Q_PROPERTY(QDate minimumDate READ minimumDate WRITE setMinimumDate)
Q_PROPERTY(QDate maximumDate READ maximumDate WRITE setMaximumDate)
Q_PROPERTY(Qt::DayOfWeek firstDayOfWeek READ firstDayOfWeek WRITE setFirstDayOfWeek)
Q_PROPERTY(bool gridVisible READ isGridVisible WRITE setGridVisible)
Q_PROPERTY(SelectionMode selectionMode READ selectionMode WRITE setSelectionMode)
Q_PROPERTY(HorizontalHeaderFormat horizontalHeaderFormat READ horizontalHeaderFormat WRITE setHorizontalHeaderFormat)
Q_PROPERTY(VerticalHeaderFormat verticalHeaderFormat READ verticalHeaderFormat WRITE setVerticalHeaderFormat)
Q_PROPERTY(bool headerVisible READ isHeaderVisible WRITE setHeaderVisible STORED false DESIGNABLE false) 
Q_PROPERTY(bool navigationBarVisible READ isNavigationBarVisible WRITE setNavigationBarVisible)
Q_PROPERTY(bool dateEditEnabled READ isDateEditEnabled WRITE setDateEditEnabled)
Q_PROPERTY(int dateEditAcceptDelay READ dateEditAcceptDelay WRITE setDateEditAcceptDelay)

public:
enum HorizontalHeaderFormat {
NoHorizontalHeader,
SingleLetterDayNames,
ShortDayNames,
LongDayNames
};

enum VerticalHeaderFormat {
NoVerticalHeader,
ISOWeekNumbers
};

enum SelectionMode {
NoSelection,
SingleSelection
};

explicit QCalendarWidget(QWidget *parent = 0);
~QCalendarWidget();

virtual QSize sizeHint() const;
virtual QSize minimumSizeHint() const;

QDate selectedDate() const;

int yearShown() const;
int monthShown() const;

QDate minimumDate() const;
void setMinimumDate(const QDate &date);

QDate maximumDate() const;
void setMaximumDate(const QDate &date);

Qt::DayOfWeek firstDayOfWeek() const;
void setFirstDayOfWeek(Qt::DayOfWeek dayOfWeek);


bool isHeaderVisible() const;
void setHeaderVisible(bool show); 

inline bool isNavigationBarVisible() const { return isHeaderVisible(); }

bool isGridVisible() const;

SelectionMode selectionMode() const;
void setSelectionMode(SelectionMode mode);

HorizontalHeaderFormat horizontalHeaderFormat() const;
void setHorizontalHeaderFormat(HorizontalHeaderFormat format);

VerticalHeaderFormat verticalHeaderFormat() const;
void setVerticalHeaderFormat(VerticalHeaderFormat format);

QTextCharFormat headerTextFormat() const;
void setHeaderTextFormat(const QTextCharFormat &format);

QTextCharFormat weekdayTextFormat(Qt::DayOfWeek dayOfWeek) const;
void setWeekdayTextFormat(Qt::DayOfWeek dayOfWeek, const QTextCharFormat &format);

QMap<QDate, QTextCharFormat> dateTextFormat() const;
QTextCharFormat dateTextFormat(const QDate &date) const;
void setDateTextFormat(const QDate &date, const QTextCharFormat &color);

bool isDateEditEnabled() const;
void setDateEditEnabled(bool enable);

int dateEditAcceptDelay() const;
void setDateEditAcceptDelay(int delay);

protected:
bool event(QEvent *event);
void mousePressEvent(QMouseEvent *event);
void resizeEvent(QResizeEvent * event);
void keyPressEvent(QKeyEvent * event);

virtual void paintCell(QPainter *painter, const QRect &rect, const QDate &date) const;
void updateCell(const QDate &date);
void updateCells();

public slots:
void setSelectedDate(const QDate &date);
void setDateRange(const QDate &min, const QDate &max);
void setCurrentPage(int year, int month);
void setGridVisible(bool show);
void setNavigationBarVisible(bool visible);
void showNextMonth();
void showPreviousMonth();
void showNextYear();
void showPreviousYear();
void showSelectedDate();
void showToday();

signals:
void selectionChanged();
void clicked(const QDate &date);
void activated(const QDate &date);
void currentPageChanged(int year, int month);

private:
inline QCalendarWidgetPrivate* d_func() { return reinterpret_cast<QCalendarWidgetPrivate *>(d_ptr); } inline const QCalendarWidgetPrivate* d_func() const { return reinterpret_cast<const QCalendarWidgetPrivate *>(d_ptr); } friend class QCalendarWidgetPrivate;
QCalendarWidget(const QCalendarWidget &); QCalendarWidget &operator=(const QCalendarWidget &);










};



# 199 "/home/eagle/qt-copy/include/QtGui/qcalendarwidget.h"






# 158 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qcheckbox.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qabstractbutton.h"






















































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qcheckbox.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qcheckbox.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QCheckBoxPrivate;
class QStyleOptionButton;

class  QCheckBox : public QAbstractButton
{
Q_OBJECT

Q_PROPERTY(bool tristate READ isTristate WRITE setTristate)

public:
explicit QCheckBox(QWidget *parent=0);
explicit QCheckBox(const QString &text, QWidget *parent=0);


QSize sizeHint() const;

void setTristate(bool y = true);
bool isTristate() const;

Qt::CheckState checkState() const;
void setCheckState(Qt::CheckState state);

signals:
void stateChanged(int);

protected:
bool event(QEvent *e);
bool hitButton(const QPoint &pos) const;
void checkStateSet();
void nextCheckState();
void paintEvent(QPaintEvent *);
void mouseMoveEvent(QMouseEvent *);
void initStyleOption(QStyleOptionButton *option) const;


















# 106 "/home/eagle/qt-copy/include/QtGui/qcheckbox.h"
private:
inline QCheckBoxPrivate* d_func() { return reinterpret_cast<QCheckBoxPrivate *>(d_ptr); } inline const QCheckBoxPrivate* d_func() const { return reinterpret_cast<const QCheckBoxPrivate *>(d_ptr); } friend class QCheckBoxPrivate;
QCheckBox(const QCheckBox &); QCheckBox &operator=(const QCheckBox &);
};






# 159 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qcombobox.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qwidget.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qcombobox.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qabstractitemdelegate.h"








































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qcombobox.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstractitemmodel.h"

































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qcombobox.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qvariant.h"






















































































































































































































































































































































































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtGui/qcombobox.h"


# 52 "/home/eagle/qt-copy/include/QtGui/qcombobox.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 60 "/home/eagle/qt-copy/include/QtGui/qcombobox.h"
class QAbstractItemView;
class QLineEdit;
class QComboBoxPrivate;
class QCompleter;

class  QComboBox : public QWidget
{
Q_OBJECT

Q_ENUMS(InsertPolicy)
Q_ENUMS(SizeAdjustPolicy)
Q_PROPERTY(bool editable READ isEditable WRITE setEditable)
Q_PROPERTY(int count READ count)
Q_PROPERTY(QString currentText READ currentText)
Q_PROPERTY(int currentIndex READ currentIndex WRITE setCurrentIndex NOTIFY currentIndexChanged)
Q_PROPERTY(int maxVisibleItems READ maxVisibleItems WRITE setMaxVisibleItems)
Q_PROPERTY(int maxCount READ maxCount WRITE setMaxCount)
Q_PROPERTY(InsertPolicy insertPolicy READ insertPolicy WRITE setInsertPolicy)
Q_PROPERTY(SizeAdjustPolicy sizeAdjustPolicy READ sizeAdjustPolicy WRITE setSizeAdjustPolicy)
Q_PROPERTY(int minimumContentsLength READ minimumContentsLength WRITE setMinimumContentsLength)
Q_PROPERTY(QSize iconSize READ iconSize WRITE setIconSize)


# 83 "/home/eagle/qt-copy/include/QtGui/qcombobox.h"
Q_PROPERTY(bool autoCompletion READ autoCompletion WRITE setAutoCompletion DESIGNABLE false)
Q_PROPERTY(Qt::CaseSensitivity autoCompletionCaseSensitivity READ autoCompletionCaseSensitivity WRITE setAutoCompletionCaseSensitivity DESIGNABLE false)


# 87 "/home/eagle/qt-copy/include/QtGui/qcombobox.h"
Q_PROPERTY(bool duplicatesEnabled READ duplicatesEnabled WRITE setDuplicatesEnabled)
Q_PROPERTY(bool frame READ hasFrame WRITE setFrame)
Q_PROPERTY(int modelColumn READ modelColumn WRITE setModelColumn)

public:
explicit QComboBox(QWidget *parent = 0);
~QComboBox();

int maxVisibleItems() const;
void setMaxVisibleItems(int maxItems);

int count() const;
void setMaxCount(int max);
int maxCount() const;


# 103 "/home/eagle/qt-copy/include/QtGui/qcombobox.h"
bool autoCompletion() const;
void setAutoCompletion(bool enable);

Qt::CaseSensitivity autoCompletionCaseSensitivity() const;
void setAutoCompletionCaseSensitivity(Qt::CaseSensitivity sensitivity);


# 110 "/home/eagle/qt-copy/include/QtGui/qcombobox.h"
bool duplicatesEnabled() const;
void setDuplicatesEnabled(bool enable);

void setFrame(bool);
bool hasFrame() const;

inline int findText(const QString &text,
Qt::MatchFlags flags = Qt::MatchExactly|Qt::MatchCaseSensitive) const
{ return findData(text, Qt::EditRole, flags); }
int findData(const QVariant &data, int role = Qt::UserRole,
Qt::MatchFlags flags = Qt::MatchExactly|Qt::MatchCaseSensitive) const;

enum InsertPolicy {
NoInsert,
InsertAtTop,
InsertAtCurrent,
InsertAtBottom,
InsertAfterCurrent,
InsertBeforeCurrent,
InsertAlphabetically









# 139 "/home/eagle/qt-copy/include/QtGui/qcombobox.h"
};




# 144 "/home/eagle/qt-copy/include/QtGui/qcombobox.h"
InsertPolicy insertPolicy() const;
void setInsertPolicy(InsertPolicy policy);

enum SizeAdjustPolicy {
AdjustToContents,
AdjustToContentsOnFirstShow,
AdjustToMinimumContentsLength, 
AdjustToMinimumContentsLengthWithIcon
};

SizeAdjustPolicy sizeAdjustPolicy() const;
void setSizeAdjustPolicy(SizeAdjustPolicy policy);
int minimumContentsLength() const;
void setMinimumContentsLength(int characters);
QSize iconSize() const;
void setIconSize(const QSize &size);

bool isEditable() const;
void setEditable(bool editable);
void setLineEdit(QLineEdit *edit);
QLineEdit *lineEdit() const;

# 166 "/home/eagle/qt-copy/include/QtGui/qcombobox.h"
void setValidator(const QValidator *v);
const QValidator *validator() const;



# 171 "/home/eagle/qt-copy/include/QtGui/qcombobox.h"
void setCompleter(QCompleter *c);
QCompleter *completer() const;


# 175 "/home/eagle/qt-copy/include/QtGui/qcombobox.h"
QAbstractItemDelegate *itemDelegate() const;
void setItemDelegate(QAbstractItemDelegate *delegate);

QAbstractItemModel *model() const;
void setModel(QAbstractItemModel *model);

QModelIndex rootModelIndex() const;
void setRootModelIndex(const QModelIndex &index);

int modelColumn() const;
void setModelColumn(int visibleColumn);

int currentIndex() const;

QString currentText() const;

QString itemText(int index) const;
QIcon itemIcon(int index) const;
QVariant itemData(int index, int role = Qt::UserRole) const;

inline void addItem(const QString &text, const QVariant &userData = QVariant());
inline void addItem(const QIcon &icon, const QString &text,
const QVariant &userData = QVariant());
inline void addItems(const QStringList &texts)
{ insertItems(count(), texts); }

inline void insertItem(int index, const QString &text, const QVariant &userData = QVariant());
void insertItem(int index, const QIcon &icon, const QString &text,
const QVariant &userData = QVariant());
void insertItems(int index, const QStringList &texts);
void insertSeparator(int index);

void removeItem(int index);

void setItemText(int index, const QString &text);
void setItemIcon(int index, const QIcon &icon);
void setItemData(int index, const QVariant &value, int role = Qt::UserRole);

QAbstractItemView *view() const;
void setView(QAbstractItemView *itemView);

QSize sizeHint() const;
QSize minimumSizeHint() const;

virtual void showPopup();
virtual void hidePopup();

bool event(QEvent *event);

public slots:
void clear();
void clearEditText();
void setEditText(const QString &text);
void setCurrentIndex(int index);

signals:
void editTextChanged(const QString &);
void activated(int index);
void activated(const QString &);
void highlighted(int index);
void highlighted(const QString &);
void currentIndexChanged(int index);
void currentIndexChanged(const QString &);

protected:
void focusInEvent(QFocusEvent *e);
void focusOutEvent(QFocusEvent *e);
void changeEvent(QEvent *e);
void resizeEvent(QResizeEvent *e);
void paintEvent(QPaintEvent *e);
void showEvent(QShowEvent *e);
void hideEvent(QHideEvent *e);
void mousePressEvent(QMouseEvent *e);
void mouseReleaseEvent(QMouseEvent *e);
void keyPressEvent(QKeyEvent *e);
void keyReleaseEvent(QKeyEvent *e);
void wheelEvent(QWheelEvent *e);
void contextMenuEvent(QContextMenuEvent *e);
void inputMethodEvent(QInputMethodEvent *);
QVariant inputMethodQuery(Qt::InputMethodQuery) const;
void initStyleOption(QStyleOptionComboBox *option) const;













































# 301 "/home/eagle/qt-copy/include/QtGui/qcombobox.h"
protected:
QComboBox(QComboBoxPrivate &, QWidget *);

private:
inline QComboBoxPrivate* d_func() { return reinterpret_cast<QComboBoxPrivate *>(d_ptr); } inline const QComboBoxPrivate* d_func() const { return reinterpret_cast<const QComboBoxPrivate *>(d_ptr); } friend class QComboBoxPrivate;
QComboBox(const QComboBox &); QComboBox &operator=(const QComboBox &);















# 322 "/home/eagle/qt-copy/include/QtGui/qcombobox.h"
};

inline void QComboBox::addItem(const QString &atext, const QVariant &auserData)
{ insertItem(count(), atext, auserData); }
inline void QComboBox::addItem(const QIcon &aicon, const QString &atext,
const QVariant &auserData)
{ insertItem(count(), aicon, atext, auserData); }

inline void QComboBox::insertItem(int aindex, const QString &atext,
const QVariant &auserData)
{ insertItem(aindex, QIcon(), atext, auserData); }



# 336 "/home/eagle/qt-copy/include/QtGui/qcombobox.h"





# 160 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qcommandlinkbutton.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qpushbutton.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qabstractbutton.h"






















































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qpushbutton.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qpushbutton.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QPushButtonPrivate;
class QMenu;
class QStyleOptionButton;

class  QPushButton : public QAbstractButton
{
Q_OBJECT

Q_PROPERTY(bool autoDefault READ autoDefault WRITE setAutoDefault)
Q_PROPERTY(bool default READ isDefault WRITE setDefault)
Q_PROPERTY(bool flat READ isFlat WRITE setFlat)

public:
explicit QPushButton(QWidget *parent=0);
explicit QPushButton(const QString &text, QWidget *parent=0);
QPushButton(const QIcon& icon, const QString &text, QWidget *parent=0);
~QPushButton();

QSize sizeHint() const;
QSize minimumSizeHint() const;

bool autoDefault() const;
void setAutoDefault(bool);
bool isDefault() const;
void setDefault(bool);


# 82 "/home/eagle/qt-copy/include/QtGui/qpushbutton.h"
void setMenu(QMenu* menu);
QMenu* menu() const;


# 86 "/home/eagle/qt-copy/include/QtGui/qpushbutton.h"
void setFlat(bool);
bool isFlat() const;

public slots:

# 91 "/home/eagle/qt-copy/include/QtGui/qpushbutton.h"
void showMenu();


# 94 "/home/eagle/qt-copy/include/QtGui/qpushbutton.h"
protected:
bool event(QEvent *e);
void paintEvent(QPaintEvent *);
void keyPressEvent(QKeyEvent *);
void focusInEvent(QFocusEvent *);
void focusOutEvent(QFocusEvent *);
void initStyleOption(QStyleOptionButton *option) const;
QPushButton(QPushButtonPrivate &dd, QWidget* parent = 0);

public:










# 114 "/home/eagle/qt-copy/include/QtGui/qpushbutton.h"
private:
QPushButton(const QPushButton &); QPushButton &operator=(const QPushButton &);
inline QPushButtonPrivate* d_func() { return reinterpret_cast<QPushButtonPrivate *>(d_ptr); } inline const QPushButtonPrivate* d_func() const { return reinterpret_cast<const QPushButtonPrivate *>(d_ptr); } friend class QPushButtonPrivate;

# 118 "/home/eagle/qt-copy/include/QtGui/qpushbutton.h"


# 120 "/home/eagle/qt-copy/include/QtGui/qpushbutton.h"
};






# 47 "/home/eagle/qt-copy/include/QtGui/qcommandlinkbutton.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qcommandlinkbutton.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QCommandLinkButtonPrivate;

class  QCommandLinkButton: public QPushButton 
{
Q_OBJECT

Q_PROPERTY(QString description READ description WRITE setDescription)
Q_PROPERTY(bool flat DESIGNABLE false)

public:
explicit QCommandLinkButton(QWidget *parent=0);
explicit QCommandLinkButton(const QString &text, QWidget *parent=0);
QCommandLinkButton(const QString &text, const QString &description, QWidget *parent=0);
QString description() const;
void setDescription(const QString &description);

protected:
QSize sizeHint() const;
int heightForWidth(int) const;
QSize minimumSizeHint() const;
bool event(QEvent *e);
void paintEvent(QPaintEvent *);

private:
QCommandLinkButton(const QCommandLinkButton &); QCommandLinkButton &operator=(const QCommandLinkButton &);
inline QCommandLinkButtonPrivate* d_func() { return reinterpret_cast<QCommandLinkButtonPrivate *>(d_ptr); } inline const QCommandLinkButtonPrivate* d_func() const { return reinterpret_cast<const QCommandLinkButtonPrivate *>(d_ptr); } friend class QCommandLinkButtonPrivate;
};






# 161 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qdatetimeedit.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"



































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qdatetimeedit.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qvariant.h"






















































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qdatetimeedit.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qabstractspinbox.h"



















































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qdatetimeedit.h"


# 51 "/home/eagle/qt-copy/include/QtGui/qdatetimeedit.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 59 "/home/eagle/qt-copy/include/QtGui/qdatetimeedit.h"
class QDateTimeEditPrivate;
class QStyleOptionSpinBox;
class QCalendarWidget;

class  QDateTimeEdit : public QAbstractSpinBox
{
Q_OBJECT

Q_ENUMS(Section)

Q_PROPERTY(QDateTime dateTime READ dateTime WRITE setDateTime NOTIFY dateTimeChanged USER true)
Q_PROPERTY(QDate date READ date WRITE setDate NOTIFY dateChanged)
Q_PROPERTY(QTime time READ time WRITE setTime NOTIFY timeChanged)
Q_PROPERTY(QDateTime maximumDateTime READ maximumDateTime WRITE setMaximumDateTime RESET clearMaximumDateTime)
Q_PROPERTY(QDateTime minimumDateTime READ minimumDateTime WRITE setMinimumDateTime RESET clearMinimumDateTime)
Q_PROPERTY(QDate maximumDate READ maximumDate WRITE setMaximumDate RESET clearMaximumDate)
Q_PROPERTY(QDate minimumDate READ minimumDate WRITE setMinimumDate RESET clearMinimumDate)
Q_PROPERTY(QTime maximumTime READ maximumTime WRITE setMaximumTime RESET clearMaximumTime)
Q_PROPERTY(QTime minimumTime READ minimumTime WRITE setMinimumTime RESET clearMinimumTime)
Q_PROPERTY(Section currentSection READ currentSection WRITE setCurrentSection)
Q_PROPERTY(Sections displayedSections READ displayedSections)
Q_PROPERTY(QString displayFormat READ displayFormat WRITE setDisplayFormat)
Q_PROPERTY(bool calendarPopup READ calendarPopup WRITE setCalendarPopup)
Q_PROPERTY(int currentSectionIndex READ currentSectionIndex WRITE setCurrentSectionIndex)
Q_PROPERTY(int sectionCount READ sectionCount)
Q_PROPERTY(Qt::TimeSpec timeSpec READ timeSpec WRITE setTimeSpec)
public:
enum Section {
NoSection = 0x0000,
AmPmSection = 0x0001,
MSecSection = 0x0002,
SecondSection = 0x0004,
MinuteSection = 0x0008,
HourSection = 0x0010,
DaySection = 0x0100,
MonthSection = 0x0200,
YearSection = 0x0400,
TimeSections_Mask = AmPmSection|MSecSection|SecondSection|MinuteSection|HourSection,
DateSections_Mask = DaySection|MonthSection|YearSection
};

typedef QFlags<Section> Sections;

explicit QDateTimeEdit(QWidget *parent = 0);
explicit QDateTimeEdit(const QDateTime &dt, QWidget *parent = 0);
explicit QDateTimeEdit(const QDate &d, QWidget *parent = 0);
explicit QDateTimeEdit(const QTime &t, QWidget *parent = 0);

QDateTime dateTime() const;
QDate date() const;
QTime time() const;

QDateTime minimumDateTime() const;
void clearMinimumDateTime();
void setMinimumDateTime(const QDateTime &dt);

QDateTime maximumDateTime() const;
void clearMaximumDateTime();
void setMaximumDateTime(const QDateTime &dt);

void setDateTimeRange(const QDateTime &min, const QDateTime &max);

QDate minimumDate() const;
void setMinimumDate(const QDate &min);
void clearMinimumDate();

QDate maximumDate() const;
void setMaximumDate(const QDate &max);
void clearMaximumDate();

void setDateRange(const QDate &min, const QDate &max);

QTime minimumTime() const;
void setMinimumTime(const QTime &min);
void clearMinimumTime();

QTime maximumTime() const;
void setMaximumTime(const QTime &max);
void clearMaximumTime();

void setTimeRange(const QTime &min, const QTime &max);

Sections displayedSections() const;
Section currentSection() const;
Section sectionAt(int index) const;
void setCurrentSection(Section section);

int currentSectionIndex() const;
void setCurrentSectionIndex(int index);

QCalendarWidget *calendarWidget() const;
void setCalendarWidget(QCalendarWidget *calendarWidget);

int sectionCount() const;

void setSelectedSection(Section section);

QString sectionText(Section section) const;

QString displayFormat() const;
void setDisplayFormat(const QString &format);

bool calendarPopup() const;
void setCalendarPopup(bool enable);

Qt::TimeSpec timeSpec() const;
void setTimeSpec(Qt::TimeSpec spec);

QSize sizeHint() const;

virtual void clear();
virtual void stepBy(int steps);

bool event(QEvent *event);
signals:
void dateTimeChanged(const QDateTime &date);
void timeChanged(const QTime &date);
void dateChanged(const QDate &date);

public slots:
void setDateTime(const QDateTime &dateTime);
void setDate(const QDate &date);
void setTime(const QTime &time);

protected:
virtual void keyPressEvent(QKeyEvent *event);

# 186 "/home/eagle/qt-copy/include/QtGui/qdatetimeedit.h"
virtual void wheelEvent(QWheelEvent *event);

# 188 "/home/eagle/qt-copy/include/QtGui/qdatetimeedit.h"
virtual void focusInEvent(QFocusEvent *event);
virtual bool focusNextPrevChild(bool next);
virtual QValidator::State validate(QString &input, int &pos) const;
virtual void fixup(QString &input) const;

virtual QDateTime dateTimeFromText(const QString &text) const;
virtual QString textFromDateTime(const QDateTime &dt) const;
virtual StepEnabled stepEnabled() const;
virtual void mousePressEvent(QMouseEvent *event);
virtual void paintEvent(QPaintEvent *event);
void initStyleOption(QStyleOptionSpinBox *option) const;

QDateTimeEdit(const QVariant &val, QVariant::Type parserType, QWidget *parent = 0);
private:
inline QDateTimeEditPrivate* d_func() { return reinterpret_cast<QDateTimeEditPrivate *>(d_ptr); } inline const QDateTimeEditPrivate* d_func() const { return reinterpret_cast<const QDateTimeEditPrivate *>(d_ptr); } friend class QDateTimeEditPrivate;
QDateTimeEdit(const QDateTimeEdit &); QDateTimeEdit &operator=(const QDateTimeEdit &);


};

class  QTimeEdit : public QDateTimeEdit
{
Q_OBJECT
Q_PROPERTY(QTime time READ time WRITE setTime NOTIFY timeChangedu USER true) 
public:
QTimeEdit(QWidget *parent = 0);
QTimeEdit(const QTime &time, QWidget *parent = 0);
};

class  QDateEdit : public QDateTimeEdit
{
Q_OBJECT
Q_PROPERTY(QDate date READ date WRITE setDate NOTIFY dateChanged USER true)
public:
QDateEdit(QWidget *parent = 0);
QDateEdit(const QDate &date, QWidget *parent = 0);
};

inline QFlags<QDateTimeEdit::Sections::enum_type> operator|(QDateTimeEdit::Sections::enum_type f1, QDateTimeEdit::Sections::enum_type f2) { return QFlags<QDateTimeEdit::Sections::enum_type>(f1) | f2; } inline QFlags<QDateTimeEdit::Sections::enum_type> operator|(QDateTimeEdit::Sections::enum_type f1, QFlags<QDateTimeEdit::Sections::enum_type> f2) { return f2 | f1; }



# 230 "/home/eagle/qt-copy/include/QtGui/qdatetimeedit.h"





# 162 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qdial.h"















































# 1 "/home/eagle/qt-copy/include/QtGui/qabstractslider.h"


























































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qdial.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qdial.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 58 "/home/eagle/qt-copy/include/QtGui/qdial.h"
class QDialPrivate;
class QStyleOptionSlider;

class  QDial: public QAbstractSlider
{
Q_OBJECT

Q_PROPERTY(bool wrapping READ wrapping WRITE setWrapping)
Q_PROPERTY(int notchSize READ notchSize)
Q_PROPERTY(qreal notchTarget READ notchTarget WRITE setNotchTarget)
Q_PROPERTY(bool notchesVisible READ notchesVisible WRITE setNotchesVisible)
public:
explicit QDial(QWidget *parent = 0);

~QDial();

bool wrapping() const;

int notchSize() const;

void setNotchTarget(double target);
qreal notchTarget() const;
bool notchesVisible() const;

QSize sizeHint() const;
QSize minimumSizeHint() const;

public slots:
void setNotchesVisible(bool visible);
void setWrapping(bool on);

protected:
bool event(QEvent *e);
void resizeEvent(QResizeEvent *re);
void paintEvent(QPaintEvent *pe);

void mousePressEvent(QMouseEvent *me);
void mouseReleaseEvent(QMouseEvent *me);
void mouseMoveEvent(QMouseEvent *me);

void sliderChange(SliderChange change);
void initStyleOption(QStyleOptionSlider *option) const;













# 113 "/home/eagle/qt-copy/include/QtGui/qdial.h"
private:
inline QDialPrivate* d_func() { return reinterpret_cast<QDialPrivate *>(d_ptr); } inline const QDialPrivate* d_func() const { return reinterpret_cast<const QDialPrivate *>(d_ptr); } friend class QDialPrivate;
QDial(const QDial &); QDial &operator=(const QDial &);
};



# 120 "/home/eagle/qt-copy/include/QtGui/qdial.h"





# 163 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qdialogbuttonbox.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qwidget.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qdialogbuttonbox.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qdialogbuttonbox.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QAbstractButton;
class QPushButton;
class QDialogButtonBoxPrivate;

class  QDialogButtonBox : public QWidget
{
Q_OBJECT

Q_PROPERTY(Qt::Orientation orientation READ orientation WRITE setOrientation)
Q_PROPERTY(StandardButtons standardButtons READ standardButtons WRITE setStandardButtons)
Q_PROPERTY(bool centerButtons READ centerButtons WRITE setCenterButtons)

public:
enum ButtonRole {

InvalidRole = -1,
AcceptRole,
RejectRole,
DestructiveRole,
ActionRole,
HelpRole,
YesRole,
NoRole,
ResetRole,
ApplyRole,

NRoles
};

enum StandardButton {

NoButton = 0x00000000,
Ok = 0x00000400,
Save = 0x00000800,
SaveAll = 0x00001000,
Open = 0x00002000,
Yes = 0x00004000,
YesToAll = 0x00008000,
No = 0x00010000,
NoToAll = 0x00020000,
Abort = 0x00040000,
Retry = 0x00080000,
Ignore = 0x00100000,
Close = 0x00200000,
Cancel = 0x00400000,
Discard = 0x00800000,
Help = 0x01000000,
Apply = 0x02000000,
Reset = 0x04000000,
RestoreDefaults = 0x08000000,


# 107 "/home/eagle/qt-copy/include/QtGui/qdialogbuttonbox.h"
FirstButton = Ok,
LastButton = RestoreDefaults

# 110 "/home/eagle/qt-copy/include/QtGui/qdialogbuttonbox.h"
};

typedef QFlags<StandardButton> StandardButtons;

enum ButtonLayout {
WinLayout,
MacLayout,
KdeLayout,
GnomeLayout
};

QDialogButtonBox(QWidget *parent = 0);
QDialogButtonBox(Qt::Orientation orientation, QWidget *parent = 0);
QDialogButtonBox(StandardButtons buttons, Qt::Orientation orientation = Qt::Horizontal,
QWidget *parent = 0);
~QDialogButtonBox();

void setOrientation(Qt::Orientation orientation);
Qt::Orientation orientation() const;

void addButton(QAbstractButton *button, ButtonRole role);
QPushButton *addButton(const QString &text, ButtonRole role);
QPushButton *addButton(StandardButton button);
void removeButton(QAbstractButton *button);
void clear();

QList<QAbstractButton *> buttons() const;
ButtonRole buttonRole(QAbstractButton *button) const;

void setStandardButtons(StandardButtons buttons);
StandardButtons standardButtons() const;
StandardButton standardButton(QAbstractButton *button) const;
QPushButton *button(StandardButton which) const;

void setCenterButtons(bool center);
bool centerButtons() const;

signals:
void clicked(QAbstractButton *button);
void accepted();
void helpRequested();
void rejected();

protected:
void changeEvent(QEvent *event);
bool event(QEvent *event);

private:
QDialogButtonBox(const QDialogButtonBox &); QDialogButtonBox &operator=(const QDialogButtonBox &);
inline QDialogButtonBoxPrivate* d_func() { return reinterpret_cast<QDialogButtonBoxPrivate *>(d_ptr); } inline const QDialogButtonBoxPrivate* d_func() const { return reinterpret_cast<const QDialogButtonBoxPrivate *>(d_ptr); } friend class QDialogButtonBoxPrivate;


};

inline QFlags<QDialogButtonBox::StandardButtons::enum_type> operator|(QDialogButtonBox::StandardButtons::enum_type f1, QDialogButtonBox::StandardButtons::enum_type f2) { return QFlags<QDialogButtonBox::StandardButtons::enum_type>(f1) | f2; } inline QFlags<QDialogButtonBox::StandardButtons::enum_type> operator|(QDialogButtonBox::StandardButtons::enum_type f1, QFlags<QDialogButtonBox::StandardButtons::enum_type> f2) { return f2 | f1; }






# 164 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qdockwidget.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qwidget.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qdockwidget.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qdockwidget.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qdockwidget.h"
class QDockAreaLayout;
class QDockWidgetPrivate;
class QMainWindow;
class QStyleOptionDockWidget;

class  QDockWidget : public QWidget
{
Q_OBJECT


Q_PROPERTY(bool floating READ isFloating WRITE setFloating)
Q_PROPERTY(DockWidgetFeatures features READ features WRITE setFeatures NOTIFY featuresChanged)
Q_PROPERTY(Qt::DockWidgetAreas allowedAreas READ allowedAreas
WRITE setAllowedAreas NOTIFY allowedAreasChanged)
Q_PROPERTY(QString windowTitle READ windowTitle WRITE setWindowTitle DESIGNABLE true)

public:
explicit QDockWidget(const QString &title, QWidget *parent = 0, Qt::WindowFlags flags = 0);
explicit QDockWidget(QWidget *parent = 0, Qt::WindowFlags flags = 0);
~QDockWidget();

QWidget *widget() const;
void setWidget(QWidget *widget);

enum DockWidgetFeature {
DockWidgetClosable = 0x01,
DockWidgetMovable = 0x02,
DockWidgetFloatable = 0x04,
DockWidgetVerticalTitleBar = 0x08,

DockWidgetFeatureMask = 0x0f,
AllDockWidgetFeatures = DockWidgetClosable|DockWidgetMovable|DockWidgetFloatable, 
NoDockWidgetFeatures = 0x00,

Reserved = 0xff
};
typedef QFlags<DockWidgetFeature> DockWidgetFeatures;

void setFeatures(DockWidgetFeatures features);
DockWidgetFeatures features() const;

void setFloating(bool floating);
inline bool isFloating() const { return isWindow(); }

void setAllowedAreas(Qt::DockWidgetAreas areas);
Qt::DockWidgetAreas allowedAreas() const;

void setTitleBarWidget(QWidget *widget);
QWidget *titleBarWidget() const;

inline bool isAreaAllowed(Qt::DockWidgetArea area) const
{ return (allowedAreas() & area) == area; }


# 111 "/home/eagle/qt-copy/include/QtGui/qdockwidget.h"
QAction *toggleViewAction() const;


# 114 "/home/eagle/qt-copy/include/QtGui/qdockwidget.h"
signals:
void featuresChanged(QDockWidget::DockWidgetFeatures features);
void topLevelChanged(bool topLevel);
void allowedAreasChanged(Qt::DockWidgetAreas allowedAreas);
void visibilityChanged(bool visible);
void dockLocationChanged(Qt::DockWidgetArea area);

protected:
void changeEvent(QEvent *event);
void closeEvent(QCloseEvent *event);
void paintEvent(QPaintEvent *event);
bool event(QEvent *event);
void initStyleOption(QStyleOptionDockWidget *option) const;

private:
inline QDockWidgetPrivate* d_func() { return reinterpret_cast<QDockWidgetPrivate *>(d_ptr); } inline const QDockWidgetPrivate* d_func() const { return reinterpret_cast<const QDockWidgetPrivate *>(d_ptr); } friend class QDockWidgetPrivate;
QDockWidget(const QDockWidget &); QDockWidget &operator=(const QDockWidget &);


friend class QDockAreaLayout;
friend class QDockWidgetItem;
friend class QMainWindowLayout;
friend class QDockWidgetLayout;
friend class QDockAreaLayoutInfo;
};

inline QFlags<QDockWidget::DockWidgetFeatures::enum_type> operator|(QDockWidget::DockWidgetFeatures::enum_type f1, QDockWidget::DockWidgetFeatures::enum_type f2) { return QFlags<QDockWidget::DockWidgetFeatures::enum_type>(f1) | f2; } inline QFlags<QDockWidget::DockWidgetFeatures::enum_type> operator|(QDockWidget::DockWidgetFeatures::enum_type f1, QFlags<QDockWidget::DockWidgetFeatures::enum_type> f2) { return f2 | f1; }



# 144 "/home/eagle/qt-copy/include/QtGui/qdockwidget.h"





# 165 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qfocusframe.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qwidget.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qfocusframe.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qfocusframe.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QFocusFramePrivate;
class QStyleOption;

class  QFocusFrame : public QWidget
{
Q_OBJECT
public:
QFocusFrame(QWidget *parent=0);
~QFocusFrame();

void setWidget(QWidget *widget);
QWidget *widget() const;

protected:
bool event(QEvent *e);

bool eventFilter(QObject *, QEvent *);
void paintEvent(QPaintEvent *);
void initStyleOption(QStyleOption *option) const;

private:
inline QFocusFramePrivate* d_func() { return reinterpret_cast<QFocusFramePrivate *>(d_ptr); } inline const QFocusFramePrivate* d_func() const { return reinterpret_cast<const QFocusFramePrivate *>(d_ptr); } friend class QFocusFramePrivate;
QFocusFrame(const QFocusFrame &); QFocusFrame &operator=(const QFocusFrame &);
};






# 166 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qfontcombobox.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qcombobox.h"




















































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qfontcombobox.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qfontdatabase.h"

















































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qfontcombobox.h"




# 52 "/home/eagle/qt-copy/include/QtGui/qfontcombobox.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QFontComboBoxPrivate;

class  QFontComboBox : public QComboBox
{
Q_OBJECT

Q_PROPERTY(QFontDatabase::WritingSystem writingSystem READ writingSystem WRITE setWritingSystem)
Q_PROPERTY(FontFilters fontFilters READ fontFilters WRITE setFontFilters)
Q_PROPERTY(QFont currentFont READ currentFont WRITE setCurrentFont NOTIFY currentFontChanged)
Q_ENUMS(FontSelection)

public:
explicit QFontComboBox(QWidget *parent = 0);
~QFontComboBox();

void setWritingSystem(QFontDatabase::WritingSystem);
QFontDatabase::WritingSystem writingSystem() const;

enum FontFilter {
AllFonts = 0,
ScalableFonts = 0x1,
NonScalableFonts = 0x2,
MonospacedFonts = 0x4,
ProportionalFonts = 0x8
};
typedef QFlags<FontFilter> FontFilters;

void setFontFilters(FontFilters filters);
FontFilters fontFilters() const;

QFont currentFont() const;
QSize sizeHint() const;

public slots:
void setCurrentFont(const QFont &f);

signals:
void currentFontChanged(const QFont &f);

protected:
bool event(QEvent *e);

private:
QFontComboBox(const QFontComboBox &); QFontComboBox &operator=(const QFontComboBox &);
inline QFontComboBoxPrivate* d_func() { return reinterpret_cast<QFontComboBoxPrivate *>(d_ptr); } inline const QFontComboBoxPrivate* d_func() const { return reinterpret_cast<const QFontComboBoxPrivate *>(d_ptr); } friend class QFontComboBoxPrivate;


};

inline QFlags<QFontComboBox::FontFilters::enum_type> operator|(QFontComboBox::FontFilters::enum_type f1, QFontComboBox::FontFilters::enum_type f2) { return QFlags<QFontComboBox::FontFilters::enum_type>(f1) | f2; } inline QFlags<QFontComboBox::FontFilters::enum_type> operator|(QFontComboBox::FontFilters::enum_type f1, QFlags<QFontComboBox::FontFilters::enum_type> f2) { return f2 | f1; }







# 167 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qframe.h"






















































































































































# 168 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qgroupbox.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qframe.h"






















































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qgroupbox.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qgroupbox.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qgroupbox.h"
class QGroupBoxPrivate;
class QStyleOptionGroupBox;
class  QGroupBox : public QWidget
{
Q_OBJECT

Q_PROPERTY(QString title READ title WRITE setTitle)
Q_PROPERTY(Qt::Alignment alignment READ alignment WRITE setAlignment)
Q_PROPERTY(bool flat READ isFlat WRITE setFlat)
Q_PROPERTY(bool checkable READ isCheckable WRITE setCheckable)
Q_PROPERTY(bool checked READ isChecked WRITE setChecked DESIGNABLE isCheckable NOTIFY toggled USER true)
public:
explicit QGroupBox(QWidget* parent=0);
explicit QGroupBox(const QString &title, QWidget* parent=0);
~QGroupBox();

QString title() const;
void setTitle(const QString &title);

Qt::Alignment alignment() const;
void setAlignment(int alignment);

QSize minimumSizeHint() const;

bool isFlat() const;
void setFlat(bool flat);
bool isCheckable() const;
void setCheckable(bool checkable);
bool isChecked() const;

public slots:
void setChecked(bool checked);

signals:
void clicked(bool checked = false);
void toggled(bool);

protected:
bool event(QEvent *event);
void childEvent(QChildEvent *event);
void resizeEvent(QResizeEvent *event);
void paintEvent(QPaintEvent *event);
void focusInEvent(QFocusEvent *event);
void changeEvent(QEvent *event);
void mousePressEvent(QMouseEvent *event);
void mouseMoveEvent(QMouseEvent *event);
void mouseReleaseEvent(QMouseEvent *event); 
void initStyleOption(QStyleOptionGroupBox *option) const;







# 112 "/home/eagle/qt-copy/include/QtGui/qgroupbox.h"
private:
QGroupBox(const QGroupBox &); QGroupBox &operator=(const QGroupBox &);
inline QGroupBoxPrivate* d_func() { return reinterpret_cast<QGroupBoxPrivate *>(d_ptr); } inline const QGroupBoxPrivate* d_func() const { return reinterpret_cast<const QGroupBoxPrivate *>(d_ptr); } friend class QGroupBoxPrivate;

};



# 120 "/home/eagle/qt-copy/include/QtGui/qgroupbox.h"





# 169 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qlabel.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qframe.h"






















































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qlabel.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qlabel.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QLabelPrivate;

class  QLabel : public QFrame
{
Q_OBJECT
Q_PROPERTY(QString text READ text WRITE setText)
Q_PROPERTY(Qt::TextFormat textFormat READ textFormat WRITE setTextFormat)
Q_PROPERTY(QPixmap pixmap READ pixmap WRITE setPixmap)
Q_PROPERTY(bool scaledContents READ hasScaledContents WRITE setScaledContents)
Q_PROPERTY(Qt::Alignment alignment READ alignment WRITE setAlignment)
Q_PROPERTY(bool wordWrap READ wordWrap WRITE setWordWrap)
Q_PROPERTY(int margin READ margin WRITE setMargin)
Q_PROPERTY(int indent READ indent WRITE setIndent)
Q_PROPERTY(bool openExternalLinks READ openExternalLinks WRITE setOpenExternalLinks)
Q_PROPERTY(Qt::TextInteractionFlags textInteractionFlags READ textInteractionFlags WRITE setTextInteractionFlags)

public:
explicit QLabel(QWidget *parent=0, Qt::WindowFlags f=0);
explicit QLabel(const QString &text, QWidget *parent=0, Qt::WindowFlags f=0);
~QLabel();

QString text() const;
const QPixmap *pixmap() const;

# 79 "/home/eagle/qt-copy/include/QtGui/qlabel.h"
const QPicture *picture() const;


# 82 "/home/eagle/qt-copy/include/QtGui/qlabel.h"
QMovie *movie() const;


# 85 "/home/eagle/qt-copy/include/QtGui/qlabel.h"
Qt::TextFormat textFormat() const;
void setTextFormat(Qt::TextFormat);

Qt::Alignment alignment() const;
void setAlignment(Qt::Alignment);

void setWordWrap(bool on);
bool wordWrap() const;

int indent() const;
void setIndent(int);

int margin() const;
void setMargin(int);

bool hasScaledContents() const;
void setScaledContents(bool);
QSize sizeHint() const;
QSize minimumSizeHint() const;

# 105 "/home/eagle/qt-copy/include/QtGui/qlabel.h"
void setBuddy(QWidget *);
QWidget *buddy() const;

# 108 "/home/eagle/qt-copy/include/QtGui/qlabel.h"
int heightForWidth(int) const;

bool openExternalLinks() const;
void setOpenExternalLinks(bool open);

void setTextInteractionFlags(Qt::TextInteractionFlags flags);
Qt::TextInteractionFlags textInteractionFlags() const;

public slots:
void setText(const QString &);
void setPixmap(const QPixmap &);

# 120 "/home/eagle/qt-copy/include/QtGui/qlabel.h"
void setPicture(const QPicture &);


# 123 "/home/eagle/qt-copy/include/QtGui/qlabel.h"
void setMovie(QMovie *movie);

# 125 "/home/eagle/qt-copy/include/QtGui/qlabel.h"
void setNum(int);
void setNum(double);
void clear();

signals:
void linkActivated(const QString& link);
void linkHovered(const QString& link);

protected:
bool event(QEvent *e);
void keyPressEvent(QKeyEvent *ev);
void paintEvent(QPaintEvent *);
void changeEvent(QEvent *);
void mousePressEvent(QMouseEvent *ev);
void mouseMoveEvent(QMouseEvent *ev);
void mouseReleaseEvent(QMouseEvent *ev);
void contextMenuEvent(QContextMenuEvent *ev);
void focusInEvent(QFocusEvent *ev);
void focusOutEvent(QFocusEvent *ev);
bool focusNextPrevChild(bool next);














# 159 "/home/eagle/qt-copy/include/QtGui/qlabel.h"
private:
QLabel(const QLabel &); QLabel &operator=(const QLabel &);
inline QLabelPrivate* d_func() { return reinterpret_cast<QLabelPrivate *>(d_ptr); } inline const QLabelPrivate* d_func() const { return reinterpret_cast<const QLabelPrivate *>(d_ptr); } friend class QLabelPrivate;

# 163 "/home/eagle/qt-copy/include/QtGui/qlabel.h"



# 166 "/home/eagle/qt-copy/include/QtGui/qlabel.h"


friend class QTipLabel;
friend class QMessageBoxPrivate;
friend class QBalloonTip;
};






# 170 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qlcdnumber.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qframe.h"






















































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qlcdnumber.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qbitarray.h"
















































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qlcdnumber.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qlcdnumber.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 58 "/home/eagle/qt-copy/include/QtGui/qlcdnumber.h"
class QLCDNumberPrivate;
class  QLCDNumber : public QFrame 
{
Q_OBJECT
Q_ENUMS(Mode SegmentStyle)
Q_PROPERTY(bool smallDecimalPoint READ smallDecimalPoint WRITE setSmallDecimalPoint)
Q_PROPERTY(int numDigits READ numDigits WRITE setNumDigits)
Q_PROPERTY(Mode mode READ mode WRITE setMode)
Q_PROPERTY(SegmentStyle segmentStyle READ segmentStyle WRITE setSegmentStyle)
Q_PROPERTY(double value READ value WRITE display)
Q_PROPERTY(int intValue READ intValue WRITE display)

public:
explicit QLCDNumber(QWidget* parent = 0);
explicit QLCDNumber(uint numDigits, QWidget* parent = 0);
~QLCDNumber();

enum Mode {
Hex, Dec, Oct, Bin



# 80 "/home/eagle/qt-copy/include/QtGui/qlcdnumber.h"
};
enum SegmentStyle {
Outline, Filled, Flat
};

bool smallDecimalPoint() const;

int numDigits() const;
void setNumDigits(int nDigits);

bool checkOverflow(double num) const;
bool checkOverflow(int num) const;

Mode mode() const;
void setMode(Mode);

SegmentStyle segmentStyle() const;
void setSegmentStyle(SegmentStyle);

double value() const;
int intValue() const;

QSize sizeHint() const;

public slots:
void display(const QString &str);
void display(int num);
void display(double num);
void setHexMode();
void setDecMode();
void setOctMode();
void setBinMode();
void setSmallDecimalPoint(bool);

signals:
void overflow();

protected:
bool event(QEvent *e);
void paintEvent(QPaintEvent *);

public:









# 131 "/home/eagle/qt-copy/include/QtGui/qlcdnumber.h"
private:
QLCDNumber(const QLCDNumber &); QLCDNumber &operator=(const QLCDNumber &);
inline QLCDNumberPrivate* d_func() { return reinterpret_cast<QLCDNumberPrivate *>(d_ptr); } inline const QLCDNumberPrivate* d_func() const { return reinterpret_cast<const QLCDNumberPrivate *>(d_ptr); } friend class QLCDNumberPrivate;
};



# 138 "/home/eagle/qt-copy/include/QtGui/qlcdnumber.h"





# 171 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qlineedit.h"


























































































































































































































































































# 172 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qmainwindow.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qwidget.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qmainwindow.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qmainwindow.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qmainwindow.h"
class QDockWidget;
class QMainWindowPrivate;
class QMenuBar;
class QStatusBar;
class QToolBar;
class QMenu;

class  QMainWindow : public QWidget
{
Q_OBJECT

Q_ENUMS(DockOption)

Q_PROPERTY(QSize iconSize READ iconSize WRITE setIconSize)
Q_PROPERTY(Qt::ToolButtonStyle toolButtonStyle READ toolButtonStyle WRITE setToolButtonStyle)

# 73 "/home/eagle/qt-copy/include/QtGui/qmainwindow.h"
Q_PROPERTY(bool animated READ isAnimated WRITE setAnimated)
Q_PROPERTY(bool dockNestingEnabled READ isDockNestingEnabled WRITE setDockNestingEnabled)

# 76 "/home/eagle/qt-copy/include/QtGui/qmainwindow.h"
Q_PROPERTY(DockOptions dockOptions READ dockOptions WRITE setDockOptions)

# 78 "/home/eagle/qt-copy/include/QtGui/qmainwindow.h"
Q_PROPERTY(bool unifiedTitleAndToolBarOnMac READ unifiedTitleAndToolBarOnMac WRITE setUnifiedTitleAndToolBarOnMac)


# 81 "/home/eagle/qt-copy/include/QtGui/qmainwindow.h"
public:
enum DockOption {
AnimatedDocks = 0x01,
AllowNestedDocks = 0x02,
AllowTabbedDocks = 0x04,
ForceTabbedDocks = 0x08, 
VerticalTabs = 0x10 
};
typedef QFlags<DockOption> DockOptions;

explicit QMainWindow(QWidget *parent = 0, Qt::WindowFlags flags = 0);
~QMainWindow();

QSize iconSize() const;
void setIconSize(const QSize &iconSize);

Qt::ToolButtonStyle toolButtonStyle() const;
void setToolButtonStyle(Qt::ToolButtonStyle toolButtonStyle);

bool isAnimated() const;
bool isDockNestingEnabled() const;

void setDockOptions(DockOptions options);
DockOptions dockOptions() const;

bool isSeparator(const QPoint &pos) const;


# 109 "/home/eagle/qt-copy/include/QtGui/qmainwindow.h"
QMenuBar *menuBar() const;
void setMenuBar(QMenuBar *menubar);

QWidget *menuWidget() const;
void setMenuWidget(QWidget *menubar);



# 117 "/home/eagle/qt-copy/include/QtGui/qmainwindow.h"
QStatusBar *statusBar() const;
void setStatusBar(QStatusBar *statusbar);


# 121 "/home/eagle/qt-copy/include/QtGui/qmainwindow.h"
QWidget *centralWidget() const;
void setCentralWidget(QWidget *widget);


# 125 "/home/eagle/qt-copy/include/QtGui/qmainwindow.h"
void setCorner(Qt::Corner corner, Qt::DockWidgetArea area);
Qt::DockWidgetArea corner(Qt::Corner corner) const;



# 130 "/home/eagle/qt-copy/include/QtGui/qmainwindow.h"
void addToolBarBreak(Qt::ToolBarArea area = Qt::TopToolBarArea);
void insertToolBarBreak(QToolBar *before);

void addToolBar(Qt::ToolBarArea area, QToolBar *toolbar);
void addToolBar(QToolBar *toolbar);
QToolBar *addToolBar(const QString &title);
void insertToolBar(QToolBar *before, QToolBar *toolbar);
void removeToolBar(QToolBar *toolbar);
void removeToolBarBreak(QToolBar *before);

void setUnifiedTitleAndToolBarOnMac(bool set);
bool unifiedTitleAndToolBarOnMac() const;

Qt::ToolBarArea toolBarArea(QToolBar *toolbar) const;
bool toolBarBreak(QToolBar *toolbar) const;


# 147 "/home/eagle/qt-copy/include/QtGui/qmainwindow.h"
void addDockWidget(Qt::DockWidgetArea area, QDockWidget *dockwidget);
void addDockWidget(Qt::DockWidgetArea area, QDockWidget *dockwidget,
Qt::Orientation orientation);
void splitDockWidget(QDockWidget *after, QDockWidget *dockwidget,
Qt::Orientation orientation);
void tabifyDockWidget(QDockWidget *first, QDockWidget *second);
void removeDockWidget(QDockWidget *dockwidget);
bool restoreDockWidget(QDockWidget *dockwidget);

Qt::DockWidgetArea dockWidgetArea(QDockWidget *dockwidget) const;


# 159 "/home/eagle/qt-copy/include/QtGui/qmainwindow.h"
QByteArray saveState(int version = 0) const;
bool restoreState(const QByteArray &state, int version = 0);


# 163 "/home/eagle/qt-copy/include/QtGui/qmainwindow.h"
virtual QMenu *createPopupMenu();







# 171 "/home/eagle/qt-copy/include/QtGui/qmainwindow.h"
public slots:
void setAnimated(bool enabled);
void setDockNestingEnabled(bool enabled);


# 176 "/home/eagle/qt-copy/include/QtGui/qmainwindow.h"
signals:
void iconSizeChanged(const QSize &iconSize);
void toolButtonStyleChanged(Qt::ToolButtonStyle toolButtonStyle);

protected:
void contextMenuEvent(QContextMenuEvent *event);
bool event(QEvent *event);

private:
inline QMainWindowPrivate* d_func() { return reinterpret_cast<QMainWindowPrivate *>(d_ptr); } inline const QMainWindowPrivate* d_func() const { return reinterpret_cast<const QMainWindowPrivate *>(d_ptr); } friend class QMainWindowPrivate;
QMainWindow(const QMainWindow &); QMainWindow &operator=(const QMainWindow &);
};

inline QFlags<QMainWindow::DockOptions::enum_type> operator|(QMainWindow::DockOptions::enum_type f1, QMainWindow::DockOptions::enum_type f2) { return QFlags<QMainWindow::DockOptions::enum_type>(f1) | f2; } inline QFlags<QMainWindow::DockOptions::enum_type> operator|(QMainWindow::DockOptions::enum_type f1, QFlags<QMainWindow::DockOptions::enum_type> f2) { return f2 | f1; }



# 193 "/home/eagle/qt-copy/include/QtGui/qmainwindow.h"





# 173 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qmdiarea.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qabstractscrollarea.h"













































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qmdiarea.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qtabwidget.h"
















































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qmdiarea.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qmdiarea.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 58 "/home/eagle/qt-copy/include/QtGui/qmdiarea.h"
class QMdiSubWindow;

class QMdiAreaPrivate;
class  QMdiArea : public QAbstractScrollArea
{
Q_OBJECT
Q_ENUMS(ViewMode)
Q_PROPERTY(QBrush background READ background WRITE setBackground)
Q_PROPERTY(WindowOrder activationOrder READ activationOrder WRITE setActivationOrder)
Q_PROPERTY(ViewMode viewMode READ viewMode WRITE setViewMode)

# 69 "/home/eagle/qt-copy/include/QtGui/qmdiarea.h"
Q_PROPERTY(QTabWidget::TabShape tabShape READ tabShape WRITE setTabShape)
Q_PROPERTY(QTabWidget::TabPosition tabPosition READ tabPosition WRITE setTabPosition)

# 72 "/home/eagle/qt-copy/include/QtGui/qmdiarea.h"
Q_ENUMS(WindowOrder)
public:
enum AreaOption {
DontMaximizeSubWindowOnActivation = 0x1
};
typedef QFlags<AreaOption> AreaOptions;

enum WindowOrder {
CreationOrder,
StackingOrder,
ActivationHistoryOrder
};

enum ViewMode {
SubWindowView,
TabbedView
};

QMdiArea(QWidget *parent = 0);
~QMdiArea();

QSize sizeHint() const;
QSize minimumSizeHint() const;

QMdiSubWindow *currentSubWindow() const;
QMdiSubWindow *activeSubWindow() const;
QList<QMdiSubWindow *> subWindowList(WindowOrder order = CreationOrder) const;

QMdiSubWindow *addSubWindow(QWidget *widget, Qt::WindowFlags flags = 0);
void removeSubWindow(QWidget *widget);

QBrush background() const;
void setBackground(const QBrush &background);

WindowOrder activationOrder() const;
void setActivationOrder(WindowOrder order);

void setOption(AreaOption option, bool on = true);
bool testOption(AreaOption opton) const;

void setViewMode(ViewMode mode);
ViewMode viewMode() const;


# 116 "/home/eagle/qt-copy/include/QtGui/qmdiarea.h"
void setTabShape(QTabWidget::TabShape shape);
QTabWidget::TabShape tabShape() const;

void setTabPosition(QTabWidget::TabPosition position);
QTabWidget::TabPosition tabPosition() const;


# 123 "/home/eagle/qt-copy/include/QtGui/qmdiarea.h"
signals:
void subWindowActivated(QMdiSubWindow *);

public slots:
void setActiveSubWindow(QMdiSubWindow *window);
void tileSubWindows();
void cascadeSubWindows();
void closeActiveSubWindow();
void closeAllSubWindows();
void activateNextSubWindow();
void activatePreviousSubWindow();

protected slots:
void setupViewport(QWidget *viewport);

protected:
bool event(QEvent *event);
bool eventFilter(QObject *object, QEvent *event);
void paintEvent(QPaintEvent *paintEvent);
void childEvent(QChildEvent *childEvent);
void resizeEvent(QResizeEvent *resizeEvent);
void timerEvent(QTimerEvent *timerEvent);
void showEvent(QShowEvent *showEvent);
bool viewportEvent(QEvent *event);
void scrollContentsBy(int dx, int dy);

private:
QMdiArea(const QMdiArea &); QMdiArea &operator=(const QMdiArea &);
inline QMdiAreaPrivate* d_func() { return reinterpret_cast<QMdiAreaPrivate *>(d_ptr); } inline const QMdiAreaPrivate* d_func() const { return reinterpret_cast<const QMdiAreaPrivate *>(d_ptr); } friend class QMdiAreaPrivate;



};

inline QFlags<QMdiArea::AreaOptions::enum_type> operator|(QMdiArea::AreaOptions::enum_type f1, QMdiArea::AreaOptions::enum_type f2) { return QFlags<QMdiArea::AreaOptions::enum_type>(f1) | f2; } inline QFlags<QMdiArea::AreaOptions::enum_type> operator|(QMdiArea::AreaOptions::enum_type f1, QFlags<QMdiArea::AreaOptions::enum_type> f2) { return f2 | f1; }







# 174 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qmdisubwindow.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qwidget.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qmdisubwindow.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qmdisubwindow.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qmdisubwindow.h"
class QMenu;
class QMdiArea;

namespace QMdi { class ControlContainer; }
class QMdiSubWindowPrivate;
class  QMdiSubWindow : public QWidget
{
Q_OBJECT
Q_PROPERTY(int keyboardSingleStep READ keyboardSingleStep WRITE setKeyboardSingleStep)
Q_PROPERTY(int keyboardPageStep READ keyboardPageStep WRITE setKeyboardPageStep)
public:
enum SubWindowOption {
AllowOutsideAreaHorizontally = 0x1, 
AllowOutsideAreaVertically = 0x2, 
RubberBandResize = 0x4,
RubberBandMove = 0x8
};
typedef QFlags<SubWindowOption> SubWindowOptions;

QMdiSubWindow(QWidget *parent = 0, Qt::WindowFlags flags = 0);
~QMdiSubWindow();

QSize sizeHint() const;
QSize minimumSizeHint() const;

void setWidget(QWidget *widget);
QWidget *widget() const;

QWidget *maximizedButtonsWidget() const; 
QWidget *maximizedSystemMenuIconWidget() const; 

bool isShaded() const;

void setOption(SubWindowOption option, bool on = true);
bool testOption(SubWindowOption) const;

void setKeyboardSingleStep(int step);
int keyboardSingleStep() const;

void setKeyboardPageStep(int step);
int keyboardPageStep() const;


# 100 "/home/eagle/qt-copy/include/QtGui/qmdisubwindow.h"
void setSystemMenu(QMenu *systemMenu);
QMenu *systemMenu() const;


# 104 "/home/eagle/qt-copy/include/QtGui/qmdisubwindow.h"
QMdiArea *mdiArea() const;

signals:
void windowStateChanged(Qt::WindowStates oldState, Qt::WindowStates newState);
void aboutToActivate();

public slots:

# 112 "/home/eagle/qt-copy/include/QtGui/qmdisubwindow.h"
void showSystemMenu();

# 114 "/home/eagle/qt-copy/include/QtGui/qmdisubwindow.h"
void showShaded();

protected:
bool eventFilter(QObject *object, QEvent *event);
bool event(QEvent *event);
void showEvent(QShowEvent *showEvent);
void hideEvent(QHideEvent *hideEvent);
void changeEvent(QEvent *changeEvent);
void closeEvent(QCloseEvent *closeEvent);
void leaveEvent(QEvent *leaveEvent);
void resizeEvent(QResizeEvent *resizeEvent);
void timerEvent(QTimerEvent *timerEvent);
void moveEvent(QMoveEvent *moveEvent);
void paintEvent(QPaintEvent *paintEvent);
void mousePressEvent(QMouseEvent *mouseEvent);
void mouseDoubleClickEvent(QMouseEvent *mouseEvent);
void mouseReleaseEvent(QMouseEvent *mouseEvent);
void mouseMoveEvent(QMouseEvent *mouseEvent);
void keyPressEvent(QKeyEvent *keyEvent);

# 134 "/home/eagle/qt-copy/include/QtGui/qmdisubwindow.h"
void contextMenuEvent(QContextMenuEvent *contextMenuEvent);

# 136 "/home/eagle/qt-copy/include/QtGui/qmdisubwindow.h"
void focusInEvent(QFocusEvent *focusInEvent);
void focusOutEvent(QFocusEvent *focusOutEvent);
void childEvent(QChildEvent *childEvent);

private:
QMdiSubWindow(const QMdiSubWindow &); QMdiSubWindow &operator=(const QMdiSubWindow &);
inline QMdiSubWindowPrivate* d_func() { return reinterpret_cast<QMdiSubWindowPrivate *>(d_ptr); } inline const QMdiSubWindowPrivate* d_func() const { return reinterpret_cast<const QMdiSubWindowPrivate *>(d_ptr); } friend class QMdiSubWindowPrivate;



friend class QMdiAreaPrivate;

# 148 "/home/eagle/qt-copy/include/QtGui/qmdisubwindow.h"
friend class QMdiAreaTabBar;

# 150 "/home/eagle/qt-copy/include/QtGui/qmdisubwindow.h"
friend class QMdi::ControlContainer;
};

inline QFlags<QMdiSubWindow::SubWindowOptions::enum_type> operator|(QMdiSubWindow::SubWindowOptions::enum_type f1, QMdiSubWindow::SubWindowOptions::enum_type f2) { return QFlags<QMdiSubWindow::SubWindowOptions::enum_type>(f1) | f2; } inline QFlags<QMdiSubWindow::SubWindowOptions::enum_type> operator|(QMdiSubWindow::SubWindowOptions::enum_type f1, QFlags<QMdiSubWindow::SubWindowOptions::enum_type> f2) { return f2 | f1; }








# 175 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qmenu.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qwidget.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qmenu.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qmenu.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qicon.h"















































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qmenu.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qaction.h"



















































































































































































































































# 50 "/home/eagle/qt-copy/include/QtGui/qmenu.h"






# 56 "/home/eagle/qt-copy/include/QtGui/qmenu.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 64 "/home/eagle/qt-copy/include/QtGui/qmenu.h"
class QMenuPrivate;
class QStyleOptionMenuItem;




# 70 "/home/eagle/qt-copy/include/QtGui/qmenu.h"
class  QMenu : public QWidget
{
private:
Q_OBJECT
inline QMenuPrivate* d_func() { return reinterpret_cast<QMenuPrivate *>(d_ptr); } inline const QMenuPrivate* d_func() const { return reinterpret_cast<const QMenuPrivate *>(d_ptr); } friend class QMenuPrivate;

Q_PROPERTY(bool tearOffEnabled READ isTearOffEnabled WRITE setTearOffEnabled)
Q_PROPERTY(QString title READ title WRITE setTitle)
Q_PROPERTY(QIcon icon READ icon WRITE setIcon)
Q_PROPERTY(bool separatorsCollapsible READ separatorsCollapsible WRITE setSeparatorsCollapsible)

public:
explicit QMenu(QWidget *parent = 0);
explicit QMenu(const QString &title, QWidget *parent = 0);
~QMenu();


# 87 "/home/eagle/qt-copy/include/QtGui/qmenu.h"
inline void addAction(QAction *action) { QWidget::addAction(action); }



# 91 "/home/eagle/qt-copy/include/QtGui/qmenu.h"
QAction *addAction(const QString &text);
QAction *addAction(const QIcon &icon, const QString &text);
QAction *addAction(const QString &text, const QObject *receiver, const char* member, const QKeySequence &shortcut = 0);
QAction *addAction(const QIcon &icon, const QString &text, const QObject *receiver, const char* member, const QKeySequence &shortcut = 0);

QAction *addMenu(QMenu *menu);
QMenu *addMenu(const QString &title);
QMenu *addMenu(const QIcon &icon, const QString &title);

QAction *addSeparator();

QAction *insertMenu(QAction *before, QMenu *menu);
QAction *insertSeparator(QAction *before);

bool isEmpty() const;
void clear();

void setTearOffEnabled(bool);
bool isTearOffEnabled() const;

bool isTearOffMenuVisible() const;
void hideTearOffMenu();

void setDefaultAction(QAction *);
QAction *defaultAction() const;

void setActiveAction(QAction *act);
QAction *activeAction() const;

void popup(const QPoint &pos, QAction *at=0);
QAction *exec();
QAction *exec(const QPoint &pos, QAction *at=0);
static QAction *exec(QList<QAction*> actions, const QPoint &pos, QAction *at=0);

QSize sizeHint() const;

QRect actionGeometry(QAction *) const;
QAction *actionAt(const QPoint &) const;

QAction *menuAction() const;

QString title() const;
void setTitle(const QString &title);

QIcon icon() const;
void setIcon(const QIcon &icon);

void setNoReplayFor(QWidget *widget);









# 148 "/home/eagle/qt-copy/include/QtGui/qmenu.h"
bool separatorsCollapsible() const;
void setSeparatorsCollapsible(bool collapse);

signals:
void aboutToShow();
void aboutToHide();
void triggered(QAction *action);
void hovered(QAction *action);

protected:
int columnCount() const;

void changeEvent(QEvent *);
void keyPressEvent(QKeyEvent *);
void mouseReleaseEvent(QMouseEvent *);
void mousePressEvent(QMouseEvent *);
void mouseMoveEvent(QMouseEvent *);
void wheelEvent(QWheelEvent *);
void enterEvent(QEvent *);
void leaveEvent(QEvent *);
void hideEvent(QHideEvent *);
void paintEvent(QPaintEvent *);
void actionEvent(QActionEvent *);
void timerEvent(QTimerEvent *);
bool event(QEvent *);
bool focusNextPrevChild(bool next);
void initStyleOption(QStyleOptionMenuItem *option, const QAction *action) const;





# 180 "/home/eagle/qt-copy/include/QtGui/qmenu.h"
private slots:
void internalSetSloppyAction();
void internalDelayedPopup();

private:





















































































































































































































# 398 "/home/eagle/qt-copy/include/QtGui/qmenu.h"
protected:
QMenu(QMenuPrivate &dd, QWidget* parent = 0);

private:
QMenu(const QMenu &); QMenu &operator=(const QMenu &);

friend class QMenuBar;
friend class QMenuBarPrivate;
friend class QTornOffMenu;
friend class Q3PopupMenu;
friend class QComboBox;
friend class QAction;
friend class QToolButtonPrivate;







# 418 "/home/eagle/qt-copy/include/QtGui/qmenu.h"
};



# 422 "/home/eagle/qt-copy/include/QtGui/qmenu.h"





# 176 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qmenubar.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qmenu.h"










































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qmenubar.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qmenubar.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qmenubar.h"
class QMenuBarPrivate;
class QStyleOptionMenuItem;
class QWindowsStyle;




# 64 "/home/eagle/qt-copy/include/QtGui/qmenubar.h"
class  QMenuBar : public QWidget
{
Q_OBJECT

Q_PROPERTY(bool defaultUp READ isDefaultUp WRITE setDefaultUp)

public:
explicit QMenuBar(QWidget *parent = 0);
~QMenuBar();


# 75 "/home/eagle/qt-copy/include/QtGui/qmenubar.h"
void addAction(QAction *action) { QWidget::addAction(action); }



# 79 "/home/eagle/qt-copy/include/QtGui/qmenubar.h"
QAction *addAction(const QString &text);
QAction *addAction(const QString &text, const QObject *receiver, const char* member);

QAction *addMenu(QMenu *menu);
QMenu *addMenu(const QString &title);
QMenu *addMenu(const QIcon &icon, const QString &title);


QAction *addSeparator();
QAction *insertSeparator(QAction *before);

QAction *insertMenu(QAction *before, QMenu *menu);

void clear();

QAction *activeAction() const;
void setActiveAction(QAction *action);

void setDefaultUp(bool);
bool isDefaultUp() const;

QSize sizeHint() const;
QSize minimumSizeHint() const;
int heightForWidth(int) const;

QRect actionGeometry(QAction *) const;
QAction *actionAt(const QPoint &) const;

void setCornerWidget(QWidget *w, Qt::Corner corner = Qt::TopRightCorner);
QWidget *cornerWidget(Qt::Corner corner = Qt::TopRightCorner) const;













# 122 "/home/eagle/qt-copy/include/QtGui/qmenubar.h"
public slots:
virtual void setVisible(bool visible);

signals:
void triggered(QAction *action);
void hovered(QAction *action);

protected:
void changeEvent(QEvent *);
void keyPressEvent(QKeyEvent *);
void mouseReleaseEvent(QMouseEvent *);
void mousePressEvent(QMouseEvent *);
void mouseMoveEvent(QMouseEvent *);
void leaveEvent(QEvent *);
void paintEvent(QPaintEvent *);
void resizeEvent(QResizeEvent *);
void actionEvent(QActionEvent *);
void focusOutEvent(QFocusEvent *);
void focusInEvent(QFocusEvent *);
void timerEvent(QTimerEvent *);
bool eventFilter(QObject *, QEvent *);
bool event(QEvent *);
void initStyleOption(QStyleOptionMenuItem *option, const QAction *action) const;






























































































































































































# 335 "/home/eagle/qt-copy/include/QtGui/qmenubar.h"
private:
inline QMenuBarPrivate* d_func() { return reinterpret_cast<QMenuBarPrivate *>(d_ptr); } inline const QMenuBarPrivate* d_func() const { return reinterpret_cast<const QMenuBarPrivate *>(d_ptr); } friend class QMenuBarPrivate;
QMenuBar(const QMenuBar &); QMenuBar &operator=(const QMenuBar &);









# 347 "/home/eagle/qt-copy/include/QtGui/qmenubar.h"
friend class QMenu;
friend class QMenuPrivate;
friend class QWindowsStyle;







# 357 "/home/eagle/qt-copy/include/QtGui/qmenubar.h"
};



# 361 "/home/eagle/qt-copy/include/QtGui/qmenubar.h"





# 177 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qmenudata.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qmenudata.h"


































# 178 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qplaintextedit.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qtextedit.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qabstractscrollarea.h"













































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qtextedit.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextdocument.h"



































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qtextedit.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextoption.h"































































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qtextedit.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextcursor.h"


































































































































































































































# 50 "/home/eagle/qt-copy/include/QtGui/qtextedit.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextformat.h"






















































































































































































































































































































































































































































































































































































































































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtGui/qtextedit.h"









# 60 "/home/eagle/qt-copy/include/QtGui/qtextedit.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QStyleSheet;
class QTextDocument;
class QMenu;
class QTextEditPrivate;
class QMimeData;

class  QTextEdit : public QAbstractScrollArea
{
Q_OBJECT
inline QTextEditPrivate* d_func() { return reinterpret_cast<QTextEditPrivate *>(d_ptr); } inline const QTextEditPrivate* d_func() const { return reinterpret_cast<const QTextEditPrivate *>(d_ptr); } friend class QTextEditPrivate;

Q_ENUMS(LineWrapMode)
Q_PROPERTY(AutoFormatting autoFormatting READ autoFormatting WRITE setAutoFormatting)
Q_PROPERTY(bool tabChangesFocus READ tabChangesFocus WRITE setTabChangesFocus)
Q_PROPERTY(QString documentTitle READ documentTitle WRITE setDocumentTitle)
Q_PROPERTY(bool undoRedoEnabled READ isUndoRedoEnabled WRITE setUndoRedoEnabled)
Q_PROPERTY(LineWrapMode lineWrapMode READ lineWrapMode WRITE setLineWrapMode)

Q_PROPERTY(int lineWrapColumnOrWidth READ lineWrapColumnOrWidth WRITE setLineWrapColumnOrWidth)
Q_PROPERTY(bool readOnly READ isReadOnly WRITE setReadOnly)

# 87 "/home/eagle/qt-copy/include/QtGui/qtextedit.h"
Q_PROPERTY(QString html READ toHtml WRITE setHtml NOTIFY textChanged USER true)

# 89 "/home/eagle/qt-copy/include/QtGui/qtextedit.h"
Q_PROPERTY(QString plainText READ toPlainText WRITE setPlainText DESIGNABLE false)
Q_PROPERTY(bool overwriteMode READ overwriteMode WRITE setOverwriteMode)
Q_PROPERTY(int tabStopWidth READ tabStopWidth WRITE setTabStopWidth)
Q_PROPERTY(bool acceptRichText READ acceptRichText WRITE setAcceptRichText)
Q_PROPERTY(int cursorWidth READ cursorWidth WRITE setCursorWidth)
Q_PROPERTY(Qt::TextInteractionFlags textInteractionFlags READ textInteractionFlags WRITE setTextInteractionFlags)
public:
enum LineWrapMode {
NoWrap,
WidgetWidth,
FixedPixelWidth,
FixedColumnWidth
};

enum AutoFormattingFlag {
AutoNone = 0,
AutoBulletList = 0x00000001,
AutoAll = 0xffffffff
};

typedef QFlags<AutoFormattingFlag> AutoFormatting;























# 133 "/home/eagle/qt-copy/include/QtGui/qtextedit.h"
explicit QTextEdit(QWidget *parent = 0);
explicit QTextEdit(const QString &text, QWidget *parent = 0);
virtual ~QTextEdit();

void setDocument(QTextDocument *document);
QTextDocument *document() const;

void setTextCursor(const QTextCursor &cursor);
QTextCursor textCursor() const;

bool isReadOnly() const;
void setReadOnly(bool ro);

void setTextInteractionFlags(Qt::TextInteractionFlags flags);
Qt::TextInteractionFlags textInteractionFlags() const;

qreal fontPointSize() const;
QString fontFamily() const;
int fontWeight() const;
bool fontUnderline() const;
bool fontItalic() const;
QColor textColor() const;
QColor textBackgroundColor() const;
QFont currentFont() const;
Qt::Alignment alignment() const;

void mergeCurrentCharFormat(const QTextCharFormat &modifier);

void setCurrentCharFormat(const QTextCharFormat &format);
QTextCharFormat currentCharFormat() const;

AutoFormatting autoFormatting() const;
void setAutoFormatting(AutoFormatting features);

bool tabChangesFocus() const;
void setTabChangesFocus(bool b);

inline void setDocumentTitle(const QString &title)
{ document()->setMetaInformation(QTextDocument::DocumentTitle, title); }
inline QString documentTitle() const
{ return document()->metaInformation(QTextDocument::DocumentTitle); }

inline bool isUndoRedoEnabled() const
{ return document()->isUndoRedoEnabled(); }
inline void setUndoRedoEnabled(bool enable)
{ document()->setUndoRedoEnabled(enable); }

LineWrapMode lineWrapMode() const;
void setLineWrapMode(LineWrapMode mode);

int lineWrapColumnOrWidth() const;
void setLineWrapColumnOrWidth(int w);

QTextOption::WrapMode wordWrapMode() const;
void setWordWrapMode(QTextOption::WrapMode policy);

bool find(const QString &exp, QTextDocument::FindFlags options = 0);

inline QString toPlainText() const
{ return document()->toPlainText(); }

# 194 "/home/eagle/qt-copy/include/QtGui/qtextedit.h"
inline QString toHtml() const
{ return document()->toHtml(); }


# 198 "/home/eagle/qt-copy/include/QtGui/qtextedit.h"
void ensureCursorVisible();

virtual QVariant loadResource(int type, const QUrl &name);

# 202 "/home/eagle/qt-copy/include/QtGui/qtextedit.h"
QMenu *createStandardContextMenu();
QMenu *createStandardContextMenu(const QPoint &position);


# 206 "/home/eagle/qt-copy/include/QtGui/qtextedit.h"
QTextCursor cursorForPosition(const QPoint &pos) const;
QRect cursorRect(const QTextCursor &cursor) const;
QRect cursorRect() const;

QString anchorAt(const QPoint& pos) const;

bool overwriteMode() const;
void setOverwriteMode(bool overwrite);

int tabStopWidth() const;
void setTabStopWidth(int width);

int cursorWidth() const;
void setCursorWidth(int width);

bool acceptRichText() const;
void setAcceptRichText(bool accept);

struct ExtraSelection
{
QTextCursor cursor;
QTextCharFormat format;
};
void setExtraSelections(const QList<ExtraSelection> &selections);
QList<ExtraSelection> extraSelections() const;

void moveCursor(QTextCursor::MoveOperation operation, QTextCursor::MoveMode mode = QTextCursor::MoveAnchor);

bool canPaste() const;


# 237 "/home/eagle/qt-copy/include/QtGui/qtextedit.h"
void print(QPrinter *printer) const;


# 240 "/home/eagle/qt-copy/include/QtGui/qtextedit.h"
public slots:
void setFontPointSize(qreal s);
void setFontFamily(const QString &fontFamily);
void setFontWeight(int w);
void setFontUnderline(bool b);
void setFontItalic(bool b);
void setTextColor(const QColor &c);
void setTextBackgroundColor(const QColor &c);
void setCurrentFont(const QFont &f);
void setAlignment(Qt::Alignment a);

void setPlainText(const QString &text);

# 253 "/home/eagle/qt-copy/include/QtGui/qtextedit.h"
void setHtml(const QString &text);

# 255 "/home/eagle/qt-copy/include/QtGui/qtextedit.h"
void setText(const QString &text);


# 258 "/home/eagle/qt-copy/include/QtGui/qtextedit.h"
void cut();
void copy();
void paste();


# 263 "/home/eagle/qt-copy/include/QtGui/qtextedit.h"
void undo();
void redo();

void clear();
void selectAll();

void insertPlainText(const QString &text);

# 271 "/home/eagle/qt-copy/include/QtGui/qtextedit.h"
void insertHtml(const QString &text);


# 274 "/home/eagle/qt-copy/include/QtGui/qtextedit.h"
void append(const QString &text);

void scrollToAnchor(const QString &name);

void zoomIn(int range = 1);
void zoomOut(int range = 1);

signals:
void textChanged();
void undoAvailable(bool b);
void redoAvailable(bool b);
void currentCharFormatChanged(const QTextCharFormat &format);
void copyAvailable(bool b);
void selectionChanged();
void cursorPositionChanged();

protected:
virtual bool event(QEvent *e);
virtual void timerEvent(QTimerEvent *e);
virtual void keyPressEvent(QKeyEvent *e);
virtual void keyReleaseEvent(QKeyEvent *e);
virtual void resizeEvent(QResizeEvent *e);
virtual void paintEvent(QPaintEvent *e);
virtual void mousePressEvent(QMouseEvent *e);
virtual void mouseMoveEvent(QMouseEvent *e);
virtual void mouseReleaseEvent(QMouseEvent *e);
virtual void mouseDoubleClickEvent(QMouseEvent *e);
virtual bool focusNextPrevChild(bool next);
virtual void contextMenuEvent(QContextMenuEvent *e);

# 304 "/home/eagle/qt-copy/include/QtGui/qtextedit.h"
virtual void dragEnterEvent(QDragEnterEvent *e);
virtual void dragLeaveEvent(QDragLeaveEvent *e);
virtual void dragMoveEvent(QDragMoveEvent *e);
virtual void dropEvent(QDropEvent *e);

# 309 "/home/eagle/qt-copy/include/QtGui/qtextedit.h"
virtual void focusInEvent(QFocusEvent *e);
virtual void focusOutEvent(QFocusEvent *e);
virtual void showEvent(QShowEvent *);
virtual void changeEvent(QEvent *e);

# 314 "/home/eagle/qt-copy/include/QtGui/qtextedit.h"
virtual void wheelEvent(QWheelEvent *e);


# 317 "/home/eagle/qt-copy/include/QtGui/qtextedit.h"
virtual QMimeData *createMimeDataFromSelection() const;
virtual bool canInsertFromMimeData(const QMimeData *source) const;
virtual void insertFromMimeData(const QMimeData *source);

virtual void inputMethodEvent(QInputMethodEvent *);
QVariant inputMethodQuery(Qt::InputMethodQuery property) const;

QTextEdit(QTextEditPrivate &dd, QWidget *parent);

virtual void scrollContentsBy(int dx, int dy);




















































































# 411 "/home/eagle/qt-copy/include/QtGui/qtextedit.h"
private:
QTextEdit(const QTextEdit &); QTextEdit &operator=(const QTextEdit &);




friend class QTextEditControl;
friend class QTextDocument;
friend class QTextControl;
};

inline QFlags<QTextEdit::AutoFormatting::enum_type> operator|(QTextEdit::AutoFormatting::enum_type f1, QTextEdit::AutoFormatting::enum_type f2) { return QFlags<QTextEdit::AutoFormatting::enum_type>(f1) | f2; } inline QFlags<QTextEdit::AutoFormatting::enum_type> operator|(QTextEdit::AutoFormatting::enum_type f1, QFlags<QTextEdit::AutoFormatting::enum_type> f2) { return f2 | f1; }








# 47 "/home/eagle/qt-copy/include/QtGui/qplaintextedit.h"


# 1 "/home/eagle/qt-copy/include/QtGui/qabstractscrollarea.h"













































































































































# 49 "/home/eagle/qt-copy/include/QtGui/qplaintextedit.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextdocument.h"



































































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtGui/qplaintextedit.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextoption.h"































































































































































# 51 "/home/eagle/qt-copy/include/QtGui/qplaintextedit.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextcursor.h"


































































































































































































































# 52 "/home/eagle/qt-copy/include/QtGui/qplaintextedit.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextformat.h"






















































































































































































































































































































































































































































































































































































































































































































































































































































































































# 53 "/home/eagle/qt-copy/include/QtGui/qplaintextedit.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qabstracttextdocumentlayout.h"























































































































































# 54 "/home/eagle/qt-copy/include/QtGui/qplaintextedit.h"




# 58 "/home/eagle/qt-copy/include/QtGui/qplaintextedit.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QStyleSheet;
class QTextDocument;
class QMenu;
class QPlainTextEditPrivate;
class QMimeData;


class  QPlainTextEdit : public QAbstractScrollArea
{
Q_OBJECT
inline QPlainTextEditPrivate* d_func() { return reinterpret_cast<QPlainTextEditPrivate *>(d_ptr); } inline const QPlainTextEditPrivate* d_func() const { return reinterpret_cast<const QPlainTextEditPrivate *>(d_ptr); } friend class QPlainTextEditPrivate;
Q_ENUMS(LineWrapMode)
Q_PROPERTY(bool tabChangesFocus READ tabChangesFocus WRITE setTabChangesFocus)
Q_PROPERTY(QString documentTitle READ documentTitle WRITE setDocumentTitle)
Q_PROPERTY(bool undoRedoEnabled READ isUndoRedoEnabled WRITE setUndoRedoEnabled)
Q_PROPERTY(LineWrapMode lineWrapMode READ lineWrapMode WRITE setLineWrapMode)

Q_PROPERTY(bool readOnly READ isReadOnly WRITE setReadOnly)
Q_PROPERTY(QString plainText READ toPlainText WRITE setPlainText NOTIFY textChanged USER true)
Q_PROPERTY(bool overwriteMode READ overwriteMode WRITE setOverwriteMode)
Q_PROPERTY(int tabStopWidth READ tabStopWidth WRITE setTabStopWidth)
Q_PROPERTY(int cursorWidth READ cursorWidth WRITE setCursorWidth)
Q_PROPERTY(Qt::TextInteractionFlags textInteractionFlags READ textInteractionFlags WRITE setTextInteractionFlags)
Q_PROPERTY(int blockCount READ blockCount)
Q_PROPERTY(int maximumBlockCount READ maximumBlockCount WRITE setMaximumBlockCount)
Q_PROPERTY(bool backgroundVisible READ backgroundVisible WRITE setBackgroundVisible)
Q_PROPERTY(bool centerOnScroll READ centerOnScroll WRITE setCenterOnScroll)
public:
enum LineWrapMode {
NoWrap,
WidgetWidth
};

explicit QPlainTextEdit(QWidget *parent = 0);
explicit QPlainTextEdit(const QString &text, QWidget *parent = 0);
virtual ~QPlainTextEdit();

void setDocument(QTextDocument *document);
QTextDocument *document() const;

void setTextCursor(const QTextCursor &cursor);
QTextCursor textCursor() const;

bool isReadOnly() const;
void setReadOnly(bool ro);

void setTextInteractionFlags(Qt::TextInteractionFlags flags);
Qt::TextInteractionFlags textInteractionFlags() const;

void mergeCurrentCharFormat(const QTextCharFormat &modifier);
void setCurrentCharFormat(const QTextCharFormat &format);
QTextCharFormat currentCharFormat() const;

bool tabChangesFocus() const;
void setTabChangesFocus(bool b);

inline void setDocumentTitle(const QString &title)
{ document()->setMetaInformation(QTextDocument::DocumentTitle, title); }
inline QString documentTitle() const
{ return document()->metaInformation(QTextDocument::DocumentTitle); }

inline bool isUndoRedoEnabled() const
{ return document()->isUndoRedoEnabled(); }
inline void setUndoRedoEnabled(bool enable)
{ document()->setUndoRedoEnabled(enable); }

inline void setMaximumBlockCount(int maximum)
{ document()->setMaximumBlockCount(maximum); }
inline int maximumBlockCount() const
{ return document()->maximumBlockCount(); }


LineWrapMode lineWrapMode() const;
void setLineWrapMode(LineWrapMode mode);

QTextOption::WrapMode wordWrapMode() const;
void setWordWrapMode(QTextOption::WrapMode policy);

void setBackgroundVisible(bool visible);
bool backgroundVisible() const;

void setCenterOnScroll(bool enabled);
bool centerOnScroll() const;

bool find(const QString &exp, QTextDocument::FindFlags options = 0);

inline QString toPlainText() const
{ return document()->toPlainText(); }

void ensureCursorVisible();

virtual QVariant loadResource(int type, const QUrl &name);

# 157 "/home/eagle/qt-copy/include/QtGui/qplaintextedit.h"
QMenu *createStandardContextMenu();


# 160 "/home/eagle/qt-copy/include/QtGui/qplaintextedit.h"
QTextCursor cursorForPosition(const QPoint &pos) const;
QRect cursorRect(const QTextCursor &cursor) const;
QRect cursorRect() const;

bool overwriteMode() const;
void setOverwriteMode(bool overwrite);

int tabStopWidth() const;
void setTabStopWidth(int width);

int cursorWidth() const;
void setCursorWidth(int width);

void setExtraSelections(const QList<QTextEdit::ExtraSelection> &selections);
QList<QTextEdit::ExtraSelection> extraSelections() const;

void moveCursor(QTextCursor::MoveOperation operation, QTextCursor::MoveMode mode = QTextCursor::MoveAnchor);

bool canPaste() const;


# 181 "/home/eagle/qt-copy/include/QtGui/qplaintextedit.h"
void print(QPrinter *printer) const;


# 184 "/home/eagle/qt-copy/include/QtGui/qplaintextedit.h"
int blockCount() const;

public slots:

void setPlainText(const QString &text);


# 191 "/home/eagle/qt-copy/include/QtGui/qplaintextedit.h"
void cut();
void copy();
void paste();


# 196 "/home/eagle/qt-copy/include/QtGui/qplaintextedit.h"
void undo();
void redo();

void clear();
void selectAll();

void insertPlainText(const QString &text);

void appendPlainText(const QString &text);
void appendHtml(const QString &html);

void centerCursor();

signals:
void textChanged();
void undoAvailable(bool b);
void redoAvailable(bool b);
void copyAvailable(bool b);
void selectionChanged();
void cursorPositionChanged();

void updateRequest(const QRect &rect, int dy);
void blockCountChanged(int newBlockCount);
void modificationChanged(bool);

protected:
virtual bool event(QEvent *e);
virtual void timerEvent(QTimerEvent *e);
virtual void keyPressEvent(QKeyEvent *e);
virtual void keyReleaseEvent(QKeyEvent *e);
virtual void resizeEvent(QResizeEvent *e);
virtual void paintEvent(QPaintEvent *e);
virtual void mousePressEvent(QMouseEvent *e);
virtual void mouseMoveEvent(QMouseEvent *e);
virtual void mouseReleaseEvent(QMouseEvent *e);
virtual void mouseDoubleClickEvent(QMouseEvent *e);
virtual bool focusNextPrevChild(bool next);
virtual void contextMenuEvent(QContextMenuEvent *e);

# 235 "/home/eagle/qt-copy/include/QtGui/qplaintextedit.h"
virtual void dragEnterEvent(QDragEnterEvent *e);
virtual void dragLeaveEvent(QDragLeaveEvent *e);
virtual void dragMoveEvent(QDragMoveEvent *e);
virtual void dropEvent(QDropEvent *e);

# 240 "/home/eagle/qt-copy/include/QtGui/qplaintextedit.h"
virtual void focusInEvent(QFocusEvent *e);
virtual void focusOutEvent(QFocusEvent *e);
virtual void showEvent(QShowEvent *);
virtual void changeEvent(QEvent *e);

# 245 "/home/eagle/qt-copy/include/QtGui/qplaintextedit.h"
virtual void wheelEvent(QWheelEvent *e);


# 248 "/home/eagle/qt-copy/include/QtGui/qplaintextedit.h"
virtual QMimeData *createMimeDataFromSelection() const;
virtual bool canInsertFromMimeData(const QMimeData *source) const;
virtual void insertFromMimeData(const QMimeData *source);

virtual void inputMethodEvent(QInputMethodEvent *);
QVariant inputMethodQuery(Qt::InputMethodQuery property) const;

QPlainTextEdit(QPlainTextEditPrivate &dd, QWidget *parent);

virtual void scrollContentsBy(int dx, int dy);

QTextBlock firstVisibleBlock() const;
QPointF contentOffset() const;
QRectF blockBoundingRect(const QTextBlock &block) const;
QRectF blockBoundingGeometry(const QTextBlock &block) const;
QAbstractTextDocumentLayout::PaintContext getPaintContext() const;


private:
QPlainTextEdit(const QPlainTextEdit &); QPlainTextEdit &operator=(const QPlainTextEdit &);




friend class QPlainTextEditControl;
};


class QPlainTextDocumentLayoutPrivate;
class  QPlainTextDocumentLayout : public QAbstractTextDocumentLayout
{
Q_OBJECT
inline QPlainTextDocumentLayoutPrivate* d_func() { return reinterpret_cast<QPlainTextDocumentLayoutPrivate *>(d_ptr); } inline const QPlainTextDocumentLayoutPrivate* d_func() const { return reinterpret_cast<const QPlainTextDocumentLayoutPrivate *>(d_ptr); } friend class QPlainTextDocumentLayoutPrivate;
Q_PROPERTY(int cursorWidth READ cursorWidth WRITE setCursorWidth)

public:
QPlainTextDocumentLayout(QTextDocument *document);
~QPlainTextDocumentLayout();

void draw(QPainter *, const PaintContext &);
int hitTest(const QPointF &, Qt::HitTestAccuracy ) const;

int pageCount() const;
QSizeF documentSize() const;

QRectF frameBoundingRect(QTextFrame *) const;
QRectF blockBoundingRect(const QTextBlock &block) const;

void ensureBlockLayout(const QTextBlock &block) const;

void setCursorWidth(int width);
int cursorWidth() const;

void requestUpdate();

protected:
void documentChanged(int from, int , int charsAdded);


private:
void setTextWidth(qreal newWidth);
qreal textWidth() const;
void layoutBlock(const QTextBlock &block);
qreal blockWidth(const QTextBlock &block);

QPlainTextDocumentLayoutPrivate *priv() const;

friend class QPlainTextEdit;
friend class QPlainTextEditPrivate;
};









# 179 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qprintpreviewwidget.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qwidget.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qprintpreviewwidget.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qprinter.h"










































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qprintpreviewwidget.h"




# 52 "/home/eagle/qt-copy/include/QtGui/qprintpreviewwidget.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QPrintPreviewWidgetPrivate;

class  QPrintPreviewWidget : public QWidget
{
Q_OBJECT
inline QPrintPreviewWidgetPrivate* d_func() { return reinterpret_cast<QPrintPreviewWidgetPrivate *>(d_ptr); } inline const QPrintPreviewWidgetPrivate* d_func() const { return reinterpret_cast<const QPrintPreviewWidgetPrivate *>(d_ptr); } friend class QPrintPreviewWidgetPrivate;
public:

enum ViewMode {
SinglePageView,
FacingPagesView,
AllPagesView
};

enum ZoomMode {
CustomZoom,
FitToWidth,
FitInView
};

explicit QPrintPreviewWidget(QPrinter *printer, QWidget *parent = 0, Qt::WindowFlags flags = 0);
explicit QPrintPreviewWidget(QWidget *parent = 0, Qt::WindowFlags flags = 0);
~QPrintPreviewWidget();

qreal zoomFactor() const;
QPrinter::Orientation orientation() const;
ViewMode viewMode() const;
ZoomMode zoomMode() const;
int currentPage() const;
int numPages() const;
void setVisible(bool visible);

public slots:
void print();

void zoomIn(qreal zoom = 1.1);
void zoomOut(qreal zoom = 1.1);
void setZoomFactor(qreal zoomFactor);
void setOrientation(QPrinter::Orientation orientation);
void setViewMode(ViewMode viewMode);
void setZoomMode(ZoomMode zoomMode);
void setCurrentPage(int pageNumber);

void fitToWidth();
void fitInView();
void setLandscapeOrientation();
void setPortraitOrientation();
void setSinglePageViewMode();
void setFacingPagesViewMode();
void setAllPagesViewMode();

void updatePreview();

signals:
void paintRequested(QPrinter *printer);
void previewChanged();

private:
QPrintPreviewWidgetPrivate *d_ptr;


};







# 180 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qprogressbar.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qframe.h"






















































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qprogressbar.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qprogressbar.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qprogressbar.h"
class QProgressBarPrivate;
class QStyleOptionProgressBar;

class  QProgressBar : public QWidget
{
Q_OBJECT
Q_ENUMS(Direction)
Q_PROPERTY(int minimum READ minimum WRITE setMinimum)
Q_PROPERTY(int maximum READ maximum WRITE setMaximum)
Q_PROPERTY(QString text READ text)
Q_PROPERTY(int value READ value WRITE setValue NOTIFY valueChanged)
Q_PROPERTY(Qt::Alignment alignment READ alignment WRITE setAlignment)
Q_PROPERTY(bool textVisible READ isTextVisible WRITE setTextVisible)
Q_PROPERTY(Qt::Orientation orientation READ orientation WRITE setOrientation)
Q_PROPERTY(bool invertedAppearance READ invertedAppearance WRITE setInvertedAppearance)
Q_PROPERTY(Direction textDirection READ textDirection WRITE setTextDirection)
Q_PROPERTY(QString format READ format WRITE setFormat)

public:
enum Direction { TopToBottom, BottomToTop };

explicit QProgressBar(QWidget *parent = 0);

int minimum() const;
int maximum() const;

int value() const;

virtual QString text() const;
void setTextVisible(bool visible);
bool isTextVisible() const;

Qt::Alignment alignment() const;
void setAlignment(Qt::Alignment alignment);

QSize sizeHint() const;
QSize minimumSizeHint() const;

Qt::Orientation orientation() const;

void setInvertedAppearance(bool invert);
bool invertedAppearance();
void setTextDirection(QProgressBar::Direction textDirection);
QProgressBar::Direction textDirection();

void setFormat(const QString &format);
QString format() const;

public slots:
void reset();
void setRange(int minimum, int maximum);
void setMinimum(int minimum);
void setMaximum(int maximum);
void setValue(int value);
void setOrientation(Qt::Orientation);

signals:
void valueChanged(int value);

protected:
bool event(QEvent *e);
void paintEvent(QPaintEvent *);
void initStyleOption(QStyleOptionProgressBar *option) const;

private:
inline QProgressBarPrivate* d_func() { return reinterpret_cast<QProgressBarPrivate *>(d_ptr); } inline const QProgressBarPrivate* d_func() const { return reinterpret_cast<const QProgressBarPrivate *>(d_ptr); } friend class QProgressBarPrivate;
QProgressBar(const QProgressBar &); QProgressBar &operator=(const QProgressBar &);
};



# 128 "/home/eagle/qt-copy/include/QtGui/qprogressbar.h"





# 181 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qpushbutton.h"






























































































































# 182 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qradiobutton.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qabstractbutton.h"






















































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qradiobutton.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qradiobutton.h"




typedef QtValidLicenseForGuiModule QtGuiModule;

class QRadioButtonPrivate;
class QStyleOptionButton;

class  QRadioButton : public QAbstractButton
{
Q_OBJECT

public:
explicit QRadioButton(QWidget *parent=0);
explicit QRadioButton(const QString &text, QWidget *parent=0);

QSize sizeHint() const;

protected:
bool event(QEvent *e);
bool hitButton(const QPoint &) const;
void paintEvent(QPaintEvent *);
void mouseMoveEvent(QMouseEvent *);
void initStyleOption(QStyleOptionButton *button) const;







# 81 "/home/eagle/qt-copy/include/QtGui/qradiobutton.h"
private:
inline QRadioButtonPrivate* d_func() { return reinterpret_cast<QRadioButtonPrivate *>(d_ptr); } inline const QRadioButtonPrivate* d_func() const { return reinterpret_cast<const QRadioButtonPrivate *>(d_ptr); } friend class QRadioButtonPrivate;
QRadioButton(const QRadioButton &); QRadioButton &operator=(const QRadioButton &);
};






# 183 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qrubberband.h"










































































































# 184 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qscrollarea.h"







































































































# 185 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qscrollbar.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qwidget.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qscrollbar.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qabstractslider.h"


























































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qscrollbar.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qscrollbar.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 58 "/home/eagle/qt-copy/include/QtGui/qscrollbar.h"
class QScrollBarPrivate;
class QStyleOptionSlider;

class  QScrollBar : public QAbstractSlider
{
Q_OBJECT
public:
explicit QScrollBar(QWidget *parent=0);
explicit QScrollBar(Qt::Orientation, QWidget *parent=0);
~QScrollBar();

QSize sizeHint() const;
bool event(QEvent *event);

protected:
void paintEvent(QPaintEvent *);
void mousePressEvent(QMouseEvent *);
void mouseReleaseEvent(QMouseEvent *);
void mouseMoveEvent(QMouseEvent *);
void hideEvent(QHideEvent*);
void sliderChange(SliderChange change);
void contextMenuEvent(QContextMenuEvent *);
void initStyleOption(QStyleOptionSlider *option) const;










# 91 "/home/eagle/qt-copy/include/QtGui/qscrollbar.h"
private:
friend  QStyleOptionSlider qt_qscrollbarStyleOption(QScrollBar *scrollBar);

QScrollBar(const QScrollBar &); QScrollBar &operator=(const QScrollBar &);
inline QScrollBarPrivate* d_func() { return reinterpret_cast<QScrollBarPrivate *>(d_ptr); } inline const QScrollBarPrivate* d_func() const { return reinterpret_cast<const QScrollBarPrivate *>(d_ptr); } friend class QScrollBarPrivate;
};



# 100 "/home/eagle/qt-copy/include/QtGui/qscrollbar.h"





# 186 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qsizegrip.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qwidget.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qsizegrip.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qsizegrip.h"




typedef QtValidLicenseForGuiModule QtGuiModule;


# 56 "/home/eagle/qt-copy/include/QtGui/qsizegrip.h"
class QSizeGripPrivate;
class  QSizeGrip : public QWidget
{
Q_OBJECT
public:
explicit QSizeGrip(QWidget *parent);
~QSizeGrip();

QSize sizeHint() const;
void setVisible(bool);

protected:
void paintEvent(QPaintEvent *);
void mousePressEvent(QMouseEvent *);
void mouseMoveEvent(QMouseEvent *);
void mouseReleaseEvent(QMouseEvent *mouseEvent);
void moveEvent(QMoveEvent *moveEvent);
void showEvent(QShowEvent *showEvent);
void hideEvent(QHideEvent *hideEvent);
bool eventFilter(QObject *, QEvent *);
bool event(QEvent *);




# 81 "/home/eagle/qt-copy/include/QtGui/qsizegrip.h"
public:




# 86 "/home/eagle/qt-copy/include/QtGui/qsizegrip.h"
private:
inline QSizeGripPrivate* d_func() { return reinterpret_cast<QSizeGripPrivate *>(d_ptr); } inline const QSizeGripPrivate* d_func() const { return reinterpret_cast<const QSizeGripPrivate *>(d_ptr); } friend class QSizeGripPrivate;
QSizeGrip(const QSizeGrip &); QSizeGrip &operator=(const QSizeGrip &);

};


# 93 "/home/eagle/qt-copy/include/QtGui/qsizegrip.h"





# 187 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qslider.h"








































































































































# 188 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qspinbox.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qabstractspinbox.h"



















































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qspinbox.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qspinbox.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qspinbox.h"
class QSpinBoxPrivate;
class  QSpinBox : public QAbstractSpinBox
{
Q_OBJECT

Q_PROPERTY(QString suffix READ suffix WRITE setSuffix)
Q_PROPERTY(QString prefix READ prefix WRITE setPrefix)
Q_PROPERTY(QString cleanText READ cleanText)
Q_PROPERTY(int minimum READ minimum WRITE setMinimum)
Q_PROPERTY(int maximum READ maximum WRITE setMaximum)
Q_PROPERTY(int singleStep READ singleStep WRITE setSingleStep)
Q_PROPERTY(int value READ value WRITE setValue NOTIFY valueChanged USER true)

public:
explicit QSpinBox(QWidget *parent = 0);






# 78 "/home/eagle/qt-copy/include/QtGui/qspinbox.h"
int value() const;

QString prefix() const;
void setPrefix(const QString &prefix);

QString suffix() const;
void setSuffix(const QString &suffix);

QString cleanText() const;

int singleStep() const;
void setSingleStep(int val);

int minimum() const;
void setMinimum(int min);

int maximum() const;
void setMaximum(int max);

void setRange(int min, int max);









# 107 "/home/eagle/qt-copy/include/QtGui/qspinbox.h"
protected:
bool event(QEvent *event);
virtual QValidator::State validate(QString &input, int &pos) const;
virtual int valueFromText(const QString &text) const;
virtual QString textFromValue(int val) const;
virtual void fixup(QString &str) const;


public slots:
void setValue(int val);

signals:
void valueChanged(int);
void valueChanged(const QString &);

private:
QSpinBox(const QSpinBox &); QSpinBox &operator=(const QSpinBox &);
inline QSpinBoxPrivate* d_func() { return reinterpret_cast<QSpinBoxPrivate *>(d_ptr); } inline const QSpinBoxPrivate* d_func() const { return reinterpret_cast<const QSpinBoxPrivate *>(d_ptr); } friend class QSpinBoxPrivate;
};

class QDoubleSpinBoxPrivate;
class  QDoubleSpinBox : public QAbstractSpinBox
{
Q_OBJECT

Q_PROPERTY(QString prefix READ prefix WRITE setPrefix)
Q_PROPERTY(QString suffix READ suffix WRITE setSuffix)
Q_PROPERTY(QString cleanText READ cleanText)
Q_PROPERTY(int decimals READ decimals WRITE setDecimals)
Q_PROPERTY(double minimum READ minimum WRITE setMinimum)
Q_PROPERTY(double maximum READ maximum WRITE setMaximum)
Q_PROPERTY(double singleStep READ singleStep WRITE setSingleStep)
Q_PROPERTY(double value READ value WRITE setValue NOTIFY valueChanged USER true)
public:
explicit QDoubleSpinBox(QWidget *parent = 0);

double value() const;

QString prefix() const;
void setPrefix(const QString &prefix);

QString suffix() const;
void setSuffix(const QString &suffix);

QString cleanText() const;

double singleStep() const;
void setSingleStep(double val);

double minimum() const;
void setMinimum(double min);

double maximum() const;
void setMaximum(double max);

void setRange(double min, double max);

int decimals() const;
void setDecimals(int prec);

virtual QValidator::State validate(QString &input, int &pos) const;
virtual double valueFromText(const QString &text) const;
virtual QString textFromValue(double val) const;
virtual void fixup(QString &str) const;

public slots:
void setValue(double val);

signals:
void valueChanged(double);
void valueChanged(const QString &);

private:
QDoubleSpinBox(const QDoubleSpinBox &); QDoubleSpinBox &operator=(const QDoubleSpinBox &);
inline QDoubleSpinBoxPrivate* d_func() { return reinterpret_cast<QDoubleSpinBoxPrivate *>(d_ptr); } inline const QDoubleSpinBoxPrivate* d_func() const { return reinterpret_cast<const QDoubleSpinBoxPrivate *>(d_ptr); } friend class QDoubleSpinBoxPrivate;
};



# 186 "/home/eagle/qt-copy/include/QtGui/qspinbox.h"





# 189 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qsplashscreen.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qpixmap.h"











































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qsplashscreen.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qwidget.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qsplashscreen.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qsplashscreen.h"




typedef QtValidLicenseForGuiModule QtGuiModule;


# 57 "/home/eagle/qt-copy/include/QtGui/qsplashscreen.h"
class QSplashScreenPrivate;

class  QSplashScreen : public QWidget
{
Q_OBJECT
public:
explicit QSplashScreen(const QPixmap &pixmap = QPixmap(), Qt::WindowFlags f = 0);
QSplashScreen(QWidget *parent, const QPixmap &pixmap = QPixmap(), Qt::WindowFlags f = 0);
virtual ~QSplashScreen();

void setPixmap(const QPixmap &pixmap);
const QPixmap pixmap() const;
void finish(QWidget *w);
void repaint();

public slots:
void showMessage(const QString &message, int alignment = Qt::AlignLeft,
const QColor &color = Qt::black);
void clearMessage();






# 82 "/home/eagle/qt-copy/include/QtGui/qsplashscreen.h"
signals:
void messageChanged(const QString &message);

protected:
bool event(QEvent *e);
virtual void drawContents(QPainter *painter);
void mousePressEvent(QMouseEvent *);

private:
QSplashScreen(const QSplashScreen &); QSplashScreen &operator=(const QSplashScreen &);
inline QSplashScreenPrivate* d_func() { return reinterpret_cast<QSplashScreenPrivate *>(d_ptr); } inline const QSplashScreenPrivate* d_func() const { return reinterpret_cast<const QSplashScreenPrivate *>(d_ptr); } friend class QSplashScreenPrivate;
};



# 97 "/home/eagle/qt-copy/include/QtGui/qsplashscreen.h"





# 190 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qsplitter.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qframe.h"






















































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qsplitter.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qsizepolicy.h"



































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qsplitter.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qsplitter.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 58 "/home/eagle/qt-copy/include/QtGui/qsplitter.h"
class QSplitterPrivate;
class QTextStream;
template <typename T> class QList;

class QSplitterHandle;

class  QSplitter : public QFrame
{
Q_OBJECT

Q_PROPERTY(Qt::Orientation orientation READ orientation WRITE setOrientation)
Q_PROPERTY(bool opaqueResize READ opaqueResize WRITE setOpaqueResize)
Q_PROPERTY(int handleWidth READ handleWidth WRITE setHandleWidth)
Q_PROPERTY(bool childrenCollapsible READ childrenCollapsible WRITE setChildrenCollapsible)

public:
explicit QSplitter(QWidget* parent = 0);
explicit QSplitter(Qt::Orientation, QWidget* parent = 0);
~QSplitter();

void addWidget(QWidget *widget);
void insertWidget(int index, QWidget *widget);

void setOrientation(Qt::Orientation);
Qt::Orientation orientation() const;

void setChildrenCollapsible(bool);
bool childrenCollapsible() const;

void setCollapsible(int index, bool);
bool isCollapsible(int index) const;
void setOpaqueResize(bool opaque = true);
bool opaqueResize() const;
void refresh();

QSize sizeHint() const;
QSize minimumSizeHint() const;

QList<int> sizes() const;
void setSizes(const QList<int> &list);

QByteArray saveState() const;
bool restoreState(const QByteArray &state);

int handleWidth() const;
void setHandleWidth(int);

int indexOf(QWidget *w) const;
QWidget *widget(int index) const;
int count() const;

void getRange(int index, int *, int *) const;
QSplitterHandle *handle(int index) const;

void setStretchFactor(int index, int stretch);

signals:
void splitterMoved(int pos, int index);

protected:
virtual QSplitterHandle *createHandle();

void childEvent(QChildEvent *);

bool event(QEvent *);
void resizeEvent(QResizeEvent *);

void changeEvent(QEvent *);
void moveSplitter(int pos, int index);
void setRubberBand(int position);
int closestLegalPosition(int, int);
















# 145 "/home/eagle/qt-copy/include/QtGui/qsplitter.h"
private:
QSplitter(const QSplitter &); QSplitter &operator=(const QSplitter &);
inline QSplitterPrivate* d_func() { return reinterpret_cast<QSplitterPrivate *>(d_ptr); } inline const QSplitterPrivate* d_func() const { return reinterpret_cast<const QSplitterPrivate *>(d_ptr); } friend class QSplitterPrivate;
private:
friend class QSplitterHandle;
};



# 154 "/home/eagle/qt-copy/include/QtGui/qsplitter.h"
 QTextStream& operator<<(QTextStream&, const QSplitter&);
 QTextStream& operator>>(QTextStream&, QSplitter&);

# 157 "/home/eagle/qt-copy/include/QtGui/qsplitter.h"


class QSplitterHandlePrivate;
class  QSplitterHandle : public QWidget
{
Q_OBJECT
public:
QSplitterHandle(Qt::Orientation o, QSplitter *parent);
void setOrientation(Qt::Orientation o);
Qt::Orientation orientation() const;
bool opaqueResize() const;
QSplitter *splitter() const;

QSize sizeHint() const;

protected:
void paintEvent(QPaintEvent *);
void mouseMoveEvent(QMouseEvent *);
void mousePressEvent(QMouseEvent *);
void mouseReleaseEvent(QMouseEvent *);
bool event(QEvent *);

void moveSplitter(int p);
int closestLegalPosition(int p);

private:
QSplitterHandle(const QSplitterHandle &); QSplitterHandle &operator=(const QSplitterHandle &);
inline QSplitterHandlePrivate* d_func() { return reinterpret_cast<QSplitterHandlePrivate *>(d_ptr); } inline const QSplitterHandlePrivate* d_func() const { return reinterpret_cast<const QSplitterHandlePrivate *>(d_ptr); } friend class QSplitterHandlePrivate;
};



# 189 "/home/eagle/qt-copy/include/QtGui/qsplitter.h"





# 191 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qstackedwidget.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qframe.h"






















































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qstackedwidget.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qstackedwidget.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qstackedwidget.h"
class QStackedWidgetPrivate;

class  QStackedWidget : public QFrame
{
Q_OBJECT

Q_PROPERTY(int currentIndex READ currentIndex WRITE setCurrentIndex NOTIFY currentChanged)
Q_PROPERTY(int count READ count)
public:
explicit QStackedWidget(QWidget *parent=0);
~QStackedWidget();

int addWidget(QWidget *w);
int insertWidget(int index, QWidget *w);
void removeWidget(QWidget *w);

QWidget *currentWidget() const;
int currentIndex() const;

int indexOf(QWidget *) const;
QWidget *widget(int) const;
int count() const;

public slots:
void setCurrentIndex(int index);
void setCurrentWidget(QWidget *w);

signals:
void currentChanged(int);
void widgetRemoved(int index);

protected:
bool event(QEvent *e);

private:
QStackedWidget(const QStackedWidget &); QStackedWidget &operator=(const QStackedWidget &);
inline QStackedWidgetPrivate* d_func() { return reinterpret_cast<QStackedWidgetPrivate *>(d_ptr); } inline const QStackedWidgetPrivate* d_func() const { return reinterpret_cast<const QStackedWidgetPrivate *>(d_ptr); } friend class QStackedWidgetPrivate;
};



# 98 "/home/eagle/qt-copy/include/QtGui/qstackedwidget.h"





# 192 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qstatusbar.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qwidget.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qstatusbar.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qstatusbar.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qstatusbar.h"
class QStatusBarPrivate;

class  QStatusBar: public QWidget
{
Q_OBJECT

Q_PROPERTY(bool sizeGripEnabled READ isSizeGripEnabled WRITE setSizeGripEnabled)

public:
explicit QStatusBar(QWidget* parent=0);
virtual ~QStatusBar();

void addWidget(QWidget *widget, int stretch = 0);
int insertWidget(int index, QWidget *widget, int stretch = 0);
void addPermanentWidget(QWidget *widget, int stretch = 0);
int insertPermanentWidget(int index, QWidget *widget, int stretch = 0);
void removeWidget(QWidget *widget);

void setSizeGripEnabled(bool);
bool isSizeGripEnabled() const;

QString currentMessage() const;

public slots:
void showMessage(const QString &text, int timeout = 0);
void clearMessage();











# 94 "/home/eagle/qt-copy/include/QtGui/qstatusbar.h"
signals:
void messageChanged(const QString &text);

protected:
void showEvent(QShowEvent *);
void paintEvent(QPaintEvent *);
void resizeEvent(QResizeEvent *);


void reformat();
void hideOrShow();
bool event(QEvent *);

private:
QStatusBar(const QStatusBar &); QStatusBar &operator=(const QStatusBar &);
inline QStatusBarPrivate* d_func() { return reinterpret_cast<QStatusBarPrivate *>(d_ptr); } inline const QStatusBarPrivate* d_func() const { return reinterpret_cast<const QStatusBarPrivate *>(d_ptr); } friend class QStatusBarPrivate;
};



# 114 "/home/eagle/qt-copy/include/QtGui/qstatusbar.h"





# 193 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtabbar.h"



























































































































































































# 194 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtabwidget.h"
















































































































































































































































# 195 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextbrowser.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qtextedit.h"














































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qtextbrowser.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qurl.h"



























































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qtextbrowser.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qtextbrowser.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 58 "/home/eagle/qt-copy/include/QtGui/qtextbrowser.h"
class QTextBrowserPrivate;

class  QTextBrowser : public QTextEdit
{
Q_OBJECT

Q_PROPERTY(QUrl source READ source WRITE setSource)



Q_PROPERTY(QStringList searchPaths READ searchPaths WRITE setSearchPaths)
Q_PROPERTY(bool openExternalLinks READ openExternalLinks WRITE setOpenExternalLinks)
Q_PROPERTY(bool openLinks READ openLinks WRITE setOpenLinks)

public:
explicit QTextBrowser(QWidget* parent = 0);
virtual ~QTextBrowser();

QUrl source() const;

QStringList searchPaths() const;
void setSearchPaths(const QStringList &paths);

virtual QVariant loadResource(int type, const QUrl &name);

bool isBackwardAvailable() const;
bool isForwardAvailable() const;
void clearHistory();
QString historyTitle(int) const;
QUrl historyUrl(int) const;
int backwardHistoryCount() const;
int forwardHistoryCount() const;

bool openExternalLinks() const;
void setOpenExternalLinks(bool open);

bool openLinks() const;
void setOpenLinks(bool open);

public slots:
virtual void setSource(const QUrl &name);
virtual void backward();
virtual void forward();
virtual void home();
virtual void reload();

signals:
void backwardAvailable(bool);
void forwardAvailable(bool);
void historyChanged();
void sourceChanged(const QUrl &);
void highlighted(const QUrl &);
void highlighted(const QString &);
void anchorClicked(const QUrl &);

protected:
bool event(QEvent *e);
virtual void keyPressEvent(QKeyEvent *ev);
virtual void mouseMoveEvent(QMouseEvent *ev);
virtual void mousePressEvent(QMouseEvent *ev);
virtual void mouseReleaseEvent(QMouseEvent *ev);
virtual void focusOutEvent(QFocusEvent *ev);
virtual bool focusNextPrevChild(bool next);
virtual void paintEvent(QPaintEvent *e);






# 128 "/home/eagle/qt-copy/include/QtGui/qtextbrowser.h"
private:
QTextBrowser(const QTextBrowser &); QTextBrowser &operator=(const QTextBrowser &);
inline QTextBrowserPrivate* d_func() { return reinterpret_cast<QTextBrowserPrivate *>(d_ptr); } inline const QTextBrowserPrivate* d_func() const { return reinterpret_cast<const QTextBrowserPrivate *>(d_ptr); } friend class QTextBrowserPrivate;



};



# 138 "/home/eagle/qt-copy/include/QtGui/qtextbrowser.h"





# 196 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextedit.h"














































































































































































































































































































































































































































# 197 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtoolbar.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qwidget.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qtoolbar.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qtoolbar.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qtoolbar.h"
class QToolBarPrivate;

class QAction;
class QIcon;
class QMainWindow;
class QStyleOptionToolBar;

class  QToolBar : public QWidget
{
Q_OBJECT

Q_PROPERTY(bool movable READ isMovable WRITE setMovable
DESIGNABLE (qobject_cast<QMainWindow *>(parentWidget()) != 0)
NOTIFY movableChanged)
Q_PROPERTY(Qt::ToolBarAreas allowedAreas READ allowedAreas WRITE setAllowedAreas
DESIGNABLE (qobject_cast<QMainWindow *>(parentWidget()) != 0)
NOTIFY allowedAreasChanged)
Q_PROPERTY(Qt::Orientation orientation READ orientation WRITE setOrientation
DESIGNABLE (qobject_cast<QMainWindow *>(parentWidget()) == 0)
NOTIFY orientationChanged)
Q_PROPERTY(QSize iconSize READ iconSize WRITE setIconSize NOTIFY iconSizeChanged)
Q_PROPERTY(Qt::ToolButtonStyle toolButtonStyle READ toolButtonStyle WRITE setToolButtonStyle
NOTIFY toolButtonStyleChanged)
Q_PROPERTY(bool floating READ isFloating)
Q_PROPERTY(bool floatable READ isFloatable WRITE setFloatable)

public:
explicit QToolBar(const QString &title, QWidget *parent = 0);
explicit QToolBar(QWidget *parent = 0);
~QToolBar();

void setMovable(bool movable);
bool isMovable() const;

void setAllowedAreas(Qt::ToolBarAreas areas);
Qt::ToolBarAreas allowedAreas() const;

inline bool isAreaAllowed(Qt::ToolBarArea area) const
{ return (allowedAreas() & area) == area; }

void setOrientation(Qt::Orientation orientation);
Qt::Orientation orientation() const;

void clear();


# 103 "/home/eagle/qt-copy/include/QtGui/qtoolbar.h"
inline void addAction(QAction *action)
{ QWidget::addAction(action); }




# 109 "/home/eagle/qt-copy/include/QtGui/qtoolbar.h"
QAction *addAction(const QString &text);
QAction *addAction(const QIcon &icon, const QString &text);
QAction *addAction(const QString &text, const QObject *receiver, const char* member);
QAction *addAction(const QIcon &icon, const QString &text,
const QObject *receiver, const char* member);

QAction *addSeparator();
QAction *insertSeparator(QAction *before);

QAction *addWidget(QWidget *widget);
QAction *insertWidget(QAction *before, QWidget *widget);

QRect actionGeometry(QAction *action) const;
QAction *actionAt(const QPoint &p) const;
inline QAction *actionAt(int x, int y) const;

QAction *toggleViewAction() const;

QSize iconSize() const;
Qt::ToolButtonStyle toolButtonStyle() const;

QWidget *widgetForAction(QAction *action) const;

bool isFloatable() const;
void setFloatable(bool floatable);
bool isFloating() const;

public slots:
void setIconSize(const QSize &iconSize);
void setToolButtonStyle(Qt::ToolButtonStyle toolButtonStyle);

signals:
void actionTriggered(QAction *action);
void movableChanged(bool movable);
void allowedAreasChanged(Qt::ToolBarAreas allowedAreas);
void orientationChanged(Qt::Orientation orientation);
void iconSizeChanged(const QSize &iconSize);
void toolButtonStyleChanged(Qt::ToolButtonStyle toolButtonStyle);

protected:
void actionEvent(QActionEvent *event);
void changeEvent(QEvent *event);
void childEvent(QChildEvent *event);
void paintEvent(QPaintEvent *event);
void resizeEvent(QResizeEvent *event);
bool event(QEvent *event);
void initStyleOption(QStyleOptionToolBar *option) const;










# 166 "/home/eagle/qt-copy/include/QtGui/qtoolbar.h"
private:
inline QToolBarPrivate* d_func() { return reinterpret_cast<QToolBarPrivate *>(d_ptr); } inline const QToolBarPrivate* d_func() const { return reinterpret_cast<const QToolBarPrivate *>(d_ptr); } friend class QToolBarPrivate;
QToolBar(const QToolBar &); QToolBar &operator=(const QToolBar &);





friend class QMainWindow;
friend class QMainWindowLayout;
friend class QToolBarLayout;
friend class QToolBarAreaLayout;
};

inline QAction *QToolBar::actionAt(int ax, int ay) const
{ return actionAt(QPoint(ax, ay)); }



# 185 "/home/eagle/qt-copy/include/QtGui/qtoolbar.h"





# 198 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtoolbox.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qframe.h"






















































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qtoolbox.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qicon.h"















































































































































# 48 "/home/eagle/qt-copy/include/QtGui/qtoolbox.h"


# 50 "/home/eagle/qt-copy/include/QtGui/qtoolbox.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 58 "/home/eagle/qt-copy/include/QtGui/qtoolbox.h"
class QToolBoxPrivate;

class  QToolBox : public QFrame
{
Q_OBJECT
Q_PROPERTY(int currentIndex READ currentIndex WRITE setCurrentIndex NOTIFY currentChanged)
Q_PROPERTY(int count READ count)

public:
explicit QToolBox(QWidget *parent = 0, Qt::WindowFlags f = 0);
~QToolBox();

int addItem(QWidget *widget, const QString &text);
int addItem(QWidget *widget, const QIcon &icon, const QString &text);
int insertItem(int index, QWidget *widget, const QString &text);
int insertItem(int index, QWidget *widget, const QIcon &icon, const QString &text);

void removeItem(int index);

void setItemEnabled(int index, bool enabled);
bool isItemEnabled(int index) const;

void setItemText(int index, const QString &text);
QString itemText(int index) const;

void setItemIcon(int index, const QIcon &icon);
QIcon itemIcon(int index) const;


# 87 "/home/eagle/qt-copy/include/QtGui/qtoolbox.h"
void setItemToolTip(int index, const QString &toolTip);
QString itemToolTip(int index) const;


# 91 "/home/eagle/qt-copy/include/QtGui/qtoolbox.h"
int currentIndex() const;
QWidget *currentWidget() const;
QWidget *widget(int index) const;
int indexOf(QWidget *widget) const;
int count() const;

public slots:
void setCurrentIndex(int index);
void setCurrentWidget(QWidget *widget);

signals:
void currentChanged(int index);

protected:
bool event(QEvent *e);
virtual void itemInserted(int index);
virtual void itemRemoved(int index);
void showEvent(QShowEvent *e);
void changeEvent(QEvent *);


















# 128 "/home/eagle/qt-copy/include/QtGui/qtoolbox.h"
private:
inline QToolBoxPrivate* d_func() { return reinterpret_cast<QToolBoxPrivate *>(d_ptr); } inline const QToolBoxPrivate* d_func() const { return reinterpret_cast<const QToolBoxPrivate *>(d_ptr); } friend class QToolBoxPrivate;
QToolBox(const QToolBox &); QToolBox &operator=(const QToolBox &);


};


inline int QToolBox::addItem(QWidget *item, const QString &text)
{ return insertItem(-1, item, QIcon(), text); }
inline int QToolBox::addItem(QWidget *item, const QIcon &iconSet,
const QString &text)
{ return insertItem(-1, item, iconSet, text); }
inline int QToolBox::insertItem(int index, QWidget *item, const QString &text)
{ return insertItem(index, item, QIcon(), text); }



# 146 "/home/eagle/qt-copy/include/QtGui/qtoolbox.h"





# 199 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtoolbutton.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qabstractbutton.h"






















































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qtoolbutton.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qtoolbutton.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qtoolbutton.h"
class QToolButtonPrivate;
class QMenu;
class QStyleOptionToolButton;

class  QToolButton : public QAbstractButton
{
Q_OBJECT
Q_ENUMS(Qt::ToolButtonStyle Qt::ArrowType ToolButtonPopupMode)

# 66 "/home/eagle/qt-copy/include/QtGui/qtoolbutton.h"
Q_PROPERTY(ToolButtonPopupMode popupMode READ popupMode WRITE setPopupMode)

# 68 "/home/eagle/qt-copy/include/QtGui/qtoolbutton.h"
Q_PROPERTY(Qt::ToolButtonStyle toolButtonStyle READ toolButtonStyle WRITE setToolButtonStyle)
Q_PROPERTY(bool autoRaise READ autoRaise WRITE setAutoRaise)
Q_PROPERTY(Qt::ArrowType arrowType READ arrowType WRITE setArrowType)

public:
enum ToolButtonPopupMode {
DelayedPopup,
MenuButtonPopup,
InstantPopup
};

explicit QToolButton(QWidget * parent=0);
~QToolButton();

QSize sizeHint() const;
QSize minimumSizeHint() const;

Qt::ToolButtonStyle toolButtonStyle() const;

Qt::ArrowType arrowType() const;
void setArrowType(Qt::ArrowType type);


# 91 "/home/eagle/qt-copy/include/QtGui/qtoolbutton.h"
void setMenu(QMenu* menu);
QMenu* menu() const;

void setPopupMode(ToolButtonPopupMode mode);
ToolButtonPopupMode popupMode() const;


# 98 "/home/eagle/qt-copy/include/QtGui/qtoolbutton.h"
QAction *defaultAction() const;

void setAutoRaise(bool enable);
bool autoRaise() const;

public slots:

# 105 "/home/eagle/qt-copy/include/QtGui/qtoolbutton.h"
void showMenu();

# 107 "/home/eagle/qt-copy/include/QtGui/qtoolbutton.h"
void setToolButtonStyle(Qt::ToolButtonStyle style);
void setDefaultAction(QAction *);

signals:
void triggered(QAction *);

protected:
QToolButton(QToolButtonPrivate &, QWidget* parent);
bool event(QEvent *e);
void mousePressEvent(QMouseEvent *);
void mouseReleaseEvent(QMouseEvent *);
void paintEvent(QPaintEvent *);
void actionEvent(QActionEvent *);

void enterEvent(QEvent *);
void leaveEvent(QEvent *);
void timerEvent(QTimerEvent *);
void changeEvent(QEvent *);

bool hitButton(const QPoint &pos) const;
void nextCheckState();
void initStyleOption(QStyleOptionToolButton *option) const;

private:
QToolButton(const QToolButton &); QToolButton &operator=(const QToolButton &);
inline QToolButtonPrivate* d_func() { return reinterpret_cast<QToolButtonPrivate *>(d_ptr); } inline const QToolButtonPrivate* d_func() const { return reinterpret_cast<const QToolButtonPrivate *>(d_ptr); } friend class QToolButtonPrivate;

# 134 "/home/eagle/qt-copy/include/QtGui/qtoolbutton.h"




# 138 "/home/eagle/qt-copy/include/QtGui/qtoolbutton.h"























































# 193 "/home/eagle/qt-copy/include/QtGui/qtoolbutton.h"
};



# 197 "/home/eagle/qt-copy/include/QtGui/qtoolbutton.h"





# 200 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qvalidator.h"

























































































































































































































# 201 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qworkspace.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qwidget.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtGui/qworkspace.h"


# 49 "/home/eagle/qt-copy/include/QtGui/qworkspace.h"




typedef QtValidLicenseForGuiModule QtGuiModule;



# 57 "/home/eagle/qt-copy/include/QtGui/qworkspace.h"
class QAction;
class QWorkspaceChild;
class QShowEvent;
class QWorkspacePrivate;

class  QWorkspace : public QWidget
{
Q_OBJECT
Q_PROPERTY(bool scrollBarsEnabled READ scrollBarsEnabled WRITE setScrollBarsEnabled)
Q_PROPERTY(QBrush background READ background WRITE setBackground)

public:
explicit QWorkspace(QWidget* parent=0);
~QWorkspace();

enum WindowOrder { CreationOrder, StackingOrder };

QWidget* activeWindow() const;
QWidgetList windowList(WindowOrder order = CreationOrder) const;

QWidget * addWindow(QWidget *w, Qt::WindowFlags flags = 0);

QSize sizeHint() const;

bool scrollBarsEnabled() const;
void setScrollBarsEnabled(bool enable);







# 90 "/home/eagle/qt-copy/include/QtGui/qworkspace.h"
void setBackground(const QBrush &background);
QBrush background() const;

signals:
void windowActivated(QWidget* w);

public slots:
void setActiveWindow(QWidget *w);
void cascade();
void tile();
void arrangeIcons();
void closeActiveWindow();
void closeAllWindows();
void activateNextWindow();
void activatePreviousWindow();

protected:
bool event(QEvent *e);
void paintEvent(QPaintEvent *e);
void changeEvent(QEvent *);
void childEvent(QChildEvent *);
void resizeEvent(QResizeEvent *);
bool eventFilter(QObject *, QEvent *);
void showEvent(QShowEvent *e);
void hideEvent(QHideEvent *e);

# 116 "/home/eagle/qt-copy/include/QtGui/qworkspace.h"
void wheelEvent(QWheelEvent *e);


# 119 "/home/eagle/qt-copy/include/QtGui/qworkspace.h"
private:
inline QWorkspacePrivate* d_func() { return reinterpret_cast<QWorkspacePrivate *>(d_ptr); } inline const QWorkspacePrivate* d_func() const { return reinterpret_cast<const QWorkspacePrivate *>(d_ptr); } friend class QWorkspacePrivate;
QWorkspace(const QWorkspace &); QWorkspace &operator=(const QWorkspace &);








friend class QWorkspaceChild;
};



# 135 "/home/eagle/qt-copy/include/QtGui/qworkspace.h"





# 202 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 26 "qtscript_masterinclude.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextcodec.h"





























































































































































































# 1 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextcodecplugin.h"


































































































# 2 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuture.h"
























































































































































































































































































# 3 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfutureinterface.h"























































































































































































































































































































# 4 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuturesynchronizer.h"
























































































































# 5 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuturewatcher.h"
































































































































































































































# 6 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qrunnable.h"










































































# 7 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentcompilertest.h"









































































# 8 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentexception.h"


































































































































# 9 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfilter.h"


































































































































































































































































































































































































































































































































































































































































































































































# 10 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfilterkernel.h"















































































































































































































































































































































# 11 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfunctionwrappers.h"















































































































































































# 12 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentiteratekernel.h"

















































































































































































































































































































# 13 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmap.h"















































































































































































































































































































































































































































































































































































































































































































































































































# 14 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmapkernel.h"










































































































































































































































































# 15 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmedian.h"




































































































































# 16 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentreducekernel.h"
























































































































































































































































# 17 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentresultstore.h"











































































































































































































































# 18 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentrun.h"











































































































































































































































































































# 19 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentrunbase.h"



































































































































# 20 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentstoredfunctioncall.h"


















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 21 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentthreadengine.h"



















































































































































































































































































































# 22 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qthreadpool.h"
































































































# 23 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qendian.h"










































































































































































































































































































































# 24 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





























































































































































































































































































# 286 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 291 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 296 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 301 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 306 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 311 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 316 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 321 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 326 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 331 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 336 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 341 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 346 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 351 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 356 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 361 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 366 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 371 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 376 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 381 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 386 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 391 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 396 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 401 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 406 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 411 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 416 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 421 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 426 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 431 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 436 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 441 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 446 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 451 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 456 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 461 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 466 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 471 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 476 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 481 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 486 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 491 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 496 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 501 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 506 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 511 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 516 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 521 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 526 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 531 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 536 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 541 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 546 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 551 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 556 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 561 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 566 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 571 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 576 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 581 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 586 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 591 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 596 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 601 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 606 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 611 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 616 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 621 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 626 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 631 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 636 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 641 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 646 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 651 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 656 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 661 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 666 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 671 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 676 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 681 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 686 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 691 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 696 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 701 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 706 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 711 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 716 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 721 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 726 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 731 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 736 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 741 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 746 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 751 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 756 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 761 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 766 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 771 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 776 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 781 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 786 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 25 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 26 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlibraryinfo.h"



























































































# 27 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 28 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qnumeric.h"









































































# 29 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstractfileengine.h"

























































































































































































































































# 30 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbuffer.h"














































































































# 31 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdatastream.h"









































































































































































































































































































































































































































# 32 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdebug.h"






































































































































































































































































# 33 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdir.h"










































































































































































































































































# 34 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdiriterator.h"



































































































# 35 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfile.h"














































































































































































































# 36 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfileinfo.h"





























































































































































































# 37 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfilesystemwatcher.h"



























































































# 38 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfsfileengine.h"



























































































































# 39 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"






























































































































































































































































# 40 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qprocess.h"












































































































































































































# 41 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qresource.h"










































































































# 42 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsettings.h"





















































































































































































































































































































# 43 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtemporaryfile.h"














































































































# 44 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextstream.h"



















































































































































































































































































































































































# 45 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qurl.h"



























































































































































































































































































# 46 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstracteventdispatcher.h"













































































































# 47 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstractitemmodel.h"

































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbasictimer.h"












































































# 49 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcoreapplication.h"












































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcoreevent.h"




































































































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qeventloop.h"






































































































# 52 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmath.h"



































































































































# 53 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmetaobject.h"










































































































































































# 54 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"












































































































































































































































































































































# 55 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmimedata.h"










































































































# 56 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 57 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qobjectcleanuphandler.h"
















































































# 58 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qobjectdefs.h"











































































































































































































































































































































































































# 59 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpointer.h"


















































































































































# 60 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsharedmemory.h"

























































































































# 61 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsignalmapper.h"






































































































# 62 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsocketnotifier.h"































































































# 63 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsystemsemaphore.h"








































































































# 64 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtimer.h"






















































































































# 65 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtranslator.h"




































































































# 66 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qvariant.h"






















































































































































































































































































































































































































































































































































































































# 67 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfactoryinterface.h"





































































# 68 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlibrary.h"


























































































































# 69 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qplugin.h"
















































































































# 70 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpluginloader.h"






































































































# 71 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/quuid.h"
































































































































































































# 72 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qatomic.h"

























































































































































































































# 73 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbasicatomic.h"




















































































































































































































# 74 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmutex.h"



































































































































































































# 75 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qreadwritelock.h"






















































































































































































































































# 76 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsemaphore.h"





















































































# 77 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qthread.h"




































































































































































# 78 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qthreadstorage.h"































































































































































# 79 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qwaitcondition.h"











































































































# 80 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qalgorithms.h"

















































































































































































































































































































































































































































































































































































# 81 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbitarray.h"
















































































































































































# 82 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"












































































































































































































































































































































































































































































































































































































# 83 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbytearraymatcher.h"


















































































# 84 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcache.h"


























































































































































































































# 85 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qchar.h"















































































































































































































































































































































































































# 86 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcontainerfwd.h"









































































# 87 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcryptographichash.h"






















































































# 88 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"



































































































































































































































































































































# 89 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qhash.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 90 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qiterator.h"








































































# 91 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qline.h"


































































































































































































































































































































































































































# 92 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlinkedlist.h"
























































































































































































































































































































































































































































































































# 93 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlist.h"











































































































































































































































































































































































































































































































































































































































































































# 94 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlocale.h"






















































































































































































































































































































































































































































































































































































































































































# 95 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmap.h"






















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 96 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpair.h"

































































































































# 97 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpoint.h"






































































































































































































































































































































































# 98 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qqueue.h"







































































# 99 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qrect.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































# 100 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qregexp.h"

























































































































































# 101 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qset.h"


































































































































































































































































































































































# 102 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qshareddata.h"



































































































































































































































# 103 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsize.h"






































































































































































































































































































































































# 104 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstack.h"




















































































# 105 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 106 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"
















































































































































































































































# 107 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstringmatcher.h"




























































































# 108 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextboundaryfinder.h"




















































































































# 109 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtimeline.h"
















































































































































# 110 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qvarlengtharray.h"













































































































































































































































# 111 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qvector.h"































































































































































































































































































































































































































































































































































































































































































































































































# 112 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qxmlstream.h"













































































































































































































































































































































































































































































# 113 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qftp.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtNetwork/qftp.h"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qurlinfo.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"



































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtNetwork/qurlinfo.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtNetwork/qurlinfo.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"






























































































































































































































































# 49 "/home/eagle/qt-copy/include/QtNetwork/qurlinfo.h"


# 51 "/home/eagle/qt-copy/include/QtNetwork/qurlinfo.h"




typedef QtValidLicenseForNetworkModule QtNetworkModule;



# 59 "/home/eagle/qt-copy/include/QtNetwork/qurlinfo.h"
class QUrl;
class QUrlInfoPrivate;

class  QUrlInfo
{
public:
enum PermissionSpec {
ReadOwner = 00400, WriteOwner = 00200, ExeOwner = 00100,
ReadGroup = 00040, WriteGroup = 00020, ExeGroup = 00010,
ReadOther = 00004, WriteOther = 00002, ExeOther = 00001 };

QUrlInfo();
QUrlInfo(const QUrlInfo &ui);
QUrlInfo(const QString &name, int permissions, const QString &owner,
const QString &group, qint64 size, const QDateTime &lastModified,
const QDateTime &lastRead, bool isDir, bool isFile, bool isSymLink,
bool isWritable, bool isReadable, bool isExecutable);
QUrlInfo(const QUrl &url, int permissions, const QString &owner,
const QString &group, qint64 size, const QDateTime &lastModified,
const QDateTime &lastRead, bool isDir, bool isFile, bool isSymLink,
bool isWritable, bool isReadable, bool isExecutable);
QUrlInfo &operator=(const QUrlInfo &ui);
virtual ~QUrlInfo();

virtual void setName(const QString &name);
virtual void setDir(bool b);
virtual void setFile(bool b);
virtual void setSymLink(bool b);
virtual void setOwner(const QString &s);
virtual void setGroup(const QString &s);
virtual void setSize(qint64 size);
virtual void setWritable(bool b);
virtual void setReadable(bool b);
virtual void setPermissions(int p);
virtual void setLastModified(const QDateTime &dt);
void setLastRead(const QDateTime &dt);

bool isValid() const;

QString name() const;
int permissions() const;
QString owner() const;
QString group() const;
qint64 size() const;
QDateTime lastModified() const;
QDateTime lastRead() const;
bool isDir() const;
bool isFile() const;
bool isSymLink() const;
bool isWritable() const;
bool isReadable() const;
bool isExecutable() const;

static bool greaterThan(const QUrlInfo &i1, const QUrlInfo &i2,
int sortBy);
static bool lessThan(const QUrlInfo &i1, const QUrlInfo &i2,
int sortBy);
static bool equal(const QUrlInfo &i1, const QUrlInfo &i2,
int sortBy);

bool operator==(const QUrlInfo &i) const;
inline bool operator!=(const QUrlInfo &i) const
{ return !operator==(i); }

private:
QUrlInfoPrivate *d;
};



# 129 "/home/eagle/qt-copy/include/QtNetwork/qurlinfo.h"





# 48 "/home/eagle/qt-copy/include/QtNetwork/qftp.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtNetwork/qftp.h"


# 51 "/home/eagle/qt-copy/include/QtNetwork/qftp.h"




typedef QtValidLicenseForNetworkModule QtNetworkModule;



# 59 "/home/eagle/qt-copy/include/QtNetwork/qftp.h"
class QFtpPrivate;

class  QFtp : public QObject
{
Q_OBJECT

public:
explicit QFtp(QObject *parent = 0);
virtual ~QFtp();

enum State {
Unconnected,
HostLookup,
Connecting,
Connected,
LoggedIn,
Closing
};
enum Error {
NoError,
UnknownError,
HostNotFound,
ConnectionRefused,
NotConnected
};
enum Command {
None,
SetTransferMode,
SetProxy,
ConnectToHost,
Login,
Close,
List,
Cd,
Get,
Put,
Remove,
Mkdir,
Rmdir,
Rename,
RawCommand
};
enum TransferMode {
Active,
Passive
};
enum TransferType {
Binary,
Ascii
};

int setProxy(const QString &host, quint16 port);
int connectToHost(const QString &host, quint16 port=21);
int login(const QString &user = QString(), const QString &password = QString());
int close();
int setTransferMode(TransferMode mode);
int list(const QString &dir = QString());
int cd(const QString &dir);
int get(const QString &file, QIODevice *dev=0, TransferType type = Binary);
int put(const QByteArray &data, const QString &file, TransferType type = Binary);
int put(QIODevice *dev, const QString &file, TransferType type = Binary);
int remove(const QString &file);
int mkdir(const QString &dir);
int rmdir(const QString &dir);
int rename(const QString &oldname, const QString &newname);

int rawCommand(const QString &command);

qint64 bytesAvailable() const;
qint64 read(char *data, qint64 maxlen);




# 133 "/home/eagle/qt-copy/include/QtNetwork/qftp.h"
QByteArray readAll();

int currentId() const;
QIODevice* currentDevice() const;
Command currentCommand() const;
bool hasPendingCommands() const;
void clearPendingCommands();

State state() const;

Error error() const;
QString errorString() const;

public slots:
void abort();

signals:
void stateChanged(int);
void listInfo(const QUrlInfo&);
void readyRead();
void dataTransferProgress(qint64, qint64);
void rawCommandReply(int, const QString&);

void commandStarted(int);
void commandFinished(int, bool);
void done(bool);






# 165 "/home/eagle/qt-copy/include/QtNetwork/qftp.h"
private:
QFtp(const QFtp &); QFtp &operator=(const QFtp &);
inline QFtpPrivate* d_func() { return reinterpret_cast<QFtpPrivate *>(d_ptr); } inline const QFtpPrivate* d_func() const { return reinterpret_cast<const QFtpPrivate *>(d_ptr); } friend class QFtpPrivate;






};



# 178 "/home/eagle/qt-copy/include/QtNetwork/qftp.h"





# 2 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qhttp.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtNetwork/qhttp.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"
















































































































































































































































# 48 "/home/eagle/qt-copy/include/QtNetwork/qhttp.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qmap.h"






















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtNetwork/qhttp.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qpair.h"

































































































































# 50 "/home/eagle/qt-copy/include/QtNetwork/qhttp.h"


# 52 "/home/eagle/qt-copy/include/QtNetwork/qhttp.h"




typedef QtValidLicenseForNetworkModule QtNetworkModule;



# 60 "/home/eagle/qt-copy/include/QtNetwork/qhttp.h"
class QTcpSocket;
class QTimerEvent;
class QIODevice;
class QAuthenticator;
class QNetworkProxy;
class QSslError;

class QHttpPrivate;

class QHttpHeaderPrivate;
class  QHttpHeader
{
public:
QHttpHeader();
QHttpHeader(const QHttpHeader &header);
QHttpHeader(const QString &str);
virtual ~QHttpHeader();

QHttpHeader &operator=(const QHttpHeader &h);

void setValue(const QString &key, const QString &value);
void setValues(const QList<QPair<QString, QString> > &values);
void addValue(const QString &key, const QString &value);
QList<QPair<QString, QString> > values() const;
bool hasKey(const QString &key) const;
QStringList keys() const;
QString value(const QString &key) const;
QStringList allValues(const QString &key) const;
void removeValue(const QString &key);
void removeAllValues(const QString &key);


bool hasContentLength() const;
uint contentLength() const;
void setContentLength(int len);

bool hasContentType() const;
QString contentType() const;
void setContentType(const QString &type);

virtual QString toString() const;
bool isValid() const;

virtual int majorVersion() const = 0;
virtual int minorVersion() const = 0;

protected:
virtual bool parseLine(const QString &line, int number);
bool parse(const QString &str);
void setValid(bool);

QHttpHeader(QHttpHeaderPrivate &dd, const QString &str = QString());
QHttpHeader(QHttpHeaderPrivate &dd, const QHttpHeader &header);
QHttpHeaderPrivate *d_ptr;

private:
inline QHttpHeaderPrivate* d_func() { return reinterpret_cast<QHttpHeaderPrivate *>(d_ptr); } inline const QHttpHeaderPrivate* d_func() const { return reinterpret_cast<const QHttpHeaderPrivate *>(d_ptr); } friend class QHttpHeaderPrivate;
};

class QHttpResponseHeaderPrivate;
class  QHttpResponseHeader : public QHttpHeader
{
public:
QHttpResponseHeader();
QHttpResponseHeader(const QHttpResponseHeader &header);
QHttpResponseHeader(const QString &str);
QHttpResponseHeader(int code, const QString &text = QString(), int majorVer = 1, int minorVer = 1);
QHttpResponseHeader &operator=(const QHttpResponseHeader &header);

void setStatusLine(int code, const QString &text = QString(), int majorVer = 1, int minorVer = 1);

int statusCode() const;
QString reasonPhrase() const;

int majorVersion() const;
int minorVersion() const;

QString toString() const;

protected:
bool parseLine(const QString &line, int number);

private:
inline QHttpResponseHeaderPrivate* d_func() { return reinterpret_cast<QHttpResponseHeaderPrivate *>(d_ptr); } inline const QHttpResponseHeaderPrivate* d_func() const { return reinterpret_cast<const QHttpResponseHeaderPrivate *>(d_ptr); } friend class QHttpResponseHeaderPrivate;
friend class QHttpPrivate;
};

class QHttpRequestHeaderPrivate;
class  QHttpRequestHeader : public QHttpHeader
{
public:
QHttpRequestHeader();
QHttpRequestHeader(const QString &method, const QString &path, int majorVer = 1, int minorVer = 1);
QHttpRequestHeader(const QHttpRequestHeader &header);
QHttpRequestHeader(const QString &str);
QHttpRequestHeader &operator=(const QHttpRequestHeader &header);

void setRequest(const QString &method, const QString &path, int majorVer = 1, int minorVer = 1);

QString method() const;
QString path() const;

int majorVersion() const;
int minorVersion() const;

QString toString() const;

protected:
bool parseLine(const QString &line, int number);

private:
inline QHttpRequestHeaderPrivate* d_func() { return reinterpret_cast<QHttpRequestHeaderPrivate *>(d_ptr); } inline const QHttpRequestHeaderPrivate* d_func() const { return reinterpret_cast<const QHttpRequestHeaderPrivate *>(d_ptr); } friend class QHttpRequestHeaderPrivate;
};

class  QHttp : public QObject
{
Q_OBJECT

public:
enum ConnectionMode {
ConnectionModeHttp,
ConnectionModeHttps
};

explicit QHttp(QObject *parent = 0);
QHttp(const QString &hostname, quint16 port = 80, QObject *parent = 0);
QHttp(const QString &hostname, ConnectionMode mode, quint16 port = 0, QObject *parent = 0);
virtual ~QHttp();

enum State {
Unconnected,
HostLookup,
Connecting,
Sending,
Reading,
Connected,
Closing
};
enum Error {
NoError,
UnknownError,
HostNotFound,
ConnectionRefused,
UnexpectedClose,
InvalidResponseHeader,
WrongContentLength,
Aborted, 
AuthenticationRequiredError,
ProxyAuthenticationRequiredError
};

int setHost(const QString &hostname, quint16 port = 80);
int setHost(const QString &hostname, ConnectionMode mode, quint16 port = 0);

int setSocket(QTcpSocket *socket);
int setUser(const QString &username, const QString &password = QString());


# 218 "/home/eagle/qt-copy/include/QtNetwork/qhttp.h"
int setProxy(const QString &host, int port,
const QString &username = QString(),
const QString &password = QString());
int setProxy(const QNetworkProxy &proxy);


# 224 "/home/eagle/qt-copy/include/QtNetwork/qhttp.h"
int get(const QString &path, QIODevice *to=0);
int post(const QString &path, QIODevice *data, QIODevice *to=0 );
int post(const QString &path, const QByteArray &data, QIODevice *to=0);
int head(const QString &path);
int request(const QHttpRequestHeader &header, QIODevice *device=0, QIODevice *to=0);
int request(const QHttpRequestHeader &header, const QByteArray &data, QIODevice *to=0);

int closeConnection();
int close();

qint64 bytesAvailable() const;
qint64 read(char *data, qint64 maxlen);




# 240 "/home/eagle/qt-copy/include/QtNetwork/qhttp.h"
QByteArray readAll();

int currentId() const;
QIODevice *currentSourceDevice() const;
QIODevice *currentDestinationDevice() const;
QHttpRequestHeader currentRequest() const;
QHttpResponseHeader lastResponse() const;
bool hasPendingRequests() const;
void clearPendingRequests();

State state() const;

Error error() const;
QString errorString() const;

public slots:
void abort();


# 259 "/home/eagle/qt-copy/include/QtNetwork/qhttp.h"
void ignoreSslErrors();


# 262 "/home/eagle/qt-copy/include/QtNetwork/qhttp.h"
signals:
void stateChanged(int);
void responseHeaderReceived(const QHttpResponseHeader &resp);
void readyRead(const QHttpResponseHeader &resp);


void dataSendProgress(int, int);
void dataReadProgress(int, int);

void requestStarted(int);
void requestFinished(int, bool);
void done(bool);


# 276 "/home/eagle/qt-copy/include/QtNetwork/qhttp.h"
void proxyAuthenticationRequired(const QNetworkProxy &proxy, QAuthenticator *);

# 278 "/home/eagle/qt-copy/include/QtNetwork/qhttp.h"
void authenticationRequired(const QString &hostname, quint16 port, QAuthenticator *);


# 281 "/home/eagle/qt-copy/include/QtNetwork/qhttp.h"
void sslErrors(const QList<QSslError> &errors);


# 284 "/home/eagle/qt-copy/include/QtNetwork/qhttp.h"
private:
QHttp(const QHttp &); QHttp &operator=(const QHttp &);
inline QHttpPrivate* d_func() { return reinterpret_cast<QHttpPrivate *>(d_ptr); } inline const QHttpPrivate* d_func() const { return reinterpret_cast<const QHttpPrivate *>(d_ptr); } friend class QHttpPrivate;










friend class QHttpNormalRequest;
friend class QHttpSetHostRequest;
friend class QHttpSetSocketRequest;
friend class QHttpSetUserRequest;
friend class QHttpSetProxyRequest;
friend class QHttpCloseRequest;
friend class QHttpPGHRequest;
};



# 308 "/home/eagle/qt-copy/include/QtNetwork/qhttp.h"





# 3 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qnetworkaccessmanager.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 1 "/home/eagle/qt-copy/include/QtCore/QObject"

# 47 "/home/eagle/qt-copy/include/QtNetwork/qnetworkaccessmanager.h"


# 49 "/home/eagle/qt-copy/include/QtNetwork/qnetworkaccessmanager.h"




typedef QtValidLicenseForNetworkModule QtNetworkModule;

class QIODevice;
class QAuthenticator;
class QByteArray;
template<typename T> class QList;
class QNetworkCookie;
class QNetworkCookieJar;
class QNetworkRequest;
class QNetworkReply;
class QNetworkProxy;
class QSslError;

class QNetworkReplyImplPrivate;
class QNetworkAccessManagerPrivate;
class  QNetworkAccessManager: public QObject
{
Q_OBJECT
public:
enum Operation {
HeadOperation = 1,
GetOperation,
PutOperation,
PostOperation,

UnknownOperation = 0
};

explicit QNetworkAccessManager(QObject *parent = 0);
~QNetworkAccessManager();


# 85 "/home/eagle/qt-copy/include/QtNetwork/qnetworkaccessmanager.h"
QNetworkProxy proxy() const;
void setProxy(const QNetworkProxy &proxy);


# 89 "/home/eagle/qt-copy/include/QtNetwork/qnetworkaccessmanager.h"
QNetworkCookieJar *cookieJar() const;
void setCookieJar(QNetworkCookieJar *cookieJar);

QNetworkReply *head(const QNetworkRequest &request);
QNetworkReply *get(const QNetworkRequest &request);
QNetworkReply *post(const QNetworkRequest &request, QIODevice *data);
QNetworkReply *post(const QNetworkRequest &request, const QByteArray &data);
QNetworkReply *put(const QNetworkRequest &request, QIODevice *data);
QNetworkReply *put(const QNetworkRequest &request, const QByteArray &data);

signals:

# 101 "/home/eagle/qt-copy/include/QtNetwork/qnetworkaccessmanager.h"
void proxyAuthenticationRequired(const QNetworkProxy &proxy, QAuthenticator *authenticator);

# 103 "/home/eagle/qt-copy/include/QtNetwork/qnetworkaccessmanager.h"
void authenticationRequired(QNetworkReply *reply, QAuthenticator *authenticator);
void finished(QNetworkReply *reply);

# 106 "/home/eagle/qt-copy/include/QtNetwork/qnetworkaccessmanager.h"
void sslErrors(QNetworkReply *reply, const QList<QSslError> &errors);


# 109 "/home/eagle/qt-copy/include/QtNetwork/qnetworkaccessmanager.h"
protected:
virtual QNetworkReply *createRequest(Operation op, const QNetworkRequest &request,
QIODevice *outgoingData = 0);

private:
friend class QNetworkReplyImplPrivate;
inline QNetworkAccessManagerPrivate* d_func() { return reinterpret_cast<QNetworkAccessManagerPrivate *>(d_ptr); } inline const QNetworkAccessManagerPrivate* d_func() const { return reinterpret_cast<const QNetworkAccessManagerPrivate *>(d_ptr); } friend class QNetworkAccessManagerPrivate;


};






# 4 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qnetworkcookie.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qshareddata.h"



































































































































































































































# 1 "/home/eagle/qt-copy/include/QtCore/QSharedDataPointer"

# 47 "/home/eagle/qt-copy/include/QtNetwork/qnetworkcookie.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qlist.h"











































































































































































































































































































































































































































































































































































































































































































# 1 "/home/eagle/qt-copy/include/QtCore/QList"

# 48 "/home/eagle/qt-copy/include/QtNetwork/qnetworkcookie.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"












































































































































































































































































































































# 1 "/home/eagle/qt-copy/include/QtCore/QMetaType"

# 49 "/home/eagle/qt-copy/include/QtNetwork/qnetworkcookie.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 1 "/home/eagle/qt-copy/include/QtCore/QObject"

# 50 "/home/eagle/qt-copy/include/QtNetwork/qnetworkcookie.h"


# 52 "/home/eagle/qt-copy/include/QtNetwork/qnetworkcookie.h"




typedef QtValidLicenseForNetworkModule QtNetworkModule;

class QByteArray;
class QDateTime;
class QString;
class QUrl;

class QNetworkCookiePrivate;
class  QNetworkCookie
{
public:
enum RawForm {
NameAndValueOnly,
Full
};

QNetworkCookie(const QByteArray &name = QByteArray(), const QByteArray &value = QByteArray());
QNetworkCookie(const QNetworkCookie &other);
~QNetworkCookie();
QNetworkCookie &operator=(const QNetworkCookie &other);
bool operator==(const QNetworkCookie &other) const;
inline bool operator!=(const QNetworkCookie &other) const
{ return !(*this == other); }

bool isSecure() const;
void setSecure(bool enable);

bool isSessionCookie() const;
QDateTime expirationDate() const;
void setExpirationDate(const QDateTime &date);

QString domain() const;
void setDomain(const QString &domain);

QString path() const;
void setPath(const QString &path);

QByteArray name() const;
void setName(const QByteArray &cookieName);

QByteArray value() const;
void setValue(const QByteArray &value);

QByteArray toRawForm(RawForm form = Full) const;

static QList<QNetworkCookie> parseCookies(const QByteArray &cookieString);

private:
QSharedDataPointer<QNetworkCookiePrivate> d;
friend class QNetworkCookiePrivate;
};
template <> class QTypeInfo<QNetworkCookie> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QNetworkCookie)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QNetworkCookie"; } };

class QNetworkCookieJarPrivate;
class  QNetworkCookieJar: public QObject
{
Q_OBJECT
public:
QNetworkCookieJar(QObject *parent = 0);
virtual ~QNetworkCookieJar();

virtual QList<QNetworkCookie> cookiesForUrl(const QUrl &url) const;
virtual bool setCookiesFromUrl(const QList<QNetworkCookie> &cookieList, const QUrl &url);

protected:
QList<QNetworkCookie> allCookies() const;
void setAllCookies(const QList<QNetworkCookie> &cookieList);

private:
inline QNetworkCookieJarPrivate* d_func() { return reinterpret_cast<QNetworkCookieJarPrivate *>(d_ptr); } inline const QNetworkCookieJarPrivate* d_func() const { return reinterpret_cast<const QNetworkCookieJarPrivate *>(d_ptr); } friend class QNetworkCookieJarPrivate;
QNetworkCookieJar(const QNetworkCookieJar &); QNetworkCookieJar &operator=(const QNetworkCookieJar &);
};


# 130 "/home/eagle/qt-copy/include/QtNetwork/qnetworkcookie.h"
class QDebug;
 QDebug operator<<(QDebug, const QNetworkCookie &);


# 134 "/home/eagle/qt-copy/include/QtNetwork/qnetworkcookie.h"


 template <> struct QMetaTypeId< QNetworkCookie > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (!metatype_id) metatype_id = qRegisterMetaType< QNetworkCookie >("QNetworkCookie"); return metatype_id; } }; 
 template <> struct QMetaTypeId< QList<QNetworkCookie> > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (!metatype_id) metatype_id = qRegisterMetaType< QList<QNetworkCookie> >("QList<QNetworkCookie>"); return metatype_id; } }; 




# 5 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qnetworkreply.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"






























































































































































































































































# 1 "/home/eagle/qt-copy/include/QtCore/QIODevice"

# 47 "/home/eagle/qt-copy/include/QtNetwork/qnetworkreply.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 1 "/home/eagle/qt-copy/include/QtCore/QString"

# 48 "/home/eagle/qt-copy/include/QtNetwork/qnetworkreply.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qvariant.h"






















































































































































































































































































































































































































































































































































































































# 1 "/home/eagle/qt-copy/include/QtCore/QVariant"

# 49 "/home/eagle/qt-copy/include/QtNetwork/qnetworkreply.h"


# 1 "/home/eagle/qt-copy/include/QtNetwork/qnetworkrequest.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qshareddata.h"



































































































































































































































# 1 "/home/eagle/qt-copy/include/QtCore/QSharedDataPointer"

# 47 "/home/eagle/qt-copy/include/QtNetwork/qnetworkrequest.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 1 "/home/eagle/qt-copy/include/QtCore/QString"

# 48 "/home/eagle/qt-copy/include/QtNetwork/qnetworkrequest.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qurl.h"



























































































































































































































































































# 1 "/home/eagle/qt-copy/include/QtCore/QUrl"

# 49 "/home/eagle/qt-copy/include/QtNetwork/qnetworkrequest.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qvariant.h"






















































































































































































































































































































































































































































































































































































































# 1 "/home/eagle/qt-copy/include/QtCore/QVariant"

# 50 "/home/eagle/qt-copy/include/QtNetwork/qnetworkrequest.h"


# 52 "/home/eagle/qt-copy/include/QtNetwork/qnetworkrequest.h"




typedef QtValidLicenseForNetworkModule QtNetworkModule;

class QSslConfiguration;

class QNetworkRequestPrivate;
class  QNetworkRequest
{
public:
enum KnownHeaders {
ContentTypeHeader,
ContentLengthHeader,
LocationHeader,
LastModifiedHeader,
CookieHeader,
SetCookieHeader
};
enum Attribute {
HttpStatusCodeAttribute,
HttpReasonPhraseAttribute,
RedirectionTargetAttribute,
ConnectionEncryptedAttribute,
CacheLoadControlAttribute,
CacheSaveControlAttribute,

User = 1000,
UserMax = 32767
};
enum CacheLoadControl {
AlwaysNetwork,
PreferNetwork,
PreferCache,
AlwaysCache
};

explicit QNetworkRequest(const QUrl &url = QUrl());
QNetworkRequest(const QNetworkRequest &other);
~QNetworkRequest();
QNetworkRequest &operator=(const QNetworkRequest &other);

bool operator==(const QNetworkRequest &other) const;
inline bool operator!=(const QNetworkRequest &other) const
{ return !operator==(other); }

QUrl url() const;
void setUrl(const QUrl &url);


QVariant header(KnownHeaders header) const;
void setHeader(KnownHeaders header, const QVariant &value);


bool hasRawHeader(const QByteArray &headerName) const;
QList<QByteArray> rawHeaderList() const;
QByteArray rawHeader(const QByteArray &headerName) const;
void setRawHeader(const QByteArray &headerName, const QByteArray &value);


QVariant attribute(Attribute code, const QVariant &defaultValue = QVariant()) const;
void setAttribute(Attribute code, const QVariant &value);


# 117 "/home/eagle/qt-copy/include/QtNetwork/qnetworkrequest.h"
QSslConfiguration sslConfiguration() const;
void setSslConfiguration(const QSslConfiguration &configuration);


# 121 "/home/eagle/qt-copy/include/QtNetwork/qnetworkrequest.h"
private:
QSharedDataPointer<QNetworkRequestPrivate> d;
friend class QNetworkRequestPrivate;
};



 template <> struct QMetaTypeId< QNetworkRequest > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (!metatype_id) metatype_id = qRegisterMetaType< QNetworkRequest >("QNetworkRequest"); return metatype_id; } }; 




# 1 "/home/eagle/qt-copy/include/QtNetwork/QNetworkRequest"

# 51 "/home/eagle/qt-copy/include/QtNetwork/qnetworkreply.h"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qnetworkaccessmanager.h"




























































































































# 1 "/home/eagle/qt-copy/include/QtNetwork/QNetworkAccessManager"

# 52 "/home/eagle/qt-copy/include/QtNetwork/qnetworkreply.h"


# 54 "/home/eagle/qt-copy/include/QtNetwork/qnetworkreply.h"




typedef QtValidLicenseForNetworkModule QtNetworkModule;

class QUrl;
class QVariant;
class QAuthenticator;
class QSslConfiguration;
class QSslError;

class QNetworkReplyPrivate;
class  QNetworkReply: public QIODevice
{
Q_OBJECT
Q_ENUMS(NetworkError)
public:
enum NetworkError {
NoError = 0,


ConnectionRefusedError = 1,
RemoteHostClosedError,
HostNotFoundError,
TimeoutError,
OperationCanceledError,
SslHandshakeFailedError,
UnknownNetworkError = 99,


ProxyConnectionRefusedError = 101,
ProxyConnectionClosedError,
ProxyNotFoundError,
ProxyTimeoutError,
ProxyAuthenticationRequiredError,
UnknownProxyError = 199,


ContentAccessDenied = 201,
ContentOperationNotPermittedError,
ContentNotFoundError,
AuthenticationRequiredError,
UnknownContentError = 299,


ProtocolUnknownError = 301,
ProtocolInvalidOperationError,
ProtocolFailure = 399
};

~QNetworkReply();
virtual void abort() = 0;


virtual void close();
virtual bool isSequential() const;


qint64 readBufferSize() const;
virtual void setReadBufferSize(qint64 size);

QNetworkAccessManager *manager() const;
QNetworkAccessManager::Operation operation() const;
QNetworkRequest request() const;
NetworkError error() const;
QUrl url() const;


QVariant header(QNetworkRequest::KnownHeaders header) const;


bool hasRawHeader(const QByteArray &headerName) const;
QList<QByteArray> rawHeaderList() const;
QByteArray rawHeader(const QByteArray &headerName) const;


QVariant attribute(QNetworkRequest::Attribute code) const;


# 134 "/home/eagle/qt-copy/include/QtNetwork/qnetworkreply.h"
QSslConfiguration sslConfiguration() const;
void setSslConfiguration(const QSslConfiguration &configuration);


# 138 "/home/eagle/qt-copy/include/QtNetwork/qnetworkreply.h"
public slots:
virtual void ignoreSslErrors();

signals:
void metaDataChanged();
void finished();
void error(QNetworkReply::NetworkError);

# 146 "/home/eagle/qt-copy/include/QtNetwork/qnetworkreply.h"
void sslErrors(const QList<QSslError> &errors);


# 149 "/home/eagle/qt-copy/include/QtNetwork/qnetworkreply.h"
void uploadProgress(qint64 bytesSent, qint64 bytesTotal);
void downloadProgress(qint64 bytesReceived, qint64 bytesTotal);

protected:
QNetworkReply(QObject *parent = 0);
QNetworkReply(QNetworkReplyPrivate &dd, QObject *parent);
virtual qint64 writeData(const char *data, qint64 len);

void setOperation(QNetworkAccessManager::Operation operation);
void setRequest(const QNetworkRequest &request);
void setError(NetworkError errorCode, const QString &errorString);
void setUrl(const QUrl &url);
void setHeader(QNetworkRequest::KnownHeaders header, const QVariant &value);
void setRawHeader(const QByteArray &headerName, const QByteArray &value);
void setAttribute(QNetworkRequest::Attribute code, const QVariant &value);

private:
inline QNetworkReplyPrivate* d_func() { return reinterpret_cast<QNetworkReplyPrivate *>(d_ptr); } inline const QNetworkReplyPrivate* d_func() const { return reinterpret_cast<const QNetworkReplyPrivate *>(d_ptr); } friend class QNetworkReplyPrivate;
};






# 6 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qnetworkrequest.h"




































































































































# 7 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qauthenticator.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtNetwork/qauthenticator.h"


# 49 "/home/eagle/qt-copy/include/QtNetwork/qauthenticator.h"




typedef QtValidLicenseForNetworkModule QtNetworkModule;

class QAuthenticatorPrivate;
class QUrl;

class  QAuthenticator
{
public:
QAuthenticator();
~QAuthenticator();

QAuthenticator(const QAuthenticator &other);
QAuthenticator &operator=(const QAuthenticator &other);

bool operator==(const QAuthenticator &other) const;
inline bool operator!=(const QAuthenticator &other) const { return !operator==(other); }

QString user() const;
void setUser(const QString &user);

QString password() const;
void setPassword(const QString &password);

QString realm() const;

bool isNull() const;
void detach();
private:
friend class QAuthenticatorPrivate;
QAuthenticatorPrivate *d;
};






# 8 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qhostaddress.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtNetwork/qhostaddress.h"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qabstractsocket.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"






























































































































































































































































# 47 "/home/eagle/qt-copy/include/QtNetwork/qabstractsocket.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtNetwork/qabstractsocket.h"


# 1 "/home/eagle/qt-copy/include/QtCore/qdebug.h"






































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtNetwork/qabstractsocket.h"



# 53 "/home/eagle/qt-copy/include/QtNetwork/qabstractsocket.h"




typedef QtValidLicenseForNetworkModule QtNetworkModule;

class QHostAddress;

# 61 "/home/eagle/qt-copy/include/QtNetwork/qabstractsocket.h"
class QNetworkProxy;

# 63 "/home/eagle/qt-copy/include/QtNetwork/qabstractsocket.h"
class QAbstractSocketPrivate;
class QAuthenticator;

class  QAbstractSocket : public QIODevice
{
Q_OBJECT
public:
enum SocketType {
TcpSocket,
UdpSocket,
UnknownSocketType = -1
};
enum NetworkLayerProtocol {
IPv4Protocol,
IPv6Protocol,
UnknownNetworkLayerProtocol = -1
};
enum SocketError {
ConnectionRefusedError,
RemoteHostClosedError,
HostNotFoundError,
SocketAccessError,
SocketResourceError,
SocketTimeoutError,
DatagramTooLargeError,
NetworkError,
AddressInUseError,
SocketAddressNotAvailableError,
UnsupportedSocketOperationError,
UnfinishedSocketOperationError,
ProxyAuthenticationRequiredError,
SslHandshakeFailedError,
UnknownSocketError = -1
};
enum SocketState {
UnconnectedState,
HostLookupState,
ConnectingState,
ConnectedState,
BoundState,
ListeningState,
ClosingState









# 114 "/home/eagle/qt-copy/include/QtNetwork/qabstractsocket.h"
};

QAbstractSocket(SocketType socketType, QObject *parent);
virtual ~QAbstractSocket();


void connectToHost(const QString &hostName, quint16 port, OpenMode mode = ReadWrite);
void connectToHost(const QHostAddress &address, quint16 port, OpenMode mode = ReadWrite);
void disconnectFromHost();

bool isValid() const;

qint64 bytesAvailable() const;
qint64 bytesToWrite() const;

bool canReadLine() const;

quint16 localPort() const;
QHostAddress localAddress() const;
quint16 peerPort() const;
QHostAddress peerAddress() const;
QString peerName() const;


qint64 readBufferSize() const;
void setReadBufferSize(qint64 size);

void abort();


int socketDescriptor() const;
bool setSocketDescriptor(int socketDescriptor, SocketState state = ConnectedState,
OpenMode openMode = ReadWrite);

SocketType socketType() const;
SocketState state() const;
SocketError error() const;


void close();
bool isSequential() const;
bool atEnd() const;
bool flush();



bool waitForConnected(int msecs = 30000);
bool waitForReadyRead(int msecs = 30000);
bool waitForBytesWritten(int msecs = 30000);
bool waitForDisconnected(int msecs = 30000);


# 166 "/home/eagle/qt-copy/include/QtNetwork/qabstractsocket.h"
void setProxy(const QNetworkProxy &networkProxy);
QNetworkProxy proxy() const;


# 170 "/home/eagle/qt-copy/include/QtNetwork/qabstractsocket.h"
signals:
void hostFound();
void connected();
void disconnected();
void stateChanged(QAbstractSocket::SocketState);
void error(QAbstractSocket::SocketError);

# 177 "/home/eagle/qt-copy/include/QtNetwork/qabstractsocket.h"
void proxyAuthenticationRequired(const QNetworkProxy &proxy, QAuthenticator *authenticator);


# 180 "/home/eagle/qt-copy/include/QtNetwork/qabstractsocket.h"
protected slots:
void connectToHostImplementation(const QString &hostName, quint16 port, OpenMode mode = ReadWrite);
void disconnectFromHostImplementation();

protected:
qint64 readData(char *data, qint64 maxlen);
qint64 readLineData(char *data, qint64 maxlen);
qint64 writeData(const char *data, qint64 len);

void setSocketState(SocketState state);
void setSocketError(SocketError socketError);
void setLocalPort(quint16 port);
void setLocalAddress(const QHostAddress &address);
void setPeerPort(quint16 port);
void setPeerAddress(const QHostAddress &address);
void setPeerName(const QString &name);

QAbstractSocket(SocketType socketType, QAbstractSocketPrivate &dd, QObject *parent = 0);

private:
inline QAbstractSocketPrivate* d_func() { return reinterpret_cast<QAbstractSocketPrivate *>(d_ptr); } inline const QAbstractSocketPrivate* d_func() const { return reinterpret_cast<const QAbstractSocketPrivate *>(d_ptr); } friend class QAbstractSocketPrivate;
QAbstractSocket(const QAbstractSocket &); QAbstractSocket &operator=(const QAbstractSocket &);































# 233 "/home/eagle/qt-copy/include/QtNetwork/qabstractsocket.h"
};


# 236 "/home/eagle/qt-copy/include/QtNetwork/qabstractsocket.h"
 QDebug operator<<(QDebug, QAbstractSocket::SocketError);
 QDebug operator<<(QDebug, QAbstractSocket::SocketState);


# 240 "/home/eagle/qt-copy/include/QtNetwork/qabstractsocket.h"





# 48 "/home/eagle/qt-copy/include/QtNetwork/qhostaddress.h"


# 50 "/home/eagle/qt-copy/include/QtNetwork/qhostaddress.h"
struct sockaddr;





typedef QtValidLicenseForNetworkModule QtNetworkModule;

class QHostAddressPrivate;

class  QIPv6Address
{
public:
inline quint8 &operator [](int index) { return c[index]; }
inline quint8 operator [](int index) const { return c[index]; }
quint8 c[16];
};

typedef QIPv6Address Q_IPV6ADDR;

class  QHostAddress
{
public:
enum SpecialAddress {
Null,
Broadcast,
LocalHost,
LocalHostIPv6,
Any,
AnyIPv6
};

QHostAddress();
explicit QHostAddress(quint32 ip4Addr);
explicit QHostAddress(quint8 *ip6Addr);
explicit QHostAddress(const Q_IPV6ADDR &ip6Addr);
explicit QHostAddress(const sockaddr *sockaddr);
explicit QHostAddress(const QString &address);
QHostAddress(const QHostAddress &copy);
QHostAddress(SpecialAddress address);
~QHostAddress();

QHostAddress &operator=(const QHostAddress &other);
QHostAddress &operator=(const QString &address);

void setAddress(quint32 ip4Addr);
void setAddress(quint8 *ip6Addr);
void setAddress(const Q_IPV6ADDR &ip6Addr);
void setAddress(const sockaddr *sockaddr);
bool setAddress(const QString &address);

QAbstractSocket::NetworkLayerProtocol protocol() const;
quint32 toIPv4Address() const;
Q_IPV6ADDR toIPv6Address() const;

QString toString() const;

QString scopeId() const;
void setScopeId(const QString &id);

bool operator ==(const QHostAddress &address) const;
bool operator ==(SpecialAddress address) const;
inline bool operator !=(const QHostAddress &address) const
{ return !operator==(address); }
inline bool operator !=(SpecialAddress address) const
{ return !operator==(address); }
bool isNull() const;
void clear();










# 128 "/home/eagle/qt-copy/include/QtNetwork/qhostaddress.h"
private:
QHostAddressPrivate *d;
};

inline bool operator ==(QHostAddress::SpecialAddress address1, const QHostAddress &address2)
{ return address2 == address1; }


# 136 "/home/eagle/qt-copy/include/QtNetwork/qhostaddress.h"
 QDebug operator<<(QDebug, const QHostAddress &);



# 140 "/home/eagle/qt-copy/include/QtNetwork/qhostaddress.h"
 uint qHash(const QHostAddress &key);


# 143 "/home/eagle/qt-copy/include/QtNetwork/qhostaddress.h"
 QDataStream &operator<<(QDataStream &, const QHostAddress &);
 QDataStream &operator>>(QDataStream &, QHostAddress &);


# 147 "/home/eagle/qt-copy/include/QtNetwork/qhostaddress.h"




# 9 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qhostinfo.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qlist.h"











































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtNetwork/qhostinfo.h"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qhostaddress.h"






















































































































































# 48 "/home/eagle/qt-copy/include/QtNetwork/qhostinfo.h"


# 50 "/home/eagle/qt-copy/include/QtNetwork/qhostinfo.h"




typedef QtValidLicenseForNetworkModule QtNetworkModule;

class QObject;
class QHostInfoPrivate;

class  QHostInfo
{
public:
enum HostInfoError {
NoError,
HostNotFound,
UnknownError
};

QHostInfo(int lookupId = -1);
QHostInfo(const QHostInfo &d);
QHostInfo &operator=(const QHostInfo &d);
~QHostInfo();

QString hostName() const;
void setHostName(const QString &name);

QList<QHostAddress> addresses() const;
void setAddresses(const QList<QHostAddress> &addresses);

HostInfoError error() const;
void setError(HostInfoError error);

QString errorString() const;
void setErrorString(const QString &errorString);

void setLookupId(int id);
int lookupId() const;

static int lookupHost(const QString &name, QObject *receiver, const char *member);
static void abortHostLookup(int lookupId);

static QHostInfo fromName(const QString &name);
static QString localHostName();

private:
QHostInfoPrivate *d;
};






# 10 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qnetworkinterface.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qshareddata.h"



































































































































































































































# 47 "/home/eagle/qt-copy/include/QtNetwork/qnetworkinterface.h"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qhostaddress.h"






















































































































































# 48 "/home/eagle/qt-copy/include/QtNetwork/qnetworkinterface.h"


# 50 "/home/eagle/qt-copy/include/QtNetwork/qnetworkinterface.h"




typedef QtValidLicenseForNetworkModule QtNetworkModule;

template<typename T> class QList;

class QNetworkAddressEntryPrivate;
class  QNetworkAddressEntry
{
public:
QNetworkAddressEntry();
QNetworkAddressEntry(const QNetworkAddressEntry &other);
QNetworkAddressEntry &operator=(const QNetworkAddressEntry &other);
~QNetworkAddressEntry();

QHostAddress ip() const;
void setIp(const QHostAddress &newIp);

QHostAddress netmask() const;
void setNetmask(const QHostAddress &newNetmask);

QHostAddress broadcast() const;
void setBroadcast(const QHostAddress &newBroadcast);

private:
QNetworkAddressEntryPrivate *d;
};

class QNetworkInterfacePrivate;
class  QNetworkInterface
{
public:
enum InterfaceFlag {
IsUp = 0x1,
IsRunning = 0x2,
CanBroadcast = 0x4,
IsLoopBack = 0x8,
IsPointToPoint = 0x10,
CanMulticast = 0x20
};
typedef QFlags<InterfaceFlag> InterfaceFlags;

QNetworkInterface();
QNetworkInterface(const QNetworkInterface &other);
QNetworkInterface &operator=(const QNetworkInterface &other);
~QNetworkInterface();

bool isValid() const;

QString name() const;
InterfaceFlags flags() const;
QString hardwareAddress() const;
QList<QNetworkAddressEntry> addressEntries() const;

static QNetworkInterface interfaceFromName(const QString &name);
static QNetworkInterface interfaceFromIndex(int index);
static QList<QNetworkInterface> allInterfaces();
static QList<QHostAddress> allAddresses();

private:
friend class QNetworkInterfacePrivate;
QSharedDataPointer<QNetworkInterfacePrivate> d;
};

inline QFlags<QNetworkInterface::InterfaceFlags::enum_type> operator|(QNetworkInterface::InterfaceFlags::enum_type f1, QNetworkInterface::InterfaceFlags::enum_type f2) { return QFlags<QNetworkInterface::InterfaceFlags::enum_type>(f1) | f2; } inline QFlags<QNetworkInterface::InterfaceFlags::enum_type> operator|(QNetworkInterface::InterfaceFlags::enum_type f1, QFlags<QNetworkInterface::InterfaceFlags::enum_type> f2) { return f2 | f1; }


# 119 "/home/eagle/qt-copy/include/QtNetwork/qnetworkinterface.h"
 QDebug operator<<(QDebug debug, const QNetworkInterface &networkInterface);


# 122 "/home/eagle/qt-copy/include/QtNetwork/qnetworkinterface.h"





# 11 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qnetworkproxy.h"














































# 1 "/home/eagle/qt-copy/include/QtNetwork/qhostaddress.h"






















































































































































# 47 "/home/eagle/qt-copy/include/QtNetwork/qnetworkproxy.h"




# 51 "/home/eagle/qt-copy/include/QtNetwork/qnetworkproxy.h"




typedef QtValidLicenseForNetworkModule QtNetworkModule;

class QNetworkProxyPrivate;

class  QNetworkProxy
{
inline QNetworkProxyPrivate* d_func() { return reinterpret_cast<QNetworkProxyPrivate *>(d_ptr); } inline const QNetworkProxyPrivate* d_func() const { return reinterpret_cast<const QNetworkProxyPrivate *>(d_ptr); } friend class QNetworkProxyPrivate;

public:
enum ProxyType {
DefaultProxy,
Socks5Proxy,
NoProxy,
HttpProxy,
HttpCachingProxy,
FtpCachingProxy
};

QNetworkProxy();
QNetworkProxy(ProxyType type, const QString &hostName = QString(), quint16 port = 0,
const QString &user = QString(), const QString &password = QString());
QNetworkProxy(const QNetworkProxy &other);
QNetworkProxy &operator=(const QNetworkProxy &other);
~QNetworkProxy();
bool operator==(const QNetworkProxy &other) const;
inline bool operator!=(const QNetworkProxy &other) const
{ return !(*this == other); }

void setType(QNetworkProxy::ProxyType type);
QNetworkProxy::ProxyType type() const;
bool isCachingProxy() const;
bool isTransparentProxy() const;

void setUser(const QString &userName);
QString user() const;

void setPassword(const QString &password);
QString password() const;

void setHostName(const QString &hostName);
QString hostName() const;

void setPort(quint16 port);
quint16 port() const;

static void setApplicationProxy(const QNetworkProxy &proxy);
static QNetworkProxy applicationProxy();

private:
QNetworkProxyPrivate *d_ptr;
};








# 12 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qurlinfo.h"





































































































































# 13 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qabstractsocket.h"




















































































































































































































































# 14 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qlocalserver.h"














































# 1 "/home/eagle/qt-copy/include/QtNetwork/qabstractsocket.h"




















































































































































































































































# 47 "/home/eagle/qt-copy/include/QtNetwork/qlocalserver.h"


# 49 "/home/eagle/qt-copy/include/QtNetwork/qlocalserver.h"




typedef QtValidLicenseForNetworkModule QtNetworkModule;



# 57 "/home/eagle/qt-copy/include/QtNetwork/qlocalserver.h"
class QLocalSocket;
class QLocalServerPrivate;

class  QLocalServer : public QObject
{
Q_OBJECT
inline QLocalServerPrivate* d_func() { return reinterpret_cast<QLocalServerPrivate *>(d_ptr); } inline const QLocalServerPrivate* d_func() const { return reinterpret_cast<const QLocalServerPrivate *>(d_ptr); } friend class QLocalServerPrivate;

signals:
void newConnection();

public:
QLocalServer(QObject *parent = 0);
~QLocalServer();

void close();
QString errorString() const;
virtual bool hasPendingConnections() const;
bool isListening() const;
bool listen(const QString &name);
int maxPendingConnections() const;
virtual QLocalSocket *nextPendingConnection();
QString serverName() const;
QString fullServerName() const;
QAbstractSocket::SocketError serverError() const;
void setMaxPendingConnections(int numConnections);
bool waitForNewConnection(int msec = 0, bool *timedOut = 0);

protected:
virtual void incomingConnection(quintptr socketDescriptor);

private:
QLocalServer(const QLocalServer &); QLocalServer &operator=(const QLocalServer &);





# 95 "/home/eagle/qt-copy/include/QtNetwork/qlocalserver.h"


# 97 "/home/eagle/qt-copy/include/QtNetwork/qlocalserver.h"
};



# 101 "/home/eagle/qt-copy/include/QtNetwork/qlocalserver.h"






# 15 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qlocalsocket.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"






























































































































































































































































# 47 "/home/eagle/qt-copy/include/QtNetwork/qlocalsocket.h"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qabstractsocket.h"




















































































































































































































































# 48 "/home/eagle/qt-copy/include/QtNetwork/qlocalsocket.h"


# 50 "/home/eagle/qt-copy/include/QtNetwork/qlocalsocket.h"




typedef QtValidLicenseForNetworkModule QtNetworkModule;



# 58 "/home/eagle/qt-copy/include/QtNetwork/qlocalsocket.h"
class QLocalSocketPrivate;

class  QLocalSocket : public QIODevice
{
Q_OBJECT
inline QLocalSocketPrivate* d_func() { return reinterpret_cast<QLocalSocketPrivate *>(d_ptr); } inline const QLocalSocketPrivate* d_func() const { return reinterpret_cast<const QLocalSocketPrivate *>(d_ptr); } friend class QLocalSocketPrivate;

public:
enum LocalSocketError
{
ConnectionRefusedError = QAbstractSocket::ConnectionRefusedError,
PeerClosedError = QAbstractSocket::RemoteHostClosedError,
ServerNotFoundError = QAbstractSocket::HostNotFoundError,
SocketAccessError = QAbstractSocket::SocketAccessError,
SocketResourceError = QAbstractSocket::SocketResourceError,
SocketTimeoutError = QAbstractSocket::SocketTimeoutError,
DatagramTooLargeError = QAbstractSocket::DatagramTooLargeError,
ConnectionError = QAbstractSocket::NetworkError,
UnsupportedSocketOperationError = QAbstractSocket::UnsupportedSocketOperationError,
UnknownSocketError = QAbstractSocket::UnknownSocketError
};

enum LocalSocketState
{
UnconnectedState = QAbstractSocket::UnconnectedState,
ConnectingState = QAbstractSocket::ConnectingState,
ConnectedState = QAbstractSocket::ConnectedState,
ClosingState = QAbstractSocket::ClosingState
};

QLocalSocket(QObject *parent = 0);
~QLocalSocket();

void connectToServer(const QString &name, OpenMode openMode = ReadWrite);
void disconnectFromServer();

QString serverName() const;
QString fullServerName() const;

void abort();
virtual bool isSequential() const;
virtual qint64 bytesAvailable() const;
virtual qint64 bytesToWrite() const;
virtual bool canReadLine() const;
virtual void close();
LocalSocketError error() const;
bool flush();
bool isValid() const;
qint64 readBufferSize() const;
void setReadBufferSize(qint64 size);

bool setSocketDescriptor(quintptr socketDescriptor,
LocalSocketState socketState = ConnectedState,
OpenMode openMode = ReadWrite);
quintptr socketDescriptor() const;

LocalSocketState state() const;
bool waitForBytesWritten(int msecs = 30000);
bool waitForConnected(int msecs = 30000);
bool waitForDisconnected(int msecs = 30000);
bool waitForReadyRead(int msecs = 30000);

signals:
void connected();
void disconnected();
void error(QLocalSocket::LocalSocketError socketError);
void stateChanged(QLocalSocket::LocalSocketState socketState);

protected:
virtual qint64 readData(char*, qint64);
virtual qint64 writeData(const char*, qint64);

private:
QLocalSocket(const QLocalSocket &); QLocalSocket &operator=(const QLocalSocket &);





# 137 "/home/eagle/qt-copy/include/QtNetwork/qlocalsocket.h"





# 142 "/home/eagle/qt-copy/include/QtNetwork/qlocalsocket.h"
};


# 1 "/home/eagle/qt-copy/include/QtCore/qdebug.h"






































































































































































































































































# 145 "/home/eagle/qt-copy/include/QtNetwork/qlocalsocket.h"

# 146 "/home/eagle/qt-copy/include/QtNetwork/qlocalsocket.h"
 QDebug operator<<(QDebug, QLocalSocket::LocalSocketError);
 QDebug operator<<(QDebug, QLocalSocket::LocalSocketState);




# 152 "/home/eagle/qt-copy/include/QtNetwork/qlocalsocket.h"





# 16 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qtcpserver.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtNetwork/qtcpserver.h"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qabstractsocket.h"




















































































































































































































































# 48 "/home/eagle/qt-copy/include/QtNetwork/qtcpserver.h"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qhostaddress.h"






















































































































































# 49 "/home/eagle/qt-copy/include/QtNetwork/qtcpserver.h"


# 51 "/home/eagle/qt-copy/include/QtNetwork/qtcpserver.h"




typedef QtValidLicenseForNetworkModule QtNetworkModule;

class QTcpServerPrivate;

# 59 "/home/eagle/qt-copy/include/QtNetwork/qtcpserver.h"
class QNetworkProxy;

# 61 "/home/eagle/qt-copy/include/QtNetwork/qtcpserver.h"
class QTcpSocket;

class  QTcpServer : public QObject
{
Q_OBJECT
public:
explicit QTcpServer(QObject *parent = 0);
virtual ~QTcpServer();

bool listen(const QHostAddress &address = QHostAddress::Any, quint16 port = 0);
void close();

bool isListening() const;

void setMaxPendingConnections(int numConnections);
int maxPendingConnections() const;

quint16 serverPort() const;
QHostAddress serverAddress() const;

int socketDescriptor() const;
bool setSocketDescriptor(int socketDescriptor);

bool waitForNewConnection(int msec = 0, bool *timedOut = 0);
virtual bool hasPendingConnections() const;
virtual QTcpSocket *nextPendingConnection();

QAbstractSocket::SocketError serverError() const;
QString errorString() const;


# 92 "/home/eagle/qt-copy/include/QtNetwork/qtcpserver.h"
void setProxy(const QNetworkProxy &networkProxy);
QNetworkProxy proxy() const;


# 96 "/home/eagle/qt-copy/include/QtNetwork/qtcpserver.h"
protected:
virtual void incomingConnection(int handle);

signals:
void newConnection();

private:
QTcpServer(const QTcpServer &); QTcpServer &operator=(const QTcpServer &);
inline QTcpServerPrivate* d_func() { return reinterpret_cast<QTcpServerPrivate *>(d_ptr); } inline const QTcpServerPrivate* d_func() const { return reinterpret_cast<const QTcpServerPrivate *>(d_ptr); } friend class QTcpServerPrivate;
};






# 17 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qtcpsocket.h"














































# 1 "/home/eagle/qt-copy/include/QtNetwork/qabstractsocket.h"




















































































































































































































































# 47 "/home/eagle/qt-copy/include/QtNetwork/qtcpsocket.h"


# 49 "/home/eagle/qt-copy/include/QtNetwork/qtcpsocket.h"




typedef QtValidLicenseForNetworkModule QtNetworkModule;

class QTcpSocketPrivate;

class  QTcpSocket : public QAbstractSocket
{
Q_OBJECT
public:
explicit QTcpSocket(QObject *parent = 0);
virtual ~QTcpSocket();

protected:
QTcpSocket(QTcpSocketPrivate &dd, QObject *parent = 0);

private:
QTcpSocket(const QTcpSocket &); QTcpSocket &operator=(const QTcpSocket &);
inline QTcpSocketPrivate* d_func() { return reinterpret_cast<QTcpSocketPrivate *>(d_ptr); } inline const QTcpSocketPrivate* d_func() const { return reinterpret_cast<const QTcpSocketPrivate *>(d_ptr); } friend class QTcpSocketPrivate;
};






# 18 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qudpsocket.h"














































# 1 "/home/eagle/qt-copy/include/QtNetwork/qabstractsocket.h"




















































































































































































































































# 47 "/home/eagle/qt-copy/include/QtNetwork/qudpsocket.h"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qhostaddress.h"






















































































































































# 48 "/home/eagle/qt-copy/include/QtNetwork/qudpsocket.h"


# 50 "/home/eagle/qt-copy/include/QtNetwork/qudpsocket.h"




typedef QtValidLicenseForNetworkModule QtNetworkModule;



# 58 "/home/eagle/qt-copy/include/QtNetwork/qudpsocket.h"
class QUdpSocketPrivate;

class  QUdpSocket : public QAbstractSocket
{
Q_OBJECT
public:
enum BindFlag {
DefaultForPlatform = 0x0,
ShareAddress = 0x1,
DontShareAddress = 0x2,
ReuseAddressHint = 0x4
};
typedef QFlags<BindFlag> BindMode;

explicit QUdpSocket(QObject *parent = 0);
virtual ~QUdpSocket();

bool bind(const QHostAddress &address, quint16 port);
bool bind(quint16 port = 0);
bool bind(const QHostAddress &address, quint16 port, BindMode mode);
bool bind(quint16 port, BindMode mode);


bool hasPendingDatagrams() const;
qint64 pendingDatagramSize() const;
qint64 readDatagram(char *data, qint64 maxlen, QHostAddress *host = 0, quint16 *port = 0);
qint64 writeDatagram(const char *data, qint64 len, const QHostAddress &host, quint16 port);
inline qint64 writeDatagram(const QByteArray &datagram, const QHostAddress &host, quint16 port)
{ return writeDatagram(datagram.constData(), datagram.size(), host, port); }

private:
QUdpSocket(const QUdpSocket &); QUdpSocket &operator=(const QUdpSocket &);
inline QUdpSocketPrivate* d_func() { return reinterpret_cast<QUdpSocketPrivate *>(d_ptr); } inline const QUdpSocketPrivate* d_func() const { return reinterpret_cast<const QUdpSocketPrivate *>(d_ptr); } friend class QUdpSocketPrivate;
};

inline QFlags<QUdpSocket::BindMode::enum_type> operator|(QUdpSocket::BindMode::enum_type f1, QUdpSocket::BindMode::enum_type f2) { return QFlags<QUdpSocket::BindMode::enum_type>(f1) | f2; } inline QFlags<QUdpSocket::BindMode::enum_type> operator|(QUdpSocket::BindMode::enum_type f1, QFlags<QUdpSocket::BindMode::enum_type> f2) { return f2 | f1; }



# 97 "/home/eagle/qt-copy/include/QtNetwork/qudpsocket.h"





# 19 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qssl.h"



























































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 60 "/home/eagle/qt-copy/include/QtNetwork/qssl.h"


# 62 "/home/eagle/qt-copy/include/QtNetwork/qssl.h"




typedef QtValidLicenseForNetworkModule QtNetworkModule;

namespace QSsl {
enum KeyType {
PrivateKey,
PublicKey
};

enum EncodingFormat {
Pem,
Der
};

enum KeyAlgorithm {
Rsa,
Dsa
};

enum AlternateNameEntryType {
EmailEntry,
DnsEntry
};

enum SslProtocol {
SslV3,
SslV2,
TlsV1,
AnyProtocol,
UnknownProtocol = -1
};
}






# 20 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qsslcertificate.h"



























































# 1 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 60 "/home/eagle/qt-copy/include/QtNetwork/qsslcertificate.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"












































































































































































































































































































































































































































































































































































































# 61 "/home/eagle/qt-copy/include/QtNetwork/qsslcertificate.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qcryptographichash.h"






















































































# 62 "/home/eagle/qt-copy/include/QtNetwork/qsslcertificate.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qregexp.h"

























































































































































# 63 "/home/eagle/qt-copy/include/QtNetwork/qsslcertificate.h"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qssl.h"






































































































# 64 "/home/eagle/qt-copy/include/QtNetwork/qsslcertificate.h"


# 66 "/home/eagle/qt-copy/include/QtNetwork/qsslcertificate.h"
typedef struct x509_st X509; 





typedef QtValidLicenseForNetworkModule QtNetworkModule;



# 76 "/home/eagle/qt-copy/include/QtNetwork/qsslcertificate.h"
class QDateTime;
class QIODevice;
class QSslKey;
class QStringList;
template <typename T, typename U> class QMultiMap;

class QSslCertificatePrivate;
class  QSslCertificate
{
public:
enum SubjectInfo {
Organization,
CommonName,
LocalityName,
OrganizationalUnitName,
CountryName,
StateOrProvinceName
};

QSslCertificate(QIODevice *device, QSsl::EncodingFormat format = QSsl::Pem);
QSslCertificate( 
const QByteArray &encoded = QByteArray(), QSsl::EncodingFormat format = QSsl::Pem);
QSslCertificate(const QSslCertificate &other);
~QSslCertificate();
QSslCertificate &operator=(const QSslCertificate &other);
bool operator==(const QSslCertificate &other) const;
inline bool operator!=(const QSslCertificate &other) const { return !operator==(other); }

bool isNull() const;
bool isValid() const;
void clear();


QByteArray version() const;
QByteArray serialNumber() const;
QByteArray digest(QCryptographicHash::Algorithm algorithm = QCryptographicHash::Md5) const;
QString issuerInfo(SubjectInfo info) const;
QString issuerInfo(const QByteArray &tag) const;
QString subjectInfo(SubjectInfo info) const;
QString subjectInfo(const QByteArray &tag) const;
QMultiMap<QSsl::AlternateNameEntryType, QString> alternateSubjectNames() const;
QDateTime effectiveDate() const;
QDateTime expiryDate() const;
QSslKey publicKey() const;

QByteArray toPem() const;
QByteArray toDer() const;

static QList<QSslCertificate> fromPath(
const QString &path, QSsl::EncodingFormat format = QSsl::Pem,
QRegExp::PatternSyntax syntax = QRegExp::FixedString);
static QList<QSslCertificate> fromDevice(
QIODevice *device, QSsl::EncodingFormat format = QSsl::Pem);
static QList<QSslCertificate> fromData(
const QByteArray &data, QSsl::EncodingFormat format = QSsl::Pem);

Qt::HANDLE handle() const;

private:
QSslCertificatePrivate *d;
friend class QSslCertificatePrivate;
friend class QSslSocketBackendPrivate;
};


# 141 "/home/eagle/qt-copy/include/QtNetwork/qsslcertificate.h"
class QDebug;
 QDebug operator<<(QDebug debug, const QSslCertificate &certificate);
 QDebug operator<<(QDebug debug, QSslCertificate::SubjectInfo info);




# 148 "/home/eagle/qt-copy/include/QtNetwork/qsslcertificate.h"





# 21 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qsslcipher.h"



























































# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 60 "/home/eagle/qt-copy/include/QtNetwork/qsslcipher.h"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qssl.h"






































































































# 61 "/home/eagle/qt-copy/include/QtNetwork/qsslcipher.h"


# 63 "/home/eagle/qt-copy/include/QtNetwork/qsslcipher.h"




typedef QtValidLicenseForNetworkModule QtNetworkModule;



# 71 "/home/eagle/qt-copy/include/QtNetwork/qsslcipher.h"
class QSslCipherPrivate;
class  QSslCipher
{
public:
QSslCipher();
QSslCipher(const QString &name, QSsl::SslProtocol protocol);
QSslCipher(const QSslCipher &other);
~QSslCipher();
QSslCipher &operator=(const QSslCipher &other);
bool operator==(const QSslCipher &other) const;
inline bool operator!=(const QSslCipher &other) const { return !operator==(other); }

bool isNull() const;
QString name() const;
int supportedBits() const;
int usedBits() const;

QString keyExchangeMethod() const;
QString authenticationMethod() const;
QString encryptionMethod() const;
QString protocolString() const;
QSsl::SslProtocol protocol() const;

private:
QSslCipherPrivate *d;
friend class QSslSocketBackendPrivate;
};


# 100 "/home/eagle/qt-copy/include/QtNetwork/qsslcipher.h"
class QDebug;
 QDebug operator<<(QDebug debug, const QSslCipher &cipher);




# 106 "/home/eagle/qt-copy/include/QtNetwork/qsslcipher.h"






# 22 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qsslconfiguration.h"





























































# 1 "/home/eagle/qt-copy/include/QtNetwork/qsslsocket.h"



























































# 1 "/home/eagle/qt-copy/include/QtCore/qlist.h"











































































































































































































































































































































































































































































































































































































































































































# 60 "/home/eagle/qt-copy/include/QtNetwork/qsslsocket.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qregexp.h"

























































































































































# 61 "/home/eagle/qt-copy/include/QtNetwork/qsslsocket.h"


# 1 "/home/eagle/qt-copy/include/QtNetwork/qtcpsocket.h"












































































# 63 "/home/eagle/qt-copy/include/QtNetwork/qsslsocket.h"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qsslerror.h"



























































# 1 "/home/eagle/qt-copy/include/QtCore/qvariant.h"






















































































































































































































































































































































































































































































































































































































# 60 "/home/eagle/qt-copy/include/QtNetwork/qsslerror.h"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qsslcertificate.h"
























































































































































# 61 "/home/eagle/qt-copy/include/QtNetwork/qsslerror.h"


# 63 "/home/eagle/qt-copy/include/QtNetwork/qsslerror.h"




typedef QtValidLicenseForNetworkModule QtNetworkModule;



# 71 "/home/eagle/qt-copy/include/QtNetwork/qsslerror.h"
class QSslErrorPrivate;
class  QSslError
{
public:
enum SslError {
NoError,
UnableToGetIssuerCertificate,
UnableToDecryptCertificateSignature,
UnableToDecodeIssuerPublicKey,
CertificateSignatureFailed,
CertificateNotYetValid,
CertificateExpired,
InvalidNotBeforeField,
InvalidNotAfterField,
SelfSignedCertificate,
SelfSignedCertificateInChain,
UnableToGetLocalIssuerCertificate,
UnableToVerifyFirstCertificate,
CertificateRevoked,
InvalidCaCertificate,
PathLengthExceeded,
InvalidPurpose,
CertificateUntrusted,
CertificateRejected,
SubjectIssuerMismatch, 
AuthorityIssuerSerialNumberMismatch,
NoPeerCertificate,
HostNameMismatch,
NoSslSupport,
UnspecifiedError = -1
};

QSslError(SslError error = NoError, const QSslCertificate &certificate = QSslCertificate());
QSslError(const QSslError &other);
~QSslError();
QSslError &operator=(const QSslError &other);
bool operator==(const QSslError &other) const;
inline bool operator!=(const QSslError &other) const
{ return !(*this == other); }

SslError error() const;
QString errorString() const;
QSslCertificate certificate() const;

private:
QSslErrorPrivate *d;
};


# 120 "/home/eagle/qt-copy/include/QtNetwork/qsslerror.h"
class QDebug;
 QDebug operator<<(QDebug debug, const QSslError &error);
 QDebug operator<<(QDebug debug, const QSslError::SslError &error);




# 127 "/home/eagle/qt-copy/include/QtNetwork/qsslerror.h"





# 64 "/home/eagle/qt-copy/include/QtNetwork/qsslsocket.h"



# 67 "/home/eagle/qt-copy/include/QtNetwork/qsslsocket.h"




typedef QtValidLicenseForNetworkModule QtNetworkModule;



# 75 "/home/eagle/qt-copy/include/QtNetwork/qsslsocket.h"
class QDir;
class QSslCipher;
class QSslCertificate;
class QSslConfiguration;

class QSslSocketPrivate;
class  QSslSocket : public QTcpSocket
{
Q_OBJECT
public:
enum SslMode {
UnencryptedMode,
SslClientMode,
SslServerMode
};

enum PeerVerifyMode {
VerifyNone,
QueryPeer,
VerifyPeer,
AutoVerifyPeer
};

QSslSocket(QObject *parent = 0);
~QSslSocket();


void connectToHostEncrypted(const QString &hostName, quint16 port, OpenMode mode = ReadWrite);
bool setSocketDescriptor(int socketDescriptor, SocketState state = ConnectedState,
OpenMode openMode = ReadWrite);

SslMode mode() const;
bool isEncrypted() const;

QSsl::SslProtocol protocol() const;
void setProtocol(QSsl::SslProtocol protocol);

QSslSocket::PeerVerifyMode peerVerifyMode() const;
void setPeerVerifyMode(QSslSocket::PeerVerifyMode mode);

int peerVerifyDepth() const;
void setPeerVerifyDepth(int depth);


qint64 bytesAvailable() const;
qint64 bytesToWrite() const;
bool canReadLine() const;
void close();
bool atEnd() const;
bool flush();
void abort();


void setReadBufferSize(qint64 size);


qint64 encryptedBytesAvailable() const;
qint64 encryptedBytesToWrite() const;


QSslConfiguration sslConfiguration() const;
void setSslConfiguration(const QSslConfiguration &config);


void setLocalCertificate(const QSslCertificate &certificate);
void setLocalCertificate(const QString &fileName, QSsl::EncodingFormat format = QSsl::Pem);
QSslCertificate localCertificate() const;
QSslCertificate peerCertificate() const;
QList<QSslCertificate> peerCertificateChain() const;
QSslCipher sessionCipher() const;


void setPrivateKey(const QSslKey &key);
void setPrivateKey(const QString &fileName, QSsl::KeyAlgorithm algorithm = QSsl::Rsa,
QSsl::EncodingFormat format = QSsl::Pem,
const QByteArray &passPhrase = QByteArray());
QSslKey privateKey() const;


QList<QSslCipher> ciphers() const;
void setCiphers(const QList<QSslCipher> &ciphers);
void setCiphers(const QString &ciphers);
static void setDefaultCiphers(const QList<QSslCipher> &ciphers);
static QList<QSslCipher> defaultCiphers();
static QList<QSslCipher> supportedCiphers();


bool addCaCertificates(const QString &path, QSsl::EncodingFormat format = QSsl::Pem,
QRegExp::PatternSyntax syntax = QRegExp::FixedString);
void addCaCertificate(const QSslCertificate &certificate);
void addCaCertificates(const QList<QSslCertificate> &certificates);
void setCaCertificates(const QList<QSslCertificate> &certificates);
QList<QSslCertificate> caCertificates() const;
static bool addDefaultCaCertificates(const QString &path, QSsl::EncodingFormat format = QSsl::Pem,
QRegExp::PatternSyntax syntax = QRegExp::FixedString);
static void addDefaultCaCertificate(const QSslCertificate &certificate);
static void addDefaultCaCertificates(const QList<QSslCertificate> &certificates);
static void setDefaultCaCertificates(const QList<QSslCertificate> &certificates);
static QList<QSslCertificate> defaultCaCertificates();
static QList<QSslCertificate> systemCaCertificates();

bool waitForConnected(int msecs = 30000);
bool waitForEncrypted(int msecs = 30000);
bool waitForReadyRead(int msecs = 30000);
bool waitForBytesWritten(int msecs = 30000);
bool waitForDisconnected(int msecs = 30000);

QList<QSslError> sslErrors() const;

static bool supportsSsl();

public slots:
void startClientEncryption();
void startServerEncryption();
void ignoreSslErrors();

signals:
void encrypted();
void peerVerifyError(const QSslError &error);
void sslErrors(const QList<QSslError> &errors);
void modeChanged(QSslSocket::SslMode newMode);
void encryptedBytesWritten(qint64 totalBytes);

protected slots:
void connectToHostImplementation(const QString &hostName, quint16 port,
OpenMode openMode);
void disconnectFromHostImplementation();

protected:
qint64 readData(char *data, qint64 maxlen);
qint64 writeData(const char *data, qint64 len);

private:
inline QSslSocketPrivate* d_func() { return reinterpret_cast<QSslSocketPrivate *>(d_ptr); } inline const QSslSocketPrivate* d_func() const { return reinterpret_cast<const QSslSocketPrivate *>(d_ptr); } friend class QSslSocketPrivate;
QSslSocket(const QSslSocket &); QSslSocket &operator=(const QSslSocket &);








friend class QSslSocketBackendPrivate;
};



# 223 "/home/eagle/qt-copy/include/QtNetwork/qsslsocket.h"



# 226 "/home/eagle/qt-copy/include/QtNetwork/qsslsocket.h"
 template <> struct QMetaTypeId< QList<QSslError> > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (!metatype_id) metatype_id = qRegisterMetaType< QList<QSslError> >("QList<QSslError>"); return metatype_id; } }; 


# 229 "/home/eagle/qt-copy/include/QtNetwork/qsslsocket.h"



# 62 "/home/eagle/qt-copy/include/QtNetwork/qsslconfiguration.h"


# 64 "/home/eagle/qt-copy/include/QtNetwork/qsslconfiguration.h"




typedef QtValidLicenseForNetworkModule QtNetworkModule;



# 72 "/home/eagle/qt-copy/include/QtNetwork/qsslconfiguration.h"
template<typename T> class QList;
class QSslCertificate;
class QSslCipher;
class QSslKey;

class QSslConfigurationPrivate;
class  QSslConfiguration
{
public:
QSslConfiguration();
QSslConfiguration(const QSslConfiguration &other);
~QSslConfiguration();
QSslConfiguration &operator=(const QSslConfiguration &other);

bool operator==(const QSslConfiguration &other) const;
inline bool operator!=(const QSslConfiguration &other) const
{ return !(*this == other); }

bool isNull() const;

QSsl::SslProtocol protocol() const;
void setProtocol(QSsl::SslProtocol protocol);


QSslSocket::PeerVerifyMode peerVerifyMode() const;
void setPeerVerifyMode(QSslSocket::PeerVerifyMode mode);

int peerVerifyDepth() const;
void setPeerVerifyDepth(int depth);


QSslCertificate localCertificate() const;
void setLocalCertificate(const QSslCertificate &certificate);

QSslCertificate peerCertificate() const;
QList<QSslCertificate> peerCertificateChain() const;
QSslCipher sessionCipher() const;


QSslKey privateKey() const;
void setPrivateKey(const QSslKey &key);


QList<QSslCipher> ciphers() const;
void setCiphers(const QList<QSslCipher> &ciphers);


QList<QSslCertificate> caCertificates() const;
void setCaCertificates(const QList<QSslCertificate> &certificates);

static QSslConfiguration defaultConfiguration();
static void setDefaultConfiguration(const QSslConfiguration &configuration);

private:
friend class QSslSocket;
friend class QSslConfigurationPrivate;
QSslConfiguration(QSslConfigurationPrivate *dd);
QSslConfigurationPrivate *d;
};



# 134 "/home/eagle/qt-copy/include/QtNetwork/qsslconfiguration.h"





# 23 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qsslerror.h"



































































































































# 24 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qsslkey.h"



























































# 1 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 60 "/home/eagle/qt-copy/include/QtNetwork/qsslkey.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"












































































































































































































































































































































































































































































































































































































# 61 "/home/eagle/qt-copy/include/QtNetwork/qsslkey.h"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qssl.h"






































































































# 62 "/home/eagle/qt-copy/include/QtNetwork/qsslkey.h"


# 64 "/home/eagle/qt-copy/include/QtNetwork/qsslkey.h"




typedef QtValidLicenseForNetworkModule QtNetworkModule;



# 72 "/home/eagle/qt-copy/include/QtNetwork/qsslkey.h"
template <typename A, typename B> struct QPair;

class QIODevice;

class QSslKeyPrivate;
class  QSslKey
{
public:
QSslKey();
QSslKey(const QByteArray &encoded, QSsl::KeyAlgorithm algorithm,
QSsl::EncodingFormat format = QSsl::Pem,
QSsl::KeyType type = QSsl::PrivateKey,
const QByteArray &passPhrase = QByteArray());
QSslKey(QIODevice *device, QSsl::KeyAlgorithm algorithm,
QSsl::EncodingFormat format = QSsl::Pem,
QSsl::KeyType type = QSsl::PrivateKey,
const QByteArray &passPhrase = QByteArray());
QSslKey(const QSslKey &other);
~QSslKey();
QSslKey &operator=(const QSslKey &other);

bool isNull() const;
void clear();

int length() const;
QSsl::KeyType type() const;
QSsl::KeyAlgorithm algorithm() const;

QByteArray toPem(const QByteArray &passPhrase = QByteArray()) const;
QByteArray toDer(const QByteArray &passPhrase = QByteArray()) const;

Qt::HANDLE handle() const;

bool operator==(const QSslKey &key) const;
inline bool operator!=(const QSslKey &key) const { return !operator==(key); }

private:
QSslKeyPrivate *d;
friend class QSslCertificate;
};


# 114 "/home/eagle/qt-copy/include/QtNetwork/qsslkey.h"
class QDebug;
 QDebug operator<<(QDebug debug, const QSslKey &key);




# 120 "/home/eagle/qt-copy/include/QtNetwork/qsslkey.h"





# 25 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qsslsocket.h"







































































































































































































































# 26 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 27 "qtscript_masterinclude.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextcodec.h"





























































































































































































# 1 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextcodecplugin.h"


































































































# 2 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuture.h"
























































































































































































































































































# 3 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfutureinterface.h"























































































































































































































































































































# 4 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuturesynchronizer.h"
























































































































# 5 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuturewatcher.h"
































































































































































































































# 6 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qrunnable.h"










































































# 7 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentcompilertest.h"









































































# 8 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentexception.h"


































































































































# 9 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfilter.h"


































































































































































































































































































































































































































































































































































































































































































































































# 10 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfilterkernel.h"















































































































































































































































































































































# 11 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfunctionwrappers.h"















































































































































































# 12 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentiteratekernel.h"

















































































































































































































































































































# 13 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmap.h"















































































































































































































































































































































































































































































































































































































































































































































































































# 14 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmapkernel.h"










































































































































































































































































# 15 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmedian.h"




































































































































# 16 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentreducekernel.h"
























































































































































































































































# 17 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentresultstore.h"











































































































































































































































# 18 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentrun.h"











































































































































































































































































































# 19 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentrunbase.h"



































































































































# 20 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentstoredfunctioncall.h"


















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 21 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentthreadengine.h"



















































































































































































































































































































# 22 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qthreadpool.h"
































































































# 23 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qendian.h"










































































































































































































































































































































# 24 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





























































































































































































































































































# 286 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 291 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 296 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 301 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 306 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 311 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 316 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 321 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 326 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 331 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 336 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 341 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 346 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 351 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 356 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 361 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 366 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 371 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 376 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 381 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 386 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 391 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 396 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 401 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 406 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 411 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 416 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 421 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 426 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 431 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 436 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 441 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 446 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 451 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 456 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 461 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 466 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 471 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 476 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 481 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 486 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 491 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 496 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 501 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 506 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 511 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 516 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 521 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 526 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 531 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 536 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 541 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 546 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 551 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 556 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 561 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 566 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 571 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 576 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 581 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 586 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 591 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 596 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 601 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 606 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 611 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 616 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 621 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 626 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 631 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 636 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 641 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 646 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 651 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 656 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 661 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 666 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 671 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 676 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 681 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 686 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 691 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 696 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 701 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 706 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 711 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 716 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 721 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 726 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 731 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 736 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 741 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 746 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 751 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 756 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 761 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 766 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 771 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 776 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 781 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 786 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 25 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 26 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlibraryinfo.h"



























































































# 27 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 28 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qnumeric.h"









































































# 29 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstractfileengine.h"

























































































































































































































































# 30 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbuffer.h"














































































































# 31 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdatastream.h"









































































































































































































































































































































































































































# 32 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdebug.h"






































































































































































































































































# 33 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdir.h"










































































































































































































































































# 34 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdiriterator.h"



































































































# 35 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfile.h"














































































































































































































# 36 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfileinfo.h"





























































































































































































# 37 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfilesystemwatcher.h"



























































































# 38 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfsfileengine.h"



























































































































# 39 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"






























































































































































































































































# 40 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qprocess.h"












































































































































































































# 41 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qresource.h"










































































































# 42 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsettings.h"





















































































































































































































































































































# 43 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtemporaryfile.h"














































































































# 44 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextstream.h"



















































































































































































































































































































































































# 45 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qurl.h"



























































































































































































































































































# 46 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstracteventdispatcher.h"













































































































# 47 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstractitemmodel.h"

































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbasictimer.h"












































































# 49 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcoreapplication.h"












































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcoreevent.h"




































































































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qeventloop.h"






































































































# 52 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmath.h"



































































































































# 53 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmetaobject.h"










































































































































































# 54 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"












































































































































































































































































































































# 55 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmimedata.h"










































































































# 56 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 57 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qobjectcleanuphandler.h"
















































































# 58 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qobjectdefs.h"











































































































































































































































































































































































































# 59 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpointer.h"


















































































































































# 60 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsharedmemory.h"

























































































































# 61 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsignalmapper.h"






































































































# 62 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsocketnotifier.h"































































































# 63 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsystemsemaphore.h"








































































































# 64 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtimer.h"






















































































































# 65 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtranslator.h"




































































































# 66 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qvariant.h"






















































































































































































































































































































































































































































































































































































































# 67 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfactoryinterface.h"





































































# 68 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlibrary.h"


























































































































# 69 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qplugin.h"
















































































































# 70 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpluginloader.h"






































































































# 71 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/quuid.h"
































































































































































































# 72 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qatomic.h"

























































































































































































































# 73 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbasicatomic.h"




















































































































































































































# 74 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmutex.h"



































































































































































































# 75 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qreadwritelock.h"






















































































































































































































































# 76 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsemaphore.h"





















































































# 77 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qthread.h"




































































































































































# 78 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qthreadstorage.h"































































































































































# 79 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qwaitcondition.h"











































































































# 80 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qalgorithms.h"

















































































































































































































































































































































































































































































































































































# 81 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbitarray.h"
















































































































































































# 82 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"












































































































































































































































































































































































































































































































































































































# 83 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbytearraymatcher.h"


















































































# 84 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcache.h"


























































































































































































































# 85 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qchar.h"















































































































































































































































































































































































































# 86 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcontainerfwd.h"









































































# 87 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcryptographichash.h"






















































































# 88 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"



































































































































































































































































































































# 89 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qhash.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 90 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qiterator.h"








































































# 91 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qline.h"


































































































































































































































































































































































































































# 92 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlinkedlist.h"
























































































































































































































































































































































































































































































































# 93 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlist.h"











































































































































































































































































































































































































































































































































































































































































































# 94 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlocale.h"






















































































































































































































































































































































































































































































































































































































































































# 95 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmap.h"






















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 96 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpair.h"

































































































































# 97 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpoint.h"






































































































































































































































































































































































# 98 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qqueue.h"







































































# 99 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qrect.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































# 100 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qregexp.h"

























































































































































# 101 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qset.h"


































































































































































































































































































































































# 102 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qshareddata.h"



































































































































































































































# 103 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsize.h"






































































































































































































































































































































































# 104 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstack.h"




















































































# 105 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 106 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"
















































































































































































































































# 107 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstringmatcher.h"




























































































# 108 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextboundaryfinder.h"




















































































































# 109 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtimeline.h"
















































































































































# 110 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qvarlengtharray.h"













































































































































































































































# 111 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qvector.h"































































































































































































































































































































































































































































































































































































































































































































































































# 112 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qxmlstream.h"













































































































































































































































































































































































































































































# 113 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtSql/QtSql"

# 1 "/home/eagle/qt-copy/include/QtSql/qsql.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtSql/qsql.h"


# 49 "/home/eagle/qt-copy/include/QtSql/qsql.h"




typedef QtValidLicenseForSqlModule QtSqlModule;

namespace QSql
{
enum Location
{
BeforeFirstRow = -1,
AfterLastRow = -2




# 65 "/home/eagle/qt-copy/include/QtSql/qsql.h"
};

enum ParamTypeFlag
{
In = 0x00000001,
Out = 0x00000002,
InOut = In | Out,
Binary = 0x00000004
};
typedef QFlags<ParamTypeFlag> ParamType;

enum TableType
{
Tables = 0x01,
SystemTables = 0x02,
Views = 0x04,
AllTables = 0xff
};

enum NumericalPrecisionPolicy
{
LowPrecisionInt32 = 0x01,
LowPrecisionInt64 = 0x02,
LowPrecisionDouble = 0x04,

HighPrecision = 0
};















# 107 "/home/eagle/qt-copy/include/QtSql/qsql.h"
}

inline QFlags<QSql::ParamType::enum_type> operator|(QSql::ParamType::enum_type f1, QSql::ParamType::enum_type f2) { return QFlags<QSql::ParamType::enum_type>(f1) | f2; } inline QFlags<QSql::ParamType::enum_type> operator|(QSql::ParamType::enum_type f1, QFlags<QSql::ParamType::enum_type> f2) { return f2 | f1; }






# 2 "/home/eagle/qt-copy/include/QtSql/QtSql"

# 1 "/home/eagle/qt-copy/include/QtSql/qsqldatabase.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtSql/qsqldatabase.h"

# 1 "/home/eagle/qt-copy/include/QtSql/qsql.h"



















































































































# 48 "/home/eagle/qt-copy/include/QtSql/qsqldatabase.h"





# 53 "/home/eagle/qt-copy/include/QtSql/qsqldatabase.h"




typedef QtValidLicenseForSqlModule QtSqlModule;

class QSqlError;
class QSqlDriver;
class QSqlIndex;
class QSqlRecord;
class QSqlQuery;
class QSqlDatabasePrivate;

class  QSqlDriverCreatorBase
{
public:
virtual ~QSqlDriverCreatorBase() {}
virtual QSqlDriver *createObject() const = 0;
};

template <class T>
class QSqlDriverCreator : public QSqlDriverCreatorBase
{
public:
QSqlDriver *createObject() const { return new T; }
};

class  QSqlDatabase
{
public:
QSqlDatabase();
QSqlDatabase(const QSqlDatabase &other);
~QSqlDatabase();

QSqlDatabase &operator=(const QSqlDatabase &other);

bool open();
bool open(const QString& user, const QString& password);
void close();
bool isOpen() const;
bool isOpenError() const;
QStringList tables(QSql::TableType type = QSql::Tables) const;
QSqlIndex primaryIndex(const QString& tablename) const;
QSqlRecord record(const QString& tablename) const;






# 103 "/home/eagle/qt-copy/include/QtSql/qsqldatabase.h"
QSqlQuery exec(const QString& query = QString()) const;
QSqlError lastError() const;
bool isValid() const;

bool transaction();
bool commit();
bool rollback();

void setDatabaseName(const QString& name);
void setUserName(const QString& name);
void setPassword(const QString& password);
void setHostName(const QString& host);
void setPort(int p);
void setConnectOptions(const QString& options = QString());
QString databaseName() const;
QString userName() const;
QString password() const;
QString hostName() const;
QString driverName() const;
int port() const;
QString connectOptions() const;
QString connectionName() const;

QSqlDriver* driver() const;

static const char *defaultConnection;

static QSqlDatabase addDatabase(const QString& type,
const QString& connectionName = QLatin1String(defaultConnection));
static QSqlDatabase addDatabase(QSqlDriver* driver,
const QString& connectionName = QLatin1String(defaultConnection));
static QSqlDatabase cloneDatabase(const QSqlDatabase &other, const QString& connectionName);
static QSqlDatabase database(const QString& connectionName = QLatin1String(defaultConnection),
bool open = true);
static void removeDatabase(const QString& connectionName);
static bool contains(const QString& connectionName = QLatin1String(defaultConnection));
static QStringList drivers();
static QStringList connectionNames();
static void registerSqlDriver(const QString &name, QSqlDriverCreatorBase *creator);
static bool isDriverAvailable(const QString &name);

protected:
explicit QSqlDatabase(const QString& type);
explicit QSqlDatabase(QSqlDriver* driver);

private:
friend class QSqlDatabasePrivate;
QSqlDatabasePrivate *d;
};


# 154 "/home/eagle/qt-copy/include/QtSql/qsqldatabase.h"
 QDebug operator<<(QDebug, const QSqlDatabase &);


# 157 "/home/eagle/qt-copy/include/QtSql/qsqldatabase.h"





# 3 "/home/eagle/qt-copy/include/QtSql/QtSql"

# 1 "/home/eagle/qt-copy/include/QtSql/qsqldriver.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtSql/qsqldriver.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtSql/qsqldriver.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"
















































































































































































































































# 49 "/home/eagle/qt-copy/include/QtSql/qsqldriver.h"

# 1 "/home/eagle/qt-copy/include/QtSql/qsql.h"



















































































































# 50 "/home/eagle/qt-copy/include/QtSql/qsqldriver.h"





# 55 "/home/eagle/qt-copy/include/QtSql/qsqldriver.h"




typedef QtValidLicenseForSqlModule QtSqlModule;

class QSqlDatabase;
class QSqlDriverPrivate;
class QSqlError;
class QSqlField;
class QSqlIndex;
class QSqlRecord;
class QSqlResult;
class QVariant;

class  QSqlDriver : public QObject
{
friend class QSqlDatabase;
Q_OBJECT
inline QSqlDriverPrivate* d_func() { return reinterpret_cast<QSqlDriverPrivate *>(d_ptr); } inline const QSqlDriverPrivate* d_func() const { return reinterpret_cast<const QSqlDriverPrivate *>(d_ptr); } friend class QSqlDriverPrivate;

public:
enum DriverFeature { Transactions, QuerySize, BLOB, Unicode, PreparedQueries,
NamedPlaceholders, PositionalPlaceholders, LastInsertId,
BatchOperations, SimpleLocking, LowPrecisionNumbers,
EventNotifications, FinishQuery, MultipleResultSets };

enum StatementType { WhereStatement, SelectStatement, UpdateStatement,
InsertStatement, DeleteStatement };

enum IdentifierType { FieldName, TableName };

explicit QSqlDriver(QObject *parent=0);
~QSqlDriver();
virtual bool isOpen() const;
bool isOpenError() const;

virtual bool beginTransaction();
virtual bool commitTransaction();
virtual bool rollbackTransaction();
virtual QStringList tables(QSql::TableType tableType) const;
virtual QSqlIndex primaryIndex(const QString &tableName) const;
virtual QSqlRecord record(const QString &tableName) const;











# 109 "/home/eagle/qt-copy/include/QtSql/qsqldriver.h"
virtual QString formatValue(const QSqlField& field, bool trimStrings = false) const;

virtual QString escapeIdentifier(const QString &identifier, IdentifierType type) const;
virtual QString sqlStatement(StatementType type, const QString &tableName,
const QSqlRecord &rec, bool preparedStatement) const;

QSqlError lastError() const;

virtual QVariant handle() const;
virtual bool hasFeature(DriverFeature f) const = 0;
virtual void close() = 0;
virtual QSqlResult *createResult() const = 0;

virtual bool open(const QString& db,
const QString& user = QString(),
const QString& password = QString(),
const QString& host = QString(),
int port = -1,
const QString& connOpts = QString()) = 0;
bool subscribeToNotification(const QString &name); 
bool unsubscribeFromNotification(const QString &name); 
QStringList subscribedToNotifications() const; 

signals:
void notification(const QString &name);

protected:
virtual void setOpen(bool o);
virtual void setOpenError(bool e);
virtual void setLastError(const QSqlError& e);

protected slots:
bool subscribeToNotificationImplementation(const QString &name); 
bool unsubscribeFromNotificationImplementation(const QString &name); 
QStringList subscribedToNotificationsImplementation() const; 

private:
QSqlDriver(const QSqlDriver &); QSqlDriver &operator=(const QSqlDriver &);
};






# 4 "/home/eagle/qt-copy/include/QtSql/QtSql"

# 1 "/home/eagle/qt-copy/include/QtSql/qsqldriverplugin.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qplugin.h"
















































































































# 47 "/home/eagle/qt-copy/include/QtSql/qsqldriverplugin.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qfactoryinterface.h"





































































# 48 "/home/eagle/qt-copy/include/QtSql/qsqldriverplugin.h"


# 50 "/home/eagle/qt-copy/include/QtSql/qsqldriverplugin.h"




typedef QtValidLicenseForSqlModule QtSqlModule;

class QSqlDriver;

struct  QSqlDriverFactoryInterface : public QFactoryInterface
{
virtual QSqlDriver *create(const QString &name) = 0;
};


# 64 "/home/eagle/qt-copy/include/QtSql/qsqldriverplugin.h"
template <> inline QSqlDriverFactoryInterface *qobject_cast<QSqlDriverFactoryInterface *>(QObject *object) { return reinterpret_cast<QSqlDriverFactoryInterface *>((object ? object->qt_metacast("com.trolltech.Qt.QSqlDriverFactoryInterface") : 0)); } template <> inline QSqlDriverFactoryInterface *qobject_cast<QSqlDriverFactoryInterface *>(const QObject *object) { return reinterpret_cast<QSqlDriverFactoryInterface *>((object ? const_cast<QObject *>(object)->qt_metacast("com.trolltech.Qt.QSqlDriverFactoryInterface") : 0)); }

class  QSqlDriverPlugin : public QObject, public QSqlDriverFactoryInterface
{
Q_OBJECT

public:
explicit QSqlDriverPlugin(QObject *parent = 0);
~QSqlDriverPlugin();

virtual QStringList keys() const = 0;
virtual QSqlDriver *create(const QString &key) = 0;

};






# 5 "/home/eagle/qt-copy/include/QtSql/QtSql"

# 1 "/home/eagle/qt-copy/include/QtSql/qsqlerror.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtSql/qsqlerror.h"


# 49 "/home/eagle/qt-copy/include/QtSql/qsqlerror.h"




typedef QtValidLicenseForSqlModule QtSqlModule;

class  QSqlError
{
public:
enum ErrorType {
NoError,
ConnectionError,
StatementError,
TransactionError,
UnknownError







# 71 "/home/eagle/qt-copy/include/QtSql/qsqlerror.h"
};
QSqlError( const QString& driverText = QString(),
const QString& databaseText = QString(),
ErrorType type = NoError,
int number = -1);
QSqlError(const QSqlError& other);
QSqlError& operator=(const QSqlError& other);
~QSqlError();

QString driverText() const;
void setDriverText(const QString& driverText);
QString databaseText() const;
void setDatabaseText(const QString& databaseText);
ErrorType type() const;
void setType(ErrorType type);
int number() const;
void setNumber(int number);
QString text() const;
bool isValid() const;

private:
QString driverError;
QString databaseError;
ErrorType errorType;
int errorNumber;
};


# 99 "/home/eagle/qt-copy/include/QtSql/qsqlerror.h"
 QDebug operator<<(QDebug, const QSqlError &);


# 102 "/home/eagle/qt-copy/include/QtSql/qsqlerror.h"





# 6 "/home/eagle/qt-copy/include/QtSql/QtSql"

# 1 "/home/eagle/qt-copy/include/QtSql/qsqlfield.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qvariant.h"






















































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtSql/qsqlfield.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtSql/qsqlfield.h"


# 50 "/home/eagle/qt-copy/include/QtSql/qsqlfield.h"




typedef QtValidLicenseForSqlModule QtSqlModule;

class QSqlFieldPrivate;

class  QSqlField
{
public:
enum RequiredStatus { Unknown = -1, Optional = 0, Required = 1 };

QSqlField(const QString& fieldName = QString(),
QVariant::Type type = QVariant::Invalid);

QSqlField(const QSqlField& other);
QSqlField& operator=(const QSqlField& other);
bool operator==(const QSqlField& other) const;
inline bool operator!=(const QSqlField &other) const { return !operator==(other); }
~QSqlField();

void setValue(const QVariant& value);
inline QVariant value() const
{ return val; }
void setName(const QString& name);
QString name() const;
bool isNull() const;
void setReadOnly(bool readOnly);
bool isReadOnly() const;
void clear();
QVariant::Type type() const;
bool isAutoValue() const;

void setType(QVariant::Type type);
void setRequiredStatus(RequiredStatus status);
inline void setRequired(bool required)
{ setRequiredStatus(required ? Required : Optional); }
void setLength(int fieldLength);
void setPrecision(int precision);
void setDefaultValue(const QVariant &value);
void setSqlType(int type);
void setGenerated(bool gen);
void setAutoValue(bool autoVal);

RequiredStatus requiredStatus() const;
int length() const;
int precision() const;
QVariant defaultValue() const;
int typeID() const;
bool isGenerated() const;
bool isValid() const;





# 107 "/home/eagle/qt-copy/include/QtSql/qsqlfield.h"
private:
void detach();
QVariant val;
QSqlFieldPrivate* d;
};


# 114 "/home/eagle/qt-copy/include/QtSql/qsqlfield.h"
 QDebug operator<<(QDebug, const QSqlField &);


# 117 "/home/eagle/qt-copy/include/QtSql/qsqlfield.h"





# 7 "/home/eagle/qt-copy/include/QtSql/QtSql"

# 1 "/home/eagle/qt-copy/include/QtSql/qsqlindex.h"














































# 1 "/home/eagle/qt-copy/include/QtSql/qsqlrecord.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtSql/qsqlrecord.h"


# 49 "/home/eagle/qt-copy/include/QtSql/qsqlrecord.h"




typedef QtValidLicenseForSqlModule QtSqlModule;

class QSqlField;
class QStringList;
class QVariant;
class QSqlRecordPrivate;

class  QSqlRecord
{
public:
QSqlRecord();
QSqlRecord(const QSqlRecord& other);
QSqlRecord& operator=(const QSqlRecord& other);
~QSqlRecord();

bool operator==(const QSqlRecord &other) const;
inline bool operator!=(const QSqlRecord &other) const { return !operator==(other); }

QVariant value(int i) const;
QVariant value(const QString& name) const;
void setValue(int i, const QVariant& val);
void setValue(const QString& name, const QVariant& val);

void setNull(int i);
void setNull(const QString& name);
bool isNull(int i) const;
bool isNull(const QString& name) const;

int indexOf(const QString &name) const;
QString fieldName(int i) const;

QSqlField field(int i) const;
QSqlField field(const QString &name) const;

bool isGenerated(int i) const;
bool isGenerated(const QString& name) const;
void setGenerated(const QString& name, bool generated);
void setGenerated(int i, bool generated);










# 101 "/home/eagle/qt-copy/include/QtSql/qsqlrecord.h"
void append(const QSqlField& field);
void replace(int pos, const QSqlField& field);
void insert(int pos, const QSqlField& field);
void remove(int pos);

bool isEmpty() const;
bool contains(const QString& name) const;
void clear();
void clearValues();
int count() const;

private:
void detach();
QSqlRecordPrivate* d;
};


# 118 "/home/eagle/qt-copy/include/QtSql/qsqlrecord.h"
 QDebug operator<<(QDebug, const QSqlRecord &);


# 121 "/home/eagle/qt-copy/include/QtSql/qsqlrecord.h"





# 47 "/home/eagle/qt-copy/include/QtSql/qsqlindex.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtSql/qsqlindex.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qlist.h"











































































































































































































































































































































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtSql/qsqlindex.h"


# 51 "/home/eagle/qt-copy/include/QtSql/qsqlindex.h"




typedef QtValidLicenseForSqlModule QtSqlModule;

class  QSqlIndex : public QSqlRecord
{
public:
QSqlIndex(const QString &cursorName = QString(), const QString &name = QString());
QSqlIndex(const QSqlIndex &other);
~QSqlIndex();
QSqlIndex &operator=(const QSqlIndex &other);
void setCursorName(const QString &cursorName);
inline QString cursorName() const { return cursor; }
void setName(const QString& name);
inline QString name() const { return nm; }

void append(const QSqlField &field);
void append(const QSqlField &field, bool desc);

bool isDescending(int i) const;
void setDescending(int i, bool desc);









# 83 "/home/eagle/qt-copy/include/QtSql/qsqlindex.h"
private:
QString createField(int i, const QString& prefix, bool verbose) const;
QString cursor;
QString nm;
QList<bool> sorts;
};






# 8 "/home/eagle/qt-copy/include/QtSql/QtSql"

# 1 "/home/eagle/qt-copy/include/QtSql/qsqlquery.h"














































# 1 "/home/eagle/qt-copy/include/QtSql/qsql.h"



















































































































# 47 "/home/eagle/qt-copy/include/QtSql/qsqlquery.h"

# 1 "/home/eagle/qt-copy/include/QtSql/qsqldatabase.h"

































































































































































# 48 "/home/eagle/qt-copy/include/QtSql/qsqlquery.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtSql/qsqlquery.h"


# 51 "/home/eagle/qt-copy/include/QtSql/qsqlquery.h"




typedef QtValidLicenseForSqlModule QtSqlModule;

class QVariant;
class QSqlDriver;
class QSqlError;
class QSqlResult;
class QSqlRecord;
template <class Key, class T> class QMap;
class QSqlQueryPrivate;

class  QSqlQuery
{
public:
QSqlQuery(QSqlResult *r);
QSqlQuery(const QString& query = QString(), QSqlDatabase db = QSqlDatabase());
explicit QSqlQuery(QSqlDatabase db);
QSqlQuery(const QSqlQuery& other);
QSqlQuery& operator=(const QSqlQuery& other);
~QSqlQuery();

bool isValid() const;
bool isActive() const;
bool isNull(int field) const;
int at() const;
QString lastQuery() const;
int numRowsAffected() const;
QSqlError lastError() const;
bool isSelect() const;
int size() const;
const QSqlDriver* driver() const;
const QSqlResult* result() const;
bool isForwardOnly() const;
QSqlRecord record() const;

void setForwardOnly(bool forward);
bool exec(const QString& query);
QVariant value(int i) const;

void setNumericalPrecisionPolicy(QSql::NumericalPrecisionPolicy precisionPolicy);
QSql::NumericalPrecisionPolicy numericalPrecisionPolicy() const;

bool seek(int i, bool relative = false);
bool next();
bool previous();



# 102 "/home/eagle/qt-copy/include/QtSql/qsqlquery.h"
bool first();
bool last();

void clear();


bool exec();
enum BatchExecutionMode { ValuesAsRows, ValuesAsColumns };
bool execBatch(BatchExecutionMode mode = ValuesAsRows);
bool prepare(const QString& query);
void bindValue(const QString& placeholder, const QVariant& val,
QSql::ParamType type = QSql::In);
void bindValue(int pos, const QVariant& val, QSql::ParamType type = QSql::In);
void addBindValue(const QVariant& val, QSql::ParamType type = QSql::In);
QVariant boundValue(const QString& placeholder) const;
QVariant boundValue(int pos) const;
QMap<QString, QVariant> boundValues() const;
QString executedQuery() const;
QVariant lastInsertId() const;
void finish();
bool nextResult();

private:
QSqlQueryPrivate* d;
};






# 9 "/home/eagle/qt-copy/include/QtSql/QtSql"

# 1 "/home/eagle/qt-copy/include/QtSql/qsqlrecord.h"





























































































































# 10 "/home/eagle/qt-copy/include/QtSql/QtSql"

# 1 "/home/eagle/qt-copy/include/QtSql/qsqlresult.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qvariant.h"






















































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtSql/qsqlresult.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qvector.h"































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtSql/qsqlresult.h"

# 1 "/home/eagle/qt-copy/include/QtSql/qsql.h"



















































































































# 49 "/home/eagle/qt-copy/include/QtSql/qsqlresult.h"


# 51 "/home/eagle/qt-copy/include/QtSql/qsqlresult.h"




typedef QtValidLicenseForSqlModule QtSqlModule;

class QString;
class QSqlRecord;
template <typename T> class QVector;
class QVariant;
class QSqlDriver;
class QSqlError;
class QSqlResultPrivate;

class  QSqlResult
{
friend class QSqlQuery;
friend class QSqlTableModelPrivate;
friend class QSqlResultPrivate;

public:
virtual ~QSqlResult();
virtual QVariant handle() const;

protected:
enum BindingSyntax {
PositionalBinding,
NamedBinding




# 83 "/home/eagle/qt-copy/include/QtSql/qsqlresult.h"
};

explicit QSqlResult(const QSqlDriver * db);
int at() const;
QString lastQuery() const;
QSqlError lastError() const;
bool isValid() const;
bool isActive() const;
bool isSelect() const;
bool isForwardOnly() const;
const QSqlDriver* driver() const;
virtual void setAt(int at);
virtual void setActive(bool a);
virtual void setLastError(const QSqlError& e);
virtual void setQuery(const QString& query);
virtual void setSelect(bool s);
virtual void setForwardOnly(bool forward);


virtual bool exec();
virtual bool prepare(const QString& query);
virtual bool savePrepare(const QString& sqlquery);
virtual void bindValue(int pos, const QVariant& val, QSql::ParamType type);
virtual void bindValue(const QString& placeholder, const QVariant& val,
QSql::ParamType type);
void addBindValue(const QVariant& val, QSql::ParamType type);
QVariant boundValue(const QString& placeholder) const;
QVariant boundValue(int pos) const;
QSql::ParamType bindValueType(const QString& placeholder) const;
QSql::ParamType bindValueType(int pos) const;
int boundValueCount() const;
QVector<QVariant>& boundValues() const;
QString executedQuery() const;
QString boundValueName(int pos) const;
void clear();
bool hasOutValues() const;

BindingSyntax bindingSyntax() const;

virtual QVariant data(int i) = 0;
virtual bool isNull(int i) = 0;
virtual bool reset(const QString& sqlquery) = 0;
virtual bool fetch(int i) = 0;
virtual bool fetchNext();
virtual bool fetchPrevious();
virtual bool fetchFirst() = 0;
virtual bool fetchLast() = 0;
virtual int size() = 0;
virtual int numRowsAffected() = 0;
virtual QSqlRecord record() const;
virtual QVariant lastInsertId() const;

enum VirtualHookOperation { BatchOperation, DetachFromResultSet, SetNumericalPrecision, NextResult };
virtual void virtual_hook(int id, void *data);
bool execBatch(bool arrayBind = false);
void detachFromResultSet();
void setNumericalPrecisionPolicy(QSql::NumericalPrecisionPolicy policy);
bool nextResult();

private:
QSqlResultPrivate* d;
void resetBindCount(); 

private:
QSqlResult(const QSqlResult &); QSqlResult &operator=(const QSqlResult &);
};






# 11 "/home/eagle/qt-copy/include/QtSql/QtSql"

# 1 "/home/eagle/qt-copy/include/QtSql/qsqlquerymodel.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qabstractitemmodel.h"

































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtSql/qsqlquerymodel.h"

# 1 "/home/eagle/qt-copy/include/QtSql/qsqldatabase.h"

































































































































































# 48 "/home/eagle/qt-copy/include/QtSql/qsqlquerymodel.h"


# 50 "/home/eagle/qt-copy/include/QtSql/qsqlquerymodel.h"




typedef QtValidLicenseForSqlModule QtSqlModule;

class QSqlQueryModelPrivate;
class QSqlError;
class QSqlRecord;
class QSqlQuery;

class  QSqlQueryModel: public QAbstractTableModel
{
Q_OBJECT
inline QSqlQueryModelPrivate* d_func() { return reinterpret_cast<QSqlQueryModelPrivate *>(d_ptr); } inline const QSqlQueryModelPrivate* d_func() const { return reinterpret_cast<const QSqlQueryModelPrivate *>(d_ptr); } friend class QSqlQueryModelPrivate;

public:
explicit QSqlQueryModel(QObject *parent = 0);
virtual ~QSqlQueryModel();

int rowCount(const QModelIndex &parent = QModelIndex()) const;
int columnCount(const QModelIndex &parent = QModelIndex()) const;
QSqlRecord record(int row) const;
QSqlRecord record() const;

QVariant data(const QModelIndex &item, int role = Qt::DisplayRole) const;
QVariant headerData(int section, Qt::Orientation orientation,
int role = Qt::DisplayRole) const;
bool setHeaderData(int section, Qt::Orientation orientation, const QVariant &value,
int role = Qt::EditRole);

bool insertColumns(int column, int count, const QModelIndex &parent = QModelIndex());
bool removeColumns(int column, int count, const QModelIndex &parent = QModelIndex());

void setQuery(const QSqlQuery &query);
void setQuery(const QString &query, const QSqlDatabase &db = QSqlDatabase());
QSqlQuery query() const;

virtual void clear();

QSqlError lastError() const;

void fetchMore(const QModelIndex &parent = QModelIndex());
bool canFetchMore(const QModelIndex &parent = QModelIndex()) const;

protected:
virtual void queryChange();

QModelIndex indexInQuery(const QModelIndex &item) const;
void setLastError(const QSqlError &error);
QSqlQueryModel(QSqlQueryModelPrivate &dd, QObject *parent = 0);
};






# 12 "/home/eagle/qt-copy/include/QtSql/QtSql"

# 1 "/home/eagle/qt-copy/include/QtSql/qsqlrelationaldelegate.h"



































































































































# 13 "/home/eagle/qt-copy/include/QtSql/QtSql"

# 1 "/home/eagle/qt-copy/include/QtSql/qsqlrelationaltablemodel.h"














































# 1 "/home/eagle/qt-copy/include/QtSql/qsqltablemodel.h"














































# 1 "/home/eagle/qt-copy/include/QtSql/qsqldatabase.h"

































































































































































# 47 "/home/eagle/qt-copy/include/QtSql/qsqltablemodel.h"

# 1 "/home/eagle/qt-copy/include/QtSql/qsqlquerymodel.h"











































































































# 48 "/home/eagle/qt-copy/include/QtSql/qsqltablemodel.h"


# 50 "/home/eagle/qt-copy/include/QtSql/qsqltablemodel.h"




typedef QtValidLicenseForSqlModule QtSqlModule;

class QSqlTableModelPrivate;
class QSqlRecord;
class QSqlField;
class QSqlIndex;

class  QSqlTableModel: public QSqlQueryModel
{
Q_OBJECT
inline QSqlTableModelPrivate* d_func() { return reinterpret_cast<QSqlTableModelPrivate *>(d_ptr); } inline const QSqlTableModelPrivate* d_func() const { return reinterpret_cast<const QSqlTableModelPrivate *>(d_ptr); } friend class QSqlTableModelPrivate;

public:
enum EditStrategy {OnFieldChange, OnRowChange, OnManualSubmit};

explicit QSqlTableModel(QObject *parent = 0, QSqlDatabase db = QSqlDatabase());
virtual ~QSqlTableModel();

virtual bool select();

virtual void setTable(const QString &tableName);
QString tableName() const;

Qt::ItemFlags flags(const QModelIndex &index) const;

QVariant data(const QModelIndex &idx, int role = Qt::DisplayRole) const;
bool setData(const QModelIndex &index, const QVariant &value, int role = Qt::EditRole);

QVariant headerData(int section, Qt::Orientation orientation, int role = Qt::DisplayRole) const;

bool isDirty(const QModelIndex &index) const;
void clear();

virtual void setEditStrategy(EditStrategy strategy);
EditStrategy editStrategy() const;

QSqlIndex primaryKey() const;
QSqlDatabase database() const;
int fieldIndex(const QString &fieldName) const;

void sort(int column, Qt::SortOrder order);
virtual void setSort(int column, Qt::SortOrder order);

QString filter() const;
virtual void setFilter(const QString &filter);

int rowCount(const QModelIndex &parent = QModelIndex()) const;

bool removeColumns(int column, int count, const QModelIndex &parent = QModelIndex());
bool removeRows(int row, int count, const QModelIndex &parent = QModelIndex());
bool insertRows(int row, int count, const QModelIndex &parent = QModelIndex());

bool insertRecord(int row, const QSqlRecord &record);
bool setRecord(int row, const QSqlRecord &record);

virtual void revertRow(int row);

public slots:
bool submit();
void revert();

bool submitAll();
void revertAll();

signals:
void primeInsert(int row, QSqlRecord &record);

void beforeInsert(QSqlRecord &record);
void beforeUpdate(int row, QSqlRecord &record);
void beforeDelete(int row);

protected:
QSqlTableModel(QSqlTableModelPrivate &dd, QObject *parent = 0, QSqlDatabase db = QSqlDatabase());

virtual bool updateRowInTable(int row, const QSqlRecord &values);
virtual bool insertRowIntoTable(const QSqlRecord &values);
virtual bool deleteRowFromTable(int row);
virtual QString orderByClause() const;
virtual QString selectStatement() const;

void setPrimaryKey(const QSqlIndex &key);
void setQuery(const QSqlQuery &query);
QModelIndex indexInQuery(const QModelIndex &item) const;
};






# 47 "/home/eagle/qt-copy/include/QtSql/qsqlrelationaltablemodel.h"


# 49 "/home/eagle/qt-copy/include/QtSql/qsqlrelationaltablemodel.h"




typedef QtValidLicenseForSqlModule QtSqlModule;

class  QSqlRelation
{
public:
QSqlRelation() {}
QSqlRelation(const QString &aTableName, const QString &indexCol,
const QString &displayCol)
: tName(aTableName), iColumn(indexCol), dColumn(displayCol) {}
inline QString tableName() const
{ return tName; }
inline QString indexColumn() const
{ return iColumn; }
inline QString displayColumn() const
{ return dColumn; }
inline bool isValid() const
{ return !(tName.isEmpty() || iColumn.isEmpty() || dColumn.isEmpty()); }
private:
QString tName, iColumn, dColumn;
};

class QSqlRelationalTableModelPrivate;

class  QSqlRelationalTableModel: public QSqlTableModel
{
Q_OBJECT

public:
explicit QSqlRelationalTableModel(QObject *parent = 0,
QSqlDatabase db = QSqlDatabase());
virtual ~QSqlRelationalTableModel();

QVariant data(const QModelIndex &item, int role = Qt::DisplayRole) const;
bool setData(const QModelIndex &item, const QVariant &value, int role = Qt::EditRole);
bool removeColumns(int column, int count, const QModelIndex &parent = QModelIndex());

void clear();
bool select();

void setTable(const QString &tableName);
virtual void setRelation(int column, const QSqlRelation &relation);
QSqlRelation relation(int column) const;
virtual QSqlTableModel *relationModel(int column) const;

public slots:
void revertRow(int row);

protected:
QString selectStatement() const;
bool updateRowInTable(int row, const QSqlRecord &values);
bool insertRowIntoTable(const QSqlRecord &values);
QString orderByClause() const;

private:
inline QSqlRelationalTableModelPrivate* d_func() { return reinterpret_cast<QSqlRelationalTableModelPrivate *>(d_ptr); } inline const QSqlRelationalTableModelPrivate* d_func() const { return reinterpret_cast<const QSqlRelationalTableModelPrivate *>(d_ptr); } friend class QSqlRelationalTableModelPrivate;
};






# 14 "/home/eagle/qt-copy/include/QtSql/QtSql"

# 1 "/home/eagle/qt-copy/include/QtSql/qsqltablemodel.h"















































































































































# 15 "/home/eagle/qt-copy/include/QtSql/QtSql"

# 28 "qtscript_masterinclude.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextcodec.h"





























































































































































































# 1 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextcodecplugin.h"


































































































# 2 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuture.h"
























































































































































































































































































# 3 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfutureinterface.h"























































































































































































































































































































# 4 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuturesynchronizer.h"
























































































































# 5 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuturewatcher.h"
































































































































































































































# 6 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qrunnable.h"










































































# 7 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentcompilertest.h"









































































# 8 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentexception.h"


































































































































# 9 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfilter.h"


































































































































































































































































































































































































































































































































































































































































































































































# 10 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfilterkernel.h"















































































































































































































































































































































# 11 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfunctionwrappers.h"















































































































































































# 12 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentiteratekernel.h"

















































































































































































































































































































# 13 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmap.h"















































































































































































































































































































































































































































































































































































































































































































































































































# 14 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmapkernel.h"










































































































































































































































































# 15 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmedian.h"




































































































































# 16 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentreducekernel.h"
























































































































































































































































# 17 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentresultstore.h"











































































































































































































































# 18 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentrun.h"











































































































































































































































































































# 19 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentrunbase.h"



































































































































# 20 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentstoredfunctioncall.h"


















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 21 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentthreadengine.h"



















































































































































































































































































































# 22 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qthreadpool.h"
































































































# 23 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qendian.h"










































































































































































































































































































































# 24 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





























































































































































































































































































# 286 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 291 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 296 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 301 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 306 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 311 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 316 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 321 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 326 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 331 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 336 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 341 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 346 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 351 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 356 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 361 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 366 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 371 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 376 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 381 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 386 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 391 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 396 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 401 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 406 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 411 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 416 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 421 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 426 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 431 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 436 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 441 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 446 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 451 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 456 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 461 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 466 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 471 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 476 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 481 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 486 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 491 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 496 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 501 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 506 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 511 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 516 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 521 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 526 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 531 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 536 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 541 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 546 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 551 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 556 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 561 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 566 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 571 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 576 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 581 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 586 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 591 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 596 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 601 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 606 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 611 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 616 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 621 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 626 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 631 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 636 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 641 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 646 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 651 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 656 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 661 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 666 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 671 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 676 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 681 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 686 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 691 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 696 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 701 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 706 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 711 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 716 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 721 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 726 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 731 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 736 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 741 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 746 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 751 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 756 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 761 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 766 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 771 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 776 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 781 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 786 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 25 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 26 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlibraryinfo.h"



























































































# 27 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 28 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qnumeric.h"









































































# 29 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstractfileengine.h"

























































































































































































































































# 30 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbuffer.h"














































































































# 31 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdatastream.h"









































































































































































































































































































































































































































# 32 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdebug.h"






































































































































































































































































# 33 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdir.h"










































































































































































































































































# 34 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdiriterator.h"



































































































# 35 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfile.h"














































































































































































































# 36 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfileinfo.h"





























































































































































































# 37 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfilesystemwatcher.h"



























































































# 38 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfsfileengine.h"



























































































































# 39 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"






























































































































































































































































# 40 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qprocess.h"












































































































































































































# 41 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qresource.h"










































































































# 42 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsettings.h"





















































































































































































































































































































# 43 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtemporaryfile.h"














































































































# 44 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextstream.h"



















































































































































































































































































































































































# 45 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qurl.h"



























































































































































































































































































# 46 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstracteventdispatcher.h"













































































































# 47 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstractitemmodel.h"

































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbasictimer.h"












































































# 49 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcoreapplication.h"












































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcoreevent.h"




































































































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qeventloop.h"






































































































# 52 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmath.h"



































































































































# 53 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmetaobject.h"










































































































































































# 54 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"












































































































































































































































































































































# 55 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmimedata.h"










































































































# 56 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 57 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qobjectcleanuphandler.h"
















































































# 58 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qobjectdefs.h"











































































































































































































































































































































































































# 59 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpointer.h"


















































































































































# 60 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsharedmemory.h"

























































































































# 61 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsignalmapper.h"






































































































# 62 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsocketnotifier.h"































































































# 63 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsystemsemaphore.h"








































































































# 64 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtimer.h"






















































































































# 65 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtranslator.h"




































































































# 66 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qvariant.h"






















































































































































































































































































































































































































































































































































































































# 67 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfactoryinterface.h"





































































# 68 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlibrary.h"


























































































































# 69 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qplugin.h"
















































































































# 70 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpluginloader.h"






































































































# 71 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/quuid.h"
































































































































































































# 72 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qatomic.h"

























































































































































































































# 73 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbasicatomic.h"




















































































































































































































# 74 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmutex.h"



































































































































































































# 75 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qreadwritelock.h"






















































































































































































































































# 76 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsemaphore.h"





















































































# 77 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qthread.h"




































































































































































# 78 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qthreadstorage.h"































































































































































# 79 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qwaitcondition.h"











































































































# 80 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qalgorithms.h"

















































































































































































































































































































































































































































































































































































# 81 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbitarray.h"
















































































































































































# 82 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"












































































































































































































































































































































































































































































































































































































# 83 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbytearraymatcher.h"


















































































# 84 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcache.h"


























































































































































































































# 85 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qchar.h"















































































































































































































































































































































































































# 86 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcontainerfwd.h"









































































# 87 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcryptographichash.h"






















































































# 88 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"



































































































































































































































































































































# 89 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qhash.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 90 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qiterator.h"








































































# 91 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qline.h"


































































































































































































































































































































































































































# 92 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlinkedlist.h"
























































































































































































































































































































































































































































































































# 93 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlist.h"











































































































































































































































































































































































































































































































































































































































































































# 94 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlocale.h"






















































































































































































































































































































































































































































































































































































































































































# 95 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmap.h"






















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 96 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpair.h"

































































































































# 97 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpoint.h"






































































































































































































































































































































































# 98 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qqueue.h"







































































# 99 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qrect.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































# 100 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qregexp.h"

























































































































































# 101 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qset.h"


































































































































































































































































































































































# 102 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qshareddata.h"



































































































































































































































# 103 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsize.h"






































































































































































































































































































































































# 104 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstack.h"




















































































# 105 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 106 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"
















































































































































































































































# 107 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstringmatcher.h"




























































































# 108 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextboundaryfinder.h"




















































































































# 109 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtimeline.h"
















































































































































# 110 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qvarlengtharray.h"













































































































































































































































# 111 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qvector.h"































































































































































































































































































































































































































































































































































































































































































































































































# 112 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qxmlstream.h"













































































































































































































































































































































































































































































# 113 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtSvg/QtSvg"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextcodec.h"





























































































































































































# 1 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextcodecplugin.h"


































































































# 2 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuture.h"
























































































































































































































































































# 3 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfutureinterface.h"























































































































































































































































































































# 4 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuturesynchronizer.h"
























































































































# 5 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuturewatcher.h"
































































































































































































































# 6 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qrunnable.h"










































































# 7 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentcompilertest.h"









































































# 8 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentexception.h"


































































































































# 9 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfilter.h"


































































































































































































































































































































































































































































































































































































































































































































































# 10 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfilterkernel.h"















































































































































































































































































































































# 11 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfunctionwrappers.h"















































































































































































# 12 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentiteratekernel.h"

















































































































































































































































































































# 13 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmap.h"















































































































































































































































































































































































































































































































































































































































































































































































































# 14 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmapkernel.h"










































































































































































































































































# 15 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmedian.h"




































































































































# 16 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentreducekernel.h"
























































































































































































































































# 17 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentresultstore.h"











































































































































































































































# 18 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentrun.h"











































































































































































































































































































# 19 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentrunbase.h"



































































































































# 20 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentstoredfunctioncall.h"


















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 21 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentthreadengine.h"



















































































































































































































































































































# 22 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qthreadpool.h"
































































































# 23 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qendian.h"










































































































































































































































































































































# 24 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





























































































































































































































































































# 286 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 291 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 296 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 301 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 306 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 311 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 316 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 321 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 326 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 331 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 336 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 341 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 346 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 351 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 356 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 361 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 366 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 371 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 376 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 381 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 386 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 391 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 396 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 401 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 406 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 411 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 416 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 421 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 426 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 431 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 436 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 441 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 446 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 451 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 456 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 461 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 466 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 471 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 476 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 481 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 486 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 491 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 496 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 501 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 506 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 511 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 516 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 521 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 526 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 531 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 536 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 541 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 546 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 551 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 556 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 561 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 566 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 571 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 576 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 581 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 586 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 591 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 596 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 601 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 606 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 611 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 616 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 621 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 626 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 631 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 636 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 641 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 646 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 651 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 656 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 661 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 666 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 671 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 676 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 681 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 686 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 691 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 696 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 701 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 706 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 711 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 716 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 721 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 726 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 731 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 736 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 741 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 746 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 751 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 756 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 761 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 766 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 771 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 776 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 781 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 786 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 25 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 26 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlibraryinfo.h"



























































































# 27 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 28 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qnumeric.h"









































































# 29 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstractfileengine.h"

























































































































































































































































# 30 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbuffer.h"














































































































# 31 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdatastream.h"









































































































































































































































































































































































































































# 32 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdebug.h"






































































































































































































































































# 33 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdir.h"










































































































































































































































































# 34 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdiriterator.h"



































































































# 35 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfile.h"














































































































































































































# 36 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfileinfo.h"





























































































































































































# 37 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfilesystemwatcher.h"



























































































# 38 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfsfileengine.h"



























































































































# 39 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"






























































































































































































































































# 40 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qprocess.h"












































































































































































































# 41 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qresource.h"










































































































# 42 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsettings.h"





















































































































































































































































































































# 43 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtemporaryfile.h"














































































































# 44 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextstream.h"



















































































































































































































































































































































































# 45 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qurl.h"



























































































































































































































































































# 46 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstracteventdispatcher.h"













































































































# 47 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstractitemmodel.h"

































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbasictimer.h"












































































# 49 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcoreapplication.h"












































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcoreevent.h"




































































































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qeventloop.h"






































































































# 52 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmath.h"



































































































































# 53 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmetaobject.h"










































































































































































# 54 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"












































































































































































































































































































































# 55 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmimedata.h"










































































































# 56 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 57 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qobjectcleanuphandler.h"
















































































# 58 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qobjectdefs.h"











































































































































































































































































































































































































# 59 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpointer.h"


















































































































































# 60 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsharedmemory.h"

























































































































# 61 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsignalmapper.h"






































































































# 62 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsocketnotifier.h"































































































# 63 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsystemsemaphore.h"








































































































# 64 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtimer.h"






















































































































# 65 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtranslator.h"




































































































# 66 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qvariant.h"






















































































































































































































































































































































































































































































































































































































# 67 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfactoryinterface.h"





































































# 68 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlibrary.h"


























































































































# 69 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qplugin.h"
















































































































# 70 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpluginloader.h"






































































































# 71 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/quuid.h"
































































































































































































# 72 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qatomic.h"

























































































































































































































# 73 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbasicatomic.h"




















































































































































































































# 74 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmutex.h"



































































































































































































# 75 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qreadwritelock.h"






















































































































































































































































# 76 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsemaphore.h"





















































































# 77 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qthread.h"




































































































































































# 78 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qthreadstorage.h"































































































































































# 79 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qwaitcondition.h"











































































































# 80 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qalgorithms.h"

















































































































































































































































































































































































































































































































































































# 81 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbitarray.h"
















































































































































































# 82 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"












































































































































































































































































































































































































































































































































































































# 83 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbytearraymatcher.h"


















































































# 84 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcache.h"


























































































































































































































# 85 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qchar.h"















































































































































































































































































































































































































# 86 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcontainerfwd.h"









































































# 87 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcryptographichash.h"






















































































# 88 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"



































































































































































































































































































































# 89 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qhash.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 90 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qiterator.h"








































































# 91 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qline.h"


































































































































































































































































































































































































































# 92 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlinkedlist.h"
























































































































































































































































































































































































































































































































# 93 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlist.h"











































































































































































































































































































































































































































































































































































































































































































# 94 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlocale.h"






















































































































































































































































































































































































































































































































































































































































































# 95 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmap.h"






















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 96 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpair.h"

































































































































# 97 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpoint.h"






































































































































































































































































































































































# 98 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qqueue.h"







































































# 99 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qrect.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































# 100 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qregexp.h"

























































































































































# 101 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qset.h"


































































































































































































































































































































































# 102 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qshareddata.h"



































































































































































































































# 103 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsize.h"






































































































































































































































































































































































# 104 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstack.h"




















































































# 105 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 106 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"
















































































































































































































































# 107 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstringmatcher.h"




























































































# 108 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextboundaryfinder.h"




















































































































# 109 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtimeline.h"
















































































































































# 110 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qvarlengtharray.h"













































































































































































































































# 111 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qvector.h"































































































































































































































































































































































































































































































































































































































































































































































































# 112 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qxmlstream.h"













































































































































































































































































































































































































































































# 113 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qaccessible.h"



































































































































































































































































































































































































































# 2 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qaccessible2.h"











































































































































































































# 3 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qaccessiblebridge.h"






























































































# 4 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qaccessibleobject.h"














































































































































# 5 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qaccessibleplugin.h"

























































































# 6 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qaccessiblewidget.h"















































































































































# 7 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qabstractpagesetupdialog.h"


















































































# 8 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qabstractprintdialog.h"
































































































































# 9 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qcolordialog.h"



















































































































# 10 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qdialog.h"







































































































































# 11 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qerrormessage.h"

























































































# 12 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qfiledialog.h"



















































































































































































































































































































# 13 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qfilesystemmodel.h"





















































































































































































# 14 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qfontdialog.h"

















































































































# 15 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qinputdialog.h"



























































































































# 16 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qmessagebox.h"





















































































































































































































































































































































# 17 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qpagesetupdialog.h"



























































































# 18 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qprintdialog.h"










































































































































# 19 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qprintpreviewdialog.h"

































































































# 20 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qprogressdialog.h"









































































































































# 21 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qwizard.h"






































































































































































































































































# 22 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicsgridlayout.h"

















































































































































# 23 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 24 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicsitemanimation.h"


























































































































# 25 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicslayout.h"
































































































# 26 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicslayoutitem.h"


















































































































































# 27 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicslinearlayout.h"





























































































































# 28 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicsproxywidget.h"



































































































































# 29 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicsscene.h"




































































































































































































































































































# 30 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicssceneevent.h"
























































































































































































































































































































# 31 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicsview.h"























































































































































































































































































































# 32 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicswidget.h"





































































































































































































































# 33 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qbitmap.h"












































































































# 34 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qicon.h"















































































































































# 35 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qiconengine.h"
























































































# 36 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qiconengineplugin.h"








































































































# 37 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qimage.h"


































































































































































































































































































































































# 38 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qimageiohandler.h"
























































































































































# 39 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qimagereader.h"













































































































































# 40 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qimagewriter.h"






















































































































# 41 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qmovie.h"



















































































































































































# 42 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qpicture.h"




































































































































































































# 43 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qpictureformatplugin.h"
































































































# 44 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qpixmap.h"











































































































































































































































































































# 45 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qpixmapcache.h"







































































# 46 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qinputcontext.h"








































































































































# 47 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qinputcontextfactory.h"


























































































# 48 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qinputcontextplugin.h"












































































































# 49 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qabstractitemdelegate.h"








































































































































# 50 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qabstractitemview.h"



















































































































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qabstractproxymodel.h"







































































































# 52 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qcolumnview.h"































































































































# 53 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qdatawidgetmapper.h"


































































































































# 54 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qdirmodel.h"


































































































































































# 55 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qfileiconprovider.h"



















































































# 56 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qheaderview.h"





























































































































































































































































# 57 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qitemdelegate.h"















































































































































# 58 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qitemeditorfactory.h"






























































































































# 59 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qitemselectionmodel.h"







































































































































































































































# 60 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qlistview.h"













































































































































































































# 61 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qlistwidget.h"

















































































































































































































































































































































# 62 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qproxymodel.h"
















































































































































# 63 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qsortfilterproxymodel.h"






































































































































































































# 64 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qstandarditemmodel.h"






































































































































































































































































































































































































































































# 65 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qstringlistmodel.h"





























































































# 66 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qstyleditemdelegate.h"






















































































































# 67 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtableview.h"



































































































































































































# 68 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtablewidget.h"



























































































































































































































































































































































































# 69 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtreeview.h"

















































































































































































































































# 70 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtreewidget.h"











































































































































































































































































































































































































































# 71 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtreewidgetitemiterator.h"
































































































































































# 72 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qaction.h"



















































































































































































































































# 73 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qactiongroup.h"


















































































































# 74 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qapplication.h"


























































































































































































































































































































































































# 75 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qboxlayout.h"













































































































































































# 76 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qclipboard.h"




































































































































# 77 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qcursor.h"






























































































































































# 78 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qdesktopwidget.h"










































































































# 79 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qdrag.h"











































































































# 80 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qevent.h"






















































































































































































































































































































































































































































































































































































































































































































































# 81 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qformlayout.h"




































































































































































# 82 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qgridlayout.h"


















































































































































































# 83 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qkeysequence.h"




































































































































































































































# 84 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qlayout.h"




















































































































































































































































# 85 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qlayoutitem.h"
























































































































































































# 86 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qmime.h"








































































































































































# 87 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qpalette.h"






































































































































































































































































# 88 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qsessionmanager.h"

















































































































# 89 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qshortcut.h"













































































































# 90 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qsizepolicy.h"



































































































































































































































# 91 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qsound.h"

































































































# 92 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qstackedlayout.h"





















































































































# 93 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtooltip.h"






















































































# 94 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qwhatsthis.h"


























































































# 95 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qwidget.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 96 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qwidgetaction.h"





























































































# 97 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qwindowdefs.h"























































































































































































# 98 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qbrush.h"

























































































































































































































































































































# 99 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qcolor.h"





















































































































































































































































































# 100 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qcolormap.h"



































































































# 101 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qdrawutil.h"














































































































































# 102 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qmatrix.h"















































































































































































# 103 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qpaintdevice.h"













































































































































































# 104 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qpaintengine.h"





























































































































































































































































































































































# 105 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qpainter.h"






































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 106 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qpainterpath.h"















































































































































































































































































































































































































# 107 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qpen.h"














































































































































# 108 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qpolygon.h"









































































































































































# 109 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qprintengine.h"























































































































# 110 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qprinter.h"










































































































































































































































































































































# 111 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qprinterinfo.h"


























































































# 112 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qregion.h"





















































































































































































































# 113 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qrgb.h"


























































































# 114 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qstylepainter.h"


















































































































# 115 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtransform.h"































































































































































































































































































































































# 116 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qwmatrix.h"































































# 117 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qcdestyle.h"




















































































# 118 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qcleanlooksstyle.h"

















































































































# 119 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qcommonstyle.h"









































































































# 120 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qmotifstyle.h"


































































































































# 121 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qplastiquestyle.h"

























































































































# 122 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qstyle.h"

























































































































































































































































































































































































































































































































































































































































































































































































































































































# 123 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qstylefactory.h"




































































# 124 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qstyleoption.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 125 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qstyleplugin.h"



















































































# 126 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qwindowscestyle.h"









































































































# 127 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qwindowsmobilestyle.h"




















































































































# 128 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qwindowsstyle.h"

















































































































# 129 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qwindowsvistastyle.h"














































































































# 130 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qwindowsxpstyle.h"













































































































# 131 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qabstracttextdocumentlayout.h"























































































































































# 132 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qfont.h"

































































































































































































































































































































































# 133 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qfontdatabase.h"

















































































































































































# 134 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qfontinfo.h"

























































































# 135 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qfontmetrics.h"







































































































































































































# 136 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qsyntaxhighlighter.h"

















































































































# 137 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextcursor.h"


































































































































































































































# 138 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextdocument.h"



































































































































































































































































































# 139 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextdocumentfragment.h"





























































































# 140 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextformat.h"






















































































































































































































































































































































































































































































































































































































































































































































































































































































































# 141 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextlayout.h"





















































































































































































































































# 142 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextlist.h"
































































































# 143 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextobject.h"





































































































































































































































































































































# 144 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextoption.h"































































































































































# 145 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtexttable.h"















































































































































# 146 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qcompleter.h"








































































































































































# 147 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qdesktopservices.h"




























































































# 148 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qsystemtrayicon.h"






































































































































# 149 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qundogroup.h"















































































































# 150 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qundostack.h"
































































































































































# 151 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qundoview.h"








































































































# 152 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qabstractbutton.h"






















































































































































































# 153 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qabstractscrollarea.h"













































































































































# 154 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qabstractslider.h"


























































































































































































# 155 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qabstractspinbox.h"



















































































































































































# 156 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qbuttongroup.h"


















































































































# 157 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qcalendarwidget.h"












































































































































































































# 158 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qcheckbox.h"



















































































































# 159 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qcombobox.h"




















































































































































































































































































































































# 160 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qcommandlinkbutton.h"























































































# 161 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qdatetimeedit.h"










































































































































































































































# 162 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qdial.h"




























































































































# 163 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qdialogbuttonbox.h"










































































































































































# 164 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qdockwidget.h"




















































































































































# 165 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qfocusframe.h"




















































































# 166 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qfontcombobox.h"


















































































































# 167 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qframe.h"






















































































































































# 168 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qgroupbox.h"




























































































































# 169 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qlabel.h"

















































































































































































# 170 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qlcdnumber.h"














































































































































# 171 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qlineedit.h"


























































































































































































































































































# 172 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qmainwindow.h"





































































































































































































# 173 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qmdiarea.h"




































































































































































# 174 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qmdisubwindow.h"

































































































































































# 175 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qmenu.h"










































































































































































































































































































































































































































# 176 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qmenubar.h"













































































































































































































































































































































































# 177 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qmenudata.h"
















































































# 178 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qplaintextedit.h"






































































































































































































































































































































# 179 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qprintpreviewwidget.h"






























































































































# 180 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qprogressbar.h"




































































































































# 181 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qpushbutton.h"






























































































































# 182 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qradiobutton.h"


























































































# 183 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qrubberband.h"










































































































# 184 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qscrollarea.h"







































































































# 185 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qscrollbar.h"








































































































# 186 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qsizegrip.h"

































































































# 187 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qslider.h"








































































































































# 188 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qspinbox.h"






























































































































































































# 189 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qsplashscreen.h"





































































































# 190 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qsplitter.h"

































































































































































































# 191 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qstackedwidget.h"






































































































# 192 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qstatusbar.h"






















































































































# 193 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtabbar.h"



























































































































































































# 194 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtabwidget.h"
















































































































































































































































# 195 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextbrowser.h"














































































































































# 196 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextedit.h"














































































































































































































































































































































































































































# 197 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtoolbar.h"





























































































































































































# 198 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtoolbox.h"






















































































































































# 199 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtoolbutton.h"









































































































































































































# 200 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qvalidator.h"

























































































































































































































# 201 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qworkspace.h"











































































































































# 202 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 2 "/home/eagle/qt-copy/include/QtSvg/QtSvg"

# 1 "/home/eagle/qt-copy/include/QtSvg/qgraphicssvgitem.h"













































# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/eagle/qt-copy/include/QtSvg/qgraphicssvgitem.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtSvg/qgraphicssvgitem.h"




# 51 "/home/eagle/qt-copy/include/QtSvg/qgraphicssvgitem.h"




typedef QtValidLicenseForSvgModule QtSvgModule;

class QSvgRenderer;
class QGraphicsSvgItemPrivate;

class  QGraphicsSvgItem : public QObject, public QGraphicsItem
{
Q_OBJECT

public:
QGraphicsSvgItem(QGraphicsItem *parentItem=0);
QGraphicsSvgItem(const QString &fileName, QGraphicsItem *parentItem=0);

void setSharedRenderer(QSvgRenderer *renderer);
QSvgRenderer *renderer() const;

void setElementId(const QString &id);
QString elementId() const;

void setCachingEnabled(bool);
bool isCachingEnabled() const;

void setMaximumCacheSize(const QSize &size);
QSize maximumCacheSize() const;

virtual QRectF boundingRect() const;

virtual void paint(QPainter *painter,
const QStyleOptionGraphicsItem *option,
QWidget *widget=0);

enum { Type = 13 };
virtual int type() const;

private:
QGraphicsSvgItem(const QGraphicsSvgItem &); QGraphicsSvgItem &operator=(const QGraphicsSvgItem &);


inline QGraphicsSvgItemPrivate *d_func()
{ return reinterpret_cast<QGraphicsSvgItemPrivate *>(QObject::d_ptr); }
inline const QGraphicsSvgItemPrivate *d_func() const
{ return reinterpret_cast<const QGraphicsSvgItemPrivate *>(QObject::d_ptr); }
friend class QGraphicsSvgItemPrivate;


};







# 3 "/home/eagle/qt-copy/include/QtSvg/QtSvg"

# 1 "/home/eagle/qt-copy/include/QtSvg/qsvggenerator.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qpaintdevice.h"













































































































































































# 47 "/home/eagle/qt-copy/include/QtSvg/qsvggenerator.h"




# 1 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtSvg/qsvggenerator.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"






























































































































































































































































# 52 "/home/eagle/qt-copy/include/QtSvg/qsvggenerator.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qobjectdefs.h"











































































































































































































































































































































































































# 53 "/home/eagle/qt-copy/include/QtSvg/qsvggenerator.h"


# 55 "/home/eagle/qt-copy/include/QtSvg/qsvggenerator.h"




typedef QtValidLicenseForSvgModule QtSvgModule;

class QSvgGeneratorPrivate;

class  QSvgGenerator : public QPaintDevice
{
inline QSvgGeneratorPrivate* d_func() { return reinterpret_cast<QSvgGeneratorPrivate *>(d_ptr); } inline const QSvgGeneratorPrivate* d_func() const { return reinterpret_cast<const QSvgGeneratorPrivate *>(d_ptr); } friend class QSvgGeneratorPrivate;
public:
QSvgGenerator();
~QSvgGenerator();

QSize size() const;
void setSize(const QSize &size);

QString fileName() const;
void setFileName(const QString &fileName);

QIODevice *outputDevice() const;
void setOutputDevice(QIODevice *outputDevice);

void setResolution(int dpi);
int resolution() const;
protected:
QPaintEngine *paintEngine() const;
int metric(QPaintDevice::PaintDeviceMetric metric) const;

private:
QSvgGeneratorPrivate *d_ptr;
};







# 4 "/home/eagle/qt-copy/include/QtSvg/QtSvg"

# 1 "/home/eagle/qt-copy/include/QtSvg/qsvgrenderer.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qmatrix.h"















































































































































































# 47 "/home/eagle/qt-copy/include/QtSvg/qsvgrenderer.h"




# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtSvg/qsvgrenderer.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qsize.h"






































































































































































































































































































































































# 52 "/home/eagle/qt-copy/include/QtSvg/qsvgrenderer.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qrect.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































# 53 "/home/eagle/qt-copy/include/QtSvg/qsvgrenderer.h"


# 55 "/home/eagle/qt-copy/include/QtSvg/qsvgrenderer.h"




typedef QtValidLicenseForSvgModule QtSvgModule;

class QSvgRendererPrivate;
class QPainter;
class QByteArray;

class  QSvgRenderer : public QObject
{
Q_OBJECT

Q_PROPERTY(QRectF viewBox READ viewBoxF WRITE setViewBox)
Q_PROPERTY(int framesPerSecond READ framesPerSecond WRITE setFramesPerSecond)
Q_PROPERTY(int currentFrame READ currentFrame WRITE setCurrentFrame)
public:
QSvgRenderer(QObject *parent=0);
QSvgRenderer(const QString &filename, QObject *parent=0);
QSvgRenderer(const QByteArray &contents, QObject *parent=0);
~QSvgRenderer();

bool isValid() const;

QSize defaultSize() const;

QRect viewBox() const;
QRectF viewBoxF() const;
void setViewBox(const QRect &viewbox);
void setViewBox(const QRectF &viewbox);

bool animated() const;
int framesPerSecond() const;
void setFramesPerSecond(int num);
int currentFrame() const;
void setCurrentFrame(int);
int animationDuration() const;

QRectF boundsOnElement(const QString &id) const;
bool elementExists(const QString &id) const;
QMatrix matrixForElement(const QString &id) const;

public slots:
bool load(const QString &filename);
bool load(const QByteArray &contents);
void render(QPainter *p);
void render(QPainter *p, const QRectF &bounds);

void render(QPainter *p, const QString &elementId,
const QRectF &bounds=QRectF());

signals:
void repaintNeeded();

private:
inline QSvgRendererPrivate* d_func() { return reinterpret_cast<QSvgRendererPrivate *>(d_ptr); } inline const QSvgRendererPrivate* d_func() const { return reinterpret_cast<const QSvgRendererPrivate *>(d_ptr); } friend class QSvgRendererPrivate;
};







# 5 "/home/eagle/qt-copy/include/QtSvg/QtSvg"

# 1 "/home/eagle/qt-copy/include/QtSvg/qsvgwidget.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qwidget.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtSvg/qsvgwidget.h"




# 51 "/home/eagle/qt-copy/include/QtSvg/qsvgwidget.h"




typedef QtValidLicenseForSvgModule QtSvgModule;

class QSvgWidgetPrivate;
class QPaintEvent;
class QSvgRenderer;

class  QSvgWidget : public QWidget
{
Q_OBJECT
public:
QSvgWidget(QWidget *parent=0);
QSvgWidget(const QString &file, QWidget *parent=0);
~QSvgWidget();

QSvgRenderer *renderer() const;

QSize sizeHint() const;
public slots:
void load(const QString &file);
void load(const QByteArray &contents);
protected:
void paintEvent(QPaintEvent *event);
private:
QSvgWidget(const QSvgWidget &); QSvgWidget &operator=(const QSvgWidget &);
inline QSvgWidgetPrivate* d_func() { return reinterpret_cast<QSvgWidgetPrivate *>(d_ptr); } inline const QSvgWidgetPrivate* d_func() const { return reinterpret_cast<const QSvgWidgetPrivate *>(d_ptr); } friend class QSvgWidgetPrivate;
};







# 6 "/home/eagle/qt-copy/include/QtSvg/QtSvg"

# 29 "qtscript_masterinclude.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextcodec.h"





























































































































































































# 1 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextcodecplugin.h"


































































































# 2 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuture.h"
























































































































































































































































































# 3 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfutureinterface.h"























































































































































































































































































































# 4 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuturesynchronizer.h"
























































































































# 5 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuturewatcher.h"
































































































































































































































# 6 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qrunnable.h"










































































# 7 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentcompilertest.h"









































































# 8 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentexception.h"


































































































































# 9 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfilter.h"


































































































































































































































































































































































































































































































































































































































































































































































# 10 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfilterkernel.h"















































































































































































































































































































































# 11 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfunctionwrappers.h"















































































































































































# 12 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentiteratekernel.h"

















































































































































































































































































































# 13 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmap.h"















































































































































































































































































































































































































































































































































































































































































































































































































# 14 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmapkernel.h"










































































































































































































































































# 15 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmedian.h"




































































































































# 16 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentreducekernel.h"
























































































































































































































































# 17 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentresultstore.h"











































































































































































































































# 18 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentrun.h"











































































































































































































































































































# 19 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentrunbase.h"



































































































































# 20 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentstoredfunctioncall.h"


















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 21 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentthreadengine.h"



















































































































































































































































































































# 22 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qthreadpool.h"
































































































# 23 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qendian.h"










































































































































































































































































































































# 24 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





























































































































































































































































































# 286 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 291 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 296 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 301 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 306 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 311 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 316 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 321 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 326 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 331 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 336 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 341 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 346 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 351 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 356 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 361 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 366 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 371 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 376 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 381 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 386 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 391 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 396 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 401 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 406 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 411 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 416 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 421 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 426 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 431 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 436 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 441 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 446 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 451 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 456 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 461 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 466 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 471 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 476 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 481 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 486 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 491 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 496 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 501 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 506 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 511 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 516 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 521 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 526 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 531 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 536 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 541 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 546 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 551 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 556 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 561 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 566 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 571 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 576 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 581 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 586 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 591 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 596 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 601 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 606 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 611 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 616 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 621 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 626 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 631 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 636 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 641 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 646 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 651 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 656 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 661 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 666 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 671 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 676 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 681 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 686 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 691 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 696 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 701 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 706 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 711 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 716 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 721 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 726 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 731 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 736 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 741 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 746 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 751 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 756 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 761 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 766 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 771 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 776 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 781 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 786 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 25 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 26 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlibraryinfo.h"



























































































# 27 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 28 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qnumeric.h"









































































# 29 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstractfileengine.h"

























































































































































































































































# 30 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbuffer.h"














































































































# 31 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdatastream.h"









































































































































































































































































































































































































































# 32 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdebug.h"






































































































































































































































































# 33 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdir.h"










































































































































































































































































# 34 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdiriterator.h"



































































































# 35 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfile.h"














































































































































































































# 36 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfileinfo.h"





























































































































































































# 37 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfilesystemwatcher.h"



























































































# 38 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfsfileengine.h"



























































































































# 39 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"






























































































































































































































































# 40 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qprocess.h"












































































































































































































# 41 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qresource.h"










































































































# 42 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsettings.h"





















































































































































































































































































































# 43 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtemporaryfile.h"














































































































# 44 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextstream.h"



















































































































































































































































































































































































# 45 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qurl.h"



























































































































































































































































































# 46 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstracteventdispatcher.h"













































































































# 47 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstractitemmodel.h"

































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbasictimer.h"












































































# 49 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcoreapplication.h"












































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcoreevent.h"




































































































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qeventloop.h"






































































































# 52 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmath.h"



































































































































# 53 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmetaobject.h"










































































































































































# 54 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"












































































































































































































































































































































# 55 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmimedata.h"










































































































# 56 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 57 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qobjectcleanuphandler.h"
















































































# 58 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qobjectdefs.h"











































































































































































































































































































































































































# 59 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpointer.h"


















































































































































# 60 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsharedmemory.h"

























































































































# 61 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsignalmapper.h"






































































































# 62 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsocketnotifier.h"































































































# 63 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsystemsemaphore.h"








































































































# 64 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtimer.h"






















































































































# 65 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtranslator.h"




































































































# 66 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qvariant.h"






















































































































































































































































































































































































































































































































































































































# 67 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfactoryinterface.h"





































































# 68 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlibrary.h"


























































































































# 69 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qplugin.h"
















































































































# 70 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpluginloader.h"






































































































# 71 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/quuid.h"
































































































































































































# 72 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qatomic.h"

























































































































































































































# 73 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbasicatomic.h"




















































































































































































































# 74 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmutex.h"



































































































































































































# 75 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qreadwritelock.h"






















































































































































































































































# 76 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsemaphore.h"





















































































# 77 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qthread.h"




































































































































































# 78 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qthreadstorage.h"































































































































































# 79 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qwaitcondition.h"











































































































# 80 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qalgorithms.h"

















































































































































































































































































































































































































































































































































































# 81 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbitarray.h"
















































































































































































# 82 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"












































































































































































































































































































































































































































































































































































































# 83 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbytearraymatcher.h"


















































































# 84 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcache.h"


























































































































































































































# 85 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qchar.h"















































































































































































































































































































































































































# 86 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcontainerfwd.h"









































































# 87 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcryptographichash.h"






















































































# 88 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"



































































































































































































































































































































# 89 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qhash.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 90 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qiterator.h"








































































# 91 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qline.h"


































































































































































































































































































































































































































# 92 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlinkedlist.h"
























































































































































































































































































































































































































































































































# 93 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlist.h"











































































































































































































































































































































































































































































































































































































































































































# 94 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlocale.h"






















































































































































































































































































































































































































































































































































































































































































# 95 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmap.h"






















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 96 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpair.h"

































































































































# 97 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpoint.h"






































































































































































































































































































































































# 98 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qqueue.h"







































































# 99 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qrect.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































# 100 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qregexp.h"

























































































































































# 101 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qset.h"


































































































































































































































































































































































# 102 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qshareddata.h"



































































































































































































































# 103 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsize.h"






































































































































































































































































































































































# 104 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstack.h"




















































































# 105 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 106 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"
















































































































































































































































# 107 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstringmatcher.h"




























































































# 108 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextboundaryfinder.h"




















































































































# 109 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtimeline.h"
















































































































































# 110 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qvarlengtharray.h"













































































































































































































































# 111 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qvector.h"































































































































































































































































































































































































































































































































































































































































































































































































# 112 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qxmlstream.h"













































































































































































































































































































































































































































































# 113 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtXml/QtXml"

# 1 "/home/eagle/qt-copy/include/QtXml/qdom.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtXml/qdom.h"


# 49 "/home/eagle/qt-copy/include/QtXml/qdom.h"




typedef QtValidLicenseForXmlModule QtXmlModule;



# 57 "/home/eagle/qt-copy/include/QtXml/qdom.h"
class QIODevice;
class QTextStream;

class QXmlInputSource;
class QXmlReader;

class QDomDocumentPrivate;
class QDomDocumentTypePrivate;
class QDomDocumentFragmentPrivate;
class QDomNodePrivate;
class QDomNodeListPrivate;
class QDomImplementationPrivate;
class QDomElementPrivate;
class QDomNotationPrivate;
class QDomEntityPrivate;
class QDomEntityReferencePrivate;
class QDomProcessingInstructionPrivate;
class QDomAttrPrivate;
class QDomCharacterDataPrivate;
class QDomTextPrivate;
class QDomCommentPrivate;
class QDomCDATASectionPrivate;
class QDomNamedNodeMapPrivate;
class QDomImplementationPrivate;

class QDomNodeList;
class QDomElement;
class QDomText;
class QDomComment;
class QDomCDATASection;
class QDomProcessingInstruction;
class QDomAttr;
class QDomEntityReference;
class QDomDocument;
class QDomNamedNodeMap;
class QDomDocument;
class QDomDocumentFragment;
class QDomDocumentType;
class QDomImplementation;
class QDomNode;
class QDomEntity;
class QDomNotation;
class QDomCharacterData;

class  QDomImplementation
{
public:
QDomImplementation();
QDomImplementation(const QDomImplementation&);
~QDomImplementation();
QDomImplementation& operator= (const QDomImplementation&);
bool operator== (const QDomImplementation&) const;
bool operator!= (const QDomImplementation&) const;


bool hasFeature(const QString& feature, const QString& version) const;
QDomDocumentType createDocumentType(const QString& qName, const QString& publicId, const QString& systemId);
QDomDocument createDocument(const QString& nsURI, const QString& qName, const QDomDocumentType& doctype);

enum InvalidDataPolicy { AcceptInvalidChars = 0, DropInvalidChars, ReturnNullNode };
static InvalidDataPolicy invalidDataPolicy();
static void setInvalidDataPolicy(InvalidDataPolicy policy);


bool isNull();

private:
QDomImplementationPrivate* impl;
QDomImplementation(QDomImplementationPrivate*);

friend class QDomDocument;
};

class  QDomNode
{
public:
enum NodeType {
ElementNode = 1,
AttributeNode = 2,
TextNode = 3,
CDATASectionNode = 4,
EntityReferenceNode = 5,
EntityNode = 6,
ProcessingInstructionNode = 7,
CommentNode = 8,
DocumentNode = 9,
DocumentTypeNode = 10,
DocumentFragmentNode = 11,
NotationNode = 12,
BaseNode = 21,
CharacterDataNode = 22 
};

enum EncodingPolicy
{
EncodingFromDocument = 1,
EncodingFromTextStream = 2
};

QDomNode();
QDomNode(const QDomNode&);
QDomNode& operator= (const QDomNode&);
bool operator== (const QDomNode&) const;
bool operator!= (const QDomNode&) const;
~QDomNode();


QDomNode insertBefore(const QDomNode& newChild, const QDomNode& refChild);
QDomNode insertAfter(const QDomNode& newChild, const QDomNode& refChild);
QDomNode replaceChild(const QDomNode& newChild, const QDomNode& oldChild);
QDomNode removeChild(const QDomNode& oldChild);
QDomNode appendChild(const QDomNode& newChild);
bool hasChildNodes() const;
QDomNode cloneNode(bool deep = true) const;
void normalize();
bool isSupported(const QString& feature, const QString& version) const;


QString nodeName() const;
NodeType nodeType() const;
QDomNode parentNode() const;
QDomNodeList childNodes() const;
QDomNode firstChild() const;
QDomNode lastChild() const;
QDomNode previousSibling() const;
QDomNode nextSibling() const;
QDomNamedNodeMap attributes() const;
QDomDocument ownerDocument() const;
QString namespaceURI() const;
QString localName() const;
bool hasAttributes() const;


QString nodeValue() const;
void setNodeValue(const QString&);
QString prefix() const;
void setPrefix(const QString& pre);


bool isAttr() const;
bool isCDATASection() const;
bool isDocumentFragment() const;
bool isDocument() const;
bool isDocumentType() const;
bool isElement() const;
bool isEntityReference() const;
bool isText() const;
bool isEntity() const;
bool isNotation() const;
bool isProcessingInstruction() const;
bool isCharacterData() const;
bool isComment() const;





QDomNode namedItem(const QString& name) const;

bool isNull() const;
void clear();

QDomAttr toAttr() const;
QDomCDATASection toCDATASection() const;
QDomDocumentFragment toDocumentFragment() const;
QDomDocument toDocument() const;
QDomDocumentType toDocumentType() const;
QDomElement toElement() const;
QDomEntityReference toEntityReference() const;
QDomText toText() const;
QDomEntity toEntity() const;
QDomNotation toNotation() const;
QDomProcessingInstruction toProcessingInstruction() const;
QDomCharacterData toCharacterData() const;
QDomComment toComment() const;

void save(QTextStream&, int) const;
void save(QTextStream&, int, EncodingPolicy) const; 

QDomElement firstChildElement(const QString &tagName = QString()) const;
QDomElement lastChildElement(const QString &tagName = QString()) const;
QDomElement previousSiblingElement(const QString &tagName = QString()) const;
QDomElement nextSiblingElement(const QString &taName = QString()) const;

int lineNumber() const;
int columnNumber() const;

protected:
QDomNodePrivate* impl;
QDomNode(QDomNodePrivate*);

private:
friend class QDomDocument;
friend class QDomDocumentType;
friend class QDomNodeList;
friend class QDomNamedNodeMap;
};

class  QDomNodeList
{
public:
QDomNodeList();
QDomNodeList(const QDomNodeList&);
QDomNodeList& operator= (const QDomNodeList&);
bool operator== (const QDomNodeList&) const;
bool operator!= (const QDomNodeList&) const;
~QDomNodeList();


QDomNode item(int index) const;
inline QDomNode at(int index) const { return item(index); } 


uint length() const;
inline int count() const { return length(); } 
inline int size() const { return length(); } 
inline bool isEmpty() const { return length() == 0; } 

private:
QDomNodeListPrivate* impl;
QDomNodeList(QDomNodeListPrivate*);

friend class QDomNode;
friend class QDomElement;
friend class QDomDocument;
};

class  QDomDocumentType : public QDomNode
{
public:
QDomDocumentType();
QDomDocumentType(const QDomDocumentType& x);
QDomDocumentType& operator= (const QDomDocumentType&);


QString name() const;
QDomNamedNodeMap entities() const;
QDomNamedNodeMap notations() const;
QString publicId() const;
QString systemId() const;
QString internalSubset() const;


inline QDomNode::NodeType nodeType() const { return DocumentTypeNode; }

private:
QDomDocumentType(QDomDocumentTypePrivate*);

friend class QDomImplementation;
friend class QDomDocument;
friend class QDomNode;
};

class  QDomDocument : public QDomNode
{
public:
QDomDocument();
explicit QDomDocument(const QString& name);
explicit QDomDocument(const QDomDocumentType& doctype);
QDomDocument(const QDomDocument& x);
QDomDocument& operator= (const QDomDocument&);
~QDomDocument();


QDomElement createElement(const QString& tagName);
QDomDocumentFragment createDocumentFragment();
QDomText createTextNode(const QString& data);
QDomComment createComment(const QString& data);
QDomCDATASection createCDATASection(const QString& data);
QDomProcessingInstruction createProcessingInstruction(const QString& target, const QString& data);
QDomAttr createAttribute(const QString& name);
QDomEntityReference createEntityReference(const QString& name);
QDomNodeList elementsByTagName(const QString& tagname) const;
QDomNode importNode(const QDomNode& importedNode, bool deep);
QDomElement createElementNS(const QString& nsURI, const QString& qName);
QDomAttr createAttributeNS(const QString& nsURI, const QString& qName);
QDomNodeList elementsByTagNameNS(const QString& nsURI, const QString& localName);
QDomElement elementById(const QString& elementId);


QDomDocumentType doctype() const;
QDomImplementation implementation() const;
QDomElement documentElement() const;


inline QDomNode::NodeType nodeType() const { return DocumentNode; }


bool setContent(const QByteArray& text, bool namespaceProcessing, QString *errorMsg=0, int *errorLine=0, int *errorColumn=0 );
bool setContent(const QString& text, bool namespaceProcessing, QString *errorMsg=0, int *errorLine=0, int *errorColumn=0 );
bool setContent(QIODevice* dev, bool namespaceProcessing, QString *errorMsg=0, int *errorLine=0, int *errorColumn=0 );
bool setContent(const QByteArray& text, QString *errorMsg=0, int *errorLine=0, int *errorColumn=0 );
bool setContent(const QString& text, QString *errorMsg=0, int *errorLine=0, int *errorColumn=0 );
bool setContent(QIODevice* dev, QString *errorMsg=0, int *errorLine=0, int *errorColumn=0 );
bool setContent(QXmlInputSource *source, QXmlReader *reader, QString *errorMsg=0, int *errorLine=0, int *errorColumn=0 );


QString toString(int = 1) const;
QByteArray toByteArray(int = 1) const;

private:
QDomDocument(QDomDocumentPrivate*);

friend class QDomNode;
};

class  QDomNamedNodeMap
{
public:
QDomNamedNodeMap();
QDomNamedNodeMap(const QDomNamedNodeMap&);
QDomNamedNodeMap& operator= (const QDomNamedNodeMap&);
bool operator== (const QDomNamedNodeMap&) const;
bool operator!= (const QDomNamedNodeMap&) const;
~QDomNamedNodeMap();


QDomNode namedItem(const QString& name) const;
QDomNode setNamedItem(const QDomNode& newNode);
QDomNode removeNamedItem(const QString& name);
QDomNode item(int index) const;
QDomNode namedItemNS(const QString& nsURI, const QString& localName) const;
QDomNode setNamedItemNS(const QDomNode& newNode);
QDomNode removeNamedItemNS(const QString& nsURI, const QString& localName);


uint length() const;
int count() const { return length(); } 
inline int size() const { return length(); } 
inline bool isEmpty() const { return length() == 0; } 


bool contains(const QString& name) const;

private:
QDomNamedNodeMapPrivate* impl;
QDomNamedNodeMap(QDomNamedNodeMapPrivate*);

friend class QDomNode;
friend class QDomDocumentType;
friend class QDomElement;
};

class  QDomDocumentFragment : public QDomNode
{
public:
QDomDocumentFragment();
QDomDocumentFragment(const QDomDocumentFragment& x);
QDomDocumentFragment& operator= (const QDomDocumentFragment&);


inline QDomNode::NodeType nodeType() const { return DocumentFragmentNode; }

private:
QDomDocumentFragment(QDomDocumentFragmentPrivate*);

friend class QDomDocument;
friend class QDomNode;
};

class  QDomCharacterData : public QDomNode
{
public:
QDomCharacterData();
QDomCharacterData(const QDomCharacterData& x);
QDomCharacterData& operator= (const QDomCharacterData&);


QString substringData(unsigned long offset, unsigned long count);
void appendData(const QString& arg);
void insertData(unsigned long offset, const QString& arg);
void deleteData(unsigned long offset, unsigned long count);
void replaceData(unsigned long offset, unsigned long count, const QString& arg);


uint length() const;


QString data() const;
void setData(const QString&);


QDomNode::NodeType nodeType() const;

private:
QDomCharacterData(QDomCharacterDataPrivate*);

friend class QDomDocument;
friend class QDomText;
friend class QDomComment;
friend class QDomNode;
};

class  QDomAttr : public QDomNode
{
public:
QDomAttr();
QDomAttr(const QDomAttr& x);
QDomAttr& operator= (const QDomAttr&);


QString name() const;
bool specified() const;
QDomElement ownerElement() const;


QString value() const;
void setValue(const QString&);


inline QDomNode::NodeType nodeType() const { return AttributeNode; }

private:
QDomAttr(QDomAttrPrivate*);

friend class QDomDocument;
friend class QDomElement;
friend class QDomNode;
};

class  QDomElement : public QDomNode
{
public:
QDomElement();
QDomElement(const QDomElement& x);
QDomElement& operator= (const QDomElement&);


QString attribute(const QString& name, const QString& defValue = QString() ) const;
void setAttribute(const QString& name, const QString& value);
void setAttribute(const QString& name, qlonglong value);
void setAttribute(const QString& name, qulonglong value);
inline void setAttribute(const QString& name, int value)
{ setAttribute(name, qlonglong(value)); }
inline void setAttribute(const QString& name, uint value)
{ setAttribute(name, qulonglong(value)); }
void setAttribute(const QString& name, float value);
void setAttribute(const QString& name, double value);
void removeAttribute(const QString& name);
QDomAttr attributeNode(const QString& name);
QDomAttr setAttributeNode(const QDomAttr& newAttr);
QDomAttr removeAttributeNode(const QDomAttr& oldAttr);
QDomNodeList elementsByTagName(const QString& tagname) const;
bool hasAttribute(const QString& name) const;

QString attributeNS(const QString nsURI, const QString& localName, const QString& defValue = QString()) const;
void setAttributeNS(const QString nsURI, const QString& qName, const QString& value);
inline void setAttributeNS(const QString nsURI, const QString& qName, int value)
{ setAttributeNS(nsURI, qName, qlonglong(value)); }
inline void setAttributeNS(const QString nsURI, const QString& qName, uint value)
{ setAttributeNS(nsURI, qName, qulonglong(value)); }
void setAttributeNS(const QString nsURI, const QString& qName, qlonglong value);
void setAttributeNS(const QString nsURI, const QString& qName, qulonglong value);
void setAttributeNS(const QString nsURI, const QString& qName, double value);
void removeAttributeNS(const QString& nsURI, const QString& localName);
QDomAttr attributeNodeNS(const QString& nsURI, const QString& localName);
QDomAttr setAttributeNodeNS(const QDomAttr& newAttr);
QDomNodeList elementsByTagNameNS(const QString& nsURI, const QString& localName) const;
bool hasAttributeNS(const QString& nsURI, const QString& localName) const;


QString tagName() const;
void setTagName(const QString& name); 


QDomNamedNodeMap attributes() const;
inline QDomNode::NodeType nodeType() const { return ElementNode; }

QString text() const;

private:
QDomElement(QDomElementPrivate*);

friend class QDomDocument;
friend class QDomNode;
friend class QDomAttr;
};

class  QDomText : public QDomCharacterData
{
public:
QDomText();
QDomText(const QDomText& x);
QDomText& operator= (const QDomText&);


QDomText splitText(int offset);


inline QDomNode::NodeType nodeType() const { return TextNode; }

private:
QDomText(QDomTextPrivate*);

friend class QDomCDATASection;
friend class QDomDocument;
friend class QDomNode;
};

class  QDomComment : public QDomCharacterData
{
public:
QDomComment();
QDomComment(const QDomComment& x);
QDomComment& operator= (const QDomComment&);


inline QDomNode::NodeType nodeType() const { return CommentNode; }

private:
QDomComment(QDomCommentPrivate*);

friend class QDomDocument;
friend class QDomNode;
};

class  QDomCDATASection : public QDomText
{
public:
QDomCDATASection();
QDomCDATASection(const QDomCDATASection& x);
QDomCDATASection& operator= (const QDomCDATASection&);


inline QDomNode::NodeType nodeType() const { return CDATASectionNode; }

private:
QDomCDATASection(QDomCDATASectionPrivate*);

friend class QDomDocument;
friend class QDomNode;
};

class  QDomNotation : public QDomNode
{
public:
QDomNotation();
QDomNotation(const QDomNotation& x);
QDomNotation& operator= (const QDomNotation&);


QString publicId() const;
QString systemId() const;


inline QDomNode::NodeType nodeType() const { return NotationNode; }

private:
QDomNotation(QDomNotationPrivate*);

friend class QDomDocument;
friend class QDomNode;
};

class  QDomEntity : public QDomNode
{
public:
QDomEntity();
QDomEntity(const QDomEntity& x);
QDomEntity& operator= (const QDomEntity&);


QString publicId() const;
QString systemId() const;
QString notationName() const;


inline QDomNode::NodeType nodeType() const { return EntityNode; }

private:
QDomEntity(QDomEntityPrivate*);

friend class QDomNode;
};

class  QDomEntityReference : public QDomNode
{
public:
QDomEntityReference();
QDomEntityReference(const QDomEntityReference& x);
QDomEntityReference& operator= (const QDomEntityReference&);


inline QDomNode::NodeType nodeType() const { return EntityReferenceNode; }

private:
QDomEntityReference(QDomEntityReferencePrivate*);

friend class QDomDocument;
friend class QDomNode;
};

class  QDomProcessingInstruction : public QDomNode
{
public:
QDomProcessingInstruction();
QDomProcessingInstruction(const QDomProcessingInstruction& x);
QDomProcessingInstruction& operator= (const QDomProcessingInstruction&);


QString target() const;


QString data() const;
void setData(const QString& d);


inline QDomNode::NodeType nodeType() const { return ProcessingInstructionNode; }

private:
QDomProcessingInstruction(QDomProcessingInstructionPrivate*);

friend class QDomDocument;
friend class QDomNode;
};


 QTextStream& operator<<(QTextStream&, const QDomNode&);



# 678 "/home/eagle/qt-copy/include/QtXml/qdom.h"





# 2 "/home/eagle/qt-copy/include/QtXml/QtXml"

# 1 "/home/eagle/qt-copy/include/QtXml/qxml.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qtextstream.h"



















































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtXml/qxml.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qfile.h"














































































































































































































# 48 "/home/eagle/qt-copy/include/QtXml/qxml.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtXml/qxml.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"
















































































































































































































































# 50 "/home/eagle/qt-copy/include/QtXml/qxml.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qlist.h"











































































































































































































































































































































































































































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtXml/qxml.h"


# 53 "/home/eagle/qt-copy/include/QtXml/qxml.h"




typedef QtValidLicenseForXmlModule QtXmlModule;

class QXmlNamespaceSupport;
class QXmlAttributes;
class QXmlContentHandler;
class QXmlDefaultHandler;
class QXmlDTDHandler;
class QXmlEntityResolver;
class QXmlErrorHandler;
class QXmlLexicalHandler;
class QXmlDeclHandler;
class QXmlInputSource;
class QXmlLocator;
class QXmlNamespaceSupport;
class QXmlParseException;

class QXmlReader;
class QXmlSimpleReader;

class QXmlSimpleReaderPrivate;
class QXmlNamespaceSupportPrivate;
class QXmlAttributesPrivate;
class QXmlInputSourcePrivate;
class QXmlParseExceptionPrivate;
class QXmlLocatorPrivate;
class QXmlDefaultHandlerPrivate;






class  QXmlNamespaceSupport
{
public:
QXmlNamespaceSupport();
~QXmlNamespaceSupport();

void setPrefix(const QString&, const QString&);

QString prefix(const QString&) const;
QString uri(const QString&) const;
void splitName(const QString&, QString&, QString&) const;
void processName(const QString&, bool, QString&, QString&) const;
QStringList prefixes() const;
QStringList prefixes(const QString&) const;

void pushContext();
void popContext();
void reset();

private:
QXmlNamespaceSupportPrivate *d;

friend class QXmlSimpleReaderPrivate;
QXmlNamespaceSupport(const QXmlNamespaceSupport &); QXmlNamespaceSupport &operator=(const QXmlNamespaceSupport &);
};






class  QXmlAttributes
{
public:
QXmlAttributes() {}
virtual ~QXmlAttributes() {}

int index(const QString& qName) const;
int index(const QLatin1String& qName) const;
int index(const QString& uri, const QString& localPart) const;
int length() const;
int count() const;
QString localName(int index) const;
QString qName(int index) const;
QString uri(int index) const;
QString type(int index) const;
QString type(const QString& qName) const;
QString type(const QString& uri, const QString& localName) const;
QString value(int index) const;
QString value(const QString& qName) const;
QString value(const QLatin1String& qName) const;
QString value(const QString& uri, const QString& localName) const;

void clear();
void append(const QString &qName, const QString &uri, const QString &localPart, const QString &value);

private:
struct Attribute {
QString qname, uri, localname, value;
};
typedef QList<Attribute> AttributeList;
AttributeList attList;

QXmlAttributesPrivate *d;
};





class  QXmlInputSource
{
public:
QXmlInputSource();
QXmlInputSource(QIODevice *dev);
virtual ~QXmlInputSource();

virtual void setData(const QString& dat);
virtual void setData(const QByteArray& dat);
virtual void fetchData();
virtual QString data() const;
virtual QChar next();
virtual void reset();

static const ushort EndOfData;
static const ushort EndOfDocument;






# 181 "/home/eagle/qt-copy/include/QtXml/qxml.h"
protected:
virtual QString fromRawData(const QByteArray &data, bool beginning = false);

private:
void init();
QXmlInputSourcePrivate *d;
};





class  QXmlParseException
{
public:
explicit QXmlParseException(const QString &name = QString(), int c = -1, int l = -1,
const QString &p = QString(), const QString &s = QString());
~QXmlParseException();

int columnNumber() const;
int lineNumber() const;
QString publicId() const;
QString systemId() const;
QString message() const;

private:
QXmlParseExceptionPrivate *d;
};






class  QXmlReader
{
public:
virtual ~QXmlReader() {}
virtual bool feature(const QString& name, bool *ok = 0) const = 0;
virtual void setFeature(const QString& name, bool value) = 0;
virtual bool hasFeature(const QString& name) const = 0;
virtual void* property(const QString& name, bool *ok = 0) const = 0;
virtual void setProperty(const QString& name, void* value) = 0;
virtual bool hasProperty(const QString& name) const = 0;
virtual void setEntityResolver(QXmlEntityResolver* handler) = 0;
virtual QXmlEntityResolver* entityResolver() const = 0;
virtual void setDTDHandler(QXmlDTDHandler* handler) = 0;
virtual QXmlDTDHandler* DTDHandler() const = 0;
virtual void setContentHandler(QXmlContentHandler* handler) = 0;
virtual QXmlContentHandler* contentHandler() const = 0;
virtual void setErrorHandler(QXmlErrorHandler* handler) = 0;
virtual QXmlErrorHandler* errorHandler() const = 0;
virtual void setLexicalHandler(QXmlLexicalHandler* handler) = 0;
virtual QXmlLexicalHandler* lexicalHandler() const = 0;
virtual void setDeclHandler(QXmlDeclHandler* handler) = 0;
virtual QXmlDeclHandler* declHandler() const = 0;
virtual bool parse(const QXmlInputSource& input) = 0;
virtual bool parse(const QXmlInputSource* input) = 0;
};

class  QXmlSimpleReader : public QXmlReader
{
public:
QXmlSimpleReader();
virtual ~QXmlSimpleReader();

bool feature(const QString& name, bool *ok = 0) const;
void setFeature(const QString& name, bool value);
bool hasFeature(const QString& name) const;

void* property(const QString& name, bool *ok = 0) const;
void setProperty(const QString& name, void* value);
bool hasProperty(const QString& name) const;

void setEntityResolver(QXmlEntityResolver* handler);
QXmlEntityResolver* entityResolver() const;
void setDTDHandler(QXmlDTDHandler* handler);
QXmlDTDHandler* DTDHandler() const;
void setContentHandler(QXmlContentHandler* handler);
QXmlContentHandler* contentHandler() const;
void setErrorHandler(QXmlErrorHandler* handler);
QXmlErrorHandler* errorHandler() const;
void setLexicalHandler(QXmlLexicalHandler* handler);
QXmlLexicalHandler* lexicalHandler() const;
void setDeclHandler(QXmlDeclHandler* handler);
QXmlDeclHandler* declHandler() const;

bool parse(const QXmlInputSource& input);
bool parse(const QXmlInputSource* input);
virtual bool parse(const QXmlInputSource* input, bool incremental);
virtual bool parseContinue();

private:
QXmlSimpleReader(const QXmlSimpleReader &); QXmlSimpleReader &operator=(const QXmlSimpleReader &);
inline QXmlSimpleReaderPrivate* d_func() { return reinterpret_cast<QXmlSimpleReaderPrivate *>(d_ptr); } inline const QXmlSimpleReaderPrivate* d_func() const { return reinterpret_cast<const QXmlSimpleReaderPrivate *>(d_ptr); } friend class QXmlSimpleReaderPrivate;
QXmlSimpleReaderPrivate* d_ptr;

friend class QXmlSimpleReaderLocator;
};





class  QXmlLocator
{
public:
QXmlLocator();
virtual ~QXmlLocator();

virtual int columnNumber() const = 0;
virtual int lineNumber() const = 0;


};





class  QXmlContentHandler
{
public:
virtual ~QXmlContentHandler() {}
virtual void setDocumentLocator(QXmlLocator* locator) = 0;
virtual bool startDocument() = 0;
virtual bool endDocument() = 0;
virtual bool startPrefixMapping(const QString& prefix, const QString& uri) = 0;
virtual bool endPrefixMapping(const QString& prefix) = 0;
virtual bool startElement(const QString& namespaceURI, const QString& localName, const QString& qName, const QXmlAttributes& atts) = 0;
virtual bool endElement(const QString& namespaceURI, const QString& localName, const QString& qName) = 0;
virtual bool characters(const QString& ch) = 0;
virtual bool ignorableWhitespace(const QString& ch) = 0;
virtual bool processingInstruction(const QString& target, const QString& data) = 0;
virtual bool skippedEntity(const QString& name) = 0;
virtual QString errorString() const = 0;
};

class  QXmlErrorHandler
{
public:
virtual ~QXmlErrorHandler() {}
virtual bool warning(const QXmlParseException& exception) = 0;
virtual bool error(const QXmlParseException& exception) = 0;
virtual bool fatalError(const QXmlParseException& exception) = 0;
virtual QString errorString() const = 0;
};

class  QXmlDTDHandler
{
public:
virtual ~QXmlDTDHandler() {}
virtual bool notationDecl(const QString& name, const QString& publicId, const QString& systemId) = 0;
virtual bool unparsedEntityDecl(const QString& name, const QString& publicId, const QString& systemId, const QString& notationName) = 0;
virtual QString errorString() const = 0;
};

class  QXmlEntityResolver
{
public:
virtual ~QXmlEntityResolver() {}
virtual bool resolveEntity(const QString& publicId, const QString& systemId, QXmlInputSource*& ret) = 0;
virtual QString errorString() const = 0;
};

class  QXmlLexicalHandler
{
public:
virtual ~QXmlLexicalHandler() {}
virtual bool startDTD(const QString& name, const QString& publicId, const QString& systemId) = 0;
virtual bool endDTD() = 0;
virtual bool startEntity(const QString& name) = 0;
virtual bool endEntity(const QString& name) = 0;
virtual bool startCDATA() = 0;
virtual bool endCDATA() = 0;
virtual bool comment(const QString& ch) = 0;
virtual QString errorString() const = 0;
};

class  QXmlDeclHandler
{
public:
virtual ~QXmlDeclHandler() {}
virtual bool attributeDecl(const QString& eName, const QString& aName, const QString& type, const QString& valueDefault, const QString& value) = 0;
virtual bool internalEntityDecl(const QString& name, const QString& value) = 0;
virtual bool externalEntityDecl(const QString& name, const QString& publicId, const QString& systemId) = 0;
virtual QString errorString() const = 0;

};


class  QXmlDefaultHandler : public QXmlContentHandler, public QXmlErrorHandler, public QXmlDTDHandler, public QXmlEntityResolver, public QXmlLexicalHandler, public QXmlDeclHandler
{
public:
QXmlDefaultHandler() { }
virtual ~QXmlDefaultHandler() { }

void setDocumentLocator(QXmlLocator* locator);
bool startDocument();
bool endDocument();
bool startPrefixMapping(const QString& prefix, const QString& uri);
bool endPrefixMapping(const QString& prefix);
bool startElement(const QString& namespaceURI, const QString& localName, const QString& qName, const QXmlAttributes& atts);
bool endElement(const QString& namespaceURI, const QString& localName, const QString& qName);
bool characters(const QString& ch);
bool ignorableWhitespace(const QString& ch);
bool processingInstruction(const QString& target, const QString& data);
bool skippedEntity(const QString& name);

bool warning(const QXmlParseException& exception);
bool error(const QXmlParseException& exception);
bool fatalError(const QXmlParseException& exception);

bool notationDecl(const QString& name, const QString& publicId, const QString& systemId);
bool unparsedEntityDecl(const QString& name, const QString& publicId, const QString& systemId, const QString& notationName);

bool resolveEntity(const QString& publicId, const QString& systemId, QXmlInputSource*& ret);

bool startDTD(const QString& name, const QString& publicId, const QString& systemId);
bool endDTD();
bool startEntity(const QString& name);
bool endEntity(const QString& name);
bool startCDATA();
bool endCDATA();
bool comment(const QString& ch);

bool attributeDecl(const QString& eName, const QString& aName, const QString& type, const QString& valueDefault, const QString& value);
bool internalEntityDecl(const QString& name, const QString& value);
bool externalEntityDecl(const QString& name, const QString& publicId, const QString& systemId);

QString errorString() const;

private:
QXmlDefaultHandlerPrivate *d;
QXmlDefaultHandler(const QXmlDefaultHandler &); QXmlDefaultHandler &operator=(const QXmlDefaultHandler &);
};



inline int QXmlAttributes::count() const
{ return length(); }






# 3 "/home/eagle/qt-copy/include/QtXml/QtXml"

# 1 "/home/eagle/qt-copy/include/QtXml/qxmlstream.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qxmlstream.h"













































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtXml/qxmlstream.h"


# 49 "/home/eagle/qt-copy/include/QtXml/qxmlstream.h"




typedef QtValidLicenseForXmlModule QtXmlModule;

















# 71 "/home/eagle/qt-copy/include/QtXml/qxmlstream.h"





# 4 "/home/eagle/qt-copy/include/QtXml/QtXml"

# 30 "qtscript_masterinclude.h"


# 1 "/home/eagle/qt-copy/include/QtCore/qtextcodec.h"





























































































































































































# 1 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextcodecplugin.h"


































































































# 2 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuture.h"
























































































































































































































































































# 3 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfutureinterface.h"























































































































































































































































































































# 4 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuturesynchronizer.h"
























































































































# 5 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuturewatcher.h"
































































































































































































































# 6 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qrunnable.h"










































































# 7 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentcompilertest.h"









































































# 8 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentexception.h"


































































































































# 9 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfilter.h"


































































































































































































































































































































































































































































































































































































































































































































































# 10 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfilterkernel.h"















































































































































































































































































































































# 11 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfunctionwrappers.h"















































































































































































# 12 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentiteratekernel.h"

















































































































































































































































































































# 13 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmap.h"















































































































































































































































































































































































































































































































































































































































































































































































































# 14 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmapkernel.h"










































































































































































































































































# 15 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmedian.h"




































































































































# 16 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentreducekernel.h"
























































































































































































































































# 17 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentresultstore.h"











































































































































































































































# 18 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentrun.h"











































































































































































































































































































# 19 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentrunbase.h"



































































































































# 20 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentstoredfunctioncall.h"


















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 21 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentthreadengine.h"



















































































































































































































































































































# 22 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qthreadpool.h"
































































































# 23 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qendian.h"










































































































































































































































































































































# 24 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





























































































































































































































































































# 286 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 291 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 296 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 301 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 306 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 311 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 316 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 321 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 326 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 331 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 336 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 341 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 346 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 351 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 356 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 361 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 366 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 371 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 376 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 381 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 386 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 391 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 396 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 401 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 406 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 411 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 416 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 421 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 426 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 431 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 436 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 441 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 446 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 451 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 456 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 461 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 466 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 471 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 476 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 481 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 486 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 491 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 496 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 501 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 506 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 511 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 516 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 521 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 526 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 531 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 536 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 541 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 546 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 551 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 556 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 561 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 566 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 571 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 576 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 581 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 586 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 591 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 596 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 601 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 606 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 611 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 616 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 621 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 626 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 631 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 636 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 641 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 646 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 651 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 656 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 661 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 666 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 671 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 676 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 681 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 686 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 691 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 696 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 701 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 706 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 711 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 716 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 721 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 726 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 731 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 736 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 741 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 746 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 751 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 756 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 761 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 766 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 771 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 776 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 781 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 786 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 25 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 26 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlibraryinfo.h"



























































































# 27 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 28 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qnumeric.h"









































































# 29 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstractfileengine.h"

























































































































































































































































# 30 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbuffer.h"














































































































# 31 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdatastream.h"









































































































































































































































































































































































































































# 32 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdebug.h"






































































































































































































































































# 33 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdir.h"










































































































































































































































































# 34 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdiriterator.h"



































































































# 35 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfile.h"














































































































































































































# 36 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfileinfo.h"





























































































































































































# 37 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfilesystemwatcher.h"



























































































# 38 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfsfileengine.h"



























































































































# 39 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"






























































































































































































































































# 40 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qprocess.h"












































































































































































































# 41 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qresource.h"










































































































# 42 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsettings.h"





















































































































































































































































































































# 43 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtemporaryfile.h"














































































































# 44 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextstream.h"



















































































































































































































































































































































































# 45 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qurl.h"



























































































































































































































































































# 46 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstracteventdispatcher.h"













































































































# 47 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstractitemmodel.h"

































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbasictimer.h"












































































# 49 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcoreapplication.h"












































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcoreevent.h"




































































































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qeventloop.h"






































































































# 52 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmath.h"



































































































































# 53 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmetaobject.h"










































































































































































# 54 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"












































































































































































































































































































































# 55 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmimedata.h"










































































































# 56 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 57 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qobjectcleanuphandler.h"
















































































# 58 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qobjectdefs.h"











































































































































































































































































































































































































# 59 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpointer.h"


















































































































































# 60 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsharedmemory.h"

























































































































# 61 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsignalmapper.h"






































































































# 62 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsocketnotifier.h"































































































# 63 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsystemsemaphore.h"








































































































# 64 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtimer.h"






















































































































# 65 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtranslator.h"




































































































# 66 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qvariant.h"






















































































































































































































































































































































































































































































































































































































# 67 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfactoryinterface.h"





































































# 68 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlibrary.h"


























































































































# 69 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qplugin.h"
















































































































# 70 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpluginloader.h"






































































































# 71 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/quuid.h"
































































































































































































# 72 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qatomic.h"

























































































































































































































# 73 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbasicatomic.h"




















































































































































































































# 74 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmutex.h"



































































































































































































# 75 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qreadwritelock.h"






















































































































































































































































# 76 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsemaphore.h"





















































































# 77 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qthread.h"




































































































































































# 78 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qthreadstorage.h"































































































































































# 79 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qwaitcondition.h"











































































































# 80 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qalgorithms.h"

















































































































































































































































































































































































































































































































































































# 81 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbitarray.h"
















































































































































































# 82 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"












































































































































































































































































































































































































































































































































































































# 83 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbytearraymatcher.h"


















































































# 84 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcache.h"


























































































































































































































# 85 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qchar.h"















































































































































































































































































































































































































# 86 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcontainerfwd.h"









































































# 87 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcryptographichash.h"






















































































# 88 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"



































































































































































































































































































































# 89 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qhash.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 90 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qiterator.h"








































































# 91 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qline.h"


































































































































































































































































































































































































































# 92 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlinkedlist.h"
























































































































































































































































































































































































































































































































# 93 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlist.h"











































































































































































































































































































































































































































































































































































































































































































# 94 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlocale.h"






















































































































































































































































































































































































































































































































































































































































































# 95 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmap.h"






















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 96 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpair.h"

































































































































# 97 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpoint.h"






































































































































































































































































































































































# 98 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qqueue.h"







































































# 99 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qrect.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































# 100 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qregexp.h"

























































































































































# 101 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qset.h"


































































































































































































































































































































































# 102 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qshareddata.h"



































































































































































































































# 103 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsize.h"






































































































































































































































































































































































# 104 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstack.h"




















































































# 105 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 106 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"
















































































































































































































































# 107 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstringmatcher.h"




























































































# 108 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextboundaryfinder.h"




















































































































# 109 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtimeline.h"
















































































































































# 110 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qvarlengtharray.h"













































































































































































































































# 111 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qvector.h"































































































































































































































































































































































































































































































































































































































































































































































































# 112 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qxmlstream.h"













































































































































































































































































































































































































































































# 113 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtXml/QtXml"

# 1 "/home/eagle/qt-copy/include/QtXml/qdom.h"







































































































































































































































































































































































































































































































































































































































































































# 2 "/home/eagle/qt-copy/include/QtXml/QtXml"

# 1 "/home/eagle/qt-copy/include/QtXml/qxml.h"











































































































































































































































































































































































































































# 3 "/home/eagle/qt-copy/include/QtXml/QtXml"

# 1 "/home/eagle/qt-copy/include/QtXml/qxmlstream.h"











































































# 4 "/home/eagle/qt-copy/include/QtXml/QtXml"

# 1 "/home/eagle/qt-copy/include/QtUiTools/QtUiTools"

# 1 "/home/eagle/qt-copy/include/QtUiTools/quiloader.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 1 "/home/eagle/qt-copy/include/QtCore/QObject"

# 47 "/home/eagle/qt-copy/include/QtUiTools/quiloader.h"


# 49 "/home/eagle/qt-copy/include/QtUiTools/quiloader.h"




class QWidget;
class QLayout;
class QAction;
class QActionGroup;
class QString;
class QIODevice;
class QDir;

class QUiLoaderPrivate;
class QUiLoader : public QObject
{
Q_OBJECT
public:
QUiLoader(QObject *parent = 0);
virtual ~QUiLoader();

QStringList pluginPaths() const;
void clearPluginPaths();
void addPluginPath(const QString &path);

QWidget *load(QIODevice *device, QWidget *parentWidget = 0);
QStringList availableWidgets() const;

virtual QWidget *createWidget(const QString &className, QWidget *parent = 0, const QString &name = QString());
virtual QLayout *createLayout(const QString &className, QObject *parent = 0, const QString &name = QString());
virtual QActionGroup *createActionGroup(QObject *parent = 0, const QString &name = QString());
virtual QAction *createAction(QObject *parent = 0, const QString &name = QString());

void setWorkingDirectory(const QDir &dir);
QDir workingDirectory() const;

void setScriptingEnabled(bool enabled);
bool isScriptingEnabled() const;

private:
QUiLoaderPrivate *d_ptr;
inline QUiLoaderPrivate* d_func() { return reinterpret_cast<QUiLoaderPrivate *>(d_ptr); } inline const QUiLoaderPrivate* d_func() const { return reinterpret_cast<const QUiLoaderPrivate *>(d_ptr); } friend class QUiLoaderPrivate;
QUiLoader(const QUiLoader &); QUiLoader &operator=(const QUiLoader &);
};






# 2 "/home/eagle/qt-copy/include/QtUiTools/QtUiTools"

# 32 "qtscript_masterinclude.h"



# 1 "/home/eagle/qt-copy/include/QtCore/qtextcodec.h"





























































































































































































# 1 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextcodecplugin.h"


































































































# 2 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuture.h"
























































































































































































































































































# 3 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfutureinterface.h"























































































































































































































































































































# 4 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuturesynchronizer.h"
























































































































# 5 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuturewatcher.h"
































































































































































































































# 6 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qrunnable.h"










































































# 7 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentcompilertest.h"









































































# 8 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentexception.h"


































































































































# 9 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfilter.h"


































































































































































































































































































































































































































































































































































































































































































































































# 10 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfilterkernel.h"















































































































































































































































































































































# 11 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfunctionwrappers.h"















































































































































































# 12 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentiteratekernel.h"

















































































































































































































































































































# 13 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmap.h"















































































































































































































































































































































































































































































































































































































































































































































































































# 14 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmapkernel.h"










































































































































































































































































# 15 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmedian.h"




































































































































# 16 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentreducekernel.h"
























































































































































































































































# 17 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentresultstore.h"











































































































































































































































# 18 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentrun.h"











































































































































































































































































































# 19 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentrunbase.h"



































































































































# 20 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentstoredfunctioncall.h"


















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 21 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentthreadengine.h"



















































































































































































































































































































# 22 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qthreadpool.h"
































































































# 23 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qendian.h"










































































































































































































































































































































# 24 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





























































































































































































































































































# 286 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 291 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 296 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 301 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 306 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 311 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 316 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 321 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 326 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 331 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 336 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 341 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 346 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 351 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 356 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 361 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 366 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 371 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 376 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 381 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 386 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 391 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 396 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 401 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 406 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 411 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 416 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 421 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 426 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 431 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 436 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 441 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 446 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 451 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 456 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 461 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 466 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 471 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 476 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 481 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 486 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 491 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 496 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 501 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 506 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 511 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 516 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 521 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 526 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 531 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 536 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 541 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 546 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 551 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 556 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 561 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 566 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 571 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 576 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 581 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 586 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 591 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 596 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 601 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 606 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 611 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 616 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 621 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 626 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 631 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 636 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 641 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 646 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 651 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 656 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 661 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 666 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 671 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 676 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 681 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 686 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 691 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 696 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 701 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 706 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 711 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 716 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 721 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 726 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 731 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 736 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 741 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 746 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 751 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 756 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 761 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 766 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 771 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 776 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 781 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 786 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 25 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 26 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlibraryinfo.h"



























































































# 27 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 28 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qnumeric.h"









































































# 29 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstractfileengine.h"

























































































































































































































































# 30 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbuffer.h"














































































































# 31 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdatastream.h"









































































































































































































































































































































































































































# 32 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdebug.h"






































































































































































































































































# 33 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdir.h"










































































































































































































































































# 34 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdiriterator.h"



































































































# 35 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfile.h"














































































































































































































# 36 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfileinfo.h"





























































































































































































# 37 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfilesystemwatcher.h"



























































































# 38 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfsfileengine.h"



























































































































# 39 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"






























































































































































































































































# 40 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qprocess.h"












































































































































































































# 41 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qresource.h"










































































































# 42 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsettings.h"





















































































































































































































































































































# 43 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtemporaryfile.h"














































































































# 44 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextstream.h"



















































































































































































































































































































































































# 45 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qurl.h"



























































































































































































































































































# 46 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstracteventdispatcher.h"













































































































# 47 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstractitemmodel.h"

































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbasictimer.h"












































































# 49 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcoreapplication.h"












































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcoreevent.h"




































































































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qeventloop.h"






































































































# 52 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmath.h"



































































































































# 53 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmetaobject.h"










































































































































































# 54 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"












































































































































































































































































































































# 55 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmimedata.h"










































































































# 56 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 57 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qobjectcleanuphandler.h"
















































































# 58 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qobjectdefs.h"











































































































































































































































































































































































































# 59 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpointer.h"


















































































































































# 60 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsharedmemory.h"

























































































































# 61 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsignalmapper.h"






































































































# 62 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsocketnotifier.h"































































































# 63 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsystemsemaphore.h"








































































































# 64 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtimer.h"






















































































































# 65 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtranslator.h"




































































































# 66 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qvariant.h"






















































































































































































































































































































































































































































































































































































































# 67 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfactoryinterface.h"





































































# 68 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlibrary.h"


























































































































# 69 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qplugin.h"
















































































































# 70 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpluginloader.h"






































































































# 71 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/quuid.h"
































































































































































































# 72 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qatomic.h"

























































































































































































































# 73 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbasicatomic.h"




















































































































































































































# 74 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmutex.h"



































































































































































































# 75 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qreadwritelock.h"






















































































































































































































































# 76 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsemaphore.h"





















































































# 77 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qthread.h"




































































































































































# 78 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qthreadstorage.h"































































































































































# 79 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qwaitcondition.h"











































































































# 80 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qalgorithms.h"

















































































































































































































































































































































































































































































































































































# 81 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbitarray.h"
















































































































































































# 82 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"












































































































































































































































































































































































































































































































































































































# 83 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbytearraymatcher.h"


















































































# 84 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcache.h"


























































































































































































































# 85 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qchar.h"















































































































































































































































































































































































































# 86 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcontainerfwd.h"









































































# 87 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcryptographichash.h"






















































































# 88 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"



































































































































































































































































































































# 89 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qhash.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 90 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qiterator.h"








































































# 91 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qline.h"


































































































































































































































































































































































































































# 92 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlinkedlist.h"
























































































































































































































































































































































































































































































































# 93 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlist.h"











































































































































































































































































































































































































































































































































































































































































































# 94 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlocale.h"






















































































































































































































































































































































































































































































































































































































































































# 95 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmap.h"






















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 96 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpair.h"

































































































































# 97 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpoint.h"






































































































































































































































































































































































# 98 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qqueue.h"







































































# 99 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qrect.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































# 100 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qregexp.h"

























































































































































# 101 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qset.h"


































































































































































































































































































































































# 102 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qshareddata.h"



































































































































































































































# 103 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsize.h"






































































































































































































































































































































































# 104 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstack.h"




















































































# 105 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 106 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"
















































































































































































































































# 107 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstringmatcher.h"




























































































# 108 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextboundaryfinder.h"




















































































































# 109 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtimeline.h"
















































































































































# 110 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qvarlengtharray.h"













































































































































































































































# 111 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qvector.h"































































































































































































































































































































































































































































































































































































































































































































































































# 112 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qxmlstream.h"













































































































































































































































































































































































































































































# 113 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtXmlPatterns/QtXmlPatterns"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextcodec.h"





























































































































































































# 1 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextcodecplugin.h"


































































































# 2 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuture.h"
























































































































































































































































































# 3 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfutureinterface.h"























































































































































































































































































































# 4 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuturesynchronizer.h"
























































































































# 5 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuturewatcher.h"
































































































































































































































# 6 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qrunnable.h"










































































# 7 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentcompilertest.h"









































































# 8 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentexception.h"


































































































































# 9 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfilter.h"


































































































































































































































































































































































































































































































































































































































































































































































# 10 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfilterkernel.h"















































































































































































































































































































































# 11 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfunctionwrappers.h"















































































































































































# 12 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentiteratekernel.h"

















































































































































































































































































































# 13 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmap.h"















































































































































































































































































































































































































































































































































































































































































































































































































# 14 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmapkernel.h"










































































































































































































































































# 15 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmedian.h"




































































































































# 16 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentreducekernel.h"
























































































































































































































































# 17 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentresultstore.h"











































































































































































































































# 18 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentrun.h"











































































































































































































































































































# 19 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentrunbase.h"



































































































































# 20 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentstoredfunctioncall.h"


















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 21 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentthreadengine.h"



















































































































































































































































































































# 22 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qthreadpool.h"
































































































# 23 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qendian.h"










































































































































































































































































































































# 24 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





























































































































































































































































































# 286 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 291 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 296 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 301 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 306 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 311 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 316 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 321 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 326 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 331 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 336 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 341 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 346 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 351 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 356 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 361 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 366 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 371 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 376 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 381 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 386 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 391 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 396 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 401 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 406 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 411 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 416 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 421 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 426 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 431 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 436 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 441 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 446 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 451 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 456 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 461 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 466 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 471 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 476 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 481 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 486 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 491 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 496 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 501 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 506 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 511 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 516 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 521 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 526 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 531 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 536 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 541 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 546 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 551 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 556 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 561 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 566 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 571 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 576 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 581 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 586 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 591 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 596 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 601 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 606 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 611 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 616 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 621 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 626 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 631 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 636 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 641 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 646 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 651 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 656 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 661 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 666 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 671 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 676 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 681 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 686 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 691 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 696 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 701 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 706 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 711 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 716 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 721 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 726 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 731 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 736 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 741 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 746 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 751 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 756 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 761 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 766 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 771 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 776 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 781 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 786 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 25 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 26 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlibraryinfo.h"



























































































# 27 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 28 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qnumeric.h"









































































# 29 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstractfileengine.h"

























































































































































































































































# 30 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbuffer.h"














































































































# 31 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdatastream.h"









































































































































































































































































































































































































































# 32 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdebug.h"






































































































































































































































































# 33 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdir.h"










































































































































































































































































# 34 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdiriterator.h"



































































































# 35 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfile.h"














































































































































































































# 36 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfileinfo.h"





























































































































































































# 37 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfilesystemwatcher.h"



























































































# 38 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfsfileengine.h"



























































































































# 39 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"






























































































































































































































































# 40 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qprocess.h"












































































































































































































# 41 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qresource.h"










































































































# 42 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsettings.h"





















































































































































































































































































































# 43 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtemporaryfile.h"














































































































# 44 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextstream.h"



















































































































































































































































































































































































# 45 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qurl.h"



























































































































































































































































































# 46 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstracteventdispatcher.h"













































































































# 47 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstractitemmodel.h"

































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbasictimer.h"












































































# 49 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcoreapplication.h"












































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcoreevent.h"




































































































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qeventloop.h"






































































































# 52 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmath.h"



































































































































# 53 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmetaobject.h"










































































































































































# 54 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"












































































































































































































































































































































# 55 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmimedata.h"










































































































# 56 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 57 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qobjectcleanuphandler.h"
















































































# 58 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qobjectdefs.h"











































































































































































































































































































































































































# 59 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpointer.h"


















































































































































# 60 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsharedmemory.h"

























































































































# 61 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsignalmapper.h"






































































































# 62 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsocketnotifier.h"































































































# 63 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsystemsemaphore.h"








































































































# 64 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtimer.h"






















































































































# 65 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtranslator.h"




































































































# 66 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qvariant.h"






















































































































































































































































































































































































































































































































































































































# 67 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfactoryinterface.h"





































































# 68 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlibrary.h"


























































































































# 69 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qplugin.h"
















































































































# 70 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpluginloader.h"






































































































# 71 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/quuid.h"
































































































































































































# 72 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qatomic.h"

























































































































































































































# 73 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbasicatomic.h"




















































































































































































































# 74 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmutex.h"



































































































































































































# 75 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qreadwritelock.h"






















































































































































































































































# 76 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsemaphore.h"





















































































# 77 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qthread.h"




































































































































































# 78 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qthreadstorage.h"































































































































































# 79 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qwaitcondition.h"











































































































# 80 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qalgorithms.h"

















































































































































































































































































































































































































































































































































































# 81 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbitarray.h"
















































































































































































# 82 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"












































































































































































































































































































































































































































































































































































































# 83 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbytearraymatcher.h"


















































































# 84 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcache.h"


























































































































































































































# 85 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qchar.h"















































































































































































































































































































































































































# 86 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcontainerfwd.h"









































































# 87 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcryptographichash.h"






















































































# 88 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"



































































































































































































































































































































# 89 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qhash.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 90 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qiterator.h"








































































# 91 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qline.h"


































































































































































































































































































































































































































# 92 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlinkedlist.h"
























































































































































































































































































































































































































































































































# 93 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlist.h"











































































































































































































































































































































































































































































































































































































































































































# 94 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlocale.h"






















































































































































































































































































































































































































































































































































































































































































# 95 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmap.h"






















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 96 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpair.h"

































































































































# 97 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpoint.h"






































































































































































































































































































































































# 98 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qqueue.h"







































































# 99 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qrect.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































# 100 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qregexp.h"

























































































































































# 101 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qset.h"


































































































































































































































































































































































# 102 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qshareddata.h"



































































































































































































































# 103 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsize.h"






































































































































































































































































































































































# 104 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstack.h"




















































































# 105 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 106 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"
















































































































































































































































# 107 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstringmatcher.h"




























































































# 108 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextboundaryfinder.h"




















































































































# 109 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtimeline.h"
















































































































































# 110 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qvarlengtharray.h"













































































































































































































































# 111 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qvector.h"































































































































































































































































































































































































































































































































































































































































































































































































# 112 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qxmlstream.h"













































































































































































































































































































































































































































































# 113 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qftp.h"






















































































































































































# 2 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qhttp.h"
























































































































































































































































































































# 3 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qnetworkaccessmanager.h"




























































































































# 4 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qnetworkcookie.h"













































































































































# 5 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qnetworkreply.h"













































































































































































# 6 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qnetworkrequest.h"




































































































































# 7 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qauthenticator.h"

























































































# 8 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qhostaddress.h"






















































































































































# 9 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qhostinfo.h"






































































































# 10 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qnetworkinterface.h"






























































































































# 11 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qnetworkproxy.h"

















































































































# 12 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qurlinfo.h"





































































































































# 13 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qabstractsocket.h"




















































































































































































































































# 14 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qlocalserver.h"










































































































# 15 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qlocalsocket.h"




























































































































































# 16 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qtcpserver.h"















































































































# 17 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qtcpsocket.h"












































































# 18 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qudpsocket.h"





































































































# 19 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qssl.h"






































































































# 20 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qsslcertificate.h"
























































































































































# 21 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qsslcipher.h"















































































































# 22 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qsslconfiguration.h"










































































































































# 23 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qsslerror.h"



































































































































# 24 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qsslkey.h"




























































































































# 25 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qsslsocket.h"







































































































































































































































# 26 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 2 "/home/eagle/qt-copy/include/QtXmlPatterns/QtXmlPatterns"

# 1 "/home/eagle/qt-copy/include/QtXmlPatterns/qabstractmessagehandler.h"














































# 1 "/home/eagle/qt-copy/include/QtXmlPatterns/qsourcelocation.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"












































































































































































































































































































































# 1 "/home/eagle/qt-copy/include/QtCore/QMetaType"

# 47 "/home/eagle/qt-copy/include/QtXmlPatterns/qsourcelocation.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qurl.h"



























































































































































































































































































# 1 "/home/eagle/qt-copy/include/QtCore/QUrl"

# 48 "/home/eagle/qt-copy/include/QtXmlPatterns/qsourcelocation.h"


# 50 "/home/eagle/qt-copy/include/QtXmlPatterns/qsourcelocation.h"




typedef QtValidLicenseForXmlPatternsModule QtXmlPatternsModule;

class QSourceLocationPrivate;

class  QSourceLocation
{
public:
QSourceLocation();
QSourceLocation(const QSourceLocation &other);
QSourceLocation(const QUrl &uri, int line = -1, int column = -1);
~QSourceLocation();
QSourceLocation &operator=(const QSourceLocation &other);
bool operator==(const QSourceLocation &other) const;
bool operator!=(const QSourceLocation &other) const;

qint64 column() const;
void setColumn(qint64 newColumn);

qint64 line() const;
void setLine(qint64 newLine);

QUrl uri() const;
void setUri(const QUrl &newUri);
bool isNull() const;

private:
union
{
qint64 m_line;
QSourceLocationPrivate *m_ptr;
};
qint64 m_column;
QUrl m_uri;
};

 uint qHash(const QSourceLocation &location);


# 92 "/home/eagle/qt-copy/include/QtXmlPatterns/qsourcelocation.h"
 QDebug operator<<(QDebug debug, const QSourceLocation &sourceLocation);


# 95 "/home/eagle/qt-copy/include/QtXmlPatterns/qsourcelocation.h"
template <> class QTypeInfo<QSourceLocation> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QSourceLocation)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QSourceLocation"; } };



 template <> struct QMetaTypeId< QSourceLocation > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (!metatype_id) metatype_id = qRegisterMetaType< QSourceLocation >("QSourceLocation"); return metatype_id; } }; ; 




# 1 "/home/eagle/qt-copy/include/QtXmlPatterns/QSourceLocation"

# 47 "/home/eagle/qt-copy/include/QtXmlPatterns/qabstractmessagehandler.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 1 "/home/eagle/qt-copy/include/QtCore/QObject"

# 48 "/home/eagle/qt-copy/include/QtXmlPatterns/qabstractmessagehandler.h"


# 50 "/home/eagle/qt-copy/include/QtXmlPatterns/qabstractmessagehandler.h"




typedef QtValidLicenseForXmlPatternsModule QtXmlPatternsModule;

class QAbstractMessageHandlerPrivate;
class  QAbstractMessageHandler : public QObject
{
Q_OBJECT
public:
QAbstractMessageHandler(QObject *parent = 0);
virtual ~QAbstractMessageHandler();

void message(QtMsgType type,
const QString &description,
const QUrl &identifier = QUrl(),
const QSourceLocation &sourceLocation = QSourceLocation());

protected:
virtual void handleMessage(QtMsgType type,
const QString &description,
const QUrl &identifier,
const QSourceLocation &sourceLocation) = 0;
private:
inline QAbstractMessageHandlerPrivate* d_func() { return reinterpret_cast<QAbstractMessageHandlerPrivate *>(d_ptr); } inline const QAbstractMessageHandlerPrivate* d_func() const { return reinterpret_cast<const QAbstractMessageHandlerPrivate *>(d_ptr); } friend class QAbstractMessageHandlerPrivate;
QAbstractMessageHandler(const QAbstractMessageHandler &); QAbstractMessageHandler &operator=(const QAbstractMessageHandler &);
};






# 3 "/home/eagle/qt-copy/include/QtXmlPatterns/QtXmlPatterns"

# 1 "/home/eagle/qt-copy/include/QtXmlPatterns/qabstracturiresolver.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 1 "/home/eagle/qt-copy/include/QtCore/QObject"

# 47 "/home/eagle/qt-copy/include/QtXmlPatterns/qabstracturiresolver.h"


# 49 "/home/eagle/qt-copy/include/QtXmlPatterns/qabstracturiresolver.h"



typedef QtValidLicenseForXmlPatternsModule QtXmlPatternsModule;

class QUrl;
class QAbstractUriResolverPrivate;

class  QAbstractUriResolver : public QObject
{
Q_OBJECT
public:
QAbstractUriResolver(QObject *parent = 0);
virtual ~QAbstractUriResolver();

virtual QUrl resolve(const QUrl &relative,
const QUrl &baseURI) const = 0;

private:
QAbstractUriResolver(const QAbstractUriResolver &); QAbstractUriResolver &operator=(const QAbstractUriResolver &);
inline QAbstractUriResolverPrivate* d_func() { return reinterpret_cast<QAbstractUriResolverPrivate *>(d_ptr); } inline const QAbstractUriResolverPrivate* d_func() const { return reinterpret_cast<const QAbstractUriResolverPrivate *>(d_ptr); } friend class QAbstractUriResolverPrivate;
};






# 4 "/home/eagle/qt-copy/include/QtXmlPatterns/QtXmlPatterns"

# 1 "/home/eagle/qt-copy/include/QtXmlPatterns/qabstractxmlnodemodel.h"














































# 1 "/home/eagle/qt-copy/include/QtXmlPatterns/qxmlname.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 1 "/home/eagle/qt-copy/include/QtCore/QString"

# 47 "/home/eagle/qt-copy/include/QtXmlPatterns/qxmlname.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"












































































































































































































































































































































# 1 "/home/eagle/qt-copy/include/QtCore/QMetaType"

# 48 "/home/eagle/qt-copy/include/QtXmlPatterns/qxmlname.h"


# 50 "/home/eagle/qt-copy/include/QtXmlPatterns/qxmlname.h"




typedef QtValidLicenseForXmlPatternsModule QtXmlPatternsModule;

class QXmlName;
class QXmlNamePool;
 uint qHash(const QXmlName &name);

class  QXmlName
{
private:
enum Constant
{
LocalNameOffset = 0,
LocalNameLength = 11,
NamespaceOffset = 11,
NamespaceLength = 9,
PrefixLength = 10,
InvalidCode = 1 << 31,
NamespaceMask = ((1 << ((NamespaceOffset + NamespaceLength) - NamespaceOffset)) - 1) << NamespaceOffset,
LocalNameMask = ((1 << ((LocalNameOffset + LocalNameLength) - LocalNameOffset)) - 1) << LocalNameOffset,
PrefixOffset = 21,
PrefixMask = ((1 << ((PrefixOffset + PrefixLength) - PrefixOffset)) - 1) << PrefixOffset,
MaximumPrefixes = (PrefixMask >> PrefixOffset) - 1,
MaximumLocalNames = (LocalNameMask >> LocalNameOffset) - 1,
MaximumNamespaces = (NamespaceMask >> NamespaceOffset) - 1,
ExpandedNameMask = LocalNameMask | NamespaceMask,
LexicalQNameMask = LocalNameMask | PrefixMask
};

public:

typedef qint16 NamespaceCode;
typedef NamespaceCode PrefixCode;
typedef NamespaceCode LocalNameCode;

QXmlName();

QXmlName(QXmlNamePool &namePool,
const QString &localName,
const QString &namespaceURI = QString(),
const QString &prefix = QString());

QString namespaceUri(const QXmlNamePool &query) const;
QString prefix(const QXmlNamePool &query) const;
QString localName(const QXmlNamePool &query) const;
QString toClarkName(const QXmlNamePool &query) const;
bool operator==(const QXmlName &other) const;
bool operator!=(const QXmlName &other) const;
QXmlName &operator=(const QXmlName &other);
bool isNull() const;
static bool isNCName(const QString &candidate);



typedef qint64 Code;

inline QXmlName(const NamespaceCode uri,
const LocalNameCode ln,
const PrefixCode p = 0);

inline LocalNameCode localName() const;
inline PrefixCode prefix() const;
inline bool hasPrefix() const;
inline bool hasNamespace() const;
inline NamespaceCode namespaceURI() const;
inline bool isLexicallyEqual(const QXmlName &other) const;
inline void setPrefix(const PrefixCode c);
inline void setNamespaceURI(const NamespaceCode c);
inline void setLocalName(const LocalNameCode c);
inline Code code() const;

friend  uint qHash(const QXmlName &);

private:
inline QXmlName(const int c) : m_qNameCode(c)
{
}

Code m_qNameCode;
};

template <> class QTypeInfo<QXmlName> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QXmlName)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QXmlName"; } };



 template <> struct QMetaTypeId< QXmlName > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (!metatype_id) metatype_id = qRegisterMetaType< QXmlName >("QXmlName"); return metatype_id; } }; ; 




# 1 "/home/eagle/qt-copy/include/QtXmlPatterns/QXmlName"

# 47 "/home/eagle/qt-copy/include/QtXmlPatterns/qabstractxmlnodemodel.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qshareddata.h"



































































































































































































































# 1 "/home/eagle/qt-copy/include/QtCore/QSharedData"

# 48 "/home/eagle/qt-copy/include/QtXmlPatterns/qabstractxmlnodemodel.h"


# 50 "/home/eagle/qt-copy/include/QtXmlPatterns/qabstractxmlnodemodel.h"



typedef QtValidLicenseForXmlPatternsModule QtXmlPatternsModule;




class QAbstractXmlNodeModel;
class QAbstractXmlNodeModelPrivate;
class QAbstractXmlReceiver;
class QUrl;
class QXmlName;
class QXmlNodeModelIndex;
template<typename T> class QAbstractXmlForwardIterator;
template<typename T> class QVector;



namespace QPatternist
{
class DynamicContext;
class Item;
class ItemType;
template<typename TResult, typename TSource, typename TMapper, typename Context> class ItemMappingIterator;
template<typename TResult, typename TSource, typename TMapper> class SequenceMappingIterator;
typedef QExplicitlySharedDataPointer<ItemType> ItemTypePtr;
typedef QExplicitlySharedDataPointer<QAbstractXmlForwardIterator<Item> > ItemIteratorPtr;
typedef QVector<QXmlName> QXmlNameVector;

class NodeIndexStorage
{
public:
typedef qint64 Data;

union
{
void *ptr;
Data data;
};

Data additionalData;
const QAbstractXmlNodeModel *model;


inline bool operator!=(const NodeIndexStorage &other) const;
};
}

class  QXmlNodeModelIndex
{
enum Constants
{
ForwardAxis = 8192,
ReverseAxis = 16384
};

public:
inline QXmlNodeModelIndex()
{
reset();
}

inline QXmlNodeModelIndex(const QXmlNodeModelIndex &other) : m_storage(other.m_storage)
{
}

bool operator==(const QXmlNodeModelIndex &other) const;
bool operator!=(const QXmlNodeModelIndex &other) const;

typedef QAbstractXmlForwardIterator<QXmlNodeModelIndex> Iterator;
typedef QList<QXmlNodeModelIndex> List;

enum NodeKind
{
Attribute = 1,
Comment = 2,
Document = 4,
Element = 8,
Namespace = 16,
ProcessingInstruction = 32,
Text = 64
};

enum DocumentOrder
{
Precedes = -1,
Is = 0,
Follows = 1
};

enum Axis
{
AxisChild = 1 | ForwardAxis,
AxisDescendant = 2 | ForwardAxis,
AxisAttribute = 4 | ForwardAxis,
AxisSelf = 8 | ForwardAxis,
AxisDescendantOrSelf = 16 | ForwardAxis,
AxisFollowingSibling = 32 | ForwardAxis,
AxisNamespace = 64 | ForwardAxis,
AxisFollowing = 128 | ReverseAxis,
AxisParent = 256 | ReverseAxis,
AxisAncestor = 512 | ReverseAxis,
AxisPrecedingSibling = 1024 | ReverseAxis,
AxisPreceding = 2048 | ReverseAxis,
AxisAncestorOrSelf = 4096 | ReverseAxis
};

inline qint64 data() const
{
return m_storage.data;
}

inline void *internalPointer() const
{
return m_storage.ptr;
}

inline const QAbstractXmlNodeModel *model() const
{
return m_storage.model;
}

inline qint64 additionalData() const
{
return m_storage.additionalData;
}

inline bool isNull() const
{
return !m_storage.model;
}




inline QXmlName name() const;
inline QXmlNodeModelIndex root() const;
inline QExplicitlySharedDataPointer<QAbstractXmlForwardIterator<QXmlNodeModelIndex> > iterate(const Axis axis) const;
inline QExplicitlySharedDataPointer<QAbstractXmlForwardIterator<QPatternist::Item> > sequencedTypedValue() const;
inline QUrl documentUri() const;
inline QUrl baseUri() const;
inline NodeKind kind() const;
inline bool isDeepEqual(const QXmlNodeModelIndex &other) const;
inline DocumentOrder compareOrder(const QXmlNodeModelIndex &other) const;
inline void sendNamespaces(QAbstractXmlReceiver *const receiver) const;
inline QVector<QXmlName> namespaceBindings() const;
inline QXmlName::NamespaceCode namespaceForPrefix(const QXmlName::PrefixCode prefix) const;
inline QString stringValue() const;
inline QPatternist::ItemTypePtr type() const;
inline bool is(const QXmlNodeModelIndex &other) const;

inline void reset()
{
m_storage.data = 0;
m_storage.additionalData = 0;
m_storage.model = 0;
}

private:
static inline QXmlNodeModelIndex create(const qint64 d,
const QAbstractXmlNodeModel *const nm)
{
QXmlNodeModelIndex n;
n.m_storage.data = d;
n.m_storage.model = nm;
n.m_storage.additionalData = 0;
return n;
}

static inline QXmlNodeModelIndex create(const qint64 data,
const QAbstractXmlNodeModel *const nm,
const qint64 addData)
{
QXmlNodeModelIndex n;
n.m_storage.data = data;
n.m_storage.model = nm;
n.m_storage.additionalData = addData;
return n;
}

inline QXmlNodeModelIndex(const QPatternist::NodeIndexStorage &storage) : m_storage(storage)
{
}

friend class QAbstractXmlNodeModel;
friend class QPatternist::Item;
friend class QXmlItem;
inline operator int() const; 

QPatternist::NodeIndexStorage m_storage;
};

 uint qHash(const QXmlNodeModelIndex &index);

inline bool qIsForwardIteratorEnd(const QXmlNodeModelIndex &item)
{
return item.isNull();
}

class  QAbstractXmlNodeModel : public QSharedData
{
public:
enum SimpleAxis
{
Parent,
FirstChild,
PreviousSibling,
NextSibling
};

typedef QExplicitlySharedDataPointer<QAbstractXmlNodeModel> Ptr;
typedef QList<Ptr> List;

QAbstractXmlNodeModel();
virtual ~QAbstractXmlNodeModel();

virtual QUrl baseUri(const QXmlNodeModelIndex &ni) const = 0;
virtual QUrl documentUri(const QXmlNodeModelIndex &ni) const = 0;
virtual QXmlNodeModelIndex::NodeKind kind(const QXmlNodeModelIndex &ni) const = 0;
virtual QXmlNodeModelIndex::DocumentOrder compareOrder(const QXmlNodeModelIndex &ni1,
const QXmlNodeModelIndex &ni2) const = 0;
virtual QXmlNodeModelIndex root(const QXmlNodeModelIndex &n) const = 0;
virtual QXmlName name(const QXmlNodeModelIndex &ni) const = 0;
virtual QString stringValue(const QXmlNodeModelIndex &n) const = 0;
virtual QVariant typedValue(const QXmlNodeModelIndex &n) const = 0;



virtual QExplicitlySharedDataPointer<QAbstractXmlForwardIterator<QXmlNodeModelIndex> > iterate(const QXmlNodeModelIndex &ni, QXmlNodeModelIndex::Axis axis) const;
virtual QPatternist::ItemIteratorPtr sequencedTypedValue(const QXmlNodeModelIndex &ni) const;
virtual QPatternist::ItemTypePtr type(const QXmlNodeModelIndex &ni) const;
virtual QXmlName::NamespaceCode namespaceForPrefix(const QXmlNodeModelIndex &ni,
const QXmlName::PrefixCode prefix) const;
virtual bool isDeepEqual(const QXmlNodeModelIndex &ni1,
const QXmlNodeModelIndex &ni2) const;
virtual void sendNamespaces(const QXmlNodeModelIndex &n,
QAbstractXmlReceiver *const receiver) const;
virtual QVector<QXmlName> namespaceBindings(const QXmlNodeModelIndex &n) const = 0;


virtual QXmlNodeModelIndex elementById(const QXmlName &NCName) const = 0;
virtual QVector<QXmlNodeModelIndex> nodesByIdref(const QXmlName &NCName) const = 0;

enum NodeCopySetting
{
InheritNamespaces = 0x1,
PreserveNamespaces = 0x2
};

typedef QFlags<NodeCopySetting> NodeCopySettings;
virtual void copyNodeTo(const QXmlNodeModelIndex &node,
QAbstractXmlReceiver *const receiver,
const NodeCopySettings &) const;

protected:

virtual QXmlNodeModelIndex nextFromSimpleAxis(SimpleAxis axis, const QXmlNodeModelIndex &origin) const = 0;
virtual QVector<QXmlNodeModelIndex> attributes(const QXmlNodeModelIndex &element) const = 0;

QAbstractXmlNodeModel(QAbstractXmlNodeModelPrivate *d);

inline QXmlNodeModelIndex createIndex(qint64 data) const
{
return QXmlNodeModelIndex::create(data, this);
}

inline QXmlNodeModelIndex createIndex(void * pointer,
qint64 additionalData = 0) const
{
return QXmlNodeModelIndex::create(qptrdiff(pointer), this, additionalData);
}

inline QXmlNodeModelIndex createIndex(qint64 data,
qint64 additionalData) const
{
return QXmlNodeModelIndex::create(data, this, additionalData);
}

QAbstractXmlNodeModelPrivate *d_ptr;
private:
friend class QPatternist::ItemMappingIterator<QXmlNodeModelIndex, QXmlNodeModelIndex, const QAbstractXmlNodeModel *, QExplicitlySharedDataPointer<QPatternist::DynamicContext> >;
friend class QPatternist::SequenceMappingIterator<QXmlNodeModelIndex, QXmlNodeModelIndex, const QAbstractXmlNodeModel *>;

inline QExplicitlySharedDataPointer<QAbstractXmlForwardIterator<QXmlNodeModelIndex> > mapToSequence(const QXmlNodeModelIndex &ni,
const QExplicitlySharedDataPointer<QPatternist::DynamicContext> &) const;

static inline bool isIgnorableInDeepEqual(const QXmlNodeModelIndex &n);
QAbstractXmlNodeModel(const QAbstractXmlNodeModel &); QAbstractXmlNodeModel &operator=(const QAbstractXmlNodeModel &);
};

template <> class QTypeInfo<QXmlNodeModelIndex> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QXmlNodeModelIndex)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QXmlNodeModelIndex"; } };

template<typename T> class QAbstractXmlForwardIterator;
class QVariant;
class QXmlItemPrivate;

namespace QPatternist
{
class AtomicValue;
class VariableLoader;
class IteratorBridge;
class ToQXmlItemMapper;
class ToItemMapper;
}

class  QXmlItem
{
public:
typedef QAbstractXmlForwardIterator<QXmlItem> Iterator;

QXmlItem();
QXmlItem(const QXmlItem &other);
QXmlItem(const QXmlNodeModelIndex &node);
QXmlItem(const QVariant &atomicValue);
~QXmlItem();
QXmlItem &operator=(const QXmlItem &other);

bool isNull() const;
bool isNode() const;
bool isAtomicValue() const;

QVariant toAtomicValue() const;
QXmlNodeModelIndex toNodeModelIndex() const;

private:
friend class QPatternist::IteratorBridge;
friend class QPatternist::VariableLoader;
friend class QPatternist::ToQXmlItemMapper;
friend class QPatternist::ToItemMapper;
friend class QPatternist::Item;

inline bool internalIsAtomicValue() const;

inline QXmlItem(const QPatternist::Item &i);

union
{
QPatternist::NodeIndexStorage m_node;



const QPatternist::AtomicValue *m_atomicValue;
QXmlItemPrivate * m_ptr; 
};
};

inline bool qIsForwardIteratorEnd(const QXmlItem &item)
{
return item.isNull();
}

template <> class QTypeInfo<QXmlItem> { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QXmlItem)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) }; static inline const char *name() { return "QXmlItem"; } };



 template <> struct QMetaTypeId< QXmlItem > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (!metatype_id) metatype_id = qRegisterMetaType< QXmlItem >("QXmlItem"); return metatype_id; } }; ; 




# 5 "/home/eagle/qt-copy/include/QtXmlPatterns/QtXmlPatterns"

# 1 "/home/eagle/qt-copy/include/QtXmlPatterns/qabstractxmlreceiver.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qvariant.h"






















































































































































































































































































































































































































































































































































































































# 1 "/home/eagle/qt-copy/include/QtCore/QVariant"

# 47 "/home/eagle/qt-copy/include/QtXmlPatterns/qabstractxmlreceiver.h"

# 1 "/home/eagle/qt-copy/include/QtXmlPatterns/qabstractxmlnodemodel.h"





















































































































































































































































































































































































































# 1 "/home/eagle/qt-copy/include/QtXmlPatterns/QXmlNodeModelIndex"

# 48 "/home/eagle/qt-copy/include/QtXmlPatterns/qabstractxmlreceiver.h"


# 50 "/home/eagle/qt-copy/include/QtXmlPatterns/qabstractxmlreceiver.h"




typedef QtValidLicenseForXmlPatternsModule QtXmlPatternsModule;

class QAbstractXmlReceiverPrivate;
class QXmlName;

namespace QPatternist
{
class Item;
}

class  QAbstractXmlReceiver
{
public:
QAbstractXmlReceiver();

virtual ~QAbstractXmlReceiver();

virtual void startElement(const QXmlName &name) = 0;
virtual void endElement() = 0;
virtual void attribute(const QXmlName &name,
const QStringRef &value) = 0;
virtual void comment(const QString &value) = 0;
virtual void characters(const QStringRef &value) = 0;
virtual void startDocument() = 0;
virtual void endDocument() = 0;

virtual void processingInstruction(const QXmlName &target,
const QString &value) = 0;

virtual void atomicValue(const QVariant &value) = 0;
virtual void namespaceBinding(const QXmlName &name) = 0;
virtual void startOfSequence() = 0;
virtual void endOfSequence() = 0;



virtual void whitespaceOnly(const QStringRef &value);
virtual void item(const QPatternist::Item &item);

protected:
QAbstractXmlReceiver(QAbstractXmlReceiverPrivate *d);
QAbstractXmlReceiverPrivate *d_ptr;

void sendAsNode(const QPatternist::Item &outputItem);
private:
template<const QXmlNodeModelIndex::Axis axis>
void sendFromAxis(const QXmlNodeModelIndex &node);
QAbstractXmlReceiver(const QAbstractXmlReceiver &); QAbstractXmlReceiver &operator=(const QAbstractXmlReceiver &);
};






# 6 "/home/eagle/qt-copy/include/QtXmlPatterns/QtXmlPatterns"

# 1 "/home/eagle/qt-copy/include/QtXmlPatterns/qsimplexmlnodemodel.h"














































# 1 "/home/eagle/qt-copy/include/QtXmlPatterns/qabstractxmlnodemodel.h"





















































































































































































































































































































































































































# 1 "/home/eagle/qt-copy/include/QtXmlPatterns/QAbstractXmlNodeModel"

# 47 "/home/eagle/qt-copy/include/QtXmlPatterns/qsimplexmlnodemodel.h"

# 1 "/home/eagle/qt-copy/include/QtXmlPatterns/qxmlquery.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qurl.h"



























































































































































































































































































# 1 "/home/eagle/qt-copy/include/QtCore/QUrl"

# 47 "/home/eagle/qt-copy/include/QtXmlPatterns/qxmlquery.h"

# 1 "/home/eagle/qt-copy/include/QtXmlPatterns/qabstractxmlnodemodel.h"





















































































































































































































































































































































































































# 1 "/home/eagle/qt-copy/include/QtXmlPatterns/QAbstractXmlNodeModel"

# 48 "/home/eagle/qt-copy/include/QtXmlPatterns/qxmlquery.h"

# 1 "/home/eagle/qt-copy/include/QtXmlPatterns/qabstractxmlreceiver.h"











































































































# 1 "/home/eagle/qt-copy/include/QtXmlPatterns/QAbstractXmlReceiver"

# 49 "/home/eagle/qt-copy/include/QtXmlPatterns/qxmlquery.h"


# 51 "/home/eagle/qt-copy/include/QtXmlPatterns/qxmlquery.h"



typedef QtValidLicenseForXmlPatternsModule QtXmlPatternsModule;

class QAbstractMessageHandler;
class QAbstractUriResolver;
class QAbstractXmlReceiver;
class QXmlName;
class QXmlNamePool;
class QXmlNodeIndex;
class QXmlQueryPrivate;
class QXmlResultItems;
class QXmlSerializer;
class QIODevice;



namespace QPatternistSDK
{
class TestCase;
};

class  QXmlQuery
{
public:
QXmlQuery();
QXmlQuery(const QXmlQuery &other);
QXmlQuery(const QXmlNamePool &np);
~QXmlQuery();
QXmlQuery &operator=(const QXmlQuery &other);

void setMessageHandler(QAbstractMessageHandler *messageHandler);
QAbstractMessageHandler *messageHandler() const;

void setQuery(const QString &sourceCode, const QUrl &documentURI = QUrl());
void setQuery(QIODevice *sourceCode, const QUrl &documentURI = QUrl());
void setQuery(const QUrl &queryURI, const QUrl &baseURI = QUrl());

QXmlNamePool namePool() const;

void bindVariable(const QXmlName &name, const QXmlItem &value);
void bindVariable(const QString &localName, const QXmlItem &value);

void bindVariable(const QXmlName &name, QIODevice *);
void bindVariable(const QString &localName, QIODevice *);

bool isValid() const;

void evaluateTo(QXmlResultItems *result) const;
bool evaluateTo(QAbstractXmlReceiver *callback) const;
bool evaluateTo(QStringList *target) const;

void setUriResolver(const QAbstractUriResolver *resolver);
const QAbstractUriResolver *uriResolver() const;

void setFocus(const QXmlItem &item);

private:
friend class QXmlName;
friend class QXmlSerializer;
friend class QPatternistSDK::TestCase;
QXmlQueryPrivate *d;
};





# 1 "/home/eagle/qt-copy/include/QtXmlPatterns/QXmlQuery"

# 48 "/home/eagle/qt-copy/include/QtXmlPatterns/qsimplexmlnodemodel.h"


# 50 "/home/eagle/qt-copy/include/QtXmlPatterns/qsimplexmlnodemodel.h"




typedef QtValidLicenseForXmlPatternsModule QtXmlPatternsModule;

template<typename T> class QExplicitlySharedDataPointer;
class QSimpleXmlNodeModelPrivate;
class  QSimpleXmlNodeModel : public QAbstractXmlNodeModel
{
public:
QSimpleXmlNodeModel(const QXmlNamePool &namePool);
virtual ~QSimpleXmlNodeModel();

virtual QUrl baseUri(const QXmlNodeModelIndex &node) const;
QXmlNamePool &namePool() const;
virtual QVector<QXmlName> namespaceBindings(const QXmlNodeModelIndex&) const;
virtual QString stringValue(const QXmlNodeModelIndex &node) const;
virtual QXmlNodeModelIndex elementById(const QXmlName &id) const;
virtual QVector<QXmlNodeModelIndex> nodesByIdref(const QXmlName &idref) const;

private:
inline QSimpleXmlNodeModelPrivate* d_func() { return reinterpret_cast<QSimpleXmlNodeModelPrivate *>(d_ptr); } inline const QSimpleXmlNodeModelPrivate* d_func() const { return reinterpret_cast<const QSimpleXmlNodeModelPrivate *>(d_ptr); } friend class QSimpleXmlNodeModelPrivate;
};






# 7 "/home/eagle/qt-copy/include/QtXmlPatterns/QtXmlPatterns"

# 1 "/home/eagle/qt-copy/include/QtXmlPatterns/qsourcelocation.h"







































































































# 8 "/home/eagle/qt-copy/include/QtXmlPatterns/QtXmlPatterns"

# 1 "/home/eagle/qt-copy/include/QtXmlPatterns/qxmlformatter.h"














































# 1 "/home/eagle/qt-copy/include/QtXmlPatterns/qxmlserializer.h"














































# 1 "/home/eagle/qt-copy/include/QtXmlPatterns/qabstractxmlreceiver.h"











































































































# 1 "/home/eagle/qt-copy/include/QtXmlPatterns/QAbstractXmlReceiver"

# 47 "/home/eagle/qt-copy/include/QtXmlPatterns/qxmlserializer.h"


# 49 "/home/eagle/qt-copy/include/QtXmlPatterns/qxmlserializer.h"




typedef QtValidLicenseForXmlPatternsModule QtXmlPatternsModule;

class QIODevice;
class QTextCodec;
class QXmlQuery;
class QXmlSerializerPrivate;

class  QXmlSerializer : public QAbstractXmlReceiver
{
public:
QXmlSerializer(const QXmlQuery &query,
QIODevice *outputDevice);

virtual void namespaceBinding(const QXmlName &nb);

virtual void characters(const QStringRef &value);
virtual void comment(const QString &value);

virtual void startElement(const QXmlName &name);

virtual void endElement();

virtual void attribute(const QXmlName &name,
const QStringRef &value);

virtual void processingInstruction(const QXmlName &name,
const QString &value);

virtual void atomicValue(const QVariant &value);

virtual void startDocument();
virtual void endDocument();
virtual void startOfSequence();
virtual void endOfSequence();

QIODevice *outputDevice() const;

void setCodec(const QTextCodec *codec);
const QTextCodec *codec() const;



virtual void item(const QPatternist::Item &item);
protected:
QXmlSerializer(QAbstractXmlReceiverPrivate *d);

private:
inline bool isBindingInScope(const QXmlName nb) const;




enum State
{





BeforeDocumentElement,




InsideDocumentElement
};





inline bool atDocumentRoot() const;





inline void startContent();




void writeEscaped(const QString &toEscape);




inline void writeEscapedAttribute(const QString &toEscape);




inline void write(const QXmlName &name);

inline void write(const char *const chars);



inline void write(const QString &content);

inline QXmlSerializerPrivate* d_func() { return reinterpret_cast<QXmlSerializerPrivate *>(d_ptr); } inline const QXmlSerializerPrivate* d_func() const { return reinterpret_cast<const QXmlSerializerPrivate *>(d_ptr); } friend class QXmlSerializerPrivate;
};






# 1 "/home/eagle/qt-copy/include/QtXmlPatterns/QXmlSerializer"

# 47 "/home/eagle/qt-copy/include/QtXmlPatterns/qxmlformatter.h"


# 49 "/home/eagle/qt-copy/include/QtXmlPatterns/qxmlformatter.h"




typedef QtValidLicenseForXmlPatternsModule QtXmlPatternsModule;

class QIODevice;
class QTextCodec;
class QXmlQuery;
class QXmlFormatterPrivate;

class  QXmlFormatter : public QXmlSerializer
{
public:
QXmlFormatter(const QXmlQuery &query,
QIODevice *outputDevice);

virtual void characters(const QStringRef &value);
virtual void comment(const QString &value);
virtual void startElement(const QXmlName &name);
virtual void endElement();

virtual void attribute(const QXmlName &name,
const QStringRef &value);
virtual void processingInstruction(const QXmlName &name,
const QString &value);
virtual void atomicValue(const QVariant &value);
virtual void startDocument();
virtual void endDocument();
virtual void startOfSequence();
virtual void endOfSequence();

int indentationDepth() const;
void setIndentationDepth(int depth);



virtual void item(const QPatternist::Item &item);
private:
inline void startFormattingContent();
inline QXmlFormatterPrivate* d_func() { return reinterpret_cast<QXmlFormatterPrivate *>(d_ptr); } inline const QXmlFormatterPrivate* d_func() const { return reinterpret_cast<const QXmlFormatterPrivate *>(d_ptr); } friend class QXmlFormatterPrivate;
};






# 9 "/home/eagle/qt-copy/include/QtXmlPatterns/QtXmlPatterns"

# 1 "/home/eagle/qt-copy/include/QtXmlPatterns/qxmlname.h"













































































































































# 10 "/home/eagle/qt-copy/include/QtXmlPatterns/QtXmlPatterns"

# 1 "/home/eagle/qt-copy/include/QtXmlPatterns/qxmlnamepool.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qshareddata.h"



































































































































































































































# 1 "/home/eagle/qt-copy/include/QtCore/QSharedData"

# 47 "/home/eagle/qt-copy/include/QtXmlPatterns/qxmlnamepool.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 1 "/home/eagle/qt-copy/include/QtCore/QString"

# 48 "/home/eagle/qt-copy/include/QtXmlPatterns/qxmlnamepool.h"


# 50 "/home/eagle/qt-copy/include/QtXmlPatterns/qxmlnamepool.h"




typedef QtValidLicenseForXmlPatternsModule QtXmlPatternsModule;

namespace QPatternist
{
class NamePool;
};

namespace QPatternistSDK
{
class Global;
};

class QXmlQueryPrivate;
class QXmlName;

class  QXmlNamePool
{
public:
QXmlNamePool();
QXmlNamePool(const QXmlNamePool &other);
~QXmlNamePool();
QXmlNamePool &operator=(const QXmlNamePool &other);

private:
friend class QXmlQueryPrivate;
friend class QXmlSerializerPrivate;
friend class QXmlName;
friend class QPatternistSDK::Global;
QExplicitlySharedDataPointer<QPatternist::NamePool> d;
};






# 11 "/home/eagle/qt-copy/include/QtXmlPatterns/QtXmlPatterns"

# 1 "/home/eagle/qt-copy/include/QtXmlPatterns/qxmlquery.h"






















































































































# 12 "/home/eagle/qt-copy/include/QtXmlPatterns/QtXmlPatterns"

# 1 "/home/eagle/qt-copy/include/QtXmlPatterns/qxmlresultitems.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 1 "/home/eagle/qt-copy/include/QtCore/QString"

# 47 "/home/eagle/qt-copy/include/QtXmlPatterns/qxmlresultitems.h"


# 49 "/home/eagle/qt-copy/include/QtXmlPatterns/qxmlresultitems.h"



typedef QtValidLicenseForXmlPatternsModule QtXmlPatternsModule;

class QXmlItem;
class QXmlQuery;
class QXmlResultItemsPrivate;

class  QXmlResultItems
{
public:
QXmlResultItems();
virtual ~QXmlResultItems();

bool hasError() const;
QXmlItem next();
QXmlItem current() const;

private:
friend class QXmlQuery;
inline QXmlResultItemsPrivate* d_func() { return reinterpret_cast<QXmlResultItemsPrivate *>(d_ptr); } inline const QXmlResultItemsPrivate* d_func() const { return reinterpret_cast<const QXmlResultItemsPrivate *>(d_ptr); } friend class QXmlResultItemsPrivate;
QXmlResultItemsPrivate *d_ptr;
QXmlResultItems(const QXmlResultItems &); QXmlResultItems &operator=(const QXmlResultItems &);
};





# 13 "/home/eagle/qt-copy/include/QtXmlPatterns/QtXmlPatterns"

# 1 "/home/eagle/qt-copy/include/QtXmlPatterns/qxmlserializer.h"









































































































































# 14 "/home/eagle/qt-copy/include/QtXmlPatterns/QtXmlPatterns"

# 35 "qtscript_masterinclude.h"




# 1 "/home/eagle/qt-copy/include/QtCore/qtextcodec.h"





























































































































































































# 1 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextcodecplugin.h"


































































































# 2 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuture.h"
























































































































































































































































































# 3 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfutureinterface.h"























































































































































































































































































































# 4 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuturesynchronizer.h"
























































































































# 5 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuturewatcher.h"
































































































































































































































# 6 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qrunnable.h"










































































# 7 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentcompilertest.h"









































































# 8 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentexception.h"


































































































































# 9 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfilter.h"


































































































































































































































































































































































































































































































































































































































































































































































# 10 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfilterkernel.h"















































































































































































































































































































































# 11 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfunctionwrappers.h"















































































































































































# 12 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentiteratekernel.h"

















































































































































































































































































































# 13 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmap.h"















































































































































































































































































































































































































































































































































































































































































































































































































# 14 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmapkernel.h"










































































































































































































































































# 15 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmedian.h"




































































































































# 16 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentreducekernel.h"
























































































































































































































































# 17 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentresultstore.h"











































































































































































































































# 18 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentrun.h"











































































































































































































































































































# 19 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentrunbase.h"



































































































































# 20 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentstoredfunctioncall.h"


















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 21 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentthreadengine.h"



















































































































































































































































































































# 22 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qthreadpool.h"
































































































# 23 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qendian.h"










































































































































































































































































































































# 24 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





























































































































































































































































































# 286 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 291 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 296 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 301 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 306 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 311 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 316 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 321 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 326 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 331 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 336 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 341 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 346 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 351 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 356 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 361 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 366 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 371 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 376 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 381 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 386 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 391 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 396 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 401 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 406 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 411 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 416 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 421 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 426 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 431 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 436 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 441 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 446 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 451 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 456 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 461 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 466 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 471 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 476 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 481 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 486 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 491 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 496 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 501 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 506 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 511 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 516 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 521 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 526 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 531 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 536 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 541 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 546 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 551 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 556 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 561 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 566 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 571 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 576 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 581 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 586 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 591 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 596 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 601 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 606 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 611 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 616 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 621 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 626 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 631 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 636 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 641 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 646 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 651 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 656 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 661 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 666 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 671 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 676 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 681 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 686 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 691 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 696 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 701 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 706 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 711 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 716 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 721 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 726 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 731 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 736 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 741 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 746 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 751 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 756 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 761 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 766 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 771 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 776 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 781 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 786 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 25 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 26 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlibraryinfo.h"



























































































# 27 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 28 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qnumeric.h"









































































# 29 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstractfileengine.h"

























































































































































































































































# 30 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbuffer.h"














































































































# 31 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdatastream.h"









































































































































































































































































































































































































































# 32 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdebug.h"






































































































































































































































































# 33 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdir.h"










































































































































































































































































# 34 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdiriterator.h"



































































































# 35 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfile.h"














































































































































































































# 36 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfileinfo.h"





























































































































































































# 37 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfilesystemwatcher.h"



























































































# 38 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfsfileengine.h"



























































































































# 39 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"






























































































































































































































































# 40 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qprocess.h"












































































































































































































# 41 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qresource.h"










































































































# 42 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsettings.h"





















































































































































































































































































































# 43 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtemporaryfile.h"














































































































# 44 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextstream.h"



















































































































































































































































































































































































# 45 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qurl.h"



























































































































































































































































































# 46 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstracteventdispatcher.h"













































































































# 47 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstractitemmodel.h"

































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbasictimer.h"












































































# 49 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcoreapplication.h"












































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcoreevent.h"




































































































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qeventloop.h"






































































































# 52 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmath.h"



































































































































# 53 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmetaobject.h"










































































































































































# 54 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"












































































































































































































































































































































# 55 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmimedata.h"










































































































# 56 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 57 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qobjectcleanuphandler.h"
















































































# 58 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qobjectdefs.h"











































































































































































































































































































































































































# 59 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpointer.h"


















































































































































# 60 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsharedmemory.h"

























































































































# 61 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsignalmapper.h"






































































































# 62 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsocketnotifier.h"































































































# 63 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsystemsemaphore.h"








































































































# 64 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtimer.h"






















































































































# 65 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtranslator.h"




































































































# 66 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qvariant.h"






















































































































































































































































































































































































































































































































































































































# 67 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfactoryinterface.h"





































































# 68 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlibrary.h"


























































































































# 69 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qplugin.h"
















































































































# 70 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpluginloader.h"






































































































# 71 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/quuid.h"
































































































































































































# 72 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qatomic.h"

























































































































































































































# 73 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbasicatomic.h"




















































































































































































































# 74 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmutex.h"



































































































































































































# 75 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qreadwritelock.h"






















































































































































































































































# 76 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsemaphore.h"





















































































# 77 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qthread.h"




































































































































































# 78 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qthreadstorage.h"































































































































































# 79 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qwaitcondition.h"











































































































# 80 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qalgorithms.h"

















































































































































































































































































































































































































































































































































































# 81 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbitarray.h"
















































































































































































# 82 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"












































































































































































































































































































































































































































































































































































































# 83 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbytearraymatcher.h"


















































































# 84 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcache.h"


























































































































































































































# 85 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qchar.h"















































































































































































































































































































































































































# 86 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcontainerfwd.h"









































































# 87 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcryptographichash.h"






















































































# 88 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"



































































































































































































































































































































# 89 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qhash.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 90 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qiterator.h"








































































# 91 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qline.h"


































































































































































































































































































































































































































# 92 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlinkedlist.h"
























































































































































































































































































































































































































































































































# 93 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlist.h"











































































































































































































































































































































































































































































































































































































































































































# 94 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlocale.h"






















































































































































































































































































































































































































































































































































































































































































# 95 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmap.h"






















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 96 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpair.h"

































































































































# 97 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpoint.h"






































































































































































































































































































































































# 98 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qqueue.h"







































































# 99 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qrect.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































# 100 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qregexp.h"

























































































































































# 101 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qset.h"


































































































































































































































































































































































# 102 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qshareddata.h"



































































































































































































































# 103 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsize.h"






































































































































































































































































































































































# 104 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstack.h"




















































































# 105 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 106 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"
















































































































































































































































# 107 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstringmatcher.h"




























































































# 108 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextboundaryfinder.h"




















































































































# 109 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtimeline.h"
















































































































































# 110 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qvarlengtharray.h"













































































































































































































































# 111 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qvector.h"































































































































































































































































































































































































































































































































































































































































































































































































# 112 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qxmlstream.h"













































































































































































































































































































































































































































































# 113 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qftp.h"






















































































































































































# 2 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qhttp.h"
























































































































































































































































































































# 3 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qnetworkaccessmanager.h"




























































































































# 4 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qnetworkcookie.h"













































































































































# 5 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qnetworkreply.h"













































































































































































# 6 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qnetworkrequest.h"




































































































































# 7 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qauthenticator.h"

























































































# 8 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qhostaddress.h"






















































































































































# 9 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qhostinfo.h"






































































































# 10 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qnetworkinterface.h"






























































































































# 11 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qnetworkproxy.h"

















































































































# 12 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qurlinfo.h"





































































































































# 13 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qabstractsocket.h"




















































































































































































































































# 14 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qlocalserver.h"










































































































# 15 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qlocalsocket.h"




























































































































































# 16 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qtcpserver.h"















































































































# 17 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qtcpsocket.h"












































































# 18 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qudpsocket.h"





































































































# 19 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qssl.h"






































































































# 20 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qsslcertificate.h"
























































































































































# 21 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qsslcipher.h"















































































































# 22 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qsslconfiguration.h"










































































































































# 23 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qsslerror.h"



































































































































# 24 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qsslkey.h"




























































































































# 25 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtNetwork/qsslsocket.h"







































































































































































































































# 26 "/home/eagle/qt-copy/include/QtNetwork/QtNetwork"

# 1 "/home/eagle/qt-copy/include/QtWebKit/QtWebKit"

# 1 "/home/eagle/qt-copy/include/QtWebKit/qwebframe.h"























# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 24 "/home/eagle/qt-copy/include/QtWebKit/qwebframe.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qurl.h"



























































































































































































































































































# 25 "/home/eagle/qt-copy/include/QtWebKit/qwebframe.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qvariant.h"






















































































































































































































































































































































































































































































































































































































# 26 "/home/eagle/qt-copy/include/QtWebKit/qwebframe.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qicon.h"















































































































































# 27 "/home/eagle/qt-copy/include/QtWebKit/qwebframe.h"


# 1 "/home/eagle/qt-copy/include/QtNetwork/qnetworkaccessmanager.h"




























































































































# 29 "/home/eagle/qt-copy/include/QtWebKit/qwebframe.h"


# 1 "/home/eagle/qt-copy/include/QtWebKit/qwebkitglobal.h"






















# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 23 "/home/eagle/qt-copy/include/QtWebKit/qwebkitglobal.h"


























# 31 "/home/eagle/qt-copy/include/QtWebKit/qwebframe.h"


# 33 "/home/eagle/qt-copy/include/QtWebKit/qwebframe.h"

class QRect;
class QPoint;
class QPainter;
class QPixmap;
class QMouseEvent;
class QWheelEvent;
class QNetworkRequest;
class QRegion;
class QPrinter;


class QWebNetworkRequest;
class QWebFramePrivate;
class QWebPage;
class QWebHitTestResult;

namespace WebCore {
class WidgetPrivate;
class FrameLoaderClientQt;
class ChromeClientQt;
}
class QWebFrameData;
class QWebHitTestResultPrivate;
class QWebFrame;

class __attribute__((visibility("default"))) QWebHitTestResult
{
public:
QWebHitTestResult();
QWebHitTestResult(const QWebHitTestResult &other);
QWebHitTestResult &operator=(const QWebHitTestResult &other);
~QWebHitTestResult();

bool isNull() const;

QPoint pos() const;
QString title() const;

QString linkText() const;
QUrl linkUrl() const;
QUrl linkTitle() const;
QWebFrame *linkTargetFrame() const;

QString alternateText() const; 

QUrl imageUrl() const;
QPixmap pixmap() const;

bool isContentEditable() const;
bool isContentSelected() const;

QWebFrame *frame() const;

private:
QWebHitTestResult(QWebHitTestResultPrivate *priv);
QWebHitTestResultPrivate *d;

friend class QWebFrame;
friend class QWebPagePrivate;
friend class QWebPage;
};

class __attribute__((visibility("default"))) QWebFrame : public QObject
{
Q_OBJECT
Q_PROPERTY(qreal textSizeMultiplier READ textSizeMultiplier WRITE setTextSizeMultiplier)
Q_PROPERTY(QString title READ title)
Q_PROPERTY(QUrl url READ url WRITE setUrl)
Q_PROPERTY(QIcon icon READ icon)
Q_PROPERTY(QSize contentsSize READ contentsSize)
private:
QWebFrame(QWebPage *parent, QWebFrameData *frameData);
QWebFrame(QWebFrame *parent, QWebFrameData *frameData);
~QWebFrame();

public:
QWebPage *page() const;

void load(const QUrl &url);



# 116 "/home/eagle/qt-copy/include/QtWebKit/qwebframe.h"
void load(const QNetworkRequest &request,
QNetworkAccessManager::Operation operation = QNetworkAccessManager::GetOperation,
const QByteArray &body = QByteArray());

# 120 "/home/eagle/qt-copy/include/QtWebKit/qwebframe.h"
void setHtml(const QString &html, const QUrl &baseUrl = QUrl());
void setContent(const QByteArray &data, const QString &mimeType = QString(), const QUrl &baseUrl = QUrl());

void addToJavaScriptWindowObject(const QString &name, QObject *object);
QString toHtml() const;
QString toPlainText() const;
QString renderTreeDump() const;

QString title() const;
void setUrl(const QUrl &url);
QUrl url() const;
QIcon icon() const;

QString frameName() const;

QWebFrame *parentFrame() const;
QList<QWebFrame*> childFrames() const;

Qt::ScrollBarPolicy scrollBarPolicy(Qt::Orientation orientation) const;
void setScrollBarPolicy(Qt::Orientation orientation, Qt::ScrollBarPolicy policy);

void setScrollBarValue(Qt::Orientation orientation, int value);
int scrollBarValue(Qt::Orientation orientation) const;
int scrollBarMinimum(Qt::Orientation orientation) const;
int scrollBarMaximum(Qt::Orientation orientation) const;

void render(QPainter *painter, const QRegion &clip);
void render(QPainter *painter);

void setTextSizeMultiplier(qreal factor);
qreal textSizeMultiplier() const;

QPoint pos() const;
QRect geometry() const;
QSize contentsSize() const;

QWebHitTestResult hitTestContent(const QPoint &pos) const;

virtual bool event(QEvent *);

public slots:
QVariant evaluateJavaScript(const QString& scriptSource);
void print(QPrinter *printer) const;

signals:
void javaScriptWindowObjectCleared();

void provisionalLoad();
void titleChanged(const QString &title);
void urlChanged(const QUrl &url);

void initialLayoutCompleted();

void iconChanged();

private:
friend class QWebPage;
friend class QWebPagePrivate;
friend class QWebFramePrivate;
friend class WebCore::WidgetPrivate;
friend class WebCore::FrameLoaderClientQt;
friend class WebCore::ChromeClientQt;
QWebFramePrivate *d;
};


# 2 "/home/eagle/qt-copy/include/QtWebKit/QtWebKit"

# 1 "/home/eagle/qt-copy/include/QtWebKit/qwebhistory.h"






















# 1 "/home/eagle/qt-copy/include/QtCore/qurl.h"



























































































































































































































































































# 23 "/home/eagle/qt-copy/include/QtWebKit/qwebhistory.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 24 "/home/eagle/qt-copy/include/QtWebKit/qwebhistory.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qicon.h"















































































































































# 25 "/home/eagle/qt-copy/include/QtWebKit/qwebhistory.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"



































































































































































































































































































































# 26 "/home/eagle/qt-copy/include/QtWebKit/qwebhistory.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qshareddata.h"



































































































































































































































# 27 "/home/eagle/qt-copy/include/QtWebKit/qwebhistory.h"


# 1 "/home/eagle/qt-copy/include/QtWebKit/qwebkitglobal.h"
















































# 29 "/home/eagle/qt-copy/include/QtWebKit/qwebhistory.h"


# 31 "/home/eagle/qt-copy/include/QtWebKit/qwebhistory.h"
class QWebPage;

class QWebHistoryItemPrivate;
class __attribute__((visibility("default"))) QWebHistoryItem
{
public:
QWebHistoryItem(const QWebHistoryItem &other);
QWebHistoryItem &operator=(const QWebHistoryItem &other);
~QWebHistoryItem();

QUrl originalUrl() const;
QUrl url() const;

QString title() const;
QDateTime lastVisited() const;

QIcon icon() const;

private:
QWebHistoryItem(QWebHistoryItemPrivate *priv);
friend class QWebHistory;
friend class QWebPage;
QExplicitlySharedDataPointer<QWebHistoryItemPrivate> d;
};

class QWebHistoryPrivate;
class __attribute__((visibility("default"))) QWebHistory
{
public:
void clear();

QList<QWebHistoryItem> items() const;
QList<QWebHistoryItem> backItems(int maxItems) const;
QList<QWebHistoryItem> forwardItems(int maxItems) const;

bool canGoBack() const;
bool canGoForward() const;

void back();
void forward();
void goToItem(const QWebHistoryItem &item);

QWebHistoryItem backItem() const;
QWebHistoryItem currentItem() const;
QWebHistoryItem forwardItem() const;
QWebHistoryItem itemAt(int i) const;

int count() const;

private:
QWebHistory();
~QWebHistory();

friend class QWebPage;
friend class QWebPagePrivate;

QWebHistory(const QWebHistory &); QWebHistory &operator=(const QWebHistory &);

QWebHistoryPrivate *d;
};


# 3 "/home/eagle/qt-copy/include/QtWebKit/QtWebKit"

# 1 "/home/eagle/qt-copy/include/QtWebKit/qwebhistoryinterface.h"
























# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 25 "/home/eagle/qt-copy/include/QtWebKit/qwebhistoryinterface.h"


# 1 "/home/eagle/qt-copy/include/QtWebKit/qwebkitglobal.h"
















































# 27 "/home/eagle/qt-copy/include/QtWebKit/qwebhistoryinterface.h"


# 29 "/home/eagle/qt-copy/include/QtWebKit/qwebhistoryinterface.h"
class __attribute__((visibility("default"))) QWebHistoryInterface : public QObject
{
Q_OBJECT
public:
QWebHistoryInterface(QObject *parent = 0);
~QWebHistoryInterface();

static void setDefaultInterface(QWebHistoryInterface *defaultInterface);
static QWebHistoryInterface *defaultInterface();

virtual bool historyContains(const QString &url) const = 0;
virtual void addHistoryEntry(const QString &url) = 0;
};


# 4 "/home/eagle/qt-copy/include/QtWebKit/QtWebKit"

# 1 "/home/eagle/qt-copy/include/QtWebKit/qwebkitglobal.h"
















































# 5 "/home/eagle/qt-copy/include/QtWebKit/QtWebKit"

# 1 "/home/eagle/qt-copy/include/QtWebKit/qwebpage.h"























# 1 "/home/eagle/qt-copy/include/QtWebKit/qwebsettings.h"
























# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 25 "/home/eagle/qt-copy/include/QtWebKit/qwebsettings.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qpixmap.h"











































































































































































































































































































# 26 "/home/eagle/qt-copy/include/QtWebKit/qwebsettings.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qicon.h"















































































































































# 27 "/home/eagle/qt-copy/include/QtWebKit/qwebsettings.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qshareddata.h"



































































































































































































































# 28 "/home/eagle/qt-copy/include/QtWebKit/qwebsettings.h"


# 30 "/home/eagle/qt-copy/include/QtWebKit/qwebsettings.h"
namespace WebCore
{
class Settings;
}

class QWebPage;
class QWebSettingsPrivate;

class QUrl;


class __attribute__((visibility("default"))) QWebSettings
{
public:
enum FontFamily {
StandardFont,
FixedFont,
SerifFont,
SansSerifFont,
CursiveFont,
FantasyFont
};
enum WebAttribute {
AutoLoadImages,
JavascriptEnabled,
JavaEnabled,
PluginsEnabled,
PrivateBrowsingEnabled,
JavascriptCanOpenWindows,
JavascriptCanAccessClipboard,
DeveloperExtrasEnabled,
LinksIncludedInFocusChain
};
enum WebGraphic {
MissingImageGraphic,
MissingPluginGraphic,
DefaultFrameIconGraphic,
TextAreaSizeGripCornerGraphic
};
enum FontSize {
MinimumFontSize,
MinimumLogicalFontSize,
DefaultFontSize,
DefaultFixedFontSize
};

static QWebSettings *globalSettings();

void setFontFamily(FontFamily which, const QString &family);
QString fontFamily(FontFamily which) const;
void resetFontFamily(FontFamily which);

void setFontSize(FontSize type, int size);
int fontSize(FontSize type) const;
void resetFontSize(FontSize type);

void setAttribute(WebAttribute attr, bool on);
bool testAttribute(WebAttribute attr) const;
void resetAttribute(WebAttribute attr);

void setUserStyleSheetUrl(const QUrl &location);
QUrl userStyleSheetUrl() const;

static void setIconDatabasePath(const QString &location);
static QString iconDatabasePath();
static void clearIconDatabase();
static QIcon iconForUrl(const QUrl &url);

static void setWebGraphic(WebGraphic type, const QPixmap &graphic);
static QPixmap webGraphic(WebGraphic type);

static void setMaximumPagesInCache(int pages);
static int maximumPagesInCache();
static void setObjectCacheCapacities(int cacheMinDeadCapacity, int cacheMaxDead, int totalCapacity);

private:
friend class QWebPagePrivate;
friend class QWebSettingsPrivate;

QWebSettings(const QWebSettings &); QWebSettings &operator=(const QWebSettings &);

QWebSettings();
QWebSettings(WebCore::Settings *settings);
~QWebSettings();

QWebSettingsPrivate *d;
};


# 24 "/home/eagle/qt-copy/include/QtWebKit/qwebpage.h"

# 1 "/home/eagle/qt-copy/include/QtWebKit/qwebkitglobal.h"
















































# 25 "/home/eagle/qt-copy/include/QtWebKit/qwebpage.h"


# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 27 "/home/eagle/qt-copy/include/QtWebKit/qwebpage.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qwidget.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 28 "/home/eagle/qt-copy/include/QtWebKit/qwebpage.h"


# 30 "/home/eagle/qt-copy/include/QtWebKit/qwebpage.h"

class QNetworkProxy;
class QUndoStack;
class QUrl;
class QNetworkRequest;
class QNetworkReply;
class QNetworkAccessManager;


class QWebFrame;
class QWebNetworkRequest;
class QWebHistory;

class QWebPagePrivate;
class QWebFrameData;
class QWebNetworkInterface;
class QWebHitTestResult;
class QWebPluginFactory;

namespace WebCore {
class ChromeClientQt;
class EditorClientQt;
class FrameLoaderClientQt;
class FrameLoadRequest;
class InspectorClientQt;
class ResourceHandle;
class HitTestResult;
class FrameView;
}

class __attribute__((visibility("default"))) QWebPage : public QObject
{
Q_OBJECT

Q_PROPERTY(bool modified READ isModified)
Q_PROPERTY(QString selectedText READ selectedText)
Q_PROPERTY(QSize viewportSize READ viewportSize WRITE setViewportSize)
Q_PROPERTY(bool forwardUnsupportedContent READ forwardUnsupportedContent WRITE setForwardUnsupportedContent)
Q_PROPERTY(LinkDelegationPolicy linkDelegationPolicy READ linkDelegationPolicy WRITE setLinkDelegationPolicy)
Q_PROPERTY(QPalette palette READ palette WRITE setPalette)
Q_ENUMS(LinkDelegationPolicy NavigationType WebAction)
public:
enum NavigationType {
NavigationTypeLinkClicked,
NavigationTypeFormSubmitted,
NavigationTypeBackOrForward,
NavigationTypeReload,
NavigationTypeFormResubmitted,
NavigationTypeOther
};

enum WebAction {
NoWebAction = - 1,

OpenLink,

OpenLinkInNewWindow,
OpenFrameInNewWindow,

DownloadLinkToDisk,
CopyLinkToClipboard,

OpenImageInNewWindow,
DownloadImageToDisk,
CopyImageToClipboard,

Back,
Forward,
Stop,
Reload,

Cut,
Copy,
Paste,

Undo,
Redo,
MoveToNextChar,
MoveToPreviousChar,
MoveToNextWord,
MoveToPreviousWord,
MoveToNextLine,
MoveToPreviousLine,
MoveToStartOfLine,
MoveToEndOfLine,
MoveToStartOfBlock,
MoveToEndOfBlock,
MoveToStartOfDocument,
MoveToEndOfDocument,
SelectNextChar,
SelectPreviousChar,
SelectNextWord,
SelectPreviousWord,
SelectNextLine,
SelectPreviousLine,
SelectStartOfLine,
SelectEndOfLine,
SelectStartOfBlock,
SelectEndOfBlock,
SelectStartOfDocument,
SelectEndOfDocument,
DeleteStartOfWord,
DeleteEndOfWord,

SetTextDirectionDefault,
SetTextDirectionLeftToRight,
SetTextDirectionRightToLeft,

ToggleBold,
ToggleItalic,
ToggleUnderline,

InspectElement,

WebActionCount
};

enum FindFlag {
FindBackward = 1,
FindCaseSensitively = 2,
FindWrapsAroundDocument = 4
};
typedef QFlags<FindFlag> FindFlags;

enum LinkDelegationPolicy {
DontDelegateLinks,
DelegateExternalLinks,
DelegateAllLinks
};

enum WebWindowType {
WebBrowserWindow,
WebModalDialog
};

explicit QWebPage(QObject *parent = 0);
~QWebPage();

QWebFrame *mainFrame() const;
QWebFrame *currentFrame() const;

QWebHistory *history() const;
QWebSettings *settings() const;

void setView(QWidget *view);
QWidget *view() const;

bool isModified() const;
QUndoStack *undoStack() const;












# 191 "/home/eagle/qt-copy/include/QtWebKit/qwebpage.h"
void setNetworkAccessManager(QNetworkAccessManager *manager);
QNetworkAccessManager *networkAccessManager() const;


# 195 "/home/eagle/qt-copy/include/QtWebKit/qwebpage.h"
void setPluginFactory(QWebPluginFactory *factory);
QWebPluginFactory *pluginFactory() const;

quint64 totalBytes() const;
quint64 bytesReceived() const;

QString selectedText() const;

QAction *action(WebAction action) const;
virtual void triggerAction(WebAction action, bool checked = false);

QSize viewportSize() const;
void setViewportSize(const QSize &size) const;

virtual bool event(QEvent*);
bool focusNextPrevChild(bool next);

QVariant inputMethodQuery(Qt::InputMethodQuery property) const;

bool findText(const QString &subString, FindFlags options = 0);

void setForwardUnsupportedContent(bool forward);
bool forwardUnsupportedContent() const;

void setLinkDelegationPolicy(LinkDelegationPolicy policy);
LinkDelegationPolicy linkDelegationPolicy() const;

void setPalette(const QPalette &palette);
QPalette palette() const;

bool swallowContextMenuEvent(QContextMenuEvent *event);
void updatePositionDependentActions(const QPoint &pos);

enum Extension {
};
class ExtensionOption
{};
class ExtensionReturn
{};
virtual bool extension(Extension extension, const ExtensionOption *option = 0, ExtensionReturn *output = 0);
virtual bool supportsExtension(Extension extension) const;

signals:
void loadStarted();
void loadProgress(int progress);
void loadFinished(bool ok);

void linkHovered(const QString &link, const QString &title, const QString &textContent);
void statusBarMessage(const QString& text);
void selectionChanged();
void frameCreated(QWebFrame *frame);
void geometryChangeRequested(const QRect& geom);
void repaintRequested(const QRect& dirtyRect);
void scrollRequested(int dx, int dy, const QRect& scrollViewRect);
void windowCloseRequested();
void printRequested(QWebFrame *frame);
void linkClicked(const QUrl &url);

void toolBarVisibilityChangeRequested(bool visible);
void statusBarVisibilityChangeRequested(bool visible);
void menuBarVisibilityChangeRequested(bool visible);


# 258 "/home/eagle/qt-copy/include/QtWebKit/qwebpage.h"
void unsupportedContent(QNetworkReply *reply);
void downloadRequested(const QNetworkRequest &request);


# 262 "/home/eagle/qt-copy/include/QtWebKit/qwebpage.h"
void microFocusChanged();

protected:
virtual QWebPage *createWindow(WebWindowType type);
virtual QObject *createPlugin(const QString &classid, const QUrl &url, const QStringList &paramNames, const QStringList &paramValues);


# 269 "/home/eagle/qt-copy/include/QtWebKit/qwebpage.h"
virtual bool acceptNavigationRequest(QWebFrame *frame, const QNetworkRequest &request, NavigationType type);



# 273 "/home/eagle/qt-copy/include/QtWebKit/qwebpage.h"
virtual QString chooseFile(QWebFrame *originatingFrame, const QString& oldFile);
virtual void javaScriptAlert(QWebFrame *originatingFrame, const QString& msg);
virtual bool javaScriptConfirm(QWebFrame *originatingFrame, const QString& msg);
virtual bool javaScriptPrompt(QWebFrame *originatingFrame, const QString& msg, const QString& defaultValue, QString* result);
virtual void javaScriptConsoleMessage(const QString& message, int lineNumber, const QString& sourceID);

virtual QString userAgentForUrl(const QUrl& url) const;

private:


QWebPagePrivate *d;

friend class QWebFrame;
friend class QWebPagePrivate;
friend class WebCore::ChromeClientQt;
friend class WebCore::EditorClientQt;
friend class WebCore::FrameLoaderClientQt;
friend class WebCore::InspectorClientQt;
friend class WebCore::ResourceHandle;
friend class WebCore::FrameView;
};

inline QFlags<QWebPage::FindFlags::enum_type> operator|(QWebPage::FindFlags::enum_type f1, QWebPage::FindFlags::enum_type f2) { return QFlags<QWebPage::FindFlags::enum_type>(f1) | f2; } inline QFlags<QWebPage::FindFlags::enum_type> operator|(QWebPage::FindFlags::enum_type f1, QFlags<QWebPage::FindFlags::enum_type> f2) { return f2 | f1; }


# 6 "/home/eagle/qt-copy/include/QtWebKit/QtWebKit"

# 1 "/home/eagle/qt-copy/include/QtWebKit/qwebpluginfactory.h"






















# 1 "/home/eagle/qt-copy/include/QtWebKit/qwebkitglobal.h"
















































# 23 "/home/eagle/qt-copy/include/QtWebKit/qwebpluginfactory.h"


# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 25 "/home/eagle/qt-copy/include/QtWebKit/qwebpluginfactory.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"
















































































































































































































































# 26 "/home/eagle/qt-copy/include/QtWebKit/qwebpluginfactory.h"


# 28 "/home/eagle/qt-copy/include/QtWebKit/qwebpluginfactory.h"

class QUrl;
class QWebPluginFactoryPrivate;
class QString;


class __attribute__((visibility("default"))) QWebPluginFactory : public QObject
{
Q_OBJECT
public:
struct MimeType {
QString name;
QString description;
QStringList fileExtensions;
};

struct Plugin {
QString name;
QString description;
QList<MimeType> mimeTypes;
};

explicit QWebPluginFactory(QObject *parent = 0);
virtual ~QWebPluginFactory();

virtual QList<Plugin> plugins() const = 0;
virtual void refreshPlugins();

virtual QObject *create(const QString &mimeType,
const QUrl &url,
const QStringList &argumentNames,
const QStringList &argumentValues) const = 0;

enum Extension {
};
class ExtensionOption
{};
class ExtensionReturn
{};
virtual bool extension(Extension extension, const ExtensionOption *option = 0, ExtensionReturn *output = 0);
virtual bool supportsExtension(Extension extension) const;

private:
QWebPluginFactoryPrivate *d;
};


# 7 "/home/eagle/qt-copy/include/QtWebKit/QtWebKit"

# 1 "/home/eagle/qt-copy/include/QtWebKit/qwebsettings.h"






















































































































# 8 "/home/eagle/qt-copy/include/QtWebKit/QtWebKit"

# 1 "/home/eagle/qt-copy/include/QtWebKit/qwebview.h"























# 1 "/home/eagle/qt-copy/include/QtWebKit/qwebkitglobal.h"
















































# 24 "/home/eagle/qt-copy/include/QtWebKit/qwebview.h"

# 1 "/home/eagle/qt-copy/include/QtWebKit/qwebpage.h"










































































































































































































































































































# 25 "/home/eagle/qt-copy/include/QtWebKit/qwebview.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qwidget.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 26 "/home/eagle/qt-copy/include/QtWebKit/qwebview.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qicon.h"















































































































































# 27 "/home/eagle/qt-copy/include/QtWebKit/qwebview.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qurl.h"



























































































































































































































































































# 28 "/home/eagle/qt-copy/include/QtWebKit/qwebview.h"


# 1 "/home/eagle/qt-copy/include/QtNetwork/qnetworkaccessmanager.h"




























































































































# 30 "/home/eagle/qt-copy/include/QtWebKit/qwebview.h"



# 33 "/home/eagle/qt-copy/include/QtWebKit/qwebview.h"

class QNetworkRequest;
class QPrinter;


class QWebPage;
class QWebViewPrivate;
class QWebNetworkRequest;

class __attribute__((visibility("default"))) QWebView : public QWidget
{
Q_OBJECT
Q_PROPERTY(QString title READ title)
Q_PROPERTY(QUrl url READ url WRITE setUrl)
Q_PROPERTY(QIcon icon READ icon)
Q_PROPERTY(QString selectedText READ selectedText)
Q_PROPERTY(bool modified READ isModified)

Q_PROPERTY(qreal textSizeMultiplier READ textSizeMultiplier WRITE setTextSizeMultiplier)
public:
explicit QWebView(QWidget *parent = 0);
virtual ~QWebView();

QWebPage *page() const;
void setPage(QWebPage *page);

void load(const QUrl &url);



# 63 "/home/eagle/qt-copy/include/QtWebKit/qwebview.h"
void load(const QNetworkRequest &request,
QNetworkAccessManager::Operation operation = QNetworkAccessManager::GetOperation,
const QByteArray &body = QByteArray());

# 67 "/home/eagle/qt-copy/include/QtWebKit/qwebview.h"
void setHtml(const QString &html, const QUrl &baseUrl = QUrl());
void setContent(const QByteArray &data, const QString &mimeType = QString(), const QUrl &baseUrl = QUrl());

QWebHistory *history() const;
QWebSettings *settings() const;

QString title() const;
void setUrl(const QUrl &url);
QUrl url() const;
QIcon icon() const;

QString selectedText() const;

QAction *pageAction(QWebPage::WebAction action) const;
void triggerPageAction(QWebPage::WebAction action, bool checked = false);

bool isModified() const;







QVariant inputMethodQuery(Qt::InputMethodQuery property) const;

QSize sizeHint() const;

void setTextSizeMultiplier(qreal factor);
qreal textSizeMultiplier() const;

bool findText(const QString &subString, QWebPage::FindFlags options = 0);

virtual bool event(QEvent *);

public slots:
void stop();
void back();
void forward();
void reload();

void print(QPrinter *printer) const;

signals:
void loadStarted();
void loadProgress(int progress);
void loadFinished(bool);
void titleChanged(const QString& title);
void statusBarMessage(const QString& text);
void linkClicked(const QUrl &url);
void selectionChanged();
void iconChanged();
void urlChanged(const QUrl &url);

protected:
void resizeEvent(QResizeEvent *e);
void paintEvent(QPaintEvent *ev);

virtual QWebView *createWindow(QWebPage::WebWindowType type);

virtual void changeEvent(QEvent*);
virtual void mouseMoveEvent(QMouseEvent*);
virtual void mousePressEvent(QMouseEvent*);
virtual void mouseDoubleClickEvent(QMouseEvent*);
virtual void mouseReleaseEvent(QMouseEvent*);
virtual void contextMenuEvent(QContextMenuEvent*);
virtual void wheelEvent(QWheelEvent*);
virtual void keyPressEvent(QKeyEvent*);
virtual void keyReleaseEvent(QKeyEvent*);
virtual void dragEnterEvent(QDragEnterEvent *);
virtual void dragLeaveEvent(QDragLeaveEvent *);
virtual void dragMoveEvent(QDragMoveEvent *);
virtual void dropEvent(QDropEvent *);
virtual void focusInEvent(QFocusEvent*);
virtual void focusOutEvent(QFocusEvent*);
virtual void inputMethodEvent(QInputMethodEvent*);

virtual bool focusNextPrevChild(bool next);

private:
friend class QWebPage;
QWebViewPrivate *d;
};


# 9 "/home/eagle/qt-copy/include/QtWebKit/QtWebKit"

# 39 "qtscript_masterinclude.h"







# 1 "./../qtbindings/qtscript_core/qtscriptconcurrent.h"




























# 1 "/home/eagle/qt-copy/include/QtScript/qscriptvalue.h"














































# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtScript/qscriptvalue.h"




# 1 "/home/eagle/qt-copy/include/QtCore/qlist.h"











































































































































































































































































































































































































































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtScript/qscriptvalue.h"


# 53 "/home/eagle/qt-copy/include/QtScript/qscriptvalue.h"




typedef QtValidLicenseForScriptModule QtScriptModule;

class QScriptClass;
class QScriptValue;
class QScriptEngine;
class QScriptString;
class QVariant;
class QObject;
struct QMetaObject;
class QDateTime;

# 68 "/home/eagle/qt-copy/include/QtScript/qscriptvalue.h"
class QRegExp;


# 71 "/home/eagle/qt-copy/include/QtScript/qscriptvalue.h"
typedef QList<QScriptValue> QScriptValueList;

typedef double qsreal;

class QScriptValuePrivate;
class  QScriptValue
{
public:
enum ResolveFlag {
ResolveLocal = 0x00,
ResolvePrototype = 0x01,
ResolveScope = 0x02,
ResolveFull = ResolvePrototype | ResolveScope
};

typedef QFlags<ResolveFlag> ResolveFlags;

enum PropertyFlag {
ReadOnly = 0x00000001,
Undeletable = 0x00000002,
SkipInEnumeration = 0x00000004,

PropertyGetter = 0x00000008,
PropertySetter = 0x00000010,

QObjectMember = 0x00000020,

KeepExistingFlags = 0x00000800,

UserRange = 0xff000000 
};
typedef QFlags<PropertyFlag> PropertyFlags;

enum SpecialValue {
NullValue,
UndefinedValue
};

public:
QScriptValue();
~QScriptValue();
QScriptValue(const QScriptValue &other);
QScriptValue(QScriptEngine *engine, SpecialValue val);
QScriptValue(QScriptEngine *engine, bool val);
QScriptValue(QScriptEngine *engine, int val);
QScriptValue(QScriptEngine *engine, uint val);
QScriptValue(QScriptEngine *engine, qsreal val);
QScriptValue(QScriptEngine *engine, const QString &val);


# 121 "/home/eagle/qt-copy/include/QtScript/qscriptvalue.h"
 QScriptValue(QScriptEngine *engine, const char *val);


# 124 "/home/eagle/qt-copy/include/QtScript/qscriptvalue.h"
QScriptValue &operator=(const QScriptValue &other);

QScriptEngine *engine() const;

bool isValid() const;
bool isBoolean() const;
bool isNumber() const;
bool isFunction() const;
bool isNull() const;
bool isString() const;
bool isUndefined() const;
bool isVariant() const;
bool isQObject() const;
bool isQMetaObject() const;
bool isObject() const;
bool isDate() const;
bool isRegExp() const;
bool isArray() const;
bool isError() const;

QString toString() const;
qsreal toNumber() const;
bool toBoolean() const;
qsreal toInteger() const;
qint32 toInt32() const;
quint32 toUInt32() const;
quint16 toUInt16() const;
QVariant toVariant() const;
QObject *toQObject() const;
const QMetaObject *toQMetaObject() const;
QScriptValue toObject() const;
QDateTime toDateTime() const;

# 157 "/home/eagle/qt-copy/include/QtScript/qscriptvalue.h"
QRegExp toRegExp() const;


# 160 "/home/eagle/qt-copy/include/QtScript/qscriptvalue.h"
bool instanceOf(const QScriptValue &other) const;

bool lessThan(const QScriptValue &other) const;
bool equals(const QScriptValue &other) const;
bool strictlyEquals(const QScriptValue &other) const;

QScriptValue prototype() const;
void setPrototype(const QScriptValue &prototype);

QScriptValue scope() const;
void setScope(const QScriptValue &scope);

QScriptValue property(const QString &name,
const ResolveFlags &mode = ResolvePrototype) const;
void setProperty(const QString &name, const QScriptValue &value,
const PropertyFlags &flags = KeepExistingFlags);

QScriptValue property(quint32 arrayIndex,
const ResolveFlags &mode = ResolvePrototype) const;
void setProperty(quint32 arrayIndex, const QScriptValue &value,
const PropertyFlags &flags = KeepExistingFlags);

QScriptValue property(const QScriptString &name,
const ResolveFlags &mode = ResolvePrototype) const;
void setProperty(const QScriptString &name, const QScriptValue &value,
const PropertyFlags &flags = KeepExistingFlags);

QScriptValue::PropertyFlags propertyFlags(
const QString &name, const ResolveFlags &mode = ResolvePrototype) const;
QScriptValue::PropertyFlags propertyFlags(
const QScriptString &name, const ResolveFlags &mode = ResolvePrototype) const;

QScriptValue call(const QScriptValue &thisObject = QScriptValue(),
const QScriptValueList &args = QScriptValueList());
QScriptValue call(const QScriptValue &thisObject,
const QScriptValue &arguments);
QScriptValue construct(const QScriptValueList &args = QScriptValueList());
QScriptValue construct(const QScriptValue &arguments);

QScriptValue data() const;
void setData(const QScriptValue &data);

QScriptClass *scriptClass() const;
void setScriptClass(QScriptClass *scriptClass);

qint64 objectId() const;

private:
QScriptValuePrivate *d_ptr;

inline QScriptValuePrivate* d_func() { return reinterpret_cast<QScriptValuePrivate *>(d_ptr); } inline const QScriptValuePrivate* d_func() const { return reinterpret_cast<const QScriptValuePrivate *>(d_ptr); } friend class QScriptValuePrivate;
};

inline QFlags<QScriptValue::ResolveFlags::enum_type> operator|(QScriptValue::ResolveFlags::enum_type f1, QScriptValue::ResolveFlags::enum_type f2) { return QFlags<QScriptValue::ResolveFlags::enum_type>(f1) | f2; } inline QFlags<QScriptValue::ResolveFlags::enum_type> operator|(QScriptValue::ResolveFlags::enum_type f1, QFlags<QScriptValue::ResolveFlags::enum_type> f2) { return f2 | f1; }
inline QFlags<QScriptValue::PropertyFlags::enum_type> operator|(QScriptValue::PropertyFlags::enum_type f1, QScriptValue::PropertyFlags::enum_type f2) { return QFlags<QScriptValue::PropertyFlags::enum_type>(f1) | f2; } inline QFlags<QScriptValue::PropertyFlags::enum_type> operator|(QScriptValue::PropertyFlags::enum_type f1, QFlags<QScriptValue::PropertyFlags::enum_type> f2) { return f2 | f1; }








# 29 "./../qtbindings/qtscript_core/qtscriptconcurrent.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuture.h"
























































































































































































































































































# 30 "./../qtbindings/qtscript_core/qtscriptconcurrent.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuturewatcher.h"
































































































































































































































# 31 "./../qtbindings/qtscript_core/qtscriptconcurrent.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuturesynchronizer.h"
























































































































# 32 "./../qtbindings/qtscript_core/qtscriptconcurrent.h"


# 34 "./../qtbindings/qtscript_core/qtscriptconcurrent.h"
typedef QFutureWatcher<void> QtScriptVoidFutureWatcher;
typedef QFuture<void> QtScriptVoidFuture;
typedef QFutureSynchronizer<void> QtScriptVoidFutureSynchronizer;
typedef QFuture<QScriptValue> QtScriptFuture;
typedef QFutureWatcher<QScriptValue> QtScriptFutureWatcher;
typedef QFutureSynchronizer<QScriptValue> QtScriptFutureSynchronizer;
typedef QFutureIterator<QScriptValue> QtScriptFutureIterator;




# 46 "qtscript_masterinclude.h"









# 55 "qtscript_masterinclude.h"










# 65 "qtscript_masterinclude.h"























# 88 "qtscript_masterinclude.h"












# 100 "qtscript_masterinclude.h"










# 110 "qtscript_masterinclude.h"






# 116 "qtscript_masterinclude.h"









# 125 "qtscript_masterinclude.h"






















# 147 "qtscript_masterinclude.h"








































# 187 "qtscript_masterinclude.h"


























# 213 "qtscript_masterinclude.h"













































































# 290 "qtscript_masterinclude.h"







# 297 "qtscript_masterinclude.h"










# 307 "qtscript_masterinclude.h"






# 313 "qtscript_masterinclude.h"












# 325 "qtscript_masterinclude.h"





# 330 "qtscript_masterinclude.h"






































































































































































































































# 560 "qtscript_masterinclude.h"



































# 595 "qtscript_masterinclude.h"














# 609 "qtscript_masterinclude.h"





























# 638 "qtscript_masterinclude.h"












# 650 "qtscript_masterinclude.h"




















# 670 "qtscript_masterinclude.h"






























# 700 "qtscript_masterinclude.h"






























# 730 "qtscript_masterinclude.h"









# 739 "qtscript_masterinclude.h"





















# 760 "qtscript_masterinclude.h"













# 773 "qtscript_masterinclude.h"












































# 817 "qtscript_masterinclude.h"













# 830 "qtscript_masterinclude.h"



















# 849 "qtscript_masterinclude.h"





# 854 "qtscript_masterinclude.h"
















# 870 "qtscript_masterinclude.h"








# 878 "qtscript_masterinclude.h"






# 884 "qtscript_masterinclude.h"









# 893 "qtscript_masterinclude.h"







# 900 "qtscript_masterinclude.h"



# 903 "qtscript_masterinclude.h"





# 908 "qtscript_masterinclude.h"





# 913 "qtscript_masterinclude.h"




# 917 "qtscript_masterinclude.h"








# 925 "qtscript_masterinclude.h"





# 930 "qtscript_masterinclude.h"













# 943 "qtscript_masterinclude.h"











# 954 "qtscript_masterinclude.h"







# 961 "qtscript_masterinclude.h"











































# 1004 "qtscript_masterinclude.h"






# 1010 "qtscript_masterinclude.h"










































# 1052 "qtscript_masterinclude.h"






# 1058 "qtscript_masterinclude.h"






































# 1096 "qtscript_masterinclude.h"




# 1100 "qtscript_masterinclude.h"



















# 1119 "qtscript_masterinclude.h"




# 1123 "qtscript_masterinclude.h"




# 1127 "qtscript_masterinclude.h"



# 1130 "qtscript_masterinclude.h"



# 1 "/home/eagle/qt-copy/include/QtCore/qtextcodec.h"





























































































































































































# 1 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextcodecplugin.h"


































































































# 2 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuture.h"
























































































































































































































































































# 3 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfutureinterface.h"























































































































































































































































































































# 4 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuturesynchronizer.h"
























































































































# 5 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuturewatcher.h"
































































































































































































































# 6 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qrunnable.h"










































































# 7 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentcompilertest.h"









































































# 8 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentexception.h"


































































































































# 9 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfilter.h"


































































































































































































































































































































































































































































































































































































































































































































































# 10 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfilterkernel.h"















































































































































































































































































































































# 11 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfunctionwrappers.h"















































































































































































# 12 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentiteratekernel.h"

















































































































































































































































































































# 13 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmap.h"















































































































































































































































































































































































































































































































































































































































































































































































































# 14 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmapkernel.h"










































































































































































































































































# 15 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmedian.h"




































































































































# 16 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentreducekernel.h"
























































































































































































































































# 17 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentresultstore.h"











































































































































































































































# 18 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentrun.h"











































































































































































































































































































# 19 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentrunbase.h"



































































































































# 20 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentstoredfunctioncall.h"


















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 21 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentthreadengine.h"



















































































































































































































































































































# 22 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qthreadpool.h"
































































































# 23 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qendian.h"










































































































































































































































































































































# 24 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





























































































































































































































































































# 286 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 291 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 296 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 301 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 306 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 311 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 316 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 321 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 326 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 331 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 336 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 341 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 346 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 351 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 356 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 361 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 366 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 371 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 376 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 381 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 386 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 391 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 396 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 401 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 406 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 411 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 416 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 421 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 426 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 431 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 436 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 441 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 446 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 451 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 456 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 461 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 466 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 471 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 476 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 481 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 486 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 491 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 496 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 501 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 506 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 511 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 516 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 521 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 526 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 531 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 536 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 541 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 546 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 551 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 556 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 561 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 566 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 571 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 576 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 581 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 586 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 591 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 596 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 601 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 606 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 611 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 616 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 621 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 626 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 631 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 636 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 641 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 646 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 651 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 656 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 661 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 666 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 671 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 676 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 681 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 686 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 691 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 696 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 701 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 706 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 711 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 716 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 721 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 726 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 731 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 736 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 741 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 746 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 751 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 756 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 761 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 766 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 771 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 776 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 781 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 786 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 25 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 26 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlibraryinfo.h"



























































































# 27 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 28 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qnumeric.h"









































































# 29 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstractfileengine.h"

























































































































































































































































# 30 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbuffer.h"














































































































# 31 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdatastream.h"









































































































































































































































































































































































































































# 32 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdebug.h"






































































































































































































































































# 33 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdir.h"










































































































































































































































































# 34 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdiriterator.h"



































































































# 35 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfile.h"














































































































































































































# 36 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfileinfo.h"





























































































































































































# 37 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfilesystemwatcher.h"



























































































# 38 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfsfileengine.h"



























































































































# 39 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"






























































































































































































































































# 40 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qprocess.h"












































































































































































































# 41 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qresource.h"










































































































# 42 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsettings.h"





















































































































































































































































































































# 43 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtemporaryfile.h"














































































































# 44 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextstream.h"



















































































































































































































































































































































































# 45 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qurl.h"



























































































































































































































































































# 46 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstracteventdispatcher.h"













































































































# 47 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstractitemmodel.h"

































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbasictimer.h"












































































# 49 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcoreapplication.h"












































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcoreevent.h"




































































































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qeventloop.h"






































































































# 52 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmath.h"



































































































































# 53 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmetaobject.h"










































































































































































# 54 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"












































































































































































































































































































































# 55 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmimedata.h"










































































































# 56 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 57 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qobjectcleanuphandler.h"
















































































# 58 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qobjectdefs.h"











































































































































































































































































































































































































# 59 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpointer.h"


















































































































































# 60 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsharedmemory.h"

























































































































# 61 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsignalmapper.h"






































































































# 62 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsocketnotifier.h"































































































# 63 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsystemsemaphore.h"








































































































# 64 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtimer.h"






















































































































# 65 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtranslator.h"




































































































# 66 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qvariant.h"






















































































































































































































































































































































































































































































































































































































# 67 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfactoryinterface.h"





































































# 68 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlibrary.h"


























































































































# 69 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qplugin.h"
















































































































# 70 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpluginloader.h"






































































































# 71 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/quuid.h"
































































































































































































# 72 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qatomic.h"

























































































































































































































# 73 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbasicatomic.h"




















































































































































































































# 74 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmutex.h"



































































































































































































# 75 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qreadwritelock.h"






















































































































































































































































# 76 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsemaphore.h"





















































































# 77 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qthread.h"




































































































































































# 78 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qthreadstorage.h"































































































































































# 79 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qwaitcondition.h"











































































































# 80 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qalgorithms.h"

















































































































































































































































































































































































































































































































































































# 81 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbitarray.h"
















































































































































































# 82 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"












































































































































































































































































































































































































































































































































































































# 83 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbytearraymatcher.h"


















































































# 84 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcache.h"


























































































































































































































# 85 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qchar.h"















































































































































































































































































































































































































# 86 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcontainerfwd.h"









































































# 87 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcryptographichash.h"






















































































# 88 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"



































































































































































































































































































































# 89 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qhash.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 90 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qiterator.h"








































































# 91 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qline.h"


































































































































































































































































































































































































































# 92 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlinkedlist.h"
























































































































































































































































































































































































































































































































# 93 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlist.h"











































































































































































































































































































































































































































































































































































































































































































# 94 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlocale.h"






















































































































































































































































































































































































































































































































































































































































































# 95 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmap.h"






















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 96 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpair.h"

































































































































# 97 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpoint.h"






































































































































































































































































































































































# 98 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qqueue.h"







































































# 99 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qrect.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































# 100 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qregexp.h"

























































































































































# 101 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qset.h"


































































































































































































































































































































































# 102 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qshareddata.h"



































































































































































































































# 103 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsize.h"






































































































































































































































































































































































# 104 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstack.h"




















































































# 105 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 106 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"
















































































































































































































































# 107 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstringmatcher.h"




























































































# 108 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextboundaryfinder.h"




















































































































# 109 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtimeline.h"
















































































































































# 110 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qvarlengtharray.h"













































































































































































































































# 111 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qvector.h"































































































































































































































































































































































































































































































































































































































































































































































































# 112 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qxmlstream.h"













































































































































































































































































































































































































































































# 113 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtOpenGL/QtOpenGL"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextcodec.h"





























































































































































































# 1 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextcodecplugin.h"


































































































# 2 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuture.h"
























































































































































































































































































# 3 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfutureinterface.h"























































































































































































































































































































# 4 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuturesynchronizer.h"
























































































































# 5 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfuturewatcher.h"
































































































































































































































# 6 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qrunnable.h"










































































# 7 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentcompilertest.h"









































































# 8 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentexception.h"


































































































































# 9 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfilter.h"


































































































































































































































































































































































































































































































































































































































































































































































# 10 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfilterkernel.h"















































































































































































































































































































































# 11 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentfunctionwrappers.h"















































































































































































# 12 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentiteratekernel.h"

















































































































































































































































































































# 13 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmap.h"















































































































































































































































































































































































































































































































































































































































































































































































































# 14 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmapkernel.h"










































































































































































































































































# 15 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentmedian.h"




































































































































# 16 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentreducekernel.h"
























































































































































































































































# 17 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentresultstore.h"











































































































































































































































# 18 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentrun.h"











































































































































































































































































































# 19 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentrunbase.h"



































































































































# 20 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentstoredfunctioncall.h"


















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 21 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtconcurrentthreadengine.h"



















































































































































































































































































































# 22 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qthreadpool.h"
































































































# 23 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qendian.h"










































































































































































































































































































































# 24 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





























































































































































































































































































# 286 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 291 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 296 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 301 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 306 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 311 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 316 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 321 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 326 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 331 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 336 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 341 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 346 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 351 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 356 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 361 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 366 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 371 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 376 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 381 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 386 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 391 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 396 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 401 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 406 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 411 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 416 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 421 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 426 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 431 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 436 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 441 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 446 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 451 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 456 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 461 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 466 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 471 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 476 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 481 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 486 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 491 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 496 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 501 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 506 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 511 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 516 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 521 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 526 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 531 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 536 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 541 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 546 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 551 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 556 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 561 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 566 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 571 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 576 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 581 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 586 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 591 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 596 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 601 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 606 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 611 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 616 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 621 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 626 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 631 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 636 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 641 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 646 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 651 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 656 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 661 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 666 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 671 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 676 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 681 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 686 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 691 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 696 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 701 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 706 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 711 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 716 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 721 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 726 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 731 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 736 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 741 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 746 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 751 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 756 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 761 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 766 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 771 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 776 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 781 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 786 "/home/eagle/qt-copy/include/QtCore/qfeatures.h"





# 25 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qglobal.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 26 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlibraryinfo.h"



























































































# 27 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qnamespace.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 28 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qnumeric.h"









































































# 29 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstractfileengine.h"

























































































































































































































































# 30 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbuffer.h"














































































































# 31 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdatastream.h"









































































































































































































































































































































































































































# 32 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdebug.h"






































































































































































































































































# 33 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdir.h"










































































































































































































































































# 34 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdiriterator.h"



































































































# 35 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfile.h"














































































































































































































# 36 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfileinfo.h"





























































































































































































# 37 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfilesystemwatcher.h"



























































































# 38 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfsfileengine.h"



























































































































# 39 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qiodevice.h"






























































































































































































































































# 40 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qprocess.h"












































































































































































































# 41 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qresource.h"










































































































# 42 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsettings.h"





















































































































































































































































































































# 43 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtemporaryfile.h"














































































































# 44 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextstream.h"



















































































































































































































































































































































































# 45 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qurl.h"



























































































































































































































































































# 46 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstracteventdispatcher.h"













































































































# 47 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qabstractitemmodel.h"

































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbasictimer.h"












































































# 49 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcoreapplication.h"












































































































































































































































































# 50 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcoreevent.h"




































































































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qeventloop.h"






































































































# 52 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmath.h"



































































































































# 53 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmetaobject.h"










































































































































































# 54 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmetatype.h"












































































































































































































































































































































# 55 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmimedata.h"










































































































# 56 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qobject.h"













































































































































































































































































































































































































































































# 57 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qobjectcleanuphandler.h"
















































































# 58 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qobjectdefs.h"











































































































































































































































































































































































































# 59 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpointer.h"


















































































































































# 60 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsharedmemory.h"

























































































































# 61 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsignalmapper.h"






































































































# 62 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsocketnotifier.h"































































































# 63 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsystemsemaphore.h"








































































































# 64 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtimer.h"






















































































































# 65 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtranslator.h"




































































































# 66 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qvariant.h"






















































































































































































































































































































































































































































































































































































































# 67 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qfactoryinterface.h"





































































# 68 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlibrary.h"


























































































































# 69 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qplugin.h"
















































































































# 70 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpluginloader.h"






































































































# 71 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/quuid.h"
































































































































































































# 72 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qatomic.h"

























































































































































































































# 73 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbasicatomic.h"




















































































































































































































# 74 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmutex.h"



































































































































































































# 75 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qreadwritelock.h"






















































































































































































































































# 76 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsemaphore.h"





















































































# 77 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qthread.h"




































































































































































# 78 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qthreadstorage.h"































































































































































# 79 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qwaitcondition.h"











































































































# 80 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qalgorithms.h"

















































































































































































































































































































































































































































































































































































# 81 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbitarray.h"
















































































































































































# 82 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbytearray.h"












































































































































































































































































































































































































































































































































































































# 83 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qbytearraymatcher.h"


















































































# 84 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcache.h"


























































































































































































































# 85 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qchar.h"















































































































































































































































































































































































































# 86 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcontainerfwd.h"









































































# 87 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qcryptographichash.h"






















































































# 88 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qdatetime.h"



































































































































































































































































































































# 89 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qhash.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 90 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qiterator.h"








































































# 91 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qline.h"


































































































































































































































































































































































































































# 92 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlinkedlist.h"
























































































































































































































































































































































































































































































































# 93 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlist.h"











































































































































































































































































































































































































































































































































































































































































































# 94 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qlocale.h"






















































































































































































































































































































































































































































































































































































































































































# 95 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qmap.h"






















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 96 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpair.h"

































































































































# 97 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qpoint.h"






































































































































































































































































































































































# 98 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qqueue.h"







































































# 99 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qrect.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































# 100 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qregexp.h"

























































































































































# 101 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qset.h"


































































































































































































































































































































































# 102 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qshareddata.h"



































































































































































































































# 103 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qsize.h"






































































































































































































































































































































































# 104 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstack.h"




















































































# 105 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstring.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 106 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstringlist.h"
















































































































































































































































# 107 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qstringmatcher.h"




























































































# 108 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtextboundaryfinder.h"




















































































































# 109 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qtimeline.h"
















































































































































# 110 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qvarlengtharray.h"













































































































































































































































# 111 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qvector.h"































































































































































































































































































































































































































































































































































































































































































































































































# 112 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtCore/qxmlstream.h"













































































































































































































































































































































































































































































# 113 "/home/eagle/qt-copy/include/QtCore/QtCore"

# 1 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qaccessible.h"



































































































































































































































































































































































































































# 2 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qaccessible2.h"











































































































































































































# 3 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qaccessiblebridge.h"






























































































# 4 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qaccessibleobject.h"














































































































































# 5 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qaccessibleplugin.h"

























































































# 6 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qaccessiblewidget.h"















































































































































# 7 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qabstractpagesetupdialog.h"


















































































# 8 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qabstractprintdialog.h"
































































































































# 9 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qcolordialog.h"



















































































































# 10 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qdialog.h"







































































































































# 11 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qerrormessage.h"

























































































# 12 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qfiledialog.h"



















































































































































































































































































































# 13 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qfilesystemmodel.h"





















































































































































































# 14 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qfontdialog.h"

















































































































# 15 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qinputdialog.h"



























































































































# 16 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qmessagebox.h"





















































































































































































































































































































































# 17 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qpagesetupdialog.h"



























































































# 18 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qprintdialog.h"










































































































































# 19 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qprintpreviewdialog.h"

































































































# 20 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qprogressdialog.h"









































































































































# 21 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qwizard.h"






































































































































































































































































# 22 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicsgridlayout.h"

















































































































































# 23 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicsitem.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 24 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicsitemanimation.h"


























































































































# 25 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicslayout.h"
































































































# 26 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicslayoutitem.h"


















































































































































# 27 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicslinearlayout.h"





























































































































# 28 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicsproxywidget.h"



































































































































# 29 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicsscene.h"




































































































































































































































































































# 30 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicssceneevent.h"
























































































































































































































































































































# 31 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicsview.h"























































































































































































































































































































# 32 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qgraphicswidget.h"





































































































































































































































# 33 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qbitmap.h"












































































































# 34 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qicon.h"















































































































































# 35 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qiconengine.h"
























































































# 36 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qiconengineplugin.h"








































































































# 37 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qimage.h"


































































































































































































































































































































































# 38 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qimageiohandler.h"
























































































































































# 39 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qimagereader.h"













































































































































# 40 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qimagewriter.h"






















































































































# 41 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qmovie.h"



















































































































































































# 42 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qpicture.h"




































































































































































































# 43 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qpictureformatplugin.h"
































































































# 44 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qpixmap.h"











































































































































































































































































































# 45 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qpixmapcache.h"







































































# 46 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qinputcontext.h"








































































































































# 47 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qinputcontextfactory.h"


























































































# 48 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qinputcontextplugin.h"












































































































# 49 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qabstractitemdelegate.h"








































































































































# 50 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qabstractitemview.h"



















































































































































































































































































































































































# 51 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qabstractproxymodel.h"







































































































# 52 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qcolumnview.h"































































































































# 53 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qdatawidgetmapper.h"


































































































































# 54 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qdirmodel.h"


































































































































































# 55 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qfileiconprovider.h"



















































































# 56 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qheaderview.h"





























































































































































































































































# 57 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qitemdelegate.h"















































































































































# 58 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qitemeditorfactory.h"






























































































































# 59 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qitemselectionmodel.h"







































































































































































































































# 60 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qlistview.h"













































































































































































































# 61 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qlistwidget.h"

















































































































































































































































































































































# 62 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qproxymodel.h"
















































































































































# 63 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qsortfilterproxymodel.h"






































































































































































































# 64 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qstandarditemmodel.h"






































































































































































































































































































































































































































































# 65 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qstringlistmodel.h"





























































































# 66 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qstyleditemdelegate.h"






















































































































# 67 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtableview.h"



































































































































































































# 68 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtablewidget.h"



























































































































































































































































































































































































# 69 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtreeview.h"

















































































































































































































































# 70 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtreewidget.h"











































































































































































































































































































































































































































# 71 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtreewidgetitemiterator.h"
































































































































































# 72 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qaction.h"



















































































































































































































































# 73 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qactiongroup.h"


















































































































# 74 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qapplication.h"


























































































































































































































































































































































































# 75 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qboxlayout.h"













































































































































































# 76 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qclipboard.h"




































































































































# 77 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qcursor.h"






























































































































































# 78 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qdesktopwidget.h"










































































































# 79 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qdrag.h"











































































































# 80 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qevent.h"






















































































































































































































































































































































































































































































































































































































































































































































# 81 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qformlayout.h"




































































































































































# 82 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qgridlayout.h"


















































































































































































# 83 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qkeysequence.h"




































































































































































































































# 84 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qlayout.h"




















































































































































































































































# 85 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qlayoutitem.h"
























































































































































































# 86 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qmime.h"








































































































































































# 87 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qpalette.h"






































































































































































































































































# 88 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qsessionmanager.h"

















































































































# 89 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qshortcut.h"













































































































# 90 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qsizepolicy.h"



































































































































































































































# 91 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qsound.h"

































































































# 92 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qstackedlayout.h"





















































































































# 93 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtooltip.h"






















































































# 94 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qwhatsthis.h"


























































































# 95 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qwidget.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 96 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qwidgetaction.h"





























































































# 97 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qwindowdefs.h"























































































































































































# 98 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qbrush.h"

























































































































































































































































































































# 99 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qcolor.h"





















































































































































































































































































# 100 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qcolormap.h"



































































































# 101 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qdrawutil.h"














































































































































# 102 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qmatrix.h"















































































































































































# 103 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qpaintdevice.h"













































































































































































# 104 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qpaintengine.h"





























































































































































































































































































































































# 105 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qpainter.h"






































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 106 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qpainterpath.h"















































































































































































































































































































































































































# 107 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qpen.h"














































































































































# 108 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qpolygon.h"









































































































































































# 109 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qprintengine.h"























































































































# 110 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qprinter.h"










































































































































































































































































































































# 111 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qprinterinfo.h"


























































































# 112 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qregion.h"





















































































































































































































# 113 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qrgb.h"


























































































# 114 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qstylepainter.h"


















































































































# 115 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtransform.h"































































































































































































































































































































































# 116 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qwmatrix.h"































































# 117 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qcdestyle.h"




















































































# 118 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qcleanlooksstyle.h"

















































































































# 119 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qcommonstyle.h"









































































































# 120 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qmotifstyle.h"


































































































































# 121 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qplastiquestyle.h"

























































































































# 122 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qstyle.h"

























































































































































































































































































































































































































































































































































































































































































































































































































































































# 123 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qstylefactory.h"




































































# 124 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qstyleoption.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 125 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qstyleplugin.h"



















































































# 126 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qwindowscestyle.h"









































































































# 127 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qwindowsmobilestyle.h"




















































































































# 128 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qwindowsstyle.h"

















































































































# 129 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qwindowsvistastyle.h"














































































































# 130 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qwindowsxpstyle.h"













































































































# 131 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qabstracttextdocumentlayout.h"























































































































































# 132 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qfont.h"

































































































































































































































































































































































# 133 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qfontdatabase.h"

















































































































































































# 134 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qfontinfo.h"

























































































# 135 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qfontmetrics.h"







































































































































































































# 136 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qsyntaxhighlighter.h"

















































































































# 137 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextcursor.h"


































































































































































































































# 138 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextdocument.h"



































































































































































































































































































# 139 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextdocumentfragment.h"





























































































# 140 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextformat.h"






















































































































































































































































































































































































































































































































































































































































































































































































































































































































# 141 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextlayout.h"





















































































































































































































































# 142 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextlist.h"
































































































# 143 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextobject.h"





































































































































































































































































































































# 144 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextoption.h"































































































































































# 145 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtexttable.h"















































































































































# 146 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qcompleter.h"








































































































































































# 147 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qdesktopservices.h"




























































































# 148 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qsystemtrayicon.h"






































































































































# 149 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qundogroup.h"















































































































# 150 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qundostack.h"
































































































































































# 151 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qundoview.h"








































































































# 152 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qabstractbutton.h"






















































































































































































# 153 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qabstractscrollarea.h"













































































































































# 154 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qabstractslider.h"


























































































































































































# 155 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qabstractspinbox.h"



















































































































































































# 156 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qbuttongroup.h"


















































































































# 157 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qcalendarwidget.h"












































































































































































































# 158 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qcheckbox.h"



















































































































# 159 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qcombobox.h"




















































































































































































































































































































































# 160 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qcommandlinkbutton.h"























































































# 161 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qdatetimeedit.h"










































































































































































































































# 162 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qdial.h"




























































































































# 163 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qdialogbuttonbox.h"










































































































































































# 164 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qdockwidget.h"




















































































































































# 165 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qfocusframe.h"




















































































# 166 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qfontcombobox.h"


















































































































# 167 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qframe.h"






















































































































































# 168 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qgroupbox.h"




























































































































# 169 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qlabel.h"

















































































































































































# 170 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qlcdnumber.h"














































































































































# 171 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qlineedit.h"


























































































































































































































































































# 172 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qmainwindow.h"





































































































































































































# 173 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qmdiarea.h"




































































































































































# 174 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qmdisubwindow.h"

































































































































































# 175 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qmenu.h"










































































































































































































































































































































































































































# 176 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qmenubar.h"













































































































































































































































































































































































# 177 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qmenudata.h"
















































































# 178 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qplaintextedit.h"






































































































































































































































































































































# 179 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qprintpreviewwidget.h"






























































































































# 180 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qprogressbar.h"




































































































































# 181 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qpushbutton.h"






























































































































# 182 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qradiobutton.h"


























































































# 183 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qrubberband.h"










































































































# 184 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qscrollarea.h"







































































































# 185 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qscrollbar.h"








































































































# 186 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qsizegrip.h"

































































































# 187 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qslider.h"








































































































































# 188 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qspinbox.h"






























































































































































































# 189 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qsplashscreen.h"





































































































# 190 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qsplitter.h"

































































































































































































# 191 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qstackedwidget.h"






































































































# 192 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qstatusbar.h"






















































































































# 193 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtabbar.h"



























































































































































































# 194 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtabwidget.h"
















































































































































































































































# 195 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextbrowser.h"














































































































































# 196 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtextedit.h"














































































































































































































































































































































































































































# 197 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtoolbar.h"





























































































































































































# 198 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtoolbox.h"






















































































































































# 199 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qtoolbutton.h"









































































































































































































# 200 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qvalidator.h"

























































































































































































































# 201 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 1 "/home/eagle/qt-copy/include/QtGui/qworkspace.h"











































































































































# 202 "/home/eagle/qt-copy/include/QtGui/QtGui"

# 2 "/home/eagle/qt-copy/include/QtOpenGL/QtOpenGL"

# 1 "/home/eagle/qt-copy/include/QtOpenGL/qgl.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qwidget.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtOpenGL/qgl.h"

# 1 "/home/eagle/qt-copy/include/QtOpenGL/qglcolormap.h"














































# 1 "/home/eagle/qt-copy/include/QtGui/qcolor.h"





















































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtOpenGL/qglcolormap.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qvector.h"































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/eagle/qt-copy/include/QtOpenGL/qglcolormap.h"


# 50 "/home/eagle/qt-copy/include/QtOpenGL/qglcolormap.h"




typedef QtValidLicenseForOpenGLModule QtOpenGLModule;

class  QGLColormap
{
public:
QGLColormap();
QGLColormap(const QGLColormap &);
~QGLColormap();

QGLColormap &operator=(const QGLColormap &);

bool isEmpty() const;
int size() const;
void detach();

void setEntries(int count, const QRgb * colors, int base = 0);
void setEntry(int idx, QRgb color);
void setEntry(int idx, const QColor & color);
QRgb entryRgb(int idx) const;
QColor entryColor(int idx) const;
int find(QRgb color) const;
int findNearest(QRgb color) const;

protected:
Qt::HANDLE handle() { return d ? d->cmapHandle : 0; }
void setHandle(Qt::HANDLE ahandle) { d->cmapHandle = ahandle; }

private:
struct QGLColormapData {
QBasicAtomicInt ref;
QVector<QRgb> *cells;
Qt::HANDLE cmapHandle;
};

QGLColormapData *d;
static struct QGLColormapData shared_null;
static void cleanup(QGLColormapData *x);
void detach_helper();

friend class QGLWidget;
friend class QGLWidgetPrivate;
};

inline void QGLColormap::detach()
{
if (d->ref != 1)
detach_helper();
}






# 48 "/home/eagle/qt-copy/include/QtOpenGL/qgl.h"

# 1 "/home/eagle/qt-copy/include/QtCore/qmap.h"






















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/eagle/qt-copy/include/QtOpenGL/qgl.h"


# 51 "/home/eagle/qt-copy/include/QtOpenGL/qgl.h"




























# 79 "/home/eagle/qt-copy/include/QtOpenGL/qgl.h"


typedef QtValidLicenseForOpenGLModule QtOpenGLModule;






































# 120 "/home/eagle/qt-copy/include/QtOpenGL/qgl.h"
class QPixmap;



# 124 "/home/eagle/qt-copy/include/QtOpenGL/qgl.h"
class QGLWidgetPrivate;
class QGLContextPrivate;


namespace QGL
{
enum FormatOption {
DoubleBuffer = 0x0001,
DepthBuffer = 0x0002,
Rgba = 0x0004,
AlphaChannel = 0x0008,
AccumBuffer = 0x0010,
StencilBuffer = 0x0020,
StereoBuffers = 0x0040,
DirectRendering = 0x0080,
HasOverlay = 0x0100,
SampleBuffers = 0x0200,
SingleBuffer = DoubleBuffer << 16,
NoDepthBuffer = DepthBuffer << 16,
ColorIndex = Rgba << 16,
NoAlphaChannel = AlphaChannel << 16,
NoAccumBuffer = AccumBuffer << 16,
NoStencilBuffer = StencilBuffer << 16,
NoStereoBuffers = StereoBuffers << 16,
IndirectRendering = DirectRendering << 16,
NoOverlay = HasOverlay << 16,
NoSampleBuffers = SampleBuffers << 16
};
typedef QFlags<FormatOption> FormatOptions;
}

inline QFlags<QGL::FormatOptions::enum_type> operator|(QGL::FormatOptions::enum_type f1, QGL::FormatOptions::enum_type f2) { return QFlags<QGL::FormatOptions::enum_type>(f1) | f2; } inline QFlags<QGL::FormatOptions::enum_type> operator|(QGL::FormatOptions::enum_type f1, QFlags<QGL::FormatOptions::enum_type> f2) { return f2 | f1; }


class QGLFormatPrivate;

class  QGLFormat
{
public:
QGLFormat();
QGLFormat(QGL::FormatOptions options, int plane = 0);
QGLFormat(const QGLFormat &other);
QGLFormat &operator=(const QGLFormat &other);
~QGLFormat();

void setDepthBufferSize(int size);
int depthBufferSize() const;

void setAccumBufferSize(int size);
int accumBufferSize() const;

void setRedBufferSize(int size);
int redBufferSize() const;

void setGreenBufferSize(int size);
int greenBufferSize() const;

void setBlueBufferSize(int size);
int blueBufferSize() const;

void setAlphaBufferSize(int size);
int alphaBufferSize() const;

void setStencilBufferSize(int size);
int stencilBufferSize() const;

void setSampleBuffers(bool enable);
bool sampleBuffers() const;

void setSamples(int numSamples);
int samples() const;

void setSwapInterval(int interval);
int swapInterval() const;

bool doubleBuffer() const;
void setDoubleBuffer(bool enable);
bool depth() const;
void setDepth(bool enable);
bool rgba() const;
void setRgba(bool enable);
bool alpha() const;
void setAlpha(bool enable);
bool accum() const;
void setAccum(bool enable);
bool stencil() const;
void setStencil(bool enable);
bool stereo() const;
void setStereo(bool enable);
bool directRendering() const;
void setDirectRendering(bool enable);
bool hasOverlay() const;
void setOverlay(bool enable);

int plane() const;
void setPlane(int plane);

void setOption(QGL::FormatOptions opt);
bool testOption(QGL::FormatOptions opt) const;

static QGLFormat defaultFormat();
static void setDefaultFormat(const QGLFormat& f);

static QGLFormat defaultOverlayFormat();
static void setDefaultOverlayFormat(const QGLFormat& f);

static bool hasOpenGL();
static bool hasOpenGLOverlays();

enum OpenGLVersionFlag {
OpenGL_Version_None = 0x00000000,
OpenGL_Version_1_1 = 0x00000001,
OpenGL_Version_1_2 = 0x00000002,
OpenGL_Version_1_3 = 0x00000004,
OpenGL_Version_1_4 = 0x00000008,
OpenGL_Version_1_5 = 0x00000010,
OpenGL_Version_2_0 = 0x00000020,
OpenGL_Version_2_1 = 0x00000040,
OpenGL_ES_Common_Version_1_0 = 0x00000080,
OpenGL_ES_CommonLite_Version_1_0 = 0x00000100,
OpenGL_ES_Common_Version_1_1 = 0x00000200,
OpenGL_ES_CommonLite_Version_1_1 = 0x00000400,
OpenGL_ES_Version_2_0 = 0x00000800
};
typedef QFlags<OpenGLVersionFlag> OpenGLVersionFlags;

static OpenGLVersionFlags openGLVersionFlags();

private:
QGLFormatPrivate *d;

friend  bool operator==(const QGLFormat&, const QGLFormat&);
friend  bool operator!=(const QGLFormat&, const QGLFormat&);
};

inline QFlags<QGLFormat::OpenGLVersionFlags::enum_type> operator|(QGLFormat::OpenGLVersionFlags::enum_type f1, QGLFormat::OpenGLVersionFlags::enum_type f2) { return QFlags<QGLFormat::OpenGLVersionFlags::enum_type>(f1) | f2; } inline QFlags<QGLFormat::OpenGLVersionFlags::enum_type> operator|(QGLFormat::OpenGLVersionFlags::enum_type f1, QFlags<QGLFormat::OpenGLVersionFlags::enum_type> f2) { return f2 | f1; }

 bool operator==(const QGLFormat&, const QGLFormat&);
 bool operator!=(const QGLFormat&, const QGLFormat&);

class  QGLContext
{
inline QGLContextPrivate* d_func() { return reinterpret_cast<QGLContextPrivate *>(d_ptr); } inline const QGLContextPrivate* d_func() const { return reinterpret_cast<const QGLContextPrivate *>(d_ptr); } friend class QGLContextPrivate;
public:
QGLContext(const QGLFormat& format, QPaintDevice* device);
QGLContext(const QGLFormat& format);
virtual ~QGLContext();

virtual bool create(const QGLContext* shareContext = 0);
bool isValid() const;
bool isSharing() const;
void reset();


QGLFormat format() const;
QGLFormat requestedFormat() const;
void setFormat(const QGLFormat& format);


virtual void makeCurrent();
virtual void doneCurrent();

virtual void swapBuffers() const;

GLuint bindTexture(const QImage &image, GLenum target = 0x0DE1,
GLint format = 0x1908);
GLuint bindTexture(const QPixmap &pixmap, GLenum target = 0x0DE1,
GLint format = 0x1908);
GLuint bindTexture(const QString &fileName);

void deleteTexture(GLuint tx_id);

void drawTexture(const QRectF &target, GLuint textureId, GLenum textureTarget = 0x0DE1);
void drawTexture(const QPointF &point, GLuint textureId, GLenum textureTarget = 0x0DE1);













# 311 "/home/eagle/qt-copy/include/QtOpenGL/qgl.h"
static void setTextureCacheLimit(int size);
static int textureCacheLimit();

void *getProcAddress(const QString &proc) const;
QPaintDevice* device() const;
QColor overlayTransparentColor() const;

static const QGLContext* currentContext();

protected:
virtual bool chooseContext(const QGLContext* shareContext = 0);












# 334 "/home/eagle/qt-copy/include/QtOpenGL/qgl.h"
bool deviceIsPixmap() const;
bool windowCreated() const;
void setWindowCreated(bool on);
bool initialized() const;
void setInitialized(bool on);
void generateFontDisplayLists(const QFont & fnt, int listBase); 

uint colorIndex(const QColor& c) const;
void setValid(bool valid);
void setDevice(QPaintDevice *pDev);

protected:
static QGLContext* currentCtx;

private:
QGLContextPrivate* d_ptr;

friend class QGLPixelBuffer;
friend class QGLPixelBufferPrivate;
friend class QGLWidget;
friend class QGLDrawable;
friend class QGLWidgetPrivate;
friend class QGLGlyphCache;
friend class QOpenGLPaintEngine;
friend class QOpenGLPaintEnginePrivate;











# 370 "/home/eagle/qt-copy/include/QtOpenGL/qgl.h"
private:
QGLContext(const QGLContext &); QGLContext &operator=(const QGLContext &);
};


class  QGLWidget : public QWidget
{
Q_OBJECT
inline QGLWidgetPrivate* d_func() { return reinterpret_cast<QGLWidgetPrivate *>(d_ptr); } inline const QGLWidgetPrivate* d_func() const { return reinterpret_cast<const QGLWidgetPrivate *>(d_ptr); } friend class QGLWidgetPrivate;
public:
explicit QGLWidget(QWidget* parent=0,
const QGLWidget* shareWidget = 0, Qt::WindowFlags f=0);
explicit QGLWidget(QGLContext *context, QWidget* parent=0,
const QGLWidget* shareWidget = 0, Qt::WindowFlags f=0);
explicit QGLWidget(const QGLFormat& format, QWidget* parent=0,
const QGLWidget* shareWidget = 0, Qt::WindowFlags f=0);








# 394 "/home/eagle/qt-copy/include/QtOpenGL/qgl.h"
~QGLWidget();

void qglColor(const QColor& c) const;
void qglClearColor(const QColor& c) const;

bool isValid() const;
bool isSharing() const;


void makeCurrent();
void doneCurrent();

bool doubleBuffer() const;
void swapBuffers();


QGLFormat format() const;
void setFormat(const QGLFormat& format);

const QGLContext* context() const;
void setContext(QGLContext* context, const QGLContext* shareContext = 0,
bool deleteOldContext = true);

QPixmap renderPixmap(int w = 0, int h = 0, bool useContext = false);
QImage grabFrameBuffer(bool withAlpha = false);

void makeOverlayCurrent();
const QGLContext* overlayContext() const;

static QImage convertToGLFormat(const QImage& img);

void setMouseTracking(bool enable);

const QGLColormap & colormap() const;
void setColormap(const QGLColormap & map);

void renderText(int x, int y, const QString & str,
const QFont & fnt = QFont(), int listBase = 2000);
void renderText(double x, double y, double z, const QString & str,
const QFont & fnt = QFont(), int listBase = 2000);
QPaintEngine *paintEngine() const;

GLuint bindTexture(const QImage &image, GLenum target = 0x0DE1,
GLint format = 0x1908);
GLuint bindTexture(const QPixmap &pixmap, GLenum target = 0x0DE1,
GLint format = 0x1908);
GLuint bindTexture(const QString &fileName);

void deleteTexture(GLuint tx_id);

void drawTexture(const QRectF &target, GLuint textureId, GLenum textureTarget = 0x0DE1);
void drawTexture(const QPointF &point, GLuint textureId, GLenum textureTarget = 0x0DE1);













# 459 "/home/eagle/qt-copy/include/QtOpenGL/qgl.h"
public slots:
virtual void updateGL();
virtual void updateOverlayGL();

protected:
bool event(QEvent *);
virtual void initializeGL();
virtual void resizeGL(int w, int h);
virtual void paintGL();

virtual void initializeOverlayGL();
virtual void resizeOverlayGL(int w, int h);
virtual void paintOverlayGL();

void setAutoBufferSwap(bool on);
bool autoBufferSwap() const;

void paintEvent(QPaintEvent*);
void resizeEvent(QResizeEvent*);

virtual void glInit();
virtual void glDraw();
int fontDisplayListBase(const QFont & fnt, int listBase = 2000); 

private:
QGLWidget(const QGLWidget &); QGLWidget &operator=(const QGLWidget &);




# 489 "/home/eagle/qt-copy/include/QtOpenGL/qgl.h"
friend class QGLDrawable;
friend class QGLPixelBuffer;
friend class QGLPixelBufferPrivate;
friend class QGLContext;
friend class QGLOverlayWidget;
friend class QOpenGLPaintEngine;
};






inline bool QGLFormat::doubleBuffer() const
{
return testOption(QGL::DoubleBuffer);
}

inline bool QGLFormat::depth() const
{
return testOption(QGL::DepthBuffer);
}

inline bool QGLFormat::rgba() const
{
return testOption(QGL::Rgba);
}

inline bool QGLFormat::alpha() const
{
return testOption(QGL::AlphaChannel);
}

inline bool QGLFormat::accum() const
{
return testOption(QGL::AccumBuffer);
}

inline bool QGLFormat::stencil() const
{
return testOption(QGL::StencilBuffer);
}

inline bool QGLFormat::stereo() const
{
return testOption(QGL::StereoBuffers);
}

inline bool QGLFormat::directRendering() const
{
return testOption(QGL::DirectRendering);
}

inline bool QGLFormat::hasOverlay() const
{
return testOption(QGL::HasOverlay);
}

inline bool QGLFormat::sampleBuffers() const
{
return testOption(QGL::SampleBuffers);
}






# 3 "/home/eagle/qt-copy/include/QtOpenGL/QtOpenGL"

# 1 "/home/eagle/qt-copy/include/QtOpenGL/qglcolormap.h"











































































































# 4 "/home/eagle/qt-copy/include/QtOpenGL/QtOpenGL"

# 1 "/home/eagle/qt-copy/include/QtOpenGL/qglframebufferobject.h"














































# 1 "/home/eagle/qt-copy/include/QtOpenGL/qgl.h"












































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtOpenGL/qglframebufferobject.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qpaintdevice.h"













































































































































































# 48 "/home/eagle/qt-copy/include/QtOpenGL/qglframebufferobject.h"


# 50 "/home/eagle/qt-copy/include/QtOpenGL/qglframebufferobject.h"




typedef QtValidLicenseForOpenGLModule QtOpenGLModule;

class QGLFramebufferObjectPrivate;

class  QGLFramebufferObject : public QPaintDevice
{
inline QGLFramebufferObjectPrivate* d_func() { return reinterpret_cast<QGLFramebufferObjectPrivate *>(d_ptr); } inline const QGLFramebufferObjectPrivate* d_func() const { return reinterpret_cast<const QGLFramebufferObjectPrivate *>(d_ptr); } friend class QGLFramebufferObjectPrivate;
public:
enum Attachment {
NoAttachment,
CombinedDepthStencil,
Depth
};

QGLFramebufferObject(const QSize &size, GLenum target = 0x0DE1);
QGLFramebufferObject(int width, int height, GLenum target = 0x0DE1);

# 71 "/home/eagle/qt-copy/include/QtOpenGL/qglframebufferobject.h"
QGLFramebufferObject(const QSize &size, Attachment attachment,
GLenum target = 0x0DE1, GLenum internal_format = 0x8058);
QGLFramebufferObject(int width, int height, Attachment attachment,
GLenum target = 0x0DE1, GLenum internal_format = 0x8058);

















# 92 "/home/eagle/qt-copy/include/QtOpenGL/qglframebufferobject.h"
virtual ~QGLFramebufferObject();

bool isValid() const;
bool bind();
bool release();
GLuint texture() const;
QSize size() const;
QImage toImage() const;
Attachment attachment() const;

QPaintEngine *paintEngine() const;
GLuint handle() const;

static bool hasOpenGLFramebufferObjects();

void drawTexture(const QRectF &target, GLuint textureId, GLenum textureTarget = 0x0DE1);
void drawTexture(const QPointF &point, GLuint textureId, GLenum textureTarget = 0x0DE1);





# 114 "/home/eagle/qt-copy/include/QtOpenGL/qglframebufferobject.h"
protected:
int metric(PaintDeviceMetric metric) const;
int devType() const { return QInternal::FramebufferObject; }

private:
QGLFramebufferObject(const QGLFramebufferObject &); QGLFramebufferObject &operator=(const QGLFramebufferObject &);
QGLFramebufferObjectPrivate *d_ptr;
friend class QGLDrawable;
};





# 5 "/home/eagle/qt-copy/include/QtOpenGL/QtOpenGL"

# 1 "/home/eagle/qt-copy/include/QtOpenGL/qglpixelbuffer.h"














































# 1 "/home/eagle/qt-copy/include/QtOpenGL/qgl.h"












































































































































































































































































































































































































































































































































































# 47 "/home/eagle/qt-copy/include/QtOpenGL/qglpixelbuffer.h"

# 1 "/home/eagle/qt-copy/include/QtGui/qpaintdevice.h"













































































































































































# 48 "/home/eagle/qt-copy/include/QtOpenGL/qglpixelbuffer.h"


# 50 "/home/eagle/qt-copy/include/QtOpenGL/qglpixelbuffer.h"




typedef QtValidLicenseForOpenGLModule QtOpenGLModule;

class QGLPixelBufferPrivate;

class  QGLPixelBuffer : public QPaintDevice
{
inline QGLPixelBufferPrivate* d_func() { return reinterpret_cast<QGLPixelBufferPrivate *>(d_ptr); } inline const QGLPixelBufferPrivate* d_func() const { return reinterpret_cast<const QGLPixelBufferPrivate *>(d_ptr); } friend class QGLPixelBufferPrivate;
public:
QGLPixelBuffer(const QSize &size, const QGLFormat &format = QGLFormat::defaultFormat(),
QGLWidget *shareWidget = 0);
QGLPixelBuffer(int width, int height, const QGLFormat &format = QGLFormat::defaultFormat(),
QGLWidget *shareWidget = 0);
virtual ~QGLPixelBuffer();

bool isValid() const;
bool makeCurrent();
bool doneCurrent();

GLuint generateDynamicTexture() const;
bool bindToDynamicTexture(GLuint texture);
void releaseFromDynamicTexture();
void updateDynamicTexture(GLuint texture_id) const;

GLuint bindTexture(const QImage &image, GLenum target = 0x0DE1);
GLuint bindTexture(const QPixmap &pixmap, GLenum target = 0x0DE1);
GLuint bindTexture(const QString &fileName);
void deleteTexture(GLuint texture_id);

void drawTexture(const QRectF &target, GLuint textureId, GLenum textureTarget = 0x0DE1);
void drawTexture(const QPointF &point, GLuint textureId, GLenum textureTarget = 0x0DE1);













# 97 "/home/eagle/qt-copy/include/QtOpenGL/qglpixelbuffer.h"
QSize size() const;
Qt::HANDLE handle() const;
QImage toImage() const;

QPaintEngine *paintEngine() const;
QGLFormat format() const;

static bool hasOpenGLPbuffers();

protected:
int metric(PaintDeviceMetric metric) const;
int devType() const { return QInternal::Pbuffer; }

private:
QGLPixelBuffer(const QGLPixelBuffer &); QGLPixelBuffer &operator=(const QGLPixelBuffer &);
QGLPixelBufferPrivate *d_ptr;
friend class QGLDrawable;
};






# 6 "/home/eagle/qt-copy/include/QtOpenGL/QtOpenGL"

# 1133 "qtscript_masterinclude.h"


