Shouter
=========================

About
-------------------------
This script was written as a vehicle for learning python, I'm open to
suggestions, comments and anything not overly abusive. With disclaimer out of
the way, forward with the details: this script will start a small server from
within amaroK and serve music streams on a specified port. The stream is taken
from what is currently being listened to in amaroK. This does not extend to
other streams. No streams are served while amaroK is in an idle state. This has
been tested with:
    XMMS (1.2.8)
    xine-based players (xine-lib 1.0)
    gstreamer (0.8.5)
    Windows Media Player 10
    Winamp 5

The following agents may have some trouble with a normal "live" stream, but
will work with a delayed stream (see 'Stream punctuality' in the configuration
section)
    ITunes 4.7 
    Windows Media Player 9 
    alsaplayer-0.99.76


Server log messages are appended to
~/.kde/share/apps/amarok/scripts-data/access.log Debugging output is put in
~/.kde/share/apps/amarok/scripts-data/shouter.debug

Configuration
-------------------------
Configuration is done via ~/.kde/share/apps/amarok/scripts-data/shouterrc or
the configuration window inside the amaroK scripts dialog. Most of the
parameters are self explanatory. Options that I think may be vague are noted
below:
    Mount point:
        The context path by which the server stream is accessed.
        Defining a mount point of '/foo' will serve streams on
        http://hostname:port/foo.
    Description:
        There is room inside of an ICY header to include several lines
        of descriptive information. I don't know of any user agents
        will do anything with these but they're included anyways
    Buffer size:
        Each request keeps a part of the file being served in memory.
        Increasing the buffer size results in more memory needed per
        request but more infrequent disk access. The number is
        specified in bytes
    Metadata update interval:
        Some user agents like amaroK and Winamp request that
        information about the music be embedded in the data stream
        being served. Deciding the byte interval at which this occurs
        is left to the server.
    Stream punctuality:
        When a user agent requests a new stream, the stream punctuality
        determines what percent of the current file position they start
        from. If there is a new stream request while amaroK is
        currently at the 10 minute mark of a 15 minute song and
        sporting a 80% punctuality, (all-other factors aside) the
        request will begin streaming from 8:00.
    Pre seek:
        This may useful for synchronizing a client with the amaroK
        playhead when the latency and buffering of a client is known.
        WMP 9 doesn't allow the user to set buffering below 1 -- setting
        the server pre-seek to 1 second can counter some of this.
    Update streams on track change:
        If checked, a track change in amarok will force all streams to
        update. This may be undesirable if whole songs and smooth
        playback are preferred.
    Allow file downloads:
        If checked, unmolested file downloads will be allowed. There is
        no injection of meta-data nor stripping of id3 tags. Access can
        be had from http://<hostname>:<port>/<download mount point>
    Chunk size:
        The first step of stream reencoding is the partitioning of the
        to-be-converted file into manageable chunk sizes which are then
        decoded to pcm data before being reencoded to their final
        format. Specifying a chunk size isn't needed if your
        machine has lots of disk space or your track lengths are shy of
        epic. Using a chunk-size of n, space requirements should be in
        the neighborhood of 10*n, possibly (a lot) more depending on
        the number of connected clients and their relative separation
        in the stream. All intermediate files are written to /tmp with
        the prefix 'shouter'

Requirements
-------------------------
python >= 2.3 PyQt
If reencoding:
    vorbis-tools
    lame



Gotchas
-------------------------
The port set in the configuration is more of a strong suggestion than a rule.
The stream server will bind to another port if the requested one is
unavailable.

Some user agents refuse to play nice with file downloading when the filename
has unicode characters or mildly exotic characters like commas and parentheses.
wget is a good example of this.

Winamp, xmms, and sometime amarok require that oggstreams end with '.ogg'.


Todo
-------------------------
Ogg support
Consistent naming conventions
Cleaner disconnection of sockets



License
-------------------------
GPL V2


Thanks
-------------------------
binary functions in binfuncs taken from eye3D <http://eyed3.nicfit.net>
shoutcast protocol documentation taken from ample <http://ample.sf.net>
Jakub Stachowski
#amarok on freenode.net for some pointers


Author
-------------------------
James Bellenger <jbellenger@pristine.gm>
April 5th 2005
