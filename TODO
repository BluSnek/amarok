TODO-list for amaroK
======================
<nick>  == reported by
-->nick == assigned to


SHORT-TERM (URGENT):

 <sebr>    Mediabrowser is larger than the smallest limit.  Its b/c of the disconnect button.  This
           show be changed back or just change the text of the connect button.

 <sebr>    The new cover icon isn't square.  This sucks, it throws the context browser a couple of
           pixels out of line.  We should keep these nitty details consistent :-).

 <sebr>    When starting a drag in the collection browser, we can block the gui if the user makes a
           selection which is sql intensive (eg, select all).  Instead of calculating the items
           in each of those nodes, we should add the sql to the drag and allow the playlist loader
           to do the work for us (which is threaded).

 <markey>  The analyzer now uses crazy amounts of CPU when amaroK is idle, even if the window
           is not visible.

 <sebr>    The unknown album should ALWAYS be shown last.  Year has a hiegher weighting than album
           name.  We should special case the Unknown album.

 <sebr>    Popup message flickers when showing.

 <markey>  TagDialog: I was trying to fetch a cover from the dialog. The download job stalled.
           I couldn't cancel it because the dialog is modal, so I could not click the statusbar :(
           So I had to kill amarok. We should try to make the dialog non-modal, if possible.
           <sebr> I remember this not being possible because tag dialog depends on playlist items.
           If the dialog is not modal, then removing the playlist item will crash amarok when the
           tag item is saved.
           <markey> Perhaps it could somehow check if the item still exists before writing
           to it? It could access Playlist::instance(), and ask the playlist if the item
           exists, I spose.
           <sebr> TagDialog has 2 constructors - one for a url, and the other a playlistitem. The
           latter is used so that we can do Next & Prev functions in the playlist, using methods
           item->above() and item->below().

 <markey>  When all 5 browser tabs are activated, the current tab button is drawn a few
           pixels below the normal position. This has the side effect that the separator line
           at the bottom of the bottom becomes invisible.
           You can see the problem easily when you hide the current browser by clicking twice
           the button twice. This problem AFAIK also affects 1.3-branch.

 <markey>  When you delete a downloaded podcast from Playlist Browser, the icon stays in
           "downloaded" state until you open the menu again.

 <markey>  Add DCOP functions for showing dialogs, similar to kdialog.

 <markey>  When scanning with no folders selected, hell breaks lose. DB errors, etc.
           Only way to repair it is delete the DB.

 <sebr>    More consistent playlistbrowser drag and drop actions; No dropping of default streams, set
           e->accept( false ) if dropping one type onto another.

 <sebr>    Use KIO queues for podcast download queues.  Should simplify the lot.  Problems atm included
           selecting multiple downloads individually, and automatic downloads occuring for more that one
           podcast item.

 <markey>  In EngineController::play(), add a sanity check when querying the track length
           from the engine. Apparently AAC can deliver ridiculous values with GST and Helix,
           like 1192479:38:49. If length is too extreme, default to the TagLib provided
           value.

 <eean>    Currently custom dynamic playlist selection is simply based on the titles. So its less then
           ideal. Via some method, each playlist should be assigned iteratively a number paired with its
           type.. Dynamic playlists and static playlists should probably have seperate numbering so
           that the "next" number can be determined by looking at one XML file.
           Remembering which PartyEntry was used on close should be remembered with the same method.

 <markey>  Use tabs for Collection Browser switching between tree and flat view. The buttons
           suck.

 <eean>    Smart playlists bypass checks on whether the media is playable or not.
           Or perhaps such media shouldn't be in the collection at all? This is the sort of
           thing we're going to have to worry about now that we have m4a and wma tag support.

 <markey>  Regression: Using Undo/Redo deactivates the current track animation.

 <markey>  We really need to fix the crashes with the OpenGL analyzers that many users get.

  <markey> Consider moving the GHNS provider list to a different server than amarok.kde.org,
           possibly download.kde.org or similar. (When our site is down, the GHNS feature fails
           to work entirely)

  <markey> amaroK fails to download any stream playlist from http://dir.xiph.org. Part of the problem is
           PlaylistLoader::isPlaylistFile(const KURL&), which only looks at the filename's extension. This
           fails for URLs like http://dir.xiph.org/listen.php?pid=669641&file=listen.m3u, because the filename
           is "listen.php". So it must look at the whole url instead.

  <markey> OSD doesn't show on top of other widgets with Fluxbox and other window managers.

  <mxcl>   On first-ever-run, if amaroK crashes building the sqlite collection, it is impossible to _ever_
           build a collection unless the user's amarokrc file is deleted! This MUST be fixed before 1.2!
           ::muesli:: We could just _always_ try to create the sql tables on startup. This would fail on
           ::muesli:: systems which already got the tables, but would fix the situation where tables are
           ::muesli:: missing, as in this situation. Just pump the debug of these calls to /dev/null.

  <mxcl>   Just before we load any engine plugin, write to a file, and it we don't succeed the next time
           amaroK starts show a big warning saying "Gah!" and load a different one.

  <mxcl>   Playlist with files that exist that gst can't play + repeat-playlist = infinite loop - presumably
           load() and play() return true so the controller doesn't stop the playback

  <mxcl>   If you inline set the title tag to "", prettyTitle gets inserted as the title tag.

  <markey> When the KDE color scheme is changed while amaroK is running, all toolbar buttons (those with text)
           lose their texts.

MID-TERM:
 <eean>    The FileBrowser doesn't check for recursive symlinks. This is a KDirOperator (or the
           classes it depends on) problem.

 <eean>    Basically need to re-add some of the functionality I removed in re-doing dynamic
 --><eean> custom playlist creation.
           1) the default dynamic playlists need to be more insistent, the same way the
              the default smart playlists are.
  <eean>   Implement leinir's mockup:
           www.leinir.dk/temp/gallery/?image=pictures/amarok-playlist-bar-dynamic-mode.png
          <leinir> The idea with the look of the top is, as you can probably see from the colours
            otherwise present, that it's the active window titlebar/colour/font, with the name of the
            playlist being un-bolded (if the window title is bold)...
          <leinir> eean: Some people will identify the active window by titlebar colour alone :)

  <mp8> Album covers as icons from filebrowser.

  <eean>   When the player window shades, it should lose its title bar and be replaced with something more
           compactish. This would probably have to be created manually.

  <sebr>   Make the player window scroll the text in the opposite direction if using right-2-left text
           (eg hebrew or arabic)

  <sebr>   Use Metabar's box retraction animation to the context browser. More iCandy. Any Javascript experts around?

  <mxcl>   Should be able to open collection browser by right clicking on stuff in contextB, so show the
           artist or album that is right clicked.

  <markey> AudioCD support for gst engine (cdparanoia ! *sink). -->markey

  <markey> We should cut down on unnecessary/redundant debug output/warnings (noise).

  <markey> Make ArtsEngine depend not only on kdemultimedia-devel, but also on kdemultimedia,
           since arts itself contains these crappy decoders and ppl come complain about bad sound.
           Update: Would be even better to detect the mpeglib arts-plugins directly, since some
           distros offer them as a separate package.

  <mxcl>   Perhaps a nice idea: when you drag playlistItems to a branch in the collection browser
           it prompts to change the track's tags, so drag a track to the "moolaaa" album and that
           track get's it's album tag changed to "moolaaa" and is inserted into the branch, so the user
           know's what has happened.

  <mxcl>   User asked for a CTRL-J itty-bitty dialog that allows you to jump to a specific part
           of a track. I'll see if I can do it with tiny amount of code -->mxcl

  <muesli> Don't rely on KDE timeouts to see whether a file is accessible or not,
           since this really sucks for disconnected network shares. XMMS handles
           this way better and it really is a problem in userland. maybe a thread
           helps, which simply tries to fopen() the file. if this task hasn't been
           finished in (let's say) 3 seconds, jump to the next song. XMMS even
           remembers such files and their folders, so that it's not going to open
           another file from that folder for the next few minutes. what about hdd
           sleep-timeouts? opinions?

  <mxcl>   Determine some behavior for the clear/shuffle/etc. buttons when a search is in action
           clear   -> only clear the stuff that was searched for?
           shuffle -> stop the search and do normal shuffle?
           ADDitionally what to do when user rearranges a set of items that are the search result?
  <larson> No big deal to me as long as the behaviour is consistent. I.e. if shuffle shuffles
           the search, then clear should clear the search only, and visa versa.

  <larson> Make playlist toolbar buttons toggle like the playerwidget buttons.

           Toolbar button in FileBrowser for switching recursive directory reading.

  <mxcl>   Can't resize newly displayed columns if they are hidden at beginning of session -->mxcl

  <muesli> Add an option "clean up playlist on startup".
  <mxcl>   Do you mean remove duplicates or dead entries etc. ? Cool.

  <mxcl>   Option: don't crossfade for sequential tracks on same album. Comments? -->mxcl
           Of course, there would still be the up to 150ms gap, but we can fix that some other time..
  <markey> Please clarify: is this the same as BR #75388 ?
  <mxcl>   No, this is just to make crossfading not ruin album transitions

           Add dirs to combo history when user adds a track from that dir to the playlist.

           "Show playlist" to the right click menu, redundant but necessary.

           More KTips, better KTips, somehow use the "Did you know" tip dialog (eg kmail, gideon, etc.) -->mxcl

           Option to automatically adjust column widths.

           Option to implicitly sort playlist by { track, album } (on drop only) -->mxcl

  <berkus> Playmode indication button in main widget (repeat track/pl/shuffle), clickable.


LONG-TERM:

  <sebr>   Support multiple collections.  This could be really powerful, and could be handled
           with the collection browser.  We could support non-local collections, audio cd/dvds,
           NFS/Samba etc.  This would also allow us to retrieve tracks from other networked pcs.
           Auto-polling of added collections for a 'hot-sync' style detection of collections.

  <markey> Use more accurate interpolation for analyzers (cubic or spline)

           Tabbed playlists.
           Pro: it's convenient to have several playlists
           Contra: the playlist is getting cluttered enough as it is!
           <illissius> I already added a comment wrt this to the b.k.o bug, but here's the idea:
                       switch between playlists with the playlist browser -- that's what it's there for.
                       This avoids the clutter. The way it'd work is the currently playing playlist would
                       have the same fancy fading thing the current track has. The context menu for playlists
                       would have two seperate items, one for showing and one for playing. When just showing,
                       the previous playlist would continue playing while you view/edit the other one.
                       (If you doubleclick a song in the new playlist, it would naturally start playing that
                       one instead). What to do when the user doubleclicks a playlist -- show, play, or both
                       -- is TBD.

           Make windows magnetic / sticking together (difficult).

  <mxcl>   Implement beat detection (thread?), interface should glow/move to
           the beat, visualisations have access to beat/bpm info.

           Audio system info widget, showing all available codecs and similar info.

           Resizable playerwidget, like in Winamp3.

<jefferai> Support for generic media devices.  Started implementation using dcop signals, note these
           are *not* the same as regular signals.  Have to get that to work; once it does should
           be able to detect changes from HAL, i.e. when devices are added, removed, mounted, etc.
           Then can support a filebrowser, transfer, etc.


IDEAS:

           Bookmarks inside of tracks (good for very long tracks), and nifty bookmark browser

           Using filelight (as a kpart maybe) for a graphical representation of the playlist. so
           you could see at first glance how the altogether playing time is divided into different
           albums, tunes and so on.


DO-NOT-IMPLEMENT (stuff that was rejected):

  <markey> Allow removing of playlist items by dragging back into browser.
  <larson> I think this is really weird. When I drag something I expect that someting to be
           ADDed or opened in the target. Not removed from the sender.
           (RFC: is this still appropriate or would it be misleading?)
  <muesli> imho, it's misleading and not hid-compatible. i would rather
           expect that file to be copied to the browser's current directory.

          "Hide playlist when main widget is not active" option (?? comments please: )
  <berkus> Noo, we have it hiding into tray, thats enough (imagine how much flashing will be
           if i drag mouse around with "focus follows mouse" on - this is the one i use all the time)
  <mxcl>   Hence it's an option, you'd not use it with focus follows mouse. But it was just an idea
           anyway.. dunno if I like the sound of it anymore either.


BACKTRACES/DEBUG/VALGRIND:

<markey> This is rather nasty. I think we should change the SubmitItem handling in scrobbler.cpp
         from heap-allocated to stack-allocated to fix it:
==16118== 5628 (540 direct, 5088 indirect) bytes in 27 blocks are definitely lost in loss record 291 of 383
==16118==    at 0x1B904471: operator new(unsigned) (vg_replace_malloc.c:132)
==16118==    by 0x81815C6: Scrobbler::engineNewMetaData(MetaBundle const&, bool) (scrobbler.cpp:238)
==16118==    by 0x80FABDF: EngineSubject::newMetaDataNotify(MetaBundle const&, bool) (engineobserver.cpp:81)
==16118==    by 0x80F7F30: EngineController::play(MetaBundle const&) (enginecontroller.cpp:352)
==16118==    by 0x8130A02: Playlist::activate(QListViewItem*) (playlist.cpp:1126)
==16118==    by 0x812FF1C: Playlist::playNextTrack(bool) (playlist.cpp:856)
==16118==    by 0x813C55F: Playlist::qt_invoke(int, QUObject*) (playlist.moc:313)
==16118==    by 0x1CB4AD91: QObject::activate_signal(QConnectionList*, QUObject*) (in /usr/qt/3/lib/libqt-mt.so.3.3.4)
==16118==    by 0x1CB4B859: QObject::activate_signal_bool(int, bool) (in /usr/qt/3/lib/libqt-mt.so.3.3.4)
==16118==    by 0x80F8E08: EngineController::orderNext(bool) (enginecontroller.moc:212)
==16118==    by 0x80F790A: EngineController::next(bool) (enginecontroller.cpp:288)
==16118==    by 0x80F8B8B: EngineController::slotTrackEnded() (enginecontroller.cpp:597)


==16118== 3839 (2579 direct, 1260 indirect) bytes in 130 blocks are definitely lost in loss record 272 of 383
==16118==    at 0x1B9042F5: malloc (vg_replace_malloc.c:130)
==16118==    by 0x232BB946: g_malloc (in /usr/lib/libglib-2.0.so.0.600.4)
==16118==    by 0x232CC0C8: g_strdup (in /usr/lib/libglib-2.0.so.0.600.4)
==16118==    by 0x23082ADF: gst_tag_list_get_string (in /usr/lib/libgstreamer-0.8.so.1.4.0)
==16118==    by 0x2301189C: GstEngine::found_tag_cb(_GstElement*, _GstElement*, _GstStructure*, void*) (gstengine.cpp:140)
==16118==    by 0x23091D09: gst_marshal_VOID__OBJECT_BOXED (in /usr/lib/libgstreamer-0.8.so.1.4.0)
==16118==    by 0x2315B0A8: g_closure_invoke (in /usr/lib/libgobject-2.0.so.0.600.4)
==16118==    by 0x2316FA42: (within /usr/lib/libgobject-2.0.so.0.600.4)
==16118==    by 0x23170AEB: g_signal_emit_valist (in /usr/lib/libgobject-2.0.so.0.600.4)
==16118==    by 0x23170DC5: g_signal_emit (in /usr/lib/libgobject-2.0.so.0.600.4)
==16118==    by 0x2305A431: (within /usr/lib/libgstreamer-0.8.so.1.4.0)
==16118==    by 0x23091D09: gst_marshal_VOID__OBJECT_BOXED (in /usr/lib/libgstreamer-0.8.so.1.4.0)


==16118== 2876 (1096 direct, 1780 indirect) bytes in 14 blocks are definitely lost in loss record 274 of 383
==16118==    at 0x1B904CA0: calloc (vg_replace_malloc.c:175)
==16118==    by 0x232BB9BE: g_malloc0 (in /usr/lib/libglib-2.0.so.0.600.4)
==16118==    by 0x2309A1A3: (within /usr/lib/libgstreamer-0.8.so.1.4.0)
==16118==    by 0x2308E94D: gst_registry_load (in /usr/lib/libgstreamer-0.8.so.1.4.0)
==16118==    by 0x2308F7C8: (within /usr/lib/libgstreamer-0.8.so.1.4.0)
==16118==    by 0x232B32FE: g_list_foreach (in /usr/lib/libglib-2.0.so.0.600.4)
==16118==    by 0x2308F801: gst_registry_pool_load_all (in /usr/lib/libgstreamer-0.8.so.1.4.0)
==16118==    by 0x23044E74: (within /usr/lib/libgstreamer-0.8.so.1.4.0)
==16118==    by 0x230453BD: gst_init_check_with_popt_table (in /usr/lib/libgstreamer-0.8.so.1.4.0)
==16118==    by 0x2304553B: gst_init_check (in /usr/lib/libgstreamer-0.8.so.1.4.0)
==16118==    by 0x23012CCC: GstEngine::init() (gstengine.cpp:271)
==16118==    by 0x80F71DC: EngineController::loadEngine(QString const&) (enginecontroller.cpp:172)


